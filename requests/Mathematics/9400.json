{
  "pages": [
    {
      "title": "Sod shock tube",
      "url": "https://en.wikipedia.org/wiki/Sod_shock_tube",
      "text": "[[Image:SodShockTubeTest Regions.png|thumb|300px|right|Density Plot after time evolution of t=0.2[-]]]\nThe '''Sod shock tube''' problem, named after Gary A. Sod, is a common test for the accuracy of [[Computational fluid dynamics|computational fluid codes]], like [[Riemann solver]]s,  and was heavily investigated by Sod in 1978.\n\nThe test consists of a one-dimensional [[Riemann problem]] with the following parameters, for left and right states of an [[ideal gas]].\n\n<center>\n<math>\n\\left( \\begin{array}{c}\\rho_L\\\\P_L\\\\v_L\\end{array}\\right)\n=\n\\left( \\begin{array}{c}1.0\\\\1.0\\\\0.0\\end{array} \\right)\n</math>\n,\n<math>\n\\left( \\begin{array}{c}\\rho_R\\\\P_R\\\\v_R\\end{array}\\right)\n=\n\\left( \\begin{array}{c}0.125\\\\0.1\\\\0.0\\end{array}\\right)\n</math>\n</center>\nwhere\n::*<math>\\rho</math> is the density\n::*P  is the pressure\n::*v is the velocity\n\nThe time evolution of this problem can be described by solving the [[Euler equations]],\nwhich leads to three characteristics, describing the propagation speed of the\nvarious regions of the system. Namely the rarefaction wave, the contact discontinuity and\nthe shock discontinuity.\nIf this is solved numerically, one can test against the analytical solution,\nand get information how well a code captures and resolves shocks and contact discontinuities\nand reproduce the correct density profile of the rarefaction wave.\n\n==Analytic derivation==\nThe different states of the solution are separated by the time evolution of the\nthree [[Method of characteristics|characteristics]] of the system, which is due to the finite speed\nof information propagation. Two of them are equal to the speed\nof sound of the both states\n::<math>cs_1 = \\sqrt{\\gamma \\frac{P_L}{\\rho_L}}</math>\n::<math>cs_5 = \\sqrt{\\gamma \\frac{P_R}{\\rho_R}}</math>\nThe first one is the position of the beginning of the rarefaction wave while\nthe other is the velocity of the propagation of the shock.\n\nDefining:\n::<math>\\Gamma = \\frac{\\gamma - 1}{\\gamma + 1}</math>, <math>\\beta = \\frac{\\gamma - 1}{2 \\gamma}</math>\nThe states after the shock are connected by the [[Rankine-Hugoniot equation|Rankine Hugoniot]]\nshock jump conditions.\n::<math>\\rho_4 = \\rho_5 \\frac{P_4 + \\Gamma P_5}{P_5 + \\Gamma P_4}</math>\nBut to calculate the density in Region 4 we need to know the pressure in that region.\nThis is related by the contact discontinuity with the pressure in region 3 by\n::<math>P_4 = P_3</math>\nUnfortunately the pressure in region 3 can only be calculated iteratively, the right\nsolution is found when <math>u_2</math> equals <math>u_4</math> \n::<math>u_4 = \\left(P_3' - P_5\\right)\\sqrt{\\frac{1-\\Gamma}{\\rho_R(P_3'+\\Gamma P_5)}}</math>\n::<math>u_2 =\\left(P_1^\\beta-P_3'^\\beta\\right) \\sqrt{\\frac{(1-\\Gamma^2)P_1^{1/\\gamma}}{\\Gamma^2 \\rho_L}}</math>\n::<math>u_2 - u_4 = 0</math>\nThis function can be evaluated to an arbitrary precision thus giving the pressure in the\nregion 3\n::<math>P_3 = \\operatorname{calculate}(P_3,s,s,,)</math>\nfinally we can calculate \n::<math>u_3 = u_5 + \\frac{(P_3 - P_5)}{\\sqrt{\\frac{\\rho_5}{2}((\\gamma+1)P_3 +(\\gamma-1)P_5)}}</math>\n::<math>u_4 = u_3</math>\nand <math>\\rho_3</math> follows from the adiabatic gas law\n::<math>\\rho_3 = \\rho_1 \\left(\\frac{P_3}{P_1}\\right)^{1/\\gamma}</math>\n\n==References==\n*{{cite journal | title=A Survey of Several Finite Difference Methods for Systems of Nonlinear Hyperbolic Conservation  Laws | first=G. A. | last=Sod | year=1978 | journal=[[Journal of Computational Physics|J. Comput. Phys.]] | volume=27| pages=1–31 | url=http://www.osti.gov/energycitations/product.biblio.jsp?osti_id=6812922 | doi=10.1016/0021-9991(78)90023-2 |bibcode = 1978JCoPh..27....1S }}\n*{{cite book | first=Eleuterio F.| last=Toro| year=1999 | title=Riemann Solvers and Numerical Methods for Fluid Dynamics| publisher=Springer Verlag|location=Berlin | isbn=3-540-65966-8}}\n\n==See also==\n*[[Shock tube]]\n*[[Computational fluid dynamics]]\n\n[[Category:Fluid dynamics]]\n[[Category:Computational fluid dynamics]]"
    },
    {
      "title": "Solution algorithms for pressure-velocity coupling in steady flows",
      "url": "https://en.wikipedia.org/wiki/Solution_algorithms_for_pressure-velocity_coupling_in_steady_flows",
      "text": "{{orphan|date=November 2013}}\n\n'''Solution algorithms for pressure-velocity coupling in [[steady flow]]s''' are the standard prepossessing methods used to solve steady problems in [[computational fluid dynamics]].\n\nThe [[advection]] of the scalar Φ used to define flow depends on the magnitude and direction of the local velocity field. In general, however the velocity field is not known. These algorithms are hence employed to obtain the solution.\n\nThe standard [[Euler equations (fluid dynamics)]] can be given by:\n\n''' The [[continuity equation]] '''\n\n: <math>\\frac{\\partial  \\rho u }{\\partial x} + \\frac{\\partial  \\rho v }{\\partial y} = 0 </math>\n\n'''The [[momentum equations]]'''\n\nObtained by substituting Φ with standard directional vectors of the velocity field ''u'', ''v'', and ''w''.\n\n: <math>\\frac{\\partial  \\rho u u }{\\partial x} + \\frac{\\partial  \\rho vu }{\\partial y} = \\frac{\\partial \\frac{ \\nu \\partial u} { \\partial x}}{\\partial x} + \\frac{\\partial \\frac{ \\nu \\partial u} { \\partial y}}{\\partial y} - \\frac{\\partial p}{\\partial x} + S_u  </math>\n\n: <math>\\frac{\\partial  \\rho u v }{\\partial x} + \\frac{\\partial  \\rho vv }{\\partial y} = \\frac{\\partial \\frac{ \\nu \\partial v} { \\partial x}}{\\partial x} + \\frac{\\partial \\frac{ \\nu \\partial v} { \\partial y}}{\\partial y} - \\frac{\\partial p}{\\partial y} + S_v  </math>\n\nwhere <math>\\rho</math> is the density, ''u'', ''v'', are the ''x''- and ''y''-directional components of velocity, ''p'' is the pressure field and ''S''<sub>''u'',''v''</sub> are the source terms.\n\nThese equations are however hard to solve due to quasilinearity in the momentum equations and interdependence of the pressure term in all three equations. Also, for a general purpose flow equation, the pressure field is also unknown and is to be solved for as well.\n\nIf the flow field is compressible, the above equations act as the standard temperature and density equations and pressure can be found as it is a function of them both.\nIf, however the flow is in-compressible, the pressure is independent of density. Hence, coupling is necessary to induce a constraint on the solution. The resulting fields will then satisfy the continuity equations. \nBoth these issues are solved via the application of the SIMPLE Algorithm and its derivatives.\n\nFor general purpose and definition of these algorithms, a Staggered [[CFD Grid]] shall be used. It ensures the presence of very real non-zero pressure gradient across the nodes in any condition, even in the case of a checkered grid. The staggering also ensures realistic behaviors of the descretized momentum equations for spatially oscillating  pressures.\nAlso, the direction of the velocity vectors are exact.\n\n== The staggered grid ==\n\n[[File:Standard Staggered Grid in Computational Fluid Dynamics.jpg|Standard staggered grid in computational fluid dynamics]]\n\nThe above shows a standard grid used to solve staggered applications. The east, west, north and south notations are used. They direct the vector fields. The u component of velocity is stored in the e and w directions and the v component in the n and s directions. If 3-D fields are to applied, t and b can be used. These are basically vector control volumes different from the scalar pressure control volumes and different from each other.\n\nThe pressure gradient equations take a different form:\n\n: <math> \\frac {\\partial p}{\\partial x} = \\frac{ P_p - P_w} { \\partial x_u} </math> in the ''x''-direction\n\n: <math> \\frac {\\partial p}{\\partial y} = \\frac{ P_p - P_s} { \\partial y_v} </math> in the ''y''-direction\n\nFurthermore, the momentum equations now take the form:\n\n: <math>a_i,_J u_i,_J = \\sum a_nb u_nb - \\Delta V_u \\frac {P_I,_J - P_{I-1},_J}{\\partial x_u} + S \\Delta V_u </math>\n\nThe summation covers all nodes and volumes in the immediate vicinity of the selected node. Their values are shown in the next figure.\n\n[[File:Refined segregated Grid.jpg|Refined segregated Grid]]\n\nFollowing this, The algorithms can be applied to get the solutions for the basic staggered grid equations.\n\n== SIMPLE algorithm ==\n\nThe acronym stands for Semi- Implicit method for pressure-linked equations. It is essentially a guess and correct procedure for the calculation of the staggered grid pressure field. These have been illustrated using a two dimensional steady flow.\n[[File:Flow chart for SIMPLE Algorithm.jpg|thumb|Flow chart for SIMPLE Algorithm]]\n'''Step 1 ''':- A pressure field p* is guessed.\n\n'''Step 2 ''':- The Discretized momentum equations are solved using the value of p* to get velocity components u* and v*.\n\n'''Step 3''':- Define the correction pressure as p' such that ''' p = p* + p' '''\n\n'''Step 4''':- Similarly define the correction values for the velocities as u' and v' such that '''u = u* + u' ''' and '''v = v*+ v' '''\n\n'''Step 5''':- Substitute the correct pressure field p in the momentum equations to obtain the correct velocity field (''u'',''v'').\n\n'''Step 6 ''':- Subtract equations obtained in step 5 from those in step 1. We should get the equations in term of the correction terms (''u&prime;'' and ''v&prime;'')\n\n'''Here we apply an assumption that <math> \\sum a_{nb} u'_{nb} </math> and <math> \\sum a_{nb} v'_{nb} </math> are 0 '''. This is the major assumption in the SIMPLE Algorithm.\nThis should then allow us to obtain the correction terms u' and v' of the Momentum Equations.\n\nWe can similarly find the correction terms for all nodes.\n\n'''Step 7 ''':- Solve the continuity equation for the entire control volume. i.e. n,s,e,w nodes surrounding each node of the staggered grid, using the density terms.\n\n'''Step 8 ''':- Substitute the corrected velocity equations in the continuity equations and separate the term containing the correction pressure p'.\n\nThis represents the equation for pressure correction p'.\n\n'''Step 9 ''':- Solve the thus obtained equation to get the correction term and get the correct pressure. Use the new correct pressure to reiterate the entire process till a convergence is obtained.\n\n''' Sometimes, the solution might not converge due to a large difference in the guessed field and correct pressure field. The new p= p* + αp'. α is kept between 0 and 1 to ensure convergence.'''\n\nThe choice of α decides the cost effectiveness of the solution.\n\n== SIMPLER algorithm ==\n\n[[File:Flow chart for the SIMPLER Algorithm.jpg|thumb|Flow chart for the SIMPLER Algorithm]]\nThe acronym for SIMPLE Revised, this algorithm is an improved version of the SIMPLE algorithm. Here the Discretised continuity equation is used to derive the correct intermediate pressure field instead of the correction pressure.\nRefer to flow chart.\n\n==SIMPLEC algorithm==\n\nThe SIMPLE Consistent Algorithm is almost same as the SIMPLE Algorithm, except that the manipulations are changed to ensure lesser omissions.\n\n==References==\n{{reflist}}\n\n* ''Introduction to Computational Fluid Dynamics'' by Versteeg\n* Patankar and Spalding, ''SIMPLE Algorithm'', 1972\n* Patankar, ''SIMPLER Algorithm'', 1980\n* Vandoormal and Raithby, ''SIMPLEC Algorithm'', 1984\n<!--- After listing your sources please cite them using inline citations and place them after the information they cite. Please see http://en.wikipedia.org/wiki/Wikipedia:REFB for instructions on how to add citations. --->\n\n[[Category:Computational fluid dynamics]]"
    },
    {
      "title": "Spatial twist continuum",
      "url": "https://en.wikipedia.org/wiki/Spatial_twist_continuum",
      "text": "{{Use dmy dates|date=November 2013}}\nThe '''spatial twist continuum''' is a dual representation of an all [[hexahedron|hexahedral]] [[mesh (mathematics)|mesh]] that defines the global [[Connectivity (graph theory)|connectivity]] [[constraint (mathematics)|constraint]].\n\nDiscovered by Dr. [[Peter Murdoch (mathematician)|Peter Murdoch]] on 16 September 1993, the spatial twist continuum is a method that can be used in automatic and semi-automatic mesh generation methods to create all hexahedral meshes for both [[computational fluid dynamics]] and [[finite element method]] applications.\n \nThe name is derived from the description of the surfaces that define the connectivity of the hexahedral elements. The surfaces are arranged in the three principal dimensions such that they form [[orthogonality|orthogonal]] intersections that conicide with the [[centroid]] of the hexahedral element. They are arranged predominately coplanar to each other in their respective dimensions yet they can twist into the other dimensional planes through transitions. The surfaces are unbroken throughout the entire volume of the mesh hence they are [[Continuum (theory)|continuum]]s.\n\nOne of the areas where the STC finds application is CFD computational fluid dynamics which is a field of Science and analysis that involves simulating the flow of fluids such as air over and through bodies defined by boundary surfaces. The procedure involves building a mesh and solving the same on a computer using a finite volume approach.\n\nAn analyst has many choices available for creating a mesh that can be used in a CFD or CAE simulation, one is to use a Tetrahedral, Polyhedral, Trimmed Cartesian or Mixed of Hybrid of Hexahedra called hex dominate, these are classified as non-structured meshes, which can all be created automatically, however the CFD and FEA results are both inaccurate and prone to solution divergence, (the simulation fails to solve). \nThe other option for the analyst is to use an all-hexahedral mesh that offers far greater solver stability and speed as well as accuracy and the ability to run much more powerful turbulence solvers like Large eddy simulation LES in transient mode as opposed to the non-structured meshes that can only run a steady state RANS model.\n\nThe difficulty with generating an all-hexahedral mesh on a complex geometry is that mesh needs to take into consideration the local geometric detail as well as the global connectivity constraint. This is the STC, and it is only present in an all-hexahedral mesh. This is the reason why it is relatively easy to automate a non-structured mesh, the automatic generator only needs to be concerned with the local cell size geometry.\n\nThe tradeoffs and relative benefits of using either mesh method to build and solve a CFD or CAE model are best explained by looking at the total work flow.\n\n1)\tCAD cleanup. This involves fixing the gaps and holes in the CAD data. Usually the forgotten task that can consume a lot of time and energy and not something any experienced analyst looks forward too.\n\n2)\tMesh generation: The two main choices are to use an automated non-structured mesh or build a full hexahedral mesh.\n\na)\tNon-Structured: If one chooses to build a non-structured mesh then it is not as easy as first perceived. The process involves automatically building the mesh then manually fixing the regions of very poor cell quality. This process can take a considerable amount of time, another hidden time cost.\n\nb)\tAll-Hexahedral: As of mid-2009 there are a few all-hexahedral mesh generating tools. Some of them are (in alphabetical order)\n\n* GridPro (1985) - a pure multiblock meshing tool ... with really good inter and intra block smoothing .For more details visit http://www.gridpro.com\n* Moceon (1995) - based on the STC ... just released .. and has generated good interest among the community. For more details http://www.moceon.com\n* IcemCFD  http://www.ansys.com/products/icemcfd.asp\n* Pointwise (primarily a multiblock meshing tool .. but can also produce tetrahedrons) http://www.pointwise.com\n* [[TrueGrid]] (multiblock meshing tool) [http://www.truegrid.com www.truegrid.com]\n\nHowever, there are ways of quickly building a hexahedral mesh such as using a 2D quad mesh and projecting into the z-direction. Another method is building a block structured mesh by using a CAD based program to create logically connected splines. After the blocks are built the cell factors are added to the blocks and the mesh created. One significant advantage of using a block based hexahedral mesh is the mesh can be smoothed very quickly. For large complex geometric models the process of building a hexahedral mesh can take days, weeks and even months depending on the skill level and tool sets available to the analyst.\n\n3)\tSet up the model and assign the boundary conditions:  This is a rather trivial step and it is usually taken care of by GUI assisted menus.\n\n4)\tRunning the Simulation:  This is where the nightmares for the non-structured mesh begin. Since it takes six tetrahedrals to represent one hexahedral the tet mesh size will be considerably larger and will require a lot more computing power and RAM to solve an equivalent hexahedral mesh. The tetrahedral mesh will also require more relaxation factors to solve the simulation by effectively dampening the amplitude of the gradients. This increases the number of sub-cycle steps and drives the courant number up. If you built a hexahedral mesh this is where the tortoise passes the hare.\n\n5)\tPost processing the results: The time required in this step is highly dependent on the size of the mesh (number of cells).\n\n6)\tMaking design changes: If you build a non-structured mesh this is where you go back to the beginning and start all over again. If you build a hexahedral mesh then you make the geometric change, re-smooth the mesh and restart the simulation.\n\n7)\tAccuracy: This is the major difference between a non-structured mesh and a hexahedral mesh, and the main reason why it is preferred.\n\nThe \"spatial twist continuum\" addresses the issue of complex mesh model creation by elevating the structure of the mesh to a higher level of abstraction that assists in the creation of the all-hexahedral mesh.\n\n==References==\n\n*Murdoch P.; Benzley S.1; Blacker T.; Mitchell S.A. \"The spatial twist continuum: A connectivity based method for representing all-hexahedral finite element meshes.\" ''Finite Elements in Analysis and Design'', Volume 28, Number 2, 15 December 1997, Elsevier, pp.&nbsp;137–149(13)\n*Murdoch, Peter and Steven E. Benzley. \"The Spatial Twist Continuum.\" ''Proceedings, 4th International Meshing Roundtable'', Sandia National Laboratories, pp.&nbsp;243–251, October 1995\n\n[[Category:1995 introductions]]\n[[Category:Computational fluid dynamics]]\n[[Category:Finite element method]]"
    },
    {
      "title": "SU2 code",
      "url": "https://en.wikipedia.org/wiki/SU2_code",
      "text": "{{Use dmy dates|date=July 2013}}\n{{Infobox Software\n| logo                   = Stanford University Unstructured Logo.png\n| name                   = SU2 code\n| caption                = SU2 logo\n| released               = {{Start date and age|2012|01}}\n| latest release version = 6.1.0 \"Falcon\"\n| latest release date    = {{Start date and age|2018|06|22|df=yes/no}}\n| programming language   = [[C++]], [[Python (programming language)|Python]]\n| operating system       = [[Unix]]/[[Linux]]/[[OS X]]/[[Windows]]\n| genre                  = [[Computational fluid dynamics]], [[Simulation software]]\n| license                = [[GNU Lesser General Public License]], version 2.1\n| website                = {{URL|https://su2code.github.io}}\n}}\n\n'''SU2''' is a suite of [[Open-source software|open-source]] software tools written in C++ for the numerical solution of [[partial differential equation]]s (PDE) and performing PDE constrained optimization. The primary applications are  [[computational fluid dynamics]] and aerodynamic [[shape optimization]],<ref>[http://su2.stanford.edu/documents/SU2_AIAA_ASM2013.pdf F. Palacios, M. R. Colonno, A. C. Aranake, A. Campos, S. R. Copeland, T. D. Economon, A. K. Lonkar, T. W. Lukaczyk, T. W. R. Taylor, and J. J. Alonso, \"Stanford University Unstructured (SU2): An open-source integrated computational environment for multi-physics simulation and design\", AIAA Paper 2013-0287, 51st AIAA Aerospace Sciences Meeting and Exhibit. January 7th - 10th, 2013. Grapevine, Texas, USA.]</ref> but has been extended to treat more general equations such as [[electrodynamics]] and chemically reacting flows. SU2 supports continuous and discrete adjoint for calculating the sensitivities/gradients of a scalar field.\n\nSU2 is being developed by individuals and organized teams around the world. The SU2 Lead Developers are: Dr. Francisco Palacios and Dr. Thomas D. Economon.\n\nThe most active groups developing SU2 are:\n* Prof. Juan J. Alonso's group at [[Stanford University]].\n* Prof. Piero Colonna's group at [[Delft University of Technology]].\n* Prof. Nicolas R. Gauger's group at [[Kaiserslautern University of Technology]].\n* Prof. Alberto Guardone's group at [[Polytechnic University of Milan]].\n* Prof. Rafael Palacios' group at [[Imperial College London]].\n\n==Capabilities==\nThe SU2 tools suite solution suite includes<ref>[http://adl.stanford.edu/docs/display/SUSQUARED/About SU2 about page]</ref>\n\n*High-fidelity analysis and adjoint-based design using unstructured mesh technology.\n*Compressible and incompressible [[Euler Equations (fluid dynamics)|Euler]], [[Navier-Stokes]], and  [[Reynolds-averaged Navier–Stokes equations|RANS]] solvers.\n*Additional PDE solvers for electrodynamics, linear elasticity, heat equation, wave equation and thermochemical non-equilibrium.\n*Convergence acceleration (multi-grid, preconditioning, etc.).\n*Sensitivity information via the continuous adjoint methodology<ref>[http://adl.stanford.edu/papers/AIAA_Journal_March2012.pdf A. Bueno-Orovio, C. Castro, F. Palacios, and E. Zuazua \"Continuous Adjoint Approach for the Spalart-Allmaras Model in Aerodynamic Optimization\", AIAA Journal Vol. 50, No. 3, March 2012.]</ref> approach.\n*Adaptive, goal-oriented mesh refinement and deformation.\n*Modularized  <ref>[http://adl.stanford.edu/docs/display/SUSQUARED/SU2+Tools SU2 tools list]</ref> [[C++]] object-oriented design.\n*Parallelization with [[Message Passing Interface|MPI]].\n*[[Python (programming language)|Python]] scripts for automation.\n\n==Release history==\n\n{|class=\"wikitable\"\n|-class=\"backgroundcolour5\"\n! Branch\n! Version\n! Releasedate<ref name=\"Github_repository_SU2\">{{cite web|title=SU2-Suit releases|url=https://github.com/su2code/SU2/releases|website=Github.com|accessdate=25 May 2016|language=english}}</ref>\n! Improvements\n|-\n|-\n| rowspan=\"2\" | 1.0\n| {{Version|o|1.0}}\n| {{dts|format=dmy|2013|06|28}}\n|-\n| {{Version|o|1.1}}\n| {{dts|format=dmy|2013|06|28}}\n|-\n|-\n| rowspan=\"10\" | 2.0\n| {{Version|o|2.0}}\n| {{dts|format=dmy|2013|06|28}}\n|-\n| {{Version|o|2.0.1}}\n| {{dts|format=dmy|2013|06|28}}\n|-\n|-\n| {{Version|o|2.0.2}}\n| {{dts|format=dmy|2013|06|28}}\n|-\n|-\n| {{Version|o|2.0.3}}\n| {{dts|format=dmy|2013|06|28}}\n|-\n|-\n| {{Version|o|2.0.4}}\n| {{dts|format=dmy|2013|06|28}}\n|-\n|-\n| {{Version|o|2.0.5}}\n| {{dts|format=dmy|2013|06|28}}\n|-\n|-\n| {{Version|o|2.0.6}}\n| {{dts|format=dmy|2013|08|12}}\n|-\n|-\n| {{Version|o|2.0.7}}\n| {{dts|format=dmy|2013|09|11}}\n|-\n|-\n| {{Version|o|2.0.8}}\n| {{dts|format=dmy|2013|09|30}}\n|-\n|-\n| {{Version|o|2.0.10}}\n| {{dts|format=dmy|2013|09|11}}\n|-\n| 3.0 \"eagle\"\n| {{Version|o|3.0.0}}\n| {{dts|format=dmy|2014|01|15}}\n| \n* Major release, along with SU2_EDU\n|-\n| 3.1 \"eagle\"\n| {{Version|o|3.1.0}}\n| {{dts|format=dmy|2014|08|14}}\n|-\n| rowspan=\"9\" | 3.2 \"eagle\"\n| {{Version|o|3.2.0}}\n| {{dts|format=dmy|2014|08|14}}\n|  \n* Renamed C++ modules for clarity:\n* *         SU2_DDC ---> SU2_PRT\n*    *         SU2_MDC ---> SU2_DEF\n*    *         SU2_MAC ---> SU2_MSH\n*    *         SU2_GDC ---> SU2_GEO\n*    *         SU2_GPC ---> SU2_DOT\n*     Stricter checking and improved error messages for robust parsing of configuration options.\n*     Unified set of SU2 test cases (meshes and config. files) are now available on GitHub (https://github.com/su2code/TestCases).\n*     Major updates to the MPI implementation that improve performance and align with the MPI 3.0 standard.\n*     Modifications that greatly enhance computational efficiency and memory scalability of mesh partitioning for parallel calculations.\n*     New constant lift mode. Specify a target lift coefficient rather than a fixed angle of attack.\n*     Upgrades to the CGNS mesh reader for further support of mixed-element meshes.\n*     General bug fixes and maintenance.\n|-\n| {{Version|o|3.2.1}}\n| {{dts|format=dmy|2014|09|08}}\n|  \n* Additional verification test cases for shape design using the compressible adjoint capability (in collaboration with Lockheed Martin).\n*     Preliminary structure for the simulation of real gases (in collaboration with TuDelft and Politecnico di Milano).\n*     New FFD design variables (in collaboration with Volkswagen).\n*     New preconditioners and smoothers for implicit time integration (in collaboration with Intel).\n*     Simplified configuration options (in collaboration with the large SU2 users community. Thanks!).\n*     General bug fixes and maintenance.\n|-\n| {{Version|o|3.2.2}}\n| {{dts|format=dmy|2014|09|28}}\n|  \n* SU2 version 3.2.2 includes general bug fixes and maintenance.\n* The Pointwise and SU2 joint workshop (Sept 29th-30th, 2014) is based on this release.\n|-\n| {{Version|o|3.2.3}}\n| {{dts|format=dmy|2014|10|22}}\n|  \n* Improved multigrid agglomeration algorithm.\n*     United States customary units (US).\n*     Improved I/O.\n*     New smoothers and preconditioners for the implicit formulation.\n*     Simplified configuration options.\n*     General bug fixes and maintenance.\n|-\n| {{Version|o|3.2.4}}\n| {{dts|format=dmy|2014|11|09}}\n|-\n| {{Version|o|3.2.5}}\n| {{dts|format=dmy|2014|12|04}}\n|-\n| {{Version|o|3.2.7}}\n| {{dts|format=dmy|2014|12|27}}\n|\n*     New MPI implementation (only one .su2 mesh file per rank).\n*     Improved multigrid (including Full MG).\n*     Code optimization using the analyze tool (Xcode).\n*     Simplified configuration options.\n*     General bug fixes and maintenance.\n|-\n| {{Version|o|3.2.8}}\n| {{dts|format=dmy|2015|02|03}}\n|-\n| {{Version|o|3.2.9}}\n| {{dts|format=dmy|2015|03|04}}\n|-\n\n| rowspan=\"3\" | 4.0 \"Cardinal\"\n| {{Version|o|4.0.0}}\n| {{dts|format=dmy|2015|06|23}}\n|\n'''New Features:'''\n* Non-ideal compressible fluid flows (NICFD): Van der Waals and Peng-Robinson equations of state.\n*     Fully parallel preprocessing with ParMETIS.\n*     SA-neg turbulence model.\n*     Adaptive CFL.\n*     Easily generate FFD boxes with new options.\n*     Force breakdown file and FieldView output.\n*     Scale, rotate, translate meshes in SU2_DEF.\n*     Iterative smoothers: Jacobi, LU-SGS, ILU(0).\n*     Updated non-dimensionalization options for ease of use.\n*     General bug fixes.\n'''Performance Improvements:'''\n* MPI and general performance improvements.\n*     Increased mesh deformation stability for all unstructured mesh elements.\n*     CGNS parallel partitioning improvements.\n*     Automated multigrid parameter selection.\n*     Increased robustness for upwind methods.\n*     Low-storage output mode.\n'''Additional Updates:'''\n* Updated documentation on the GitHub wiki, including user tutorials and new developer information.\n*     New regression test system integrated with Travis CI.\n|-\n| {{Version|o|4.0.1}}\n| {{dts|format=dmy|2015|09|01}}\n|\n* Improved performance for scaling, rotating, translating meshes using SU2_DEF.\n*     Configuration file option MATH_PROBLEM now requires CONTINUOUS_ADJOINT instead of ADJOINT.\n*     New datatype abstraction for future flexibility: all current and future double types in the code should be the new su2double type.\n*     New MPI wrapper abstraction for future flexibility.\n*     Restructuring of the test case suite: the configuration files for the TestCases repository now live in a mirrored directory structure under the SU2 repository in order to make automatic testing with Travis CI more effective. To use, download both repositories and recursively copy the contents of one TestCases/ directory into the other to complete the set.\n*     Clean up of the build-from-source process, including file placement and default build settings.\n*     New compile flag options for including the HDF5, SZIP, and ZLIB external libraries, which enables HDF5-based CGNS file usage with SU2.\n*     General bug fixes and code maintenance.\n|-\n| {{Version|o|4.0.2}}\n| {{dts|format=dmy|2015|11|03}}\n|-\n| rowspan=\"4\" | 4.1 \"Cardinal\"\n| {{Version|o|4.1.0}}\n| {{dts|format=dmy|2016|04|22}}\n|\n* Algorithmic Differentiation for exact derivative computations throughout the code.\n*     Discrete adjoint implementation for the Euler, Navier-Stokes, and RANS equations.\n*     New adjoint outlet boundary conditions for treating downstream functionals.\n*     High-level driver classes for easily formulating multi-physics problems.\n*     Generalized Riemann flow boundary condition, including real gas effects.\n*     New finite element class library for future flexibility.\n*     Modifications to the source code for easier compilation on Windows.\n*     General bug fixes and performance improvements.\n|-\n| {{Version|o|4.1.1}}\n| {{dts|format=dmy|2016|04|05}}\n|-\n| {{Version|o|4.1.2}}\n| {{dts|format=dmy|2016|04|22}}\n|-\n| {{Version|o|4.1.3}}\n| {{dts|format=dmy|2016|05|24}}\n|-\n| rowspan=\"1\" | 4.2 \"Cardinal\"\n| {{Version|o|4.2.0}}\n| {{dts|format=dmy|2016|06|15}}\n|\n* Native Fluid-Structure Interaction (FSI) solver.\n*     Unsteady discrete adjoint for the Euler, Navier-Stokes, and RANS equations.\n*     Increased robustness of the pseudo-structural mesh deformation routines.\n*     Memory and efficiency improvements related to parallel file readers, mesh partitioning, and class data management.\n*     Expanded regression suite coverage to additional modules and new test cases.\n*     Improved solution output for RANS visualization.\n*     General bug fixes and performance improvements.\n|-\n| rowspan=\"1\" | 4.3 \"Cardinal\"\n| {{Version|o|4.3.0}}\n| {{dts|format=dmy|2016|08|22}}\n|\n* Redesign of the high-level Driver classes for code clarity and future flexibility.\n*    Alternating digital tree (ADT) implementation for efficient geometric searches.\n*    Stability improvements for the periodic boundary condition implementation.\n*    Improved memory management and leak removal throughout the entire codebase.\n*    CGNS v3.3.0 now distributed and automatically integrated with the autotools build.\n*    Additional bug fixes, stability improvements, and general code maintenance.\n|-\n| rowspan=\"1\" | 5.0 \"Raven\"\n| {{Version|o|5.0.0}}\n| {{dts|format=dmy|2017|01|20}}\n|\n\n* New in-memory Python wrapping of SU2 using SWIG with accompanying high-level API.\n*    Class enhancements for multiphysics applications, including interpolation and transfer.\n*    Free-form deformation (FFD) extensions, including bezier curves and improved usability.\n*    Reorganization of the incompressible solver for future expansion.\n*    Harmonic Balance flow analysis capability.\n*    Algebraic transition model implementation.\n*    More and better boundary conditions (accuracy and convergence improvements).\n*    Extensions to scripting for automated database creation (compute_polar.py).\n*    Critical improvements in I/O, including more feedback to the user.\n*    Additional bug fixes, stability improvements, and general code maintenance.\n\n|-\n|-\n| rowspan=\"1\" | 6.0 \"Falcon\"\n| {{Version|c|6.0.0}}\n| {{dts|format=dmy|2018|02|14}}\n|\n|-\n\n| colspan=\"5\" | <small>{{Version |l |show=111110}}</small>\n|}\n\n==License==\n\nSU2 is free and open source software, released under the [[GNU General Public License]] version 3 (SU2 v1.0 and v2.0) and [[GNU Lesser General Public License]] version 2.1 (SU2 v2.0.7 and later versions).<ref>[http://adl.stanford.edu/docs/display/SUSQUARED/License SU2 Licensing Page]</ref>\n\n==Alternative software==\n\n===Free and open-source software===\n* [[Advanced Simulation Library]] (AGPL)<ref>[http://asl.org.il/ Advanced Simulation Library Homepage]</ref>\n* CLAWPACK<ref>[http://depts.washington.edu/clawpack/ Clawpack homepage]</ref>\n* [[Code Saturne]] (GPL)\n* <span class=\"plainlinks\">[http://www.featool.com FEATool Multiphysics]</span><ref>[http://www.featool.com FEATool Multiphysics homepage]</ref>\n* [[FreeFem++]]<ref>[https://freefem.org/ FreeFem++ website]</ref> \n* [[Gerris (software)|Gerris Flow Solver]] (GPL)\n* [[OpenFOAM]]\n* OpenFVM<ref>[[:sourceforge:projects/openfvm/|OpenFVM homepage]]</ref>\n* Palabos Flow Solver<ref>[http://www.palabos.org Palabos homepage]</ref>\n\n===Proprietary software===\n* [[ADINA|ADINA CFD]]\n* [[ANSYS]] CFX\n* [[ANSYS]] Fluent\n* Azore <ref>[http://www.azoreCFD.com/ Azore Software, LLC Home Page]</ref>\n* [[Pumplinx]]\n* [[CD-adapco#STAR-CCM+|STAR-CCM+]]\n* [[COMSOL Multiphysics]]\n* [[KIVA (software)]]\n* [[RELAP5-3D]]\n* [[PowerFlow]]\n* [[FOAMpro]]\n* [[SimScale]]<ref>[https://www.simscale.com/open-source/ SimScale company website, Open Source]</ref> \n* Cradle <ref>[http://www.cradle-cfd.com/ Software Cradle Co., Ltd. Home Page]</ref> SC/Tetra <ref>[http://www.cradle-cfd.com/products/sctetra/index.html SC/Tetra Page]</ref>\n* Cradle scSTREAM <ref>[http://www.cradle-cfd.com/products/stream/index.html/ scSTREAM Page] {{webarchive|url=https://web.archive.org/web/20150306193633/http://www.cradle-cfd.com/products/stream/index.html |date=6 March 2015 }}</ref>\n* Cradle Heat Designer <ref>[http://www.cradle-cfd.com/products/heatdesigner/index.html/ Heat Designer Page]</ref>\n\n==References==\n{{reflist|colwidth=30em}}\n\n==External links==\n\n===Official resources===\n*[http://su2.stanford.edu SU2 home page]\n*[https://github.com/organizations/su2code SU2 Github repository]\n\n===Community resources===\n*[http://www.cfd-online.com/Forums/su2/ SU2 Forum at CFD Online]\n*[http://www.cfd-online.com/Wiki/SU2 SU2 wiki page at CFD Online]\n\n===Other resources===\n*[http://blog.pointwise.com/2013/01/11/this-week-in-cfd-86/ SU2 version 2.0 announcement]\n*[http://www.tecplot.com/blog/2013/04/09/su2-project-getting-it-installed/ [[Tecplot]] Co-founder review of SU2]\n*[http://news.stanford.edu/news/2012/january/aero-engineering-software-012412.html Stanford News story about SU2 initial release]\n\n{{CAE software}}\n\n{{DEFAULTSORT:SU2}}\n[[Category:Computational fluid dynamics]]\n[[Category:Free science software]]\n[[Category:Free computer-aided design software]]\n[[Category:Scientific simulation software]]\n[[Category:2012 software]]"
    },
    {
      "title": "Taylor–Green vortex",
      "url": "https://en.wikipedia.org/wiki/Taylor%E2%80%93Green_vortex",
      "text": "In fluid dynamics, the '''Taylor–Green vortex''' is an unsteady flow of a decaying [[vortex]], which has an exact closed form solution of the incompressible [[Navier–Stokes equation]]s in [[Cartesian coordinates]]. It is named after the British physicist and mathematician [[Geoffrey Ingram Taylor]] and his collaborator [[Albert E. Green|A. E. Green]].<ref name=\"TaGr\">\n[[G. I. Taylor|Taylor, G. I.]] and [[A. E. Green|Green, A. E.]], ''Mechanism of the Production of Small Eddies from Large Ones'', Proc. R. Soc. Lond. A, 158, 499–521 (1937).</ref>\n\n[[Image:Taylor-Green vortex vector plot.png|right|thumb|Vector plot of the Taylor-Green Vortex]]\n\n==Original work==\n\nIn the original work of Taylor and Green,<ref name=\"TaGr\" /> a particular flow is analyzed in three spatial dimensions, with the three velocity components <math>\\mathbf{v}=(u,v,w)</math> at time <math>t=0</math> specified by\n:<math>\nu = A \\cos ax \\sin by \\sin cz,\n</math>\n\n:<math>\nv = B \\sin ax \\cos by \\sin cz,\n</math>\n\n:<math>\nw = C \\sin ax \\sin by \\cos cz.\n</math>\n\nThe continuity equation <math> \\nabla \\cdot \\mathbf{v}=0</math> determines that <math>Aa+Bb+Cc=0</math>. The small time behavior of the flow is then found through simplification of the [[incompressible Navier–Stokes equations]] using the initial flow to give a step-by-step solution as time progresses.\n\nAn exact solution in two spatial dimensions is known, and is presented below.\n\n==Incompressible Navier–Stokes equations==\nThe [[incompressible Navier–Stokes equations]] in the absence of [[body force]], and in two spatial dimensions, are given by\n:<math>\n\\frac{\\partial u}{\\partial x}+ \\frac{\\partial v}{\\partial y} = 0,\n</math>\n\n:<math>\n\\frac{\\partial u}{\\partial t} + u\\frac{\\partial u}{\\partial x} + v\\frac{\\partial u}{\\partial y} =\n-\\frac{1}{\\rho} \\frac{\\partial p}{\\partial x} + \\nu \\left( \\frac{\\partial^2 u}{\\partial x^2} +\n\\frac{\\partial^2 u}{\\partial y^2} \\right),\n</math>\n\n:<math>\n\\frac{\\partial v}{\\partial t} + u\\frac{\\partial v}{\\partial x} + v\\frac{\\partial v}{\\partial y} =\n-\\frac{1}{\\rho} \\frac{\\partial p}{\\partial y} + \\nu \\left( \\frac{\\partial^2 v}{\\partial x^2} +\n\\frac{\\partial^2 v}{\\partial y^2} \\right).\n</math>\nThe first of the above equation represents the [[continuity equation]] and the other two represent the momentum equations.\n\n==Taylor–Green vortex solution==\nIn the domain <math>0 \\le x,y \\le 2\\pi </math>, the solution is given by\n\n:<math>\nu = \\cos x \\sin y \\,F(t), \\qquad \\qquad v = -\\sin x \\cos y \\, F(t),\n</math>\n\nwhere <math>F(t) = e^{-2\\nu t}</math>, <math>\\nu</math> being the [[Viscosity#Kinematic viscosity|kinematic viscosity]] of the fluid. Following the analysis of Taylor and Green<ref name=\"TaGr\" /> for the two-dimensional situation, and for <math>A=a=b=1</math>, gives agreement with this exact solution, if the exponential is expanded as a [[Taylor series]], i.e. <math>F(t) = 1 - 2\\nu t + O(t^2)</math>.\n\nThe pressure field <math>p</math> can be obtained by substituting the velocity solution in the momentum equations and is given by\n\n:<math>\np = -\\frac{\\rho}{4} \\left( \\cos 2x + \\cos 2y \\right) F^2(t).\n</math>\n\nThe [[stream function]] of the Taylor–Green vortex solution, i.e. which satisfies <math> \\mathbf{v} = \\nabla \\times \\boldsymbol{\\psi}</math> for flow velocity <math>\\mathbf{v}</math>, is\n:<math>\n\\boldsymbol{\\psi} = -\\cos x \\cos y F(t)\\, \\hat{\\mathbf{z}}.\n</math>\n\nSimilarly, the [[vorticity]], which satisfies <math> \\boldsymbol{\\mathbf{\\omega}} = \\nabla \\times \\mathbf{v} </math>, is given by\n:<math>\n\\boldsymbol{\\mathbf{\\omega}} = -2\\cos x \\cos y \\,F(t) \\hat{\\mathbf{z}}.\n</math>\n\nThe Taylor–Green vortex solution may be used for testing and validation of temporal accuracy of Navier–Stokes algorithms.<ref>\n[[Alexandre Chorin|Chorin, A. J.]], ''Numerical solution of the Navier–Stokes equations'', Math. Comp., 22, 745–762 (1968).</ref><ref>[[John Kim (professor)|Kim, J]]. and [[Parviz Moin|Moin, P.]], ''Application of a fractional-step method to incompressible Navier–Stokes equations'', J. Comput. Phys., 59, 308–323 (1985).</ref>\n\n==References==\n{{reflist}}\n\n{{DEFAULTSORT:Taylor-Green vortex}}\n[[Category:Fluid dynamics]]\n[[Category:Computational fluid dynamics]]"
    },
    {
      "title": "Tecplot",
      "url": "https://en.wikipedia.org/wiki/Tecplot",
      "text": "{{self-published|date=October 2013}}\n{{Infobox software\n| name = Tecplot 360\n| title = Tecplot, Inc.\n| logo = \n| screenshot = Tecplot360.png\n| caption = Tecplot 360 on Linux\n| collapsible = \n| author = \n| developer = \n| released = <!-- {{Start date|YYYY|MM|DD|df=yes/no}} -->\n| discontinued = \n| latest release version = Tecplot 360 2018/R2\n| latest release date = \n| latest preview version = \n| latest preview date = <!-- {{Start date and age|YYYY|MM|DD|df=yes/no}} -->\n| frequently updated = <!-- DO NOT include this parameter unless you know what it does -->\n| programming language = \n| operating system = [[Windows]], [[OS X]], [[Linux]]\n| platform = \n| size = \n| language = \n| status = \n| genre = [[Plot (graphics)|Plotting]]\n| license = [[Trialware]]\n| website = {{URL|https://www.tecplot.com}}\n}}\n\n'''Tecplot''' is the name of a family of visualization & analysis software tools developed by Tecplot, Inc., which is headquartered in [[Bellevue, Washington|Bellevue]], Washington.  The firm was formerly operated as Amtec Engineering. In 2016, the firm was acquired by Vela Software, an operating group of [[Constellation Software]], Inc. (TSX:CSU).\n\n==Tecplot 360==\nTecplot 360 is a [[Computational Fluid Dynamics]] (CFD) and numerical simulation software package used in post-processing simulation results.<ref>{{cite web |url=http://www.grc.nasa.gov/WWW/5810/rvc/docs/tcgrid_400.pdf |title=TCGRID 3-D Grid Generator for Turbomachinery User's Manual and Documentation |year=2011 |first1=Rodrick V. |last1=Chima |publisher=NASA Glenn Research Center, MS 5-12 21000 Brookpark Road |archiveurl=https://web.archive.org/web/20120917042320/http://www.grc.nasa.gov/WWW/5810/rvc/docs/tcgrid_400.pdf |archivedate=September 17, 2012 |website=nasa.gov}}</ref><ref>{{Cite journal|title=Numerical simulation of three-dimensional flow dynamics in a hot water storage tank|journal=Applied Energy|volume=86|issue=12|year=2009|authors=Simon Ievers, Wenxian Lin|doi=10.1016/j.apenergy.2009.04.010|pages=2604–2614|url=https://researchonline.jcu.edu.au/5121/1/2009-AE-86-2604-2614.pdf}}</ref><ref>{{cite journal|title=Microgravity Science Glovebox CFD Model for the Zero Boil-Off Tank Experiment|authors=Adam C. Cankaya, William A. Arnold|year=2006|conference=44th AIAA Aerospace Sciences Meeting and Exhibit}}</ref> Tecplot 360 is also used in chemistry applications to visualize molecule structure by post-processing charge density data.<ref>{{cite journal|title=The irreducible bundle: Further structure in the kinetic energy distribution |journal=The Journal of Chemical Physics |volume=130 |issue=204108 |pages=204108 |year=2009 |doi=10.1063/1.3139113 |pmid=19485438 |last1=Jones |first1=Travis E. |last2=Eberhart |first2=Mark E.|bibcode = 2009JChPh.130t4108J }}</ref>\n\nCommon tasks associated with post-processing analysis of flow solver (e.g. [[Fluent, Inc.|Fluent]], [[OpenFOAM]]) data include calculating grid quantities (e.g. aspect ratios, skewness, orthogonality and stretch factors), normalizing data; Deriving flow field functions like pressure coefficient or vorticity magnitude, verifying solution convergence, estimating the [[order of accuracy]] of solutions, interactively exploring data through cut planes (a slice through a region), iso-surfaces (3-D maps of concentrations), particle paths (dropping an object in the \"fluid\" and watching where it goes).\n\nTecplot 360 may be used to visualize output from programming languages such as [[Fortran]].<ref>{{cite web |url=https://www.researchgate.net/post/what_is_the_advantage_of_MATLAB_over_FORTAN |title=What is the advantage of MATLAB over FORTAN? |publisher=[[ResearchGate]] |year=2013}}</ref><ref>{{cite encyclopedia |first1=Alan |last1=Crosky |first2=Carroll |last2=Grant |first3=Donald |last3=Kelly |doi=10.1002/9781118097298.weoc084 |title=Wiley Encyclopedia of Composites |contribution=Fiber Placements |year=2012 |isbn=9781118097298 }}</ref> Tecplot's native data format is PLT or SZPLT. Many other formats are also supported, including:\n\n'''CFD Formats''': \n[[CGNS]], FLOW-3D ([[Flow Science, Inc.]]), [[ANSYS]] CFX, [[ANSYS]] FLUENT .cas and .dat format and polyhedra, [[OpenFOAM]], PLOT3D ([[Flow Science, Inc.]]), Tecplot and polyhedra, Ensight Gold and HDF5 ([[Hierarchical Data Format]]).\n\n'''Data Formats''': \nHDF, [[Microsoft Excel]] (Windows only), comma- or space-delimited [[ASCII]].\n\n'''FEA Formats''': \n[[Abaqus]], [[ANSYS]], FIDAP Neutral, LSTC/DYNA [[LS-DYNA]], [[NASTRAN]] [[MSC Software]], Patran [[MSC Software]], PTC Mechanica, SDRC/IDEAS universal and 3D Systems STL.\n\nParaView supports Tecplot format through a [[VisIt]] importer.<ref>{{cite web|url=http://www.cfd-online.com/Forums/paraview/124071-open-tecplot-date-format-using-paraview.html|title=open tecplot date format using paraview|year=2013}}</ref><ref>{{cite web|url=http://www.cfd-online.com/Forums/paraview/120878-importing-1d-tecplot-files-paraview-zones-results-na.html|title=Importing 1D Tecplot files to Paraview with Zones}}</ref><ref>{{cite web|url=http://www.softpedia.com/progChangelog/VisIt-Changelog-78100.html|publisher=[[Softpedia]]|year=2013|title=VisIt 2.7.0 - Changelog}}</ref>\n\n==Tecplot RS==\nTecplot RS is a tool tailored towards visualizing the results of \n[[reservoir simulation]]s, which model the flow of fluids through porous media, as in oil and gas fields, and aquifers.\n\n==Tecplot Focus==\nTecplot Focus is plotting software designed for measured field data, performance plotting of test data, mathematical analysis, and general engineering plotting.\n\n==Tecplot Chorus==\nTecplot Chorus is a data management, design optimization, and aero database development framework used for comparing collections of CFD simulations.\n\n==References==\n<references/>\n\n== External links ==\n* [http://www.tecplot.com Official Site]\n* [http://www.cfd-online.com/Forums/tecplot/ User Community]\n* [http://www.tecplot.com/tecio-library File format definition]\n\n[[Category:Graphics software]]\n[[Category:Computational fluid dynamics]]\n[[Category:Plotting software]]"
    },
    {
      "title": "TELEMAC",
      "url": "https://en.wikipedia.org/wiki/TELEMAC",
      "text": "In [[computational fluid dynamics]], '''TELEMAC''' is short for the open TELEMAC-MASCARET system, or a suite of [[Finite element method|finite element]] [[computer program]] owned by the Laboratoire National d'Hydraulique et Environnement (LNHE), part of the R&D group of [[Électricité de France]]. After many years of commercial distribution, a Consortium (the TELEMAC-MASCARET Consortium) was officially created in January 2010 to organize the open source distribution of the open TELEMAC-MASCARET system now available under [[GPLv3]].\n\n==Available modules<ref>{{citation | title=TELEMAC: A New Numerical Model for Solving Shallow Water Equations |last1=Galland |first1=J.C. | last2=Goutal |first2=N. | last3=Hervouet |first3=J.M. |journal=Advances in Water Resources AWREDI |volume=14 |issue=3 |pages=138–148 |year=1991 |doi=10.1016/0309-1708(91)90006-A |bibcode = 1991AdWR...14..138G }}</ref>==\n\n===TELEMAC-2D===\nIt 2D hydrodynamics module, TELEMAC-2D, solves the so-called [[shallow water equations]], also known as the Saint Venant equations. TELEMAC-2D solves the Saint-Venant equations using the [[Finite element method|finite-element]] or [[Finite-volume method|finite-volume]] method and a computation mesh of triangular elements. It can perform simulations in [[Transient flow|transient]] and permanent conditions. TELEMAC-2D can take into account the following phenomena:\n* Propagation of long waves, taking into account non-linear effects\n* Bed friction\n* Influence of Coriolis force\n* Influence of meteorological factors: atmospheric pressure and wind\n* Turbulence\n* Torrent and river flows\n* Influence of horizontal temperature or salinity gradients on density\n* Cartesian or spherical coordinates for large domains\n* Dry areas in the computational domain: intertidal flats and flood plains\n* Current entrainment and diffusion of a tracer, with source and sink terms\n* Monitoring of floats and Lagrangian drifts\n* Treatment of singular points: sills, dikes, pipes.\nTELEMAC-2D is used in many fields of application. In the maritime field, particular mention may be made of harbour structure design, studies of the effect of building submersible breakwaters or dredging works, the impact of discharges from a sea outfall, study of thermal plumes; and, with regard to rivers, the impact of various types of construction (bridges, sills, groynes), dam breaks, flood studies, transport of dissipating or non-dissipating tracers. TELEMAC-2D can also be used for a number of special applications, such as industrial reservoir failures, avalanches falling into reservoirs, etc.\n\n===TELEMAC-3D===\nIt 3D hydrodynamics module, TELEMAC-3D, uses the same horizontally [[unstructured mesh]] as TELEMAC-2D but solves the [[Navier-Stokes equations]], whether in [[hydrostatic]] or [[non-hydrostatic]] mode so allowing shorter waves than those in a shallow water context (where wavelengths are required to be at least twenty times the water depth). The wave formulation for the updating of the free surface is used for efficiency. The 3D mesh is developed as a series of meshed surfaces between the bed and the free surface. Flexibility in the placement of these planes permits the use of a sigma grid (each plane at a given proportion of the spacing between bed and surface) or a number of other strategies for intermediate surface location. One useful example is to include some planes which are at a fixed distance below the water surface, or above the bed. In the presence of a near-surface [[thermocline]] or [[halocline]] this is advantageous in so far as mixing water between the near-surface planes, where the greatest density gradients are located, can be avoided. When drying occurs the water depth falls to zero exactly and the planes collapse to a zero inter-layer spacing.\n\n===MASCARET<ref>\"A Finite Volume Solver for 1D Shallow-Water Equations Applied to an Actual River\", N. Goutal and F. Maurel, Int. J. Numer. Meth. Fluids 2002; 38:1-19</ref><ref>\"MASCARET: a 1-D Open-Source Software for Flow Hydrodynamic and Water Quality in Open Channel Networks\", N. Goutal, J.-M. Lacombe, F. Zaoui and K. El-Kadi-Abderrezzak, River Flow 2012 – Murillo (Ed.), pp. 1169-1174</ref>===\nMASCARET includes 1-Dimensional free surface flow modelling engines. Based on the Saint-Venant equations, different modules can model various phenomenon over large areas and for varied geometries: meshed or branched network, subcritical or supercritical flows, steady or unsteady flows. MASCARET can represent:\n* Flood propagation and modelling of floodplains\n* Submersion wave resulting from dam break\n* Regulation of managed rivers\n* Flow in torrents,\n* Canals wetting\n* Sediment Transport\n* Water quality (temperature, passive tracers ...)\n\n===ARTEMIS===\nARTEMIS is a scientific software dedicated to the simulation of wave propagation towards the coast or into harbours, over a geographical domain of about few square km. The domain may be larger for simulation of long waves or resonance. The frequency dependence and directional spreading of the wave energy is taken into account by ARTEMIS. The computation retrieves the main wave characteristics over the computational domain: significant wave height, wave incidence, orbital velocities, breaking rate, ...\n\nARTEMIS solves the Berkhoff's equation or Mild Slope Equation through finite element formulation. The Mild Slope Equation has been extended to integrate dissipation processes. With a consistent set of  boundary conditions, ARTEMIS is able to model the following processes:\n* Bottom refraction\n* Diffraction by obstacles\n* Depth induced wave breaking\n* Bottom friction\n* Full or partial reflections against walls, breakwaters, dikes, ...\n* Radiation or free outflow conditions \nARTEMIS has been validated on a set of reference tests and has been successfully used for numerous studies. The software has shown its ability to provide reliable wave agitation results in coastal areas, in the vicinity of maritime works and structures, or in the surf zone. ARTEMIS is an operational tool to determine project conditions:\n* structure design,\n* coastal management,\n* wave conditions for wave driven currents and associated\n* sand transport, ... \n* breaking rate in the surroundings of a harbour for two different wave directions ...\n* easily carrying into effect with the help of adapted pre and post-processors for mesh generation and results visualization.\n\n===TOMAWAC===\nTOMAWAC is used to model wave propagation in coastal areas. By means of a finite-element type method, it solves a simplified equation for the spectro-angular density of wave action. This is done for steady-state conditions (i.e. with a fixed depth of water throughout the simulation).\n\nTOMAWAC is particularly simple to use. It can take into account any of the following physical phenomena:\n* Wind-generated waves\n* Refraction on the bottom\n* Refraction by currents\n* Dissipation through bathymetric wave breaking\n* Dissipation through counter-current wave breaking\nAt each point of the computational mesh, TOMAWAC calculates the following information:\n* Significant wave height\n* Mean wave frequency\n* Mean wave direction\n* Peak wave frequency\n* Wave-induced currents\n* Radiation stresses\nValidated with a variety of test cases and already used in numerous studies, TOMAWACis ideal for engineering projects: design of maritime structures, sediment transport by waves, current studies, etc.\n\nLike all the other modules of the open TELEMAC-MASCARET system, TOMAWAC has the benefit of the system's powerful mesh generation and results display functions. It is also easy to link TOMAWAC and the hydrodynamic or solid transport modules, and to use the same computation grid for various modules (TELEMAC-2D, SISYPHE, TELEMAC-3D, etc.).\n\nLike all the modules of the open TELEMAC-MASCARET system, TOMAWAC was developed in accordance with the quality assurance procedures followed in Electricité de France's Studies and Research Division. The software is supplied with a complete set of documents: theoretical description, user's manual and first steps, validation file, etc.\n\n===SISYPHE===\nSISYPHE is the state of the art sediment transport and bed evolution module of the TELEMAC-MASCARET modelling system. SISYPHE can be used to model complex morphodynamics processes in diverse environments, such as coastal, rivers, lakes and estuaries, for different flow rates, sediment size classes and sediment transport modes.\n\nIn SISYPHE, sediment transport processes are grouped as bed-load, suspended-load or total-load, with an extensive library of bed-load transport relations. SISYPHE is applicable to non-cohesive sediments that can be uniform (single-sized) or non-uniform (multiple-sized), cohesive sediments (multi-layer consolidation models), as well as sand-mud mixtures. A number of physically-based processes are incorporated into SISYPHE, such as the influence of secondary currents to precisely capture the complex flow field induced by channel curvature, the effect of bed slope associated with the influence of gravity, bed roughness predictors, and areas of unerodable bed, among others.\n\nFor currents only, SISYPHE can be tightly coupled to the depth-averaged shallow water module TELEMAC-2D or to the three-dimensional Reynolds-averaged Navier-Stokes module TELEMAC-3D. In order to account for the effect of waves or combined waves and currents, SISYPHE can be internally coupled to the waves module TOMAWAC.\n\nSISYPHE can be easily expanded and customized to particular requirements by modifying friendly, easy to read Fortran files. To help the community of users and developers, SISYPHE includes a large number of examples, verification and validation tests for a range of applications.\n\n===Common techniques===\nCommon to all its modules, [[Finite-volume method|finite volume]] style numerical techniques are used to ensure that both water and tracer can be well conserved in the presence of drying and subsequent wetting.\n\n==External links==\n* [http://www.opentelemac.org www.opentelemac.org], [http://www.openmascaret.org www.openmascaret.org]\n* [http://docs.opentelemac.org docs.opentelemac.org]\n* [http://wiki.opentelemac.org wiki.opentelemac.org]\n* [http://cis.opentelemac.org cis.opentelemac.org]\n* [http://svn.opentelemac.org svn.opentelemac.org]\n\n==References==\n{{reflist}}\n\n[[Category:Finite element software]]\n[[Category:Computational fluid dynamics]]\n[[Category:Finite element software for Linux]]"
    },
    {
      "title": "Turbulence kinetic energy",
      "url": "https://en.wikipedia.org/wiki/Turbulence_kinetic_energy",
      "text": "{{more citations needed|date=March 2009}}\n{{expert needed|Physics|ex2=Energy|ex3=Engineering|date=March 2009}}\n\nIn [[fluid dynamics]], '''turbulence kinetic energy''' ('''TKE''') is the mean [[kinetic energy]] per unit mass associated with [[Eddy (fluid dynamics)|eddies]] in [[turbulent flow]]. Physically, the turbulence kinetic energy is characterised by measured [[root-mean-square]] (RMS) velocity fluctuations. In [[Reynolds-averaged Navier–Stokes equations|Reynolds-averaged Navier Stokes equations]], the turbulence kinetic energy can be calculated based on the closure method, i.e. a [[Turbulence modeling|turbulence model]].\n\nGenerally, the TKE is defined to be half the sum of the variances (square of standard deviations) of the velocity components:\n:<math> k = \\frac12 \\left(\\, \\overline{(u')^2} + \\overline{(v')^2} + \\overline{(w')^2} \\,\\right). </math>\n\nTKE can be produced by fluid shear, friction or buoyancy, or through external forcing at low-frequency eddy scales(integral scale). Turbulence kinetic energy is then transferred down the turbulence [[energy cascade]], and is dissipated by viscous forces at the [[Kolmogorov microscales|Kolmogorov scale]]. This process of production, transport and dissipation can be expressed as:\n\n:<math> \\frac{Dk}{Dt} + \\nabla \\cdot T' = P - \\varepsilon, </math>\n\nwhere:<ref>{{cite book|last=Pope|first=S. B.|date=2000|title=Turbulent Flows|location=Cambridge|pages=122–134|publisher=[[Cambridge University Press]]}}{{missing ISBN}}</ref>\n\n* {{mvar|{{sfrac|Dk|Dt}}}} is the mean-flow [[material derivative]] of TKE;\n* {{math|∇ · ''T′''}} is the turbulence transport of TKE;\n* {{mvar|P}} is the production of TKE, and\n* {{mvar|ε}} is the TKE dissipation.\n\nAssuming density and viscosity both constant, the full form of the TKE equation is:\n:<math>\n\\underbrace{ \\frac{\\partial k}{\\partial t}}_{ \\begin{smallmatrix}\\text{Local}\\\\\\text{derivative}\\end{smallmatrix}}\n+\n\\underbrace{\\overline{u}_j \\frac{\\partial k}{\\partial x_j}}_{ \\begin{smallmatrix}\\text{Advection}\\end{smallmatrix}}\n= - \n\\underbrace{ \\frac{1}{\\rho_o} \\frac{\\partial \\overline{u'_i p'}}{\\partial x_i} \t} _{ \\begin{smallmatrix}\\text{Pressure}\\\\\\text{diffusion}\\end{smallmatrix}}\n-  \n\\underbrace{ \\frac{1}{2} \\frac{\\partial \\overline{u_j' u_j' u_i'}}{\\partial x_i} \t}_{ \\begin{smallmatrix}\t\t\t\t\t\t\t\t\t\t\\text{Turbulent}\\\\\t\t\t\t\t\t\t\t\t\t\t\\text{transport} \\\\\t\t\t\t\t\t\t\t\t\t\t\\mathcal{T}\t\t\t\t\t\t\t\t\t\t\t\\end{smallmatrix}}\n\t+ \\underbrace{ \\nu\\frac{\\partial^2 k}{\\partial x^2_j} \t\t\t\t\t\t}_{\\begin{smallmatrix}\t\t\t\t\t\t\t\t\t\t\\text{Molecular}\\\\\t\t\t\t\t\t\t\t\t\t\\text{viscous}\\\\\t\t\t\t\t\t\t\t\t\t\\text{transport}\t\t\t\t\t\t\t\t\t\t\t\\end{smallmatrix}}\n\t\\underbrace{ - \\overline{u'_i u'_j}\\frac{\\partial \\overline{u_i}}{\\partial x_j} \t\t}_{\\begin{smallmatrix}\t\t\t\t\t\t\t\t\t\t\\text{Production}\\\\\t\t\t\t\t\t\t\t\t\t\t\\mathcal{P}\t\t\t\t\t\t\t\t\t\t\t\t\\end{smallmatrix}}\n\t- \\underbrace{ \\nu \\overline{\\frac{\\partial u'_i}{\\partial  x_j}\\frac{\\partial u'_i}{\\partial x_j}} \t\t\t\t\t\t\t\t\t\t\t}_{\\begin{smallmatrix}\t\t\t\t\t\t\t\t\t\t\t\t\\text{Dissipation}\\\\\t\t\t\t\t\t\t\t\t\t\t\t\t\\varepsilon_k\t\t\t\t\t\t\t\t\t\t\t\t\t\\end{smallmatrix}}\n\t- \\underbrace{ \\frac{g}{\\rho_o} \\overline{\\rho' u'_i}\\delta_{i3}\t\t\t\t}_{\\begin{smallmatrix}\t\t\t\t\t\t\t\t\t\t\t\t\t\\text{Buoyancy flux}\\\\\t\t\t\t\t\t\t\t\t\t\t\t\tb\t\t\t\t\t\t\t\t\t\t\t\t\t\\end{smallmatrix}}\n</math>\n\nBy examining these phenomena, the turbulence kinetic energy budget for a particular flow can be found.<ref>Baldocchi, D. (2005), ''[http://nature.berkeley.edu/biometlab/espm129/notes/Lecture%2016%20Wind%20and%20Turbulence%20Part%201%20Surface%20Boundary%20Layer%20Theory%20and%20Principles%20notes.pdf Lecture 16, Wind and Turbulence, Part 1, Surface Boundary Layer: Theory and Principles ]'', Ecosystem Science Division, Department of Environmental Science, Policy and Management, University of California, Berkeley, CA: USA.</ref>\n\n==Computational fluid dynamics==\n\nIn [[computational fluid dynamics]] (CFD), it is impossible to numerically simulate turbulence without discretizing the flow-field as far as the [[Kolmogorov microscales]], which is called [[direct numerical simulation]] (DNS). Because DNS simulations are exorbitantly expensive due to memory, computational and storage overheads, turbulence models are used to simulate the effects of turbulence. A variety of models are used, but generally TKE is a fundamental flow property which must be calculated in order for fluid turbulence to be modelled.\n\n===Reynolds-averaged Navier–Stokes equations===\n[[Reynolds-averaged Navier–Stokes equations|Reynolds-averaged Navier–Stokes]] (RANS) simulations use the Boussinesq [[eddy viscosity]] hypothesis <ref>{{cite journal|authorlink=Joseph Valentin Boussinesq|last=Boussinesq|first=J. V.|date=1877|title=Théorie de l’Écoulement Tourbillant|journal=Mem. Présentés par Divers Savants Acad. Sci. Inst. Fr.|volume=23|pages=46–50}}</ref> to calculate the [[Reynolds stress]] that results from the averaging procedure:\n\n:<math> \\overline{u'_i u'_j} = \\frac23 k \\delta_{ij} - \\nu_t \\left( \\frac{\\partial \\overline{u_i}}{\\partial x_j} + \\frac{\\partial \\overline{u_j}}{\\partial x_i} \\right), </math>\n\nwhere\n\n:<math> \\nu_t = c \\cdot \\sqrt{k} \\cdot l_m. </math>\n\nThe exact method of resolving TKE depends upon the turbulence model used; ''[[k-ε turbulence model|{{mvar|k}}–{{mvar|ε}}]]'' (k–epsilon) models assume isotropy of turbulence whereby the normal stresses are equal:\n\n:<math> \\overline{(u')^2} = \\overline{(v')^2} = \\overline{(w')^2}. </math>\n\nThis assumption makes modelling of turbulence quantities ({{mvar|k}} and {{mvar|ε}}) simpler, but will not be accurate in scenarios where anisotropic behaviour of turbulence stresses dominates, and the implications of this in the production of turbulence also leads to over-prediction since the production depends on the mean rate of strain, and not the difference between the normal stresses (as they are, by assumption, equal).<ref>{{cite book|last=Laurence|first=D. |date=2002 |contribution=Applications of Reynolds Averaged Navier Stokes Equations to Industrial Flows |editor-last=van Beeck |editor-first=J. P. A. J. |editor2-last=Benocci |editor2-first=C. |title=Introduction to Turbulence Modelling, Held March 18–22, 2002 at Von Karman Institute for Fluid Dynamics |location=[[Sint-Genesius-Rode]] |publisher=[[Von Karman Institute for Fluid Dynamics]]}}</ref>\n\n[[Reynolds stresses|Reynolds-stress]] models (RSM) use a different method to close the Reynolds stresses, whereby the normal stresses are not assumed isotropic, so the issue with TKE production is avoided.\n\n===Initial conditions===\nAccurate prescription of TKE as initial conditions in CFD simulations are important to accurately predict flows, especially in high Reynolds-number simulations. A smooth duct example is given below.\n\n:<math> k = \\frac32 ( U I )^2, </math>\n\nwhere {{mvar|I}} is the initial turbulence intensity [%] given below, and {{mvar|U}} is the initial velocity magnitude;\n\n:<math> \\varepsilon = {c_\\mu}^\\frac34 k^\\frac32 l^{-1}. </math>\n\nHere {{mvar|l}} is the turbulence or eddy length scale, given below, and {{mvar|c<sub>μ</sub>}} is a {{mvar|k}}–{{mvar|ε}} model parameter whose value is typically given as 0.09;\n\n:<math> I = 0.16 Re^{-\\frac18}. </math>\n\nThe turbulent length scale can be ''estimated'' as\n\n:<math> l = 0.07L, </math>\n\nwith {{mvar|L}} a characteristic length.  For internal flows this may take the value of the inlet duct (or pipe) width (or diameter) or the hydraulic diameter.<ref>{{cite book|last1=Flórez Orrego |displayauthors=etal |date=2012 |chapter-url=https://books.google.com/books?id=gumvHDQmJD0C&pg=PA302&lpg=PA302&dq=Experimental+and+CFD+study+of+a+single+phase+cone-shaped+helical+coiled+heat+exchanger%3A+an+empirical+correlation&source=bl&ots=c7N1itAiOI&sig=-nydeNk9hXSTt8CMYSMB0hsVRlg&hl=en&sa=X&ei=iTF_UfKXE6vH0AHRiYGgCg&redir_esc=y#v=onepage&q=Experimental%20and%20CFD%20study%20of%20a%20single%20phase%20cone-shaped%20helical%20coiled%20heat%20exchanger%3A%20an%20empirical%20correlation&f=false |chapter=Experimental and CFD study of a single phase cone-shaped helical coiled heat exchanger: an empirical correlation |title=Proceedings of ECOS 2012 – The 25th International Conference on Efficiency, Cost, Optimization, Simulation and Environmental Impact of Energy Systems, June 26–29, 2012, Perugia, Italy |ISBN=978-88-6655-322-9}}</ref>\n\n==References==\n{{reflist}}\n\n==External links==\n* [http://www.cfd-online.com/Wiki/Introduction_to_turbulence/Turbulence_kinetic_energy Turbulence kinetic energy] at CFD Online.\n*{{cite journal|last=Absi|first=R.|title=Analytical solutions for the modeled {{mvar|k}}-equation|journal=ASME J. Appl. Mech.|volume=75|date=2008|issue=044501|pages=1–4|doi=10.1115/1.2912722|bibcode=2008JAM....75d4501A}}\n\n[[Category:Computational fluid dynamics]]\n[[Category:Turbulence]]\n[[Category:Energy (physics)]]"
    },
    {
      "title": "Unified methods for Computing Incompressible and Compressible flow",
      "url": "https://en.wikipedia.org/wiki/Unified_methods_for_Computing_Incompressible_and_Compressible_flow",
      "text": "{{orphan|date=November 2014}}\n\nComputation of [[Incompressible flow|Incompressible]] and [[Compressible flow]] generally depends on the [[Mach number|Mach Number]] M, where for a range of zero to supersonic compressible equations are applied but with a possible error on a range of M<0.2 . For this range we have to apply [[Navier–Stokes equations#Incompressible flow of Newtonian fluids|Incompressible Navier Stokes]] and Euler equations but the work would be much easier if we find a Unified Method for solving both the flows.\nUnified method can also lead us towards much more accuracy and efficiency.\n\nWhy the standard method for solving Compressible flows fails?\n\nThe basic cause of failure for the Compressible Flow methods is the stiffness of the governing Equations.\n\n== Conservation of Mass ==\n\n<math>\\frac{\\partial{}\\rho{}}{\\partial{}t}+\\nabla{}.\\left(\\rho{}V\\right)=0\n</math>\n\n== Conservation of Momentum ==\n\n<math>\\rho{}\\frac{DV}{Dt}=-\\nabla{}p+\\nabla{}.\\tau{}+\\rho{}f\n</math>\n\n== Conservation of Energy ==\n\n<math>\\rho{}\\left[\\frac{\\partial{}h}{\\partial{}t}+\\nabla{}.\\left(hV\\right)\\right]=-\\frac{Dp}{Dt}+\\nabla{}.\\left(k\\nabla{}T\\right)+\\Phi{}</math>\n\nOne way to fix this problem is to change the governing equation; known as Preconditioning; which can also increases the accuracy.\n\nThe other cause for the break down is Pressure because it is not taken into account as primary unknown. \nFor making the governing equation workable for both the Compressible and Incompressible flows, following things needs to be corrected:-\n\n•\tUsage of Dimensionless Pressure thereby removing the difficulties faced while solving for very low Mach Number\n\n•\tUse non Conservative form of energy which increases the efficiency.\n\n•\tDiscretization of the mass conservation equation\n \n•\tUse MUSCL and Runge Kutta time stepping\n\n== Governing Equation ==\n\n=== Conservation of mass ===\n\n<math>{\\rho{}}_pp_t+{\\rho{}}_TT_t+m_x=0\n</math>\n\n=== Equation of state ===\n\n<math>{\\rho{}}_p=\\gamma{}M_r^2/T\n</math>\n\n<math>{\\rho{}}_T=-\\frac{\\rho{}}{T}</math>\n\n=== Momentum Equation ===\n\n<math>m_t+{(um+p)}_x=0\n</math>\n\nBy using the dimensionless pressure and equation of state the governing equation can be best described as :\n<math>T_t+{(uT)}_x+\\left(\\gamma{}-2\\right)Tu_x=0\n</math>\n\n== Finite Volume Scheme ==\nFor the above specified governing equations the [[Finite volume method|finite volume scheme]]<ref>*'''Eymard, R. Gallouët, T.   R. Herbin, R.''' (2000) ''The finite volume method''  Handbook of Numerical Analysis, Vol. VII, 2000, p.&nbsp;713–1020. Editors: P.G. Ciarlet and J.L. Lions.\n*'''LeVeque, Randall''' (2002), ''Finite Volume Methods for Hyperbolic Problems'', Cambridge University Press.\n*'''Toro, E. F.''' (1999), ''Riemann Solvers and Numerical Methods for Fluid Dynamics'', Springer-Verlag.</ref> is\n\n<math>\\gamma{}M_r^2\\left(p_j^{n+1}-p_j^n\\right)-{\\rho{}}_j^n\\left(T_j^{n+1}-T_j^n\\right)+\\lambda{}T_j^n\\left(s^n{\\rho{}}^nu^n+\\left(1-s^n\\right)m^{n+1}\\right){\\vert{}}_{j-1/2}^{j+1/2}=0</math>\n\n<math>m_{j+1/2}^{n+1}-m_{j+1/2}^n+\\lambda{}\\left(u^nm^n+p^{n+1/2}\\right){\\vert{}}_j^{j+1}=0\n</math>\n\n<math>T_j^{n+1}-T_j^n+\\lambda{}\\left(u^nT^n\\right){\\vert{}}_{j-\\frac{1}{2}}^{j+\\frac{1}{2}}+\\lambda{}\\left(\\gamma{}-2\\right)T_j^nu^n{\\vert{}}_{j-\\frac{1}{2}}^{j+\\frac{1}{2}}=0\n</math>\n\nwhere \n<math>\\lambda{}=\\tau{}/h\n</math>\n\n<math>p^{n+1/2}=(p^n+p^{n+1})/2</math>\n\n<math>s^n=s(M^n)</math>\n\n<math>s(M)=0       ,M<=1/2,\n</math>\n<math>s(M)=M-1/2           1/2<\\vert{}M\\vert{} <3/2</math>\n<math>s(M)=1                M>=3/2\n</math>\n\nHere<math>M_{j+\\frac{1}{2}}=\\frac{2\\left\\vert{}u_{j+\\frac{1}{2}}\\right\\vert{}}{c_j+c_{j+1}}</math>\n\nwith c as the speed of the sound.\n\nAnd it is found that here m and p are the terms evaluated at new  time level t^(n+1)\nThis is mostly based on the 1 dimension case\n\n== Pressure correction method ==\n\nFor a higher order nonlinear system we have to use iterative methods. So for the better results we use the [[Pressure-correction method|pressure correction method]]<ref>* M. Thomadakis, M. Leschziner: A PRESSURE-CORRECTION METHOD FOR THE SOLUTION OF INCOMPRESSIBLE VISCOUS FLOWS ON UNSTRUCTURED GRIDS, Int. Journal for Numerical Meth. in Fluids, Vol. 22, 1996\n* A. Meister, J. Struckmeier: Hyperbolic Partial Differential Equations, 1st Edition, Vieweg, 2002</ref> \nIn this method first t^(n+1)is obtained. Next a momentum prediction m* by replacing p^(n+1/2) by p^n\n\n<math>m_{j+1/2}^*-m_{j+\\frac{1}{2}}^n+\\lambda{}\\left(u^nm^n+p^n\\right){\\vert{}}_j^{j+1}=0\n</math>\n\nA momentum correction<math> \\delta{}m=m^{n+1}-m^*</math>is postulated as\n\n<math>\\delta{}m_{j+\\frac{1}{2}}=-\\left(\\frac{1}{2}\\right)\\lambda{}\\delta{}p{\\vert{}}_j^{j+1}\n</math>\n\n<math>\\delta{}p=p^{n+1}-p^n\n</math>\nSubstitution of <math>m^{n+1}=m^*+\\delta{}m</math>  gives the following Pressure\nCorrection Equation for <math>\\delta{}p:</math>\n\n<math>\\gamma{}M_r^2\\delta{}p_j-\\left(\\frac{1}{2}\\right){\\lambda{}}^2T_j^n\\left\\{\\left(1-s_{j+\\frac{1}{2}}^n\\right)\\delta{}p{\\vert{}}_j^{j+1}-\\left(1-s_{j-\\frac{1}{2}}^n\\right)\\delta{}p{\\vert{}}_{j-1}^j\\right\\}={\\rho{}}_j^nT_j{\\vert{}}_n^{n+1}-\\lambda{}T_j^n\\left(s^n{\\rho{}}^nu^n\\right){\\vert{}}_{j-\\frac{1}{2}}^{j+\\frac{1}{2}}\n</math>\n\n=== Boundary Conditions ===\nBoundary conditions needed for solving above methods \nfor j=1\n\n<math>\\left(\\frac{1}{2}\\right)\\lambda{}\\delta{}p{\\vert{}}_0^1=-\\lambda{}\\delta{}m_{1/2}=-\\lambda{}({\\rho{}}_bu_b){\\vert{}}_{t_n}^{t_{n+1}}\n</math>\nFor j=J the momentum equation is integrated over a half cell:\n\n<math>m_{J+1/2}^*-m_{J+1/2}^n+2\\lambda{}\\left(u^nm^n+p^n\\right){\\vert{}}_J^{J+1/2}=0\n</math>\n\n<math>p_{J+1/2}^n=p_b(t^n)\n</math>\n<math>\\delta{}m_{J+1/2}=-\\lambda{}(p_b{\\vert{}}_{t_n}^{t_{n+1}}-\\delta{}p_j)\n</math>\n\n== Runge Kutta Method ==\n\nThere are other methods too for finding the more accurate, more efficient results like one is runge kutta method.<ref>* {{Citation | last1=Ascher | first1=Uri M. | last2=Petzold | first2=Linda R. |author2-link=Linda Petzold| title=Computer Methods for Ordinary Differential Equations and Differential-Algebraic Equations | publisher=[[Society for Industrial and Applied Mathematics]] | location=Philadelphia | isbn=978-0-89871-412-8 | year=1998}}.\n* {{Citation | last1=Atkinson | first1=Kendall A. | title=An Introduction to Numerical Analysis | publisher=[[John Wiley & Sons]] | location=New York | edition=2nd | isbn=978-0-471-50023-0 | year=1989}}.\n* {{Citation| last1 = Butcher | first1 = John C. | author1-link=John C. Butcher | title=Coefficients for the study of Runge-Kutta integration processes | url=http://journals.cambridge.org/action/displayAbstract?fromPage=online&aid=4922056 | doi=10.1017/S1446788700027932 | volume=3 | issue=2 |date=May 1963 | pages=185–201}}.</ref>  it is known as a time stepping method in which one can freeze the time of first three steps and jump to the fourth level  of the Euler equation with full time T so (m+1)  stage becomes:\n<math>T_j^{(m+1)}-T_j^n+{\\alpha{}}_{m+1}\\lambda{}\\left(u^nT^{(m)}\\right){\\vert{}}_{j-1/2}^{j+1/2}+{\\alpha{}}_{m+1}\\lambda{}\\left(\\gamma{}-2\\right)T_j^{(m)}u^n{\\vert{}}_{j-1/2}^{j+1/2}=0\n</math>\n\n<math>m_{j+\\frac{1}{2}}^{\\left(m+1\\right)}-m_{j+\\frac{1}{2}}^n+{\\alpha{}}_{m+1}\\lambda{}\\left(u^nm^{\\left(m\\right)}+p^n\\right){\\vert{}}_j^{j+1}=0\n</math>\n\nIn the fourth stage pressure Correction is carried out:\n\n<math>\\gamma{}M_r^2\\delta{}p_j-\\left(\\frac{1}{2}\\right){\\lambda{}}^2T_j^{\\left(4\\right)}\\left\\{\\left(1-s_{j+\\frac{1}{2}}^{\\left(4\\right)}\\right)\\delta{}p{\\vert{}}_j^{j+1}-\\left(1-s_{j-\\frac{1}{2}}^{\\left(4\\right)}\\right)\\delta{}p{\\vert{}}_{j-1}^j\\right\\}={\\rho{}}_j^n\\left(T_j^{\\left(4\\right)}-T_j^n\\right)-\\lambda{}T_j^{\\left(4\\right)}\\left(s^{\\left(4\\right)}{\\rho{}}^nu^n\\right){\\vert{}}_{j-\\frac{1}{2}}^{j+\\frac{1}{2}}</math>\n\n==References==\n{{Reflist}}\n\n[[Category:Computational fluid dynamics]]"
    },
    {
      "title": "Viscous vortex domains method",
      "url": "https://en.wikipedia.org/wiki/Viscous_vortex_domains_method",
      "text": "The '''viscous vortex domains''' ('''VVD''') '''method''' is a [[Meshfree methods|mesh-free]] method of [[computational fluid dynamics]] for directly numerically solving 2D [[Navier-Stokes equations]] in [[Lagrangian and Eulerian specification of the flow field|Lagrange coordinates]]\n<ref name=\"vvd_dan\">{{cite journal|last=Dynnikova|first=G. Ya.|title=The Lagrangian approach to solving the time-dependent Navier-Stokes. equations|journal=[[Doklady Physics]]|date=1 November 2004|volume=49|issue=11|pages=648–652|doi=10.1134/1.1831530|bibcode = 2004DokPh..49..648D }}</ref><ref name=\"vvd_eccm\">{{cite journal|last=Dynnikova|first=G.Ya.|title=The Viscous Vortex Domains (VVD) method for non-stationary viscous incompressible flow simulation|journal=Proceedings of IV European Conference on Computational Mechanics, Paris, France|date=16–21 May 2010|url=http://www.eccm2010.org/complet/fullpaper_193.pdf}}</ref>\nIt doesn't implement any [[turbulence model]] and free of arbitrary parameters.\nThe main idea of this method is to present [[vorticity]] field with discrete regions (domains), which travel with diffusive velocity relatively to fluid and conserve their [[Circulation (fluid dynamics)|circulation]]. The same approach was used in Diffusion Velocity method of Ogami and Akamatsu,<ref name=\"dvm\">{{cite journal|last=Ogami|first=Yoshifumi|author2=Akamatsu, Teruaki |title=Viscous flow simulation using the discrete vortex model—the diffusion velocity method|journal=Computers & Fluids|date=31 December 1990|volume=19|issue=3-4|pages=433–441|doi=10.1016/0045-7930(91)90068-S}}</ref> but VVD uses other discrete formulas\n\n==Features==\n\nThe VVD method deals with [[viscous]] [[Incompressible flow|incompressible]] fluid. The viscosity and density of fluid is considered to be constant. Method can be extended for simulation of heat conductive fluid flows ([[viscous vortex-heat domains method]])\n\nThe main features are:\n* Direct solving Navier-Stokes equations ([[Direct numerical simulation|DNS]])\n* Calculation of the friction force at the body surfaces\n* Proper description of the [[boundary layers]] (even turbulent)\n* Infinite computation region\n* Convenient simulation of deforming boundaries<ref name=airfoil_fd>{{cite journal|last=Guvernyuk|first=S. V.|author2=Dynnikova, G. Ya. |title=Modeling the flow past an oscillating airfoil by the method of viscous vortex domains|journal=Fluid Dynamics|date=31 January 2007|volume=42|issue=1|pages=1–11|doi=10.1134/S0015462807010012}}</ref>\n* Investigation of the flow-structure interaction,<ref name=plate_fd>{{cite journal|last=Andronov|first=P. R.|author2=Grigorenko, D. A. |author3=Guvernyuk, S. V. |author4=Dynnikova, G. Ya. |title=Numerical simulation of plate autorotation in a viscous fluid flow|journal=Fluid Dynamics|date=1 October 2007|volume=42|issue=5|pages=719–731|doi=10.1134/S0015462807050055|bibcode = 2007FlDy...42..719A }}</ref> even in case of zero mass\n* Estimated numerical diffusion and stability criteria <ref name=vvd_eccm_stability>{{cite journal|last=Dynnikov|first=Ya. A.|author2=Dynnikova, G. Ya. |title=Numerical stability and numerical viscosity in certain meshless vortex methods as applied to the Navier-Stokes and heat equations|journal=Computational Mathematics and Mathematical Physics|date=12 October 2011|volume=51|issue=10|pages=1792–1804|doi=10.1134/S096554251110006X|bibcode = 2011CMMPh..51.1792D }}</ref>\n\n==Governing equations==\n[[File:Notations in method of viscous vortex domains (VVD).png|thumb|Scheme of VVD method]]\n\nThe VVD method is based on a theorem,<ref name=vvd_dan /> that circulation in viscous fluid is conserved on contours travelling with speed\n:<math>\\mathbf{u} = \\mathbf{V} + \\mathbf{V}_d; ~~~\\mathbf{V}_d = -\\nu \\dfrac{\\nabla\\mathbf{\\Omega}}{|\\mathbf{\\Omega}|}; ~~~\\mathbf{\\Omega} = [\\nabla \\times \\mathbf{V}]</math>,\nwhere '''V''' is fluid velocity, '''V'''<sub>d</sub> — diffusion velocity, ν — [[Kinematic_viscosity#Kinematic_viscosity|kinematic viscosity]].\nThis theorem shows resemblance with [[Kelvin's circulation theorem]], but it works for viscous flows.\n\nBasing on this theorem, flow region with non-zero circulation is presented with number of domains (small regions with finite volumes), which move with velocity '''u''' and thus their circulation <math>\\gamma</math> remains constant. The actual boundaries of every domain are not tracked, but coordinates of the only tracking point in every domain is saved. Array of domains' coordinates and circulations is known either from [[boundary conditions]] or from [[initial conditions]]. Such a motion results in vorticity evolution and satisfies Navier-Stokes equations.\n\n==Discrete formulas==\n[[File:Calculation of diffusion speed in VVD method.png|thumb|Diffusive vortex-vortex interaction]]\n[[File:Calculation of body diffusion speed in VVD method.png|thumb|Diffusive body-vortex interaction]]\n\nFluid velocity '''V''' in point '''r''' can be calculated with help of [[Biot-savart law]]\n:<math>\\mathbf{V}(\\mathbf{r}) = \\dfrac{1}{2\\pi} \\sum_i \\gamma_i \\cdot \\left[\\mathbf{e}_z \\times \\dfrac{\\mathbf{r}-\\mathbf{r}_i}{(\\mathbf{r}-\\mathbf{r}_i)^2 + \\delta^2}\\right]</math>\nwhere ''i'' indexes domains in flow, '''r'''<sub>i</sub> — tracking point of domain and γ<sub>i</sub> — his circulation.\nδ is a so-called \"radius of discreteness\" — small value that smooths the vortex and helps to get rid of singularity in the domain tracking point.<ref name=vvd_eccm_stability/> It equals to mean distance between domains.\n\nCalculation of diffusion velocity is more difficult<ref name=vvd_dan/><ref name=airfoil_fd/>\n:<math>\\mathbf{V}_d(\\mathbf{r}) = \\nu\\left( \\dfrac{\\mathbf{I}_2(\\mathbf r)}{I_1(\\mathbf r)} + \\dfrac{\\mathbf{I}_3(\\mathbf r)}{2\\pi\\varepsilon^2 - I_0(\\mathbf r)} \\right)</math>\n\nFirst fraction produces vortex-vortex interaction (''i'' — vortex index). \n:<math>\\mathbf{I}_2(\\mathbf r) = \\sum\\limits_i \n\\dfrac{\\mathbf{r}-\\mathbf{r}_i}{\\varepsilon \\left|\\mathbf{r}-\\mathbf{r}_i\\right|}\n\\cdot \\gamma_i \\cdot \\exp(-\\left|\\mathbf{r}-\\mathbf{r}_i\\right|/\\varepsilon)</math>\n:<math>I_1(\\mathbf r) = {\\sum\\limits_i \\gamma_i \\cdot \\exp(-\\left|\\mathbf{r}-\\mathbf{r}_i\\right|/\\varepsilon)}</math>\n\nAnd second fraction represents vortex-boundary repulsion. It helps to calculate ∇Ω near body surface and properly describe boundary layer.\n:<math>\\mathbf{I}_3(\\mathbf r) = {\\sum\\limits_k d\\mathbf S_k\\cdot \\exp(-\\left|\\mathbf{r}-\\mathbf{r}_k\\right|/\\varepsilon)}</math>\n:<math>I_0(\\mathbf r) = {\\varepsilon^2\\sum\\limits_k \\dfrac{\\left|\\mathbf{r}-\\mathbf{r}_k\\right| /\\varepsilon +1}{(\\mathbf{r}-\\mathbf{r}_k)^2}\n\\cdot((\\mathbf{r}-\\mathbf{r}_k) \\cdot d\\mathbf S_k)\\cdot \\exp(-\\left|\\mathbf{r}-\\mathbf{r}_k\\right|/\\varepsilon)}</math>\nHere ''k'' indexes boundary segments, '''r'''<sub>k</sub> — its center, d'''S'''<sub>k</sub> — its [[surface normal|normal]].\n\n==References==\n{{Reflist}}\n\n==External links==\n* [https://www.youtube.com/user/rosikru YouTube channel with some VVD computations]\n\n[[Category:Computational fluid dynamics]]"
    },
    {
      "title": "WAMIT",
      "url": "https://en.wikipedia.org/wiki/WAMIT",
      "text": "'''WAMIT''' is a [[computer program]] for computing wave loads and motions of [[offshore construction|offshore structures]] in waves. It is based on the linear and second-order [[potential theory]]. The velocity potential is solved by means of [[boundary element method|boundary integral equation method]], also known as [[panel method]]. WAMIT has the capability of representing the geometry of the structure by a higher-order method, whereby the potential is represented by continuous [[B-splines]].\n\nWAMIT was developed by researchers at [[Massachusetts Institute of Technology]], hence the acronym WaveAnalysisMIT.<ref>{{Cite book \n  | last1 = Lee | first1 = C.-H.\n  | title = WAMIT Theory Manual\n  | location = \n  | publisher = Massachusetts Institute of Technology\n  |date=October 1995\n  | pages = \n  \n  | isbn = }}</ref> Its first version was launched in 1987. In 1999, WAMIT, Inc. was founded by Chang-Ho Lee and [[J. N. Newman|J. Nicholas Newman]]. Consortiums are held annually to discuss applications and new capabilities of the program.\n\n==References==\n{{reflist}}\n\n==External links==\n*[http://www.wamit.com WAMIT, Inc. web site]\n\n[[Category:Computational fluid dynamics]]\n[[Category:Computer-aided engineering software]]"
    },
    {
      "title": "Wirth Research",
      "url": "https://en.wikipedia.org/wiki/Wirth_Research",
      "text": "{{Use dmy dates|date=January 2017}}\n{{Use British English|date=January 2017}}\n\n{{COI|date=July 2012}}\n{{Infobox company\n| name             = Wirth Research\n| logo             = Wirth Research.png\n| logo_size        = 200px\n| caption          = \n| type             = Engineering\n| traded_as        = Wirth Research Ltd\n| genre            = <!-- Only used with media and publishing companies -->\n| fate             = \n| predecessor      = \n| successor        = \n| foundation       = 2003 <!-- {{Start date|df=yes|YYYY|MM|DD}} -->\n| founder          = [[Nick Wirth|Nicholas Wirth]]\n| defunct          = <!-- {{End date|df=yes|YYYY|MM|DD}} -->\n| location_city    = Bicester, Oxfordshire\n| location_country = England\n| location         = \n| locations        = \n| area_served      = \n| key_people       = \n| industry         = [[LeMans]] [[Le Mans Prototype|LMP]] [[Engineering]] [[Racing]] [[Design]] [[Simulators]] [[F1]]\n| products         = \n| services         = \n| revenue          = \n| operating_income = \n| net_income       = \n| aum              = <!-- Only used with financial services companies -->\n| assets           = \n| equity           = \n| owner            = \n| num_employees    = \n| parent           = \n| divisions        = \n| subsid           = \n| homepage         = {{URL|www.wirthresearch.com}}\n| footnotes        = \n| intl             = \n}}\n\n'''Wirth Research''' is a group of [[engineering]] companies, founded by [[Nick Wirth|Nicholas Wirth]] in 2003, specialising in [[research]], development, design and manufacture for the [[Auto racing|motor racing]] industry and other [[high technology]] sectors.\n\nThe companies use [[virtual engineering]] technologies to enable a completely [[Simulation|simulated]] vehicle design, development and testing process. The group is known for deviating from traditional physical development models; most notably neglecting to use a [[Wind tunnel | wind tunnel]] and instead relying solely upon [[Computational fluid dynamics | computational fluid dynamics]] to design the 2010 [[Virgin Racing]] [[Virgin VR-01|VR-01]] Formula 1 car.<ref>{{cite web|url=http://www.wirthresearch.com |title=Leading experts in computational fluid dynamics and flow simulation |publisher=Wirth Research |date= |accessdate=2014-02-15}}</ref>\n\nThe Wirth Research group have a [http://www.crash.net/indycar/news/172998/1/wirth_partners_with_honda_on_aero_kit.html long-standing partnership] with [[Honda Performance Development|Honda Performance Development Inc (HPD)]] <ref name=\"crash1\">{{cite web|url=http://www.crash.net/indycar/news/172998/1/wirth_partners_with_honda_on_aero_kit.html |title=Wirth partners with Honda on aero kit &#124; IndyCar News |publisher=Crash.net |date=2011-09-13 |accessdate=2014-02-15}}</ref> which is responsible for the design, development and manufacture of the [[Acura ARX-01|ARX sports cars]].<ref>{{cite web|url=http://www.wirthresearch.com |title=Leading experts in computational fluid dynamics and flow simulation |publisher=Wirth Research |date= |accessdate=2014-02-15}}</ref> Wirth Research also provides client IndyCar teams with full technical support.\n\n==Design==\nWirth Research encompasses design disciplines that include:\n\n:* [[Composite material|Composite]] structures\n:* [[Suspension (vehicle)|Suspension]]\n:* [[Transmission (mechanics)|Transmission]]\n:* [[Engine control unit|Electronics and Control]]\n:* [[Hydraulics]]\n:* [[Radiator (engine cooling)|Cooling]], [[Engine lubrication|lubrication]] and [[Electronic control unit|engine ancillaries]]\n:* [[R&D]], component systems and [[Autotesting|whole-vehicle testing]]\n\nWirth Research uses tools provided by [[Siemens| Siemens UGS PLM]] for many of its design activities.\n\n==Computational Fluid Dynamics==\n\nThe company uses ANSYS Fluent solvers for its analysis.\n\n===Aerodynamic design===\n\nThe largest department at Wirth Research, whose [[Computational Fluid Dynamics]] contents are typically evaluated by WR Digital.\n\nWhilst the company is not known for using physical models in the development process, it does use real-world wind-tunnel testing to verify its CFD results.\n\n==Vehicle simulation==\n\nTwo identical simulators are split between HPD's headquarters in Indianapolis and the company's base in Bicester. They are built in partnership with Cruden on a modified 6 degree of freedom motion platform constructed of carbon fibre and presently housing a DW12 Monocoque. The display mode consists of numerous projectors providing a passive stereoscopic 3D 170 degree display of a modified version of the Racer simulation engine.<ref>{{cite web|url=http://www.virtualr.net/wirth-research-simulator-videos |title=Wirth Research Simulator – Videos — VirtualR – Sim Racing News |publisher=Virtualr.net |date=2010-10-11 |accessdate=2014-02-15}}</ref>\n\n==Virtual reality==\n\n[[Simulated environment|Virtual reality]] and [[Augmented Reality]] applications such as [[Emersio]] are developed and used by Wirth Research for assessing ergonomic issues and presenting new ideas in 1:1 scale.\n\n==References==\n{{Reflist}}\n\n[[Category:Racing simulators]]\n[[Category:Motor vehicle manufacturers of England]]\n[[Category:Motor vehicle assembly plants in the United Kingdom]]\n[[Category:Motorsport in England]]\n[[Category:Automotive companies of England]]\n[[Category:Engineering companies of England]]\n[[Category:Sports car manufacturers]]\n[[Category:Sports car racing]]\n[[Category:Computational fluid dynamics]]\n[[Category:Computer-aided engineering]]\n[[Category:Companies based in Oxfordshire]]"
    },
    {
      "title": "Cebeci–Smith model",
      "url": "https://en.wikipedia.org/wiki/Cebeci%E2%80%93Smith_model",
      "text": "The '''Cebeci–Smith model''' is a 0-equation [[eddy viscosity]] model used in [[computational fluid dynamics]] analysis of [[turbulence|turbulent]] [[boundary layer]] flows. The model gives eddy viscosity, <math>\\mu_t</math>, as a function of the local boundary layer velocity profile. The model is suitable for high-speed flows with thin attached boundary-layers, typically present in aerospace applications.  Like the [[Baldwin-Lomax model]], this model is not suitable for cases with large [[flow separation|separated]] regions and significant curvature/rotation effects.  Unlike the [[Baldwin-Lomax model]], this model requires the determination of a boundary layer edge.\n\nThe model was developed by [[Tuncer Cebeci]] and [[Apollo M. O. Smith]], in 1967.\n\n== Equations ==\n\nIn a two-layer model, the boundary layer is considered to comprise two layers: inner (close to the surface) and outer. The eddy viscosity is calculated separately for each layer and combined using:\n\n:<math>\n\\mu_t =\n\\begin{cases}\n{\\mu_t}_\\text{inner} & \\mbox{if } y \\le y_\\text{crossover} \\\\ \n{\\mu_t}_\\text{outer} & \\mbox{if } y > y_\\text{crossover}\n\\end{cases}\n</math>\n\nwhere <math>y_\\text{crossover}</math> is the smallest distance from the surface where <math>{\\mu_t}_\\text{inner}</math> is equal to <math>{\\mu_t}_\\text{outer}</math>.\n\nThe inner-region eddy viscosity is given by:\n\n:<math>\n{\\mu_t}_\\text{inner} = \\rho \\ell^2 \\left[\\left(\n \\frac{\\partial U}{\\partial y}\\right)^2 +\n \\left(\\frac{\\partial V}{\\partial x}\\right)^2\n\\right]^{1/2}\n</math>\n\nwhere\n\n:<math>\n\\ell = \\kappa y \\left( 1 - e^{-y^+/A^+} \\right)\n</math>\n\nwith the von Karman constant <math>\\kappa</math> usually being taken as 0.4, and with\n\n:<math>\nA^+ = 26\\left[1+y\\frac{dP/dx}{\\rho u_\\tau^2}\\right]^{-1/2}\n</math>\n\nThe eddy viscosity in the outer region is given by:\n\n:<math>\n{\\mu_t}_\\text{outer} = \\alpha \\rho U_e \\delta_v^* F_K\n</math>\n\nwhere <math>\\alpha=0.0168</math>, <math>\\delta_v^*</math> is the [[displacement thickness]], given by\n\n:<math>\n\\delta_v^* = \\int_0^\\delta \\left(1 - \\frac{U}{U_e}\\right)\\,dy\n</math>\n\nand ''F''<sub>''K''</sub> is the Klebanoff intermittency function given by\n\n:<math>\nF_K = \\left[1 + 5.5 \\left( \\frac{y}{\\delta} \\right)^6\n  \\right]^{-1}\n</math>\n\n== References ==\n\n* Smith, A.M.O. and Cebeci, T., 1967. ''Numerical solution of the turbulent boundary layer equations''. Douglas aircraft division report DAC 33735\n* Cebeci, T. and Smith, A.M.O., 1974. ''Analysis of turbulent boundary layers''. Academic Press, {{ISBN|0-12-164650-5}}\n* Wilcox, D.C., 1998. ''Turbulence Modeling for CFD''. {{ISBN|1-928729-10-X}}, 2nd Ed., DCW Industries, Inc.\n\n== External links ==\n\n* This article was based on the [http://www.cfd-online.com/Wiki/Cebeci-Smith_model Cebeci Smith model] article in [http://www.cfd-online.com/Wiki CFD-Wiki]\n\n{{DEFAULTSORT:Cebeci-Smith model}}\n[[Category:Turbulence models]]\n[[Category:Fluid dynamics]]\n[[Category:Mathematical modeling]]"
    },
    {
      "title": "Churn turbulent flow",
      "url": "https://en.wikipedia.org/wiki/Churn_turbulent_flow",
      "text": "'''Churn turbulent flow''' is a [[Two-phase flow|two-phase]] gas/liquid [[flow regime]] characterized by a highly-agitated flow where gas [[Bubble (physics)|bubbles]] are sufficient in numbers to both interact with each other and, while interacting, coalesce to form larger distorted bubbles with unique shapes and behaviors in the system. This flow regime is created when there is a large gas fraction in a system with a high gas and low [[liquid]] velocity. It is an important flow regime to understand and model because of its predictive value in [[nuclear reactor]] vessel [[Boiling|boiling flow]].\n\n== Occurrence ==\nA flow in which the number of bubbles is low is called ideally-separated bubble flow. The bubbles don’t interact with each other. As the number of bubbles increase they start colliding each other. A situation then arises where they tend to coalesce to form cap bubbles, and the new flow pattern formed is called churn turbulent flow. The bubbles occurring in such a flow can be classified in small, large, and distorted bubbles. The small bubbles are generally spherical or elliptical and are encountered in a major concentration in the wake of large and distorted bubbles and close to the walls. Large, ellipsoidal or cap bubbles can be found in the core region of the flow as well as the distorted bubbles with a highly deformed interface.\n\nChurn turbulent flow is commonly encountered in industrial applications. A typical example is boiling flow in nuclear reactors.\n\n== Numerical simulation of bubble column flows in churn turbulent regime ==\n\n[[Computational fluid dynamics|Numerical simulations]] of cylindrical bubble columns operating in the churn-turbulent regime have been carried out using a Euler–Euler approach incorporated with the [[K-epsilon turbulence model|RNG k–ε model]] for liquid turbulence{{Citation needed|date=October 2017}}. Several approaches have been carried out, including single-sized bubble modeling, double-sized bubble modeling, and the multiple sizes group modeling (MUSIG).\n\nBreakup mass conserved formulations and [[Coalescence (physics)|coalescence]] rates mass conserved formulation was used in the computation of bubble size distributions. For single size modelling the Schiller–Naumann drag force was used, and for the modelling of MUSIG the Ishii–Zuber [[drag force]] was used. An empirical drag formulation was used for the double size bubble model. The simulation results of time-averaged axial velocity and gas holdup obtained with the three models were compared with reported experimental data in the resulting literature. After the comparison of all the three results it gets very clear that only MUSIG models with some lift force can replicate the measured radial distribution of gas holdup in the fully developed flow regime. The inhomogeneous MUSIG model gives a little better result than other models in the prediction of axial liquid velocity. For all the simulations the RNG k–ε model was used, and the results showed that this version of k–ε model did yield comparatively high rate of turbulence dissipation and high bubble breakup and, hence, a rational bubble size distribution formed. Here the ad hoc manipulation of the breakup rates was ignored. Mutual effects of drag force, mean bubble sizes, and turbulence characteristics profound from the [[simulation]] results. A decrease in the relative velocity between two phases is encounters due to an increase in the drag force, and this could result in decrease in k and ε. Low breakup rates results a large [[Sauter mean diameter|Sauter diameter]] which was directly connected to the dissipation rates of turbulence. Drag force is directly influenced by the change of Sauter diameter.\n\n==References==\n{{Reflist}}\n*Montoya, G.; Liao, Y.; Lucas, D.; Krepper, E.\nAnalysis and Applications of a Two-Fluid Multi-Field Hydrodynamic Model for Churn-Turbulent Flows\n21st International Conference on Nuclear Engineering – ICONE 21. China (2013)\n*Montoya, G.; Baglietto, E.; Lucas, D.; Krepper, E.\nA Generalized Multi-Field Two-Fluid Approach for Treatment of Multi-Scale Interfacial Structures in High Void-Fraction Regimes\nMIT Energy Night 2013. Cambridge, Massachusetts, USA (2013)\n•Montoya, G.; Lucas, D.; Krepper, E.; Hänsch, S.; Baglietto, E.\nAnalysis and Applications of a Generalized Multi-Field Two-Fluid Approach for Treatment of Multi-Scale Interfacial Structures in High Void-Fraction Regimes\n2014 International Congress on Advances in Nuclear Power Plants – ICAPP 2014. USA (2014)\n•Montoya, G.; Baglietto, E.; Lucas, D.; Krepper, E.; Hoehne, T.\nComparative Analysis of High Void Fraction Regimes using an Averaging Euler-Euler Multi-Fluid Approach and a Generalized Two-Phase Flow (GENTOP) Concept\n22nd International Conference on Nuclear Engineering – ICONE 22. Czech Republic (2014)\n*Montoya, G.; Baglietto, E.; Lucas, D.; Krepper, E.\nDevelopment and Analysis of a CMFD Generalized Multi-Field Model for Treatment of Different Interfacial Scales in Churn-Turbulent and Transitional Flows\nCFD4NRS-5 – Application of CFD/CMFD Codes to Nuclear Reactor Safety Design and their Experimental Validation. Switzerland (2014)\n*https://www.hzdr.de/db/!Publications?pSelTitle=18077&pSelMenu=-1&pNid=3016\n*Shuiqing Zhan, Mao Li, Jiemin Zhou, Jianhong YangYiwen Zhou Applied Thermal Engineering 2014, 73, 803–816 [CrossRef]\n*T. T. DeviB. Kumar Thermophysics and Aeromechanics 2014, 21, 365–382 [CrossRef]\n*R.M.A. MasoodA. Delgado Chemical Engineering Science 2014, 108, 154–168 [CrossRef]\n<ref>•\tLijia Xu, Zihong Xia, Xiaofeng Guo, and Caixia Chen Industrial & Engineering Chemistry Research 2014, 53 (12), 4922-4930 [ACS Full Text  ] [PDF (1741 KB)] [PDF w/ Links (526 KB)]</ref>\n*×M. Pourtousi, J.N. SahuP. Ganesan Chemical Engineering and Processing: Process Intensification 2014, 75, 38–47 [CrossRef]\n\n[[Category:Flow regimes]]\n[[Category:Turbulence models]]"
    },
    {
      "title": "Direct numerical simulation",
      "url": "https://en.wikipedia.org/wiki/Direct_numerical_simulation",
      "text": "A '''direct numerical simulation (DNS)'''<ref>Here the origin of the term '''direct numerical simulation''' (see e.g. p.&nbsp;385 in {{cite journal|last=Orszag|first=Steven A.|authorlink=Steven A. Orszag|year=1970|title=Analytical Theories of Turbulence|journal=[[Journal of Fluid Mechanics]] |volume=41|issue=1970|pages=363–386|bibcode = 1970JFM....41..363O |doi = 10.1017/S0022112070000642 }}) owes to the fact that, at that time, there were considered to be just two principal ways of getting '''theoretical''' results regarding turbulence, namely via turbulence theories (like the direct interaction approximation) and '''directly''' from solution of the Navier–Stokes equations.</ref> is a [[simulation]] in [[computational fluid dynamics]] in which the [[Navier–Stokes equations]] are numerically solved without any [[turbulence]] model. This means that the whole range of [[Three-dimensional space|spatial]] and [[time|temporal]] scales of the turbulence must be resolved. All the spatial scales of the turbulence must be resolved in the computational mesh, from the smallest dissipative scales ([[Kolmogorov microscales]]), up to the [[Integral length scale|integral scale]] <math>L</math>, associated with the motions containing most of the kinetic energy. The Kolmogorov scale, <math>\\eta</math>, is given by\n:<math>\\eta=(\\nu^{3}/\\varepsilon)^{1/4}</math>\nwhere <math>\\nu</math> is the kinematic [[viscosity]] and <math>\\varepsilon</math> is the rate of [[kinetic energy]] dissipation. On the other hand, the integral scale depends usually on the spatial scale of the boundary conditions. \n\nTo satisfy these resolution requirements, the number of points <math>N</math> along a given mesh direction with increments <math>h</math>, must be\n:<math>Nh > L,\\,</math>\nso that the integral scale is contained within the computational domain, and also\n:<math>h \\leq \\eta,\\,</math>\nso that the Kolmogorov scale can be resolved.\n\nSince\n:<math>\\varepsilon \\approx {u'}^3/L,</math>\nwhere <math>u'</math> is the [[root mean square]] (RMS) of the [[velocity]], the previous relations imply that a three-dimensional DNS requires a number of mesh points <math>N^{3}</math> satisfying\n\n:<math>N^{3}\\ge \\mathrm{Re}^{9/4} = \\mathrm{Re}^{2.25}</math>\n\nwhere <math>\\mathrm{Re}</math> is the turbulent [[Reynolds number]]:\n:<math>\\mathrm{Re}=\\frac{u'L}{\\nu}.</math>\n\nHence, the memory storage requirement in a DNS grows very fast with the Reynolds number. In addition, given the very large memory necessary, the integration of the solution in time must be done by an explicit method. This means that in order to be accurate, the integration, for most discretization methods, must be done with a time step, <math>\\Delta t</math>, small enough such that a fluid particle moves only a fraction of the mesh spacing <math>h</math> in each step. That is,\n:<math>C = \\frac{u'\\Delta t}{h} < 1</math>\n(<math>C</math> is here the [[Courant–Friedrichs–Lewy condition|Courant number]]). The total time interval simulated is generally proportional to the turbulence time scale <math>\\tau</math> given by\n:<math>\\tau=\\frac{L}{u'}.</math>\n\nCombining these relations, and the fact that <math>h</math> must be of the order of <math>\\eta</math>, the number of time-integration steps must be proportional to <math>L/(C\\eta)</math>. By other hand, from the definitions for <math>\\mathrm{Re}</math>, <math>\\eta</math> and <math>L</math> given above, it follows that \n\n:<math>\\frac{L}{\\eta} \\sim \\mathrm{Re}^{3/4},</math>\n\nand consequently, the number of time steps grows also as a power law of the Reynolds number.\n\nOne can estimate that the number of floating-point operations required to complete the simulation is proportional to the number of mesh points and the number of time steps, and in conclusion, the number of operations grows as <math>\\mathrm{Re}^3</math>.\n\nTherefore, the computational cost of DNS is very high, even at low Reynolds numbers. For the Reynolds numbers encountered in most industrial applications, the computational resources required by a DNS would exceed the capacity of the [[supercomputer|most powerful computers currently available]]. However, direct numerical simulation is a useful tool in fundamental research in turbulence. Using DNS it is possible to perform \"numerical experiments\", and extract from them information difficult or impossible to obtain in the laboratory, allowing a better understanding of the physics of turbulence. Also, direct numerical simulations are useful in the development of turbulence models for practical applications, such as sub-grid scale models for [[large eddy simulation]] (LES) and models for methods that solve the [[Reynolds-averaged Navier–Stokes equations]] (RANS). This is done by means of \"a priori\" tests, in which the input data for the model is taken from a DNS simulation, or by \"a posteriori\" tests, in which the results produced by the model are compared with those obtained by DNS.\n\n==See also==\n* [[Large eddy simulation]]\n* [[Reynolds-averaged Navier–Stokes equations]]\n\n==External links==\n* [http://www.cfd-online.com/Wiki/Direct_numerical_simulation_(DNS) DNS page] at CFD-Wiki\n\n==References==\n<references/>\n\n{{DEFAULTSORT:Direct Numerical Simulation}}\n[[Category:Fluid dynamics]]\n[[Category:Turbulence]]\n[[Category:Turbulence models]]"
    },
    {
      "title": "Filter (large eddy simulation)",
      "url": "https://en.wikipedia.org/wiki/Filter_%28large_eddy_simulation%29",
      "text": "'''Filtering''' in the context of [[large eddy simulation]] (LES) is a mathematical operation intended to remove a range of small scales from the solution to the [[Navier-Stokes equations]].  Because the principal difficulty in simulating turbulent flows comes from the wide range of length and time scales, this operation makes turbulent flow simulation cheaper by reducing the range of scales that must be resolved.  The LES filter operation is low-pass, meaning it filters out the scales associated with high frequencies.\n\n== Homogeneous filters ==\n[[File:DNS Velocity Field.png|thumb|right|200px|A velocity field produced by a [[Direct numerical simulation|direct numerical simulation (DNS)]] of [[homogeneous isotropic turbulence|homogeneous decaying turbulence]].  The domain size is {{math|<var>L</var><sup>3</sup>}}.]]\n[[File:DNS Filtered Velocity Field Small.png|thumb|right|200px|The same DNS velocity field filtered using a [[Filter (large eddy simulation)#Box filter|box filter]] and {{math| &Delta; {{=}} <var>L</var>/32}}]]\n[[File:DNS Filtered Velocity Field Large.png|thumb|right|200px|The same DNS velocity field filtered using a [[Filter (large eddy simulation)#Box filter|box filter]] and {{math| &Delta; {{=}} <var>L</var>/16}}]]\n\n=== Definition in physical space ===\nThe low-pass filtering operation used in LES can be applied to a spatial and temporal field, for example <math>\\phi(\\boldsymbol{x},t)</math>.  The LES filter operation may be spatial, temporal, or both.  The filtered field, denoted with a bar, is defined as:<ref name=\"Sagaut_2006\">{{cite book\n|author=Sagaut, Pierre\n|title=Large Eddy Simulation for Incompressible Flows\n|publisher=Springer\n|year=2006\n|edition=Third\n|isbn=3-540-26344-6 }}</ref><ref name=\"Pope_2000\">{{cite book\n|first=Stephen\n|last=Pope\n|title=Turbulent Flows\n|url=http://www.cambridge.org/catalogue/catalogue.asp?isbn=0521598869\n|publisher=Cambridge University Press\n|year=2000\n|isbn=978-0-521-59886-6 }}\n</ref>\n\n:<math>\n\\overline{\\phi(\\boldsymbol{x},t)} = \\displaystyle{\n\\int_{-\\infty}^{\\infty}} \\int_{-\\infty}^{\\infty} \\phi(\\boldsymbol{r},t^{\\prime}) G(\\boldsymbol{x}-\\boldsymbol{r},t - t^{\\prime}) dt^{\\prime} d \\boldsymbol{r},\n</math>\n\nwhere <math>G</math> is a convolution kernel unique to the filter type used.  This can be written as a convolution operation:\n\n:<math>\n\\overline{\\phi} = G \\star \\phi .\n</math>\n\nThe filter kernel <math>G</math> uses cutoff length and time scales, denoted <math>\\Delta</math> and <math>\\tau_{c},</math> respectively.  Scales smaller than these are eliminated from <math>\\overline{\\phi}.</math>  Using this definition, any field <math>\\phi</math> may be split up into a filtered and sub-filtered (denoted with a prime) portion, as\n\n:<math>\n\\phi = \\bar{\\phi} + \\phi^{\\prime} .\n</math>\n\nThis can also be written as a convolution operation,\n\n:<math>\n\\phi^{\\prime} = \\left( 1 - G \\right) \\star \\phi .\n</math>\n\n=== Definition in spectral space ===\n\nThe filtering operation removes scales associated with high frequencies, and the operation can accordingly be interpreted in [[Frequency domain|Fourier space]].  For a scalar field <math>\\phi(\\boldsymbol{x},t),</math> the [[Fourier transform]] of <math>\\phi</math> is <math>\\hat{\\phi}(\\boldsymbol{k},\\omega),</math> a function of <math>\\boldsymbol{k},</math> the spatial wave number, and <math>\\omega,</math> the temporal frequency.  <math>\\hat{\\phi}</math> can be filtered by the corresponding [[Fourier transform]] of the filter kernel, denoted <math>\\hat{G}(\\boldsymbol{k},\\omega):</math>\n\n:<math>\n\\overline{ \\hat{ \\phi } }(\\boldsymbol{k},\\omega) = \\hat{ \\phi }(\\boldsymbol{k},\\omega) \\hat{G}(\\boldsymbol{k},\\omega)\n</math>\n\nor,\n\n:<math>\n\\overline{ \\hat{ \\phi } } = \\hat{G} \\hat{\\phi} .\n</math>\n\nThe filter width <math>\\Delta</math> has an associated cutoff wave number <math>k_{c},</math> and the temporal filter width <math>\\tau_{c}</math> also has an associated cutoff frequency <math>\\omega_{c}.</math>  The unfiltered portion of <math>\\hat{\\phi}</math> is:\n\n:<math>\n\\hat{\\phi^{\\prime}} = (1 - \\hat{G}) \\hat{\\phi}.\n</math>\n\nThe spectral interpretation of the filtering operation is essential to the filtering operation in large eddy simulation, as the [[Turbulence#Kolmogorov's theory of 1941|spectra of turbulent flows]] is central to LES subgrid-scale models, which reconstruct the effect of the sub-filter scales (the highest frequencies).  One of the challenges in subgrid modeling is to effectively mimic the cascade of kinetic energy from low to high frequencies.  This makes the spectral properties of the implemented LES filter very important to subgrid modeling efforts.\n\n=== Homogeneous filter properties ===\n\nHomogeneous LES filters must satisfy the following set of properties when applied to the Navier-Stokes equations.<ref name=\"Sagaut_2006\" />\n\n;1. Conservation of constants\n\n:The value of a filtered constant must be equal to the constant,\n\n::<math>\n\\overline{a} = a,\n</math>\n\n:which implies,\n\n::<math>\n\\int_{-\\infty}^{\\infty} \\int_{-\\infty}^{\\infty} G( \\boldsymbol{\\xi}, t^{\\prime} ) d^3 \\boldsymbol{\\xi} dt^{\\prime} = 1.\n</math>\n\n;2. Linearity\n\n::<math>\n\\overline{ \\phi + \\psi } = \\overline{\\phi} + \\overline{\\psi}.\n</math>\n\n;3. Commutation with derivatives\n\n::<math>\n\\overline{ \\frac{\\partial \\phi}{\\partial s} } = \\frac{\\partial \\overline{\\phi} }{\\partial s}, \\qquad s = \\boldsymbol{x}, t.\n</math>\n\n:If notation is introduced for operator commutation <math>[f, g]</math> for two arbitrary operators <math>f</math> and <math>g</math>, where\n\n::<math>\n[f, g] \\phi = f \\circ g(\\phi) - g \\circ f(\\phi) = f(g(\\phi)) - g(f(\\phi)),\n</math>\n\n:then this third property can be expressed as\n\n::<math>\n\\left[ G \\star, \\frac{\\partial}{\\partial s} \\right] = 0.\n</math>\n\nFilters satisfying these properties are generally not [[Reynolds operator]]s, meaning, first:\n\n:<math>\n\\begin{array}{rcl}\n\\overline{ \\overline{ \\phi } } &\\neq& \\overline{\\phi}, \\\\\nG \\star G \\star \\phi = G^2 \\star \\phi &\\neq& G \\star \\phi,\n\\end{array}\n</math>\n\nand second,\n\n:<math>\n\\overline{\\phi^{\\prime}} = G \\star (1-G) \\star \\phi \\neq 0 .\n</math>\n\n== Inhomogeneous filters ==\n\nImplementations of filtering operations for all but the simplest flows are inhomogeneous filter operations.  This means that the flow either has non-periodic boundaries, causing problems with certain types of filters, or has a non-constant filter width <math>\\Delta</math>, or both.  This prevents the filter from commuting with derivatives, and the commutation operation leads to several additional error terms:\n\n:<math>\n\\begin{array}{rcl}\n\\left[ \\frac{\\partial}{\\partial \\boldsymbol{x}}, G \\star \\right] \\phi \n&=& \\frac{ \\partial  }{ \\partial \\boldsymbol{x} } \\left( G \\star \\phi \\right) - G \\star \\frac{\\partial \\phi}{\\partial \\boldsymbol{x} } \\\\\n&=& \\frac{ \\partial }{ \\partial \\boldsymbol{x} } \\int_{\\Omega} G( \\boldsymbol{x} - \\boldsymbol{r}, \\Delta(\\boldsymbol{x},t)) \\phi(\\boldsymbol{r},t) d \\boldsymbol{r} - G \\star \\frac{\\partial \\phi}{\\partial \\boldsymbol{x} } \\\\\n&=& \\left( \\frac{ \\partial G }{ \\partial \\Delta } \\star \\phi \\right) \\frac{\\partial \\Delta}{\\partial x} + \\int_{d \\Omega} G(x-r, \\Delta(x,t)) \\phi(r,t) \\boldsymbol{n} dS\n\\end{array},\n</math>\n\nwhere <math>\\boldsymbol{n}</math> is the vector normal to the surface of the boundary <math>\\Omega</math> and <math>d \\Omega.</math><ref name=\"Sagaut_2006\" />\n\nThe two terms both appear due to inhomogeneities.  The first is due to the spatial variation in the filter size <math>\\Delta,</math> while the second is due to the domain boundary.  Similarly, the commutation of the filter <math>G</math> with the temporal derivative leads to an error term resulting from temporal variation in the filter size,\n\n:<math>\n\\left[ \\frac{\\partial}{\\partial t}, G \\star \\right] = \\left( \\frac{\\partial G}{\\partial \\Delta} \\star \\phi \\right) \\frac{\\partial \\Delta}{\\partial t}.\n</math>\n\nSeveral filter operations which eliminate or minimize these error terms have been proposed.{{Citation needed|date=November 2010}}\n\n== Classic large eddy simulation filters ==\n\n{{Expand section|\n* images illustrating the filter shapes in spectral and physical space\n* images showing effect of each filter on turbulent spectra (e.g. using DNS cases pictured above)\n|date=November 2010}}\n\nThere are three filters ordinarily used for spatial filtering in large eddy simulation.  The definition of <math>G(\\boldsymbol{x},t)</math> and <math>\\hat{G}(\\boldsymbol{k},\\omega),</math> and a discussion of important properties, is given.<ref name=\"Pope_2000\" />\n\n=== Box filter ===\n\nThe filter kernel in physical space is given by:\n\n:<math>\nG(\\boldsymbol{x} - \\boldsymbol{r}) = \\begin{cases}\n\\frac{1}{\\Delta}, & \\text{if} \\left| \\boldsymbol{x} - \\boldsymbol{r} \\right| \\leq \\frac{ \\Delta }{ 2 }, \\\\\n0, & \\text{otherwise}.\n\\end{cases}\n</math>\n\nThe filter kernel in spectral space is given by:\n\n:<math>\n\\hat{G}(\\boldsymbol{k}) = \\frac{ \\sin{( \\frac{1}{2} k \\Delta )} }{ \\frac{1}{2} k \\Delta }.\n</math>\n\n=== Gaussian filter ===\n\nThe filter kernel in physical space is given by:\n\n:<math>\nG(\\boldsymbol{x} - \\boldsymbol{r}) = \\left( \\frac{ 6 }{ \\pi \\Delta^{2} } \\right)^{\\frac{1}{2}} \\exp{ \\left( - \\frac{6 (\\boldsymbol{x-r})^2}{\\Delta^2} \\right) }.\n</math>\n\nThe filter kernel in spectral space is given by:\n\n:<math>\n\\hat{G}(\\boldsymbol{k}) = \\exp{ \\left( -\\frac{ \\boldsymbol{k}^2 \\Delta^2 }{ 24 } \\right) }.\n</math>\n\n=== Sharp spectral filter ===\n\nThe filter kernel in physical space is given by:\n\n:<math>\nG(\\boldsymbol{x} - \\boldsymbol{r}) = \\frac{ \\sin{( \\pi (\\boldsymbol{x-r}) / \\Delta )} }{ \\pi (\\boldsymbol{x-r}) }.\n</math>\n\nThe filter kernel in spectral space is given by:\n\n:<math>\n\\hat{G}(\\boldsymbol{k}) = H \\left( k_c - \\left| k \\right| \\right), \\qquad k_c = \\frac{ \\pi }{ \\Delta }.\n</math>\n\n== See also ==\n\n* [[Computational fluid dynamics]]\n* [[Filter (signal processing)]]\n* [[Fluid mechanics]]\n* [[Fourier transform]]\n* [[Frequency domain]]\n* [[Large eddy simulation]]\n* [[Turbulence]]\n\n==References==\n\n<references />\n\n{{DEFAULTSORT:Filter (Large Eddy Simulation)}}\n[[Category:Turbulence models]]"
    },
    {
      "title": "K-epsilon turbulence model",
      "url": "https://en.wikipedia.org/wiki/K-epsilon_turbulence_model",
      "text": "'''K-epsilon (k-ε) turbulence model''' is the most common [[Mathematical model|model]] used in [[Computational Fluid Dynamics]] (CFD) to simulate mean flow characteristics for [[turbulence|turbulent]] flow conditions. It is a two equation model that gives a general description of [[turbulence]] by means of two [[Partial differential equation|transport equations]] (PDEs). The original impetus for the K-epsilon model was to improve the [[Turbulence modeling|mixing-length model]], as well as to find an alternative to algebraically prescribing turbulent length scales in moderate to high complexity flows.<ref>{{citation |url=http://www.cfd-online.com/Wiki/K-epsilon_models| title=K-epsilon models}}</ref>\n*The first transported variable is the turbulence kinetic energy (k). \n*The second transported variable is the rate of dissipation of turbulence energy (ε).\n\n==Principle==\nUnlike earlier [[turbulence]] models, k-ε model focuses on the mechanisms that affect the turbulent kinetic energy. The [[mixing length model]] lacks this kind of generality.<ref name=\"fvmethod\">{{cite book |url=https://books.google.com/books?id=RvBZ-UMpGzIC |title= An Introduction to Computational Fluid Dynamics: The Finite Volume Method|author=Henk Kaarle Versteeg, Weeratunge Malalasekera |publisher=Pearson Education Limited |year=2007 |isbn=9780131274983}}</ref> The underlying assumption of this model is that the turbulent viscosity is [[Isotropy|isotropic]], in other words, the ratio between [[Reynolds stress]] and mean [[Strain rate|rate of deformations]] is the same in all directions.\n\n==Standard k-ε turbulence model==\nThe exact k-ε equations contain many unknown and unmeasurable terms. For a much more practical approach, the standard k-ε [[turbulence]] model (Launder and Spalding, 1974<ref>{{cite journal | last1 = Launder | first1 = B.E. | last2 = Spalding | first2 = D.B. | date = March 1974 | title = The numerical computation of turbulent flows | journal = Computer Methods in Applied Mechanics and Engineering | volume = 3 | issue = 2 | pages = 269–289 | doi = 10.1016/0045-7825(74)90029-2 }}</ref>) is used which is based on our best understanding of the relevant processes, thus minimizing unknowns and presenting a set of equations which can be applied to a large number of turbulent applications.\n\nFor turbulent kinetic energy  k<ref name=\"versteeg2007introduction\">{{cite book | last1 = Versteeg | first1 = Henk Kaarle | last2 = Malalasekera | first2 = Weeratunge | title = An introduction to Computational Fluid Dynamics: The Finite Volume Method | date = 2007 | publisher = Pearson Education }}</ref>\n:<math>\\frac{\\partial (\\rho k)}{\\partial t}+ \\frac {\\partial (\\rho k u_i)}{\\partial x_i}=\\frac {\\partial}{\\partial x_j}\\left[\\frac {\\mu_t}{\\sigma_k}\\frac {\\partial k}{\\partial x_j}\\right]+2{\\mu_t}{E_{ij}}{E_{ij}}-\\rho \\varepsilon</math>\n\nFor dissipation  <math>\\varepsilon</math><ref name=\"versteeg2007introduction\" />\n:<math> \\frac{\\partial (\\rho \\varepsilon)}{\\partial t}+ \\frac{\\partial (\\rho \\varepsilon u_i)}{\\partial x_i} = \\frac {\\partial}{\\partial x_j}\\left[\\frac {\\mu_t}{\\sigma_\\varepsilon}\\frac {\\partial \\varepsilon}{\\partial x_j}\\right] + C_{1 \\varepsilon} \\frac{\\varepsilon}{k} 2{\\mu_t}{E_{ij}}{E_{ij}}- C_{2 \\varepsilon } \\rho \\frac{\\varepsilon ^2}{k}</math>\n{| class=\"wikitable\"\n|-\n|Rate  of  change  of  k or ε + Transport  of k or ε by  [[convection]] = Transport of k or ε by [[diffusion]] + Rate of production of k or ε - Rate of destruction of k or ε\n|}\nwhere\n:<math> u_i </math> represents velocity component in corresponding direction\n\n:<math> E_{ij} </math> represents component of [[Strain rate|rate of deformation]]\n\n:<math> \\mu_t </math> represents [[Turbulence modeling|eddy viscosity]]\n\n:<math> \\mu _t = \\rho C _{\\mu} \\frac{k^2}{\\varepsilon}</math>\n\nThe equations also consist of some adjustable constants <math> \\sigma_k </math>, <math> \\sigma_{\\varepsilon} </math> , <math> C_{1\\varepsilon} </math> and <math> C_{2\\varepsilon} </math>. The values of these constants have been arrived at by numerous iterations of [[Curve fitting|data fitting]] for a wide range of turbulent flows. These are as follows:<ref name=\"fvmethod\" />\n\n<br> <math> C_{\\mu} = 0.09 </math> {{spaces|10}} <math> \\sigma_k = 1.00 </math> {{spaces|10}} <math> \\sigma_{\\varepsilon} = 1.30 </math> {{spaces|10}} <math> C_{1\\varepsilon} = 1.44 </math> {{spaces|10}} <math> C_{2\\varepsilon} = 1.92 </math>\n\n==Applications==\nThe k-ε model has been tailored specifically for [[Plane (geometry)|planar]] shear layers<ref>[http://www.thermopedia.com/content/1118/?tid=104&sn=1159 usage of k-e to model shear layers]</ref> and recirculating flows.<ref>[http://samlab.epfl.ch/page-15502-en.html usage of k-e approach for modelling recirculating flows]</ref> This model is the most widely used and validated [[turbulence]] model with applications ranging from industrial to environmental flows, which explains its popularity. It is usually useful for free-shear layer flows with relatively small pressure [[gradient]]s as well as in confined flows where the [[Reynolds stress|Reynolds shear stresses]] are most important.<ref>{{citation |url=http://www.innovative-cfd.com/turbulence-model.html |title=The Turbulence Model Can Make a Big Difference in Your Results}}</ref> It can also be stated as the simplest [[turbulence]] model  for which only [[Initial value problem|initial]] and/or [[Boundary value problem|boundary conditions]] needs to be supplied.\n\nHowever it is more expensive in terms of memory than the [[Turbulence modeling|mixing length model]] as it requires two extra PDEs. This model would be an inappropriate choice for problems such as inlets and [[Gas compressor|compressors]] as accuracy has been shown experimentally to be reduced for flows containing large adverse pressure [[gradient]]s{{citation needed|reason=Why?|date=August 2016}}. The k-ε model also performs poorly in a variety of important cases such as unconfined flows,<ref>{{citation |title=Turbulent Secondary Flows |author=P Bradshaw |journal=Annual Review of Fluid Mechanics |year=1987 |doi=10.1146/annurev.fl.19.010187.000413 |volume=19 |pages=53–74}}</ref> curved boundary layers, [[Taylor–Couette flow|rotating flows]] and flows in non-circular ducts<ref>{{citation |title=Secondary Flow in Semi Circular Ducts |author=Larsson, I.A.S., Lindmark, E.M., Lundström, T.S., Nathan, J.G. |journal=Trans. ASME J. Fluids Eng. |year=2011 |doi=10.1115/1.4004991 |volume=133 |pages=101206-101214}}</ref>.\n\n==Other models==\nRealizable k- ε Model: An immediate benefit of the realizable k-ɛ model is that it provides improved predictions for the spreading rate of both planar and round jets. It also exhibits superior performance for flows involving rotation, boundary layers under strong adverse pressure gradients, separation, and recirculation. In virtually every measure of comparison, Realizable k-ɛ demonstrates a superior ability to capture the mean flow of the complex structures.\n\n[[K–omega turbulence model|k-ω Model]]: used when there are wall effects present within the case.\n\n[[Reynolds stress equation model]]: In case of complex turbulent flows, Reynolds stress models are able to provide better predictions.<ref>Pope, Stephen. \"Turbulent Flows\". Cambridge University Press, 2000.</ref> Such flows include turbulent flows with high degrees of anisotropy, significant streamline curvature, flow separation, zones of recirculation and influence of mean rotation effects.\n\n==References==\n{{Reflist}}\n\n==Notes==\n* 'An Introduction to Computational Fluid Dynamics: The Finite Volume Method (2nd Edition)' , H. Versteeg,  W. Malalasekera; Pearson Education Limited; 2007; {{ISBN|0131274988}}\n* 'Turbulence Modeling for CFD' 2nd Ed. , Wilcox C. D. ; DCW Industries ; 1998 ; {{ISBN|0963605100}}\n* 'An introduction to turbulence and its measurement' , Bradshaw, P. ; Pergamon Press ; 1971 ; {{ISBN|0080166210}}\n\n[[Category:Turbulence models]]"
    },
    {
      "title": "K–omega turbulence model",
      "url": "https://en.wikipedia.org/wiki/K%E2%80%93omega_turbulence_model",
      "text": "{{refimprove|date=June 2014}}\n{{Lowercase title}}\n\nIn [[computational fluid dynamics]], the '''k–omega (''k''–ω) turbulence model''' is a common two-equation [[turbulence model]], that is used as a closure for the [[Reynolds-averaged Navier–Stokes equations]] (RANS equations). The model attempts to predict [[turbulence]] by two [[partial differential equations]] for two variables, ''k'' and ω, with the first variable being the [[turbulence kinetic energy]] (''k'') while the second (ω) is the specific rate of [[dissipation]] (of the turbulence kinetic energy ''k'' into internal thermal energy).\n\n==Standard (Wilcox) ''k''–ω turbulence model <ref>{{harvtxt|Wilcox|2008}}</ref>==\n\nThe [[eddy viscosity]] ν<sub>T</sub>, as needed in the RANS equations, is given by: {{nowrap|ν<sub>T</sub> {{=}} ''k''/ω}}, while the evolution of ''k'' and ω is modelled as:\n \n<math>\n\\begin{align}\n& \\frac{\\partial (\\rho k)}{\\partial t} + \\frac{\\partial (\\rho u_j k)}{\\partial x_j} = \\rho P - \\beta^* \\rho \\omega k + \\frac{\\partial}{\\partial x_j} \\left[\\left(\\mu + \\sigma_k \\frac{\\rho k}{\\omega} \\right)\\frac{\\partial k}{\\partial x_j}\\right],\n\\qquad \\text{with } P = \\tau_{ij} \\frac{\\partial u_i}{\\partial x_j}, \n\\\\\n& \\displaystyle \\frac{\\partial (\\rho \\omega)}{\\partial t} + \\frac{\\partial (\\rho u_j \\omega)}{\\partial x_j} = \\frac{\\gamma \\omega}{k} P - \\beta \\rho \\omega^2 + \\frac{\\partial}{\\partial x_j} \\left[ \\left( \\mu + \\sigma_{\\omega} \\frac{\\rho k}{\\omega} \\right) \\frac{\\partial \\omega}{\\partial x_j} \\right] + \\frac{\\rho \\sigma_d}{\\omega} \\frac{\\partial k}{\\partial x_j} \\frac{\\partial \\omega}{\\partial x_j}.\n\\end{align}\n</math>\n\nFor recommendations for the values of the different parameters, see {{harvtxt|Wilcox|2008}}.\n\n==Notes==\n{{Reflist}}\n\n==References==\n* {{citation |title=Formulation of the k–ω Turbulence Model Revisited  |last=Wilcox |first=D. C. |publisher=AIAA Journal |volume=46 |issue=11 |year=2008 |pages=2823–2838 |doi=10.2514/1.36541 |bibcode = 2008AIAAJ..46.2823W }}\n* {{citation| title=Turbulence Modeling for CFD |edition=2nd | last1=Wilcox | first1=D. C. |publisher=DCW Industries |year=1998 |isbn=0963605100 }}\n* {{citation |title=An introduction to turbulence and its measurement |last=Bradshaw |first=P. |author-link=Peter Bradshaw (aeronautical engineer) | publisher=Pergamon Press |year=1971 |isbn=0080166210 }}\n* {{citation |title=An Introduction to Computational Fluid Dynamics: The Finite Volume Method |edition=2nd |first1=H. |last1=Versteeg |first2=W. |last2=Malalasekera |publisher=Pearson Education Limited |year=2007 |isbn=0131274988 }}\n\n==External links==\n* {{citation |url=http://www.cfd-online.com/Wiki/Wilcox%27s_k-omega_model |title=CFD Online Wilcox k–omega turbulence model description |accessdate=May 12, 2014 }}\n\n{{DEFAULTSORT:K-omega turbulence model}}\n[[Category:Turbulence models]]"
    },
    {
      "title": "Reynolds stress equation model",
      "url": "https://en.wikipedia.org/wiki/Reynolds_stress_equation_model",
      "text": "'''Reynolds stress equation model''' ('''RSM'''), also referred to as second moment closures are the most complete classical [[Turbulence modeling|turbulence model]]. In these models, the eddy-viscosity hypothesis is avoided and the individual components of the Reynolds stress tensor are directly computed. These models use the exact Reynolds stress transport equation for their formulation. They account for the directional effects of the Reynolds stresses and the complex interactions in turbulent flows. Reynolds stress models offer significantly better accuracy than eddy-viscosity based turbulence models, while being computationally cheaper than Direct Numerical Simulations (DNS) and Large Eddy Simulations.\n\n== Shortcomings of Eddy-viscosity based models ==\nEddy-viscosity based models like the <math>k-\\epsilon</math> and the <math>k-\\omega</math> models have significant shortcomings in complex, real-life turbulent flows. For instance, in flows with streamline curvature, flow separation, flows with zones of re-circulating flow or flows influenced by mean rotational effects, the performance of these models is unsatisfactory.\n\nSuch one- and two-equation based closures cannot account for the return to isotropy of turbulence,<ref>{{cite journal\n | last = Lumley\n | first = John\n | last2 = Newman\n | first2 = Gary\n | title = The return to isotropy of homogeneous turbulence\n | journal = Journal of Fluid Mechanics\n | volume = 82\n | pages =161–178\n | date =1977\n | doi=10.1017/s0022112077000585\n }}</ref> observed in decaying turbulent flows. Eddy-viscosity based models cannot replicate the behaviour of turbulent flows in the Rapid Distortion limit,<ref>{{cite journal\n | last = Mishra\n | first = Aashwin\n | last2 = Girimaji\n | first2 = Sharath\n | title = Intercomponent energy transfer in incompressible homogeneous turbulence: multi-point physics and amenability to one-point closures\n | journal = Journal of Fluid Mechanics\n | volume = 731\n | pages =639–681\n | date =2013\n | doi=10.1017/jfm.2013.343\n }}</ref> where the turbulent flow essentially behaves as an elastic medium (instead of viscous).\n\n== Reynolds Stress Transport Equation ==\nReynolds Stress equation models rely on the Reynolds Stress Transport equation. The equation for the transport of kinematic [[Reynolds stress]] <math>R_{ij}=\\langle u_{i}^\\prime u_{j}^\\prime\\rangle=-\\tau _{ij}/\\rho</math>  is\n<ref>\n{{cite book\n | title = Computational Fluid Dynamics for Engineers\n | edition = First\n | author = Bengt Andersson , Ronnie Andersson s\n | publisher = Cambridge University Press, New York\n | year = 2012\n | isbn = 9781107018952\n | page = 97\n }}</ref>\n\n   <math>\\frac{DR_{ij}}{Dt} = D_{ij}+ P_{ij}+ \\Pi_{ij}+ \\Omega_{ij}- \\varepsilon_{ij}</math>\n\nRate of change of <math>R_{ij}</math> + Transport of <math>R_{ij}</math> by convection = Transport of <math>R_{ij}</math> by diffusion + Rate of production of <math>R_{ij}</math> + Transport of <math>R_{ij}</math> due to turbulent pressure-strain interactions + Transport of <math>R_{ij}</math> due to rotation + Rate of dissipation of <math>R_{ij}</math>.\n\nThe six partial differential equations above represent six independent [[Reynolds stresses]]. While the Production term (<math>P_{ij}</math>) is closed and does not require modelling, the other terms, like pressure strain correlation (<math>\\Pi_{ij}</math>) and dissipation (<math>\\varepsilon_{ij}</math>), are unclosed and require closure models.\n\n== Production term ==\n\nThe Production term that is used in CFD computations with Reynolds stress transport equations is\n\n    <math>P_{ij}</math> =<math> -\\left (R_{im}\\frac{\\partial U_{j}}{\\partial x_{m}}+R_{jm}\\frac{\\partial U_{i}}{\\partial x_{m}}\\right )</math>\n\nPhysically, the Production term represents the action of the mean velocity gradients working against the Reynolds stresses. This accounts for the transfer of kinetic energy from the mean flow to the fluctuating velocity field. It is responsible for sustaining the turbulence in the flow through this transfer of energy from the large scale mean motions to the small scale fluctuating motions.\n\nThis is the only term that is closed in the Reynolds Stress Transport Equations. It requires no models for its direct evaluation. All other terms in the Reynolds Stress Transport Equations are unclosed and require closure models for their evaluation.\n\n== Rapid Pressure-Strain Correlation term ==\n\nThe rapid pressure-strain correlation term redistributes energy among the Reynolds stresses components. This is dependent on the mean velocity gradient and rotation of the co-ordinate axes. Physically, this arises due to the interaction among the fluctuating velocity field and the mean velocity gradient field. The simplest linear form of the model expression is\n\n<math>\\frac{\\Pi^{R}_{ij}}{k}=C_2 S_{ij} +C_3 (b_{ik}S_{jk}+b_{jk}S_{ik}-\\frac{2}{3}b_{mn}S_{mn}\\delta_{ij})+ C_4 (b_{ik}W_{jk} + b_{jk}W_{ik})</math>\n\nHere <math>b_{ij}=\\frac{\\overline{u_iu_j}}{2k}-\\frac{\\delta_{ij}}{3}</math> is the Reynolds stress anisotropy tensor, <math>S_{ij}</math> is the rate of strain term for the mean velocity field and <math>W_{ij}</math> is the rate of rotation term for the mean velocity field. By convention, <math>C_2, C_3, C_4</math> are the coefficients of the rapid pressure strain correlation model. There are many different models for the rapid pressure strain correlation term that are used in simulations. These include the Launder-Reece-Rodi model,<ref>\n{{cite journal\n  |title=Progress in the development of a Reynolds-stress turbulence closure\n  |author=Launder, Brian Edward and Reece, G Jr and Rodi, W\n  |journal=Journal of Fluid Mechanics\n  |volume=68\n  |number=3\n  |pages=537–566\n  |year=1975\n}}\n</ref> the Speziale-Sarkar-Gatski model,<ref>\n{{cite journal\n  |title=Modelling the pressure--strain correlation of turbulence: an invariant dynamical systems approach\n  |author=Speziale, Charles G and Sarkar, Sutanu and Gatski, Thomas B\n  |journal=Journal of Fluid Mechanics\n  |volume=227\n  |pages=245–272\n  |year=1991\n}}\n</ref> the Hallback-Johanssen model,<ref>\n{{cite journal\n  |title=Modelling of rapid pressure—strain in Reynolds-stress closures\n  |author=Johansson, Arne V and Hallback, Magnus\n  |journal=Journal of Fluid Mechanics\n  |volume=269\n  |pages=143–168\n  |year=1994\n}}\n</ref> the Mishra-Girimaji model,<ref>\n{{cite journal\n  |title=Toward approximating non-local dynamics in single-point pressure--strain correlation closures\n  |author=Mishra, Aashwin A and Girimaji, Sharath S\n  |journal=Journal of Fluid Mechanics\n  |volume=811\n  |pages=168–188\n  |year=2017\n}}\n</ref> besides others.\n\n== Slow Pressure-Strain Correlation term ==\n\nThe slow pressure-strain correlation term redistributes energy among the Reynolds stresses. This is responsible for the return to isotropy of decaying turbulence where it redistributes energy to reduce the anisotropy in the Reynolds stresses. Physically, this term is due to the self-interactions amongst the fluctuating field. The model expression for this term is given as \n<ref>\n{{cite book\n | title = Turbulence and Transition Modelling\n | edition = First\n | author = Magnus Hallback\n | publisher = Kluwer Academic Publishers\n | year = 1996\n | isbn = 978-0792340607\n | page = 117\n }}</ref>\n\n <math>\\Pi_{ij}^{S}=-C_{1}\\frac{\\varepsilon}{k}\\left (R_{ij}-\\frac{2}{3}k\\delta_{ij}\\right )-C_{2}\\left (P_{ij}-\\frac{2}{3}P\\delta_{ij}\\right )</math>\n\nThere are many different models for the slow pressure strain correlation term that are used in simulations. These include the Rotta model \n<ref>\n{{cite journal\n  | title=Statistical theory of nonhomogeneous turbulence. ii\n  | author=Rotta, J\n  | journal=Z. Phys.\n  | volume=131\n  | year=1951\n}}</ref>\n, the Speziale-Sarkar model\n<ref>\n{{cite journal\n  |title=A simple nonlinear model for the return to isotropy in turbulence\n  |author=Sarkar, Sutanu and Speziale, Charles G\n  |journal=Physics of Fluids A: Fluid Dynamics\n  |volume=2,\n  |number=1,\n  |pages=84–93\n  |year=1990\n}}\n</ref>\n, besides others.\n\n== Dissipation term ==\n\nThe traditional modelling of the [[dissipation]] rate tensor <math>\\varepsilon_{\\rm ij}</math> assumes that the small dissipative eddies are isotropic. In this model the dissipation only affects the normal [[Reynolds stresses]].\n<ref>\n{{cite book\n | title = Turbulent Flow: Analysis, Measurement & Prediction\n | author = Peter S. Bernard & James M. Wallace\n | publisher = John Wiley & Sons\n | year = 2002\n | isbn = 978-0471332190\n | page = 324\n }}</ref>\n\n           <math>\\varepsilon_{\\rm ij}</math> = <math>\\frac{2}{3}\\varepsilon\\delta_{ij}</math> or <math>e_{\\rm ij}</math> = 0\n\nwhere <math>\\varepsilon</math> is dissipation rate of turbulent kinetic energy, <math>\\delta_{ij}</math> = 1 when i = j and 0 when i ≠ j and <math>e_{\\rm ij}</math> is the dissipation rate anisostropy defined as <math>e_{ij}</math> = <math>\\frac{\\varepsilon_{ij}}{\\varepsilon}-\\frac{2\\delta_{ij}}{3}</math>.\n\nHowever, as has been shown by e.g. Rogallo,<ref>\n{{cite journal\n  |title=Numerical experiments in homogeneous turbulence\n  |author=Rogallo, R S\n  |journal=NASA TM 81315\n  |volume=\n  |number=\n  |pages=\n  |year=1981\n}}\n</ref>\nSchumann & Patterson,<ref>\n{{cite journal\n  |title=Numerical study of the return of axisymmetric turbulence to isotropy\n  |author=Schumann, U & Patterson, G S\n  |journal=J. Fluid Mech.\n  |volume= 88\n  |number=\n  |pages= 771\n  |year=1978\n}}\n</ref>\nUberoi,<ref>\n{{cite journal\n  |title=Effect of wind-tunnel contraction on free-stream turbulence\n  |author=Uberoi, M S\n  |journal=J. Aero. Sci.\n  |volume= 23\n  |number=\n  |pages= 754\n  |year=1956\n}}\n</ref><ref>\n{{cite journal\n  |title=Equipartition of energy and local isotropy in turbulent flows\n  |author=Uberoi, M S\n  |journal=J. Appl. Phys.\n  |volume= 28\n  |number=\n  |pages= 1165\n  |year=1978\n}}\n</ref>\nLee & Reynolds<ref>\n{{cite journal\n  |title=Numerical experiments on the structure of homogeneous turbulence\n  |author=Lee, M J & Reynolds, W C\n  |journal=Thermosciences Div., Dept. of Mech. Engineering, Standford University, rep. no. TF-24\n  |volume= \n  |number=\n  |pages=\n  |year=1985\n}}\n</ref> and Groth, Hallbäck & Johansson<ref>{{bokref\n | author = Groth, J, Hallbäck, M & Johansson, A V\n | title = Measurement and modelling of anisotropic turbulent flows\n | volume = Advances in Turbulence 2\n | year = 1989\n | publisher = Springer-Verlag Berlin Heidelberg\n | isbn = 978-3-642-83822-4\n | doi = 10.1007/978-3-642-83822-4\n | page = 84\n }}</ref>\nthere exist many situations where this simple model of the dissipation rate tensor is insufficient due to the fact that even the small dissipative eddies are anisotropic. To account for this anisotropy in the dissipation rate tensor Rotta<ref>\n{{cite journal\n  |title=Statistische Theorie nichthomogener Turbulenz I\n  |author=Rotta, J C\n  |journal=Z. Phys.\n  |volume=129\n  |number=\n  |pages=547\n  |year=1951\n}}\n</ref> proposed a linear model relating the anistropy of the dissipation rate stress tensor to the anisotropy of the stress tensor.\n\n          <math>\\varepsilon_{\\rm ij}</math> = <math>\\frac{2}{3}\\varepsilon\\delta_{ij}</math> or <math>e_{\\rm ij}</math> = <math> \\sigma a_{ij}</math>\n\nwhere <math>a_{ij}</math> = <math>\\frac{\\overline{u_iu_j}}{k}-\\frac{2\\delta_{ij}}{3}</math> = <math>2 b_{ij}</math>.\n\nThe parameter <math>\\sigma</math> is assumed to be a function the turbulent Reynolds number, the mean strain rate etc. Physical considerations imply that <math>\\sigma</math> should tend to zero when the turbulent Reynolds number tends to infinity and to unity when the turbulent Reynolds number tends to zero. However, the strong realizability condition implies that <math>\\sigma</math> should be identically equal to 1.\n\nBased on extensive physical and numerical (DNS and EDQNM) experiments in combination with a strong adherence to fundamental physical and mathematical limitations and boundary conditions Groth, Hallbäck and Johansson proposed an improved model for the dissipation rate tensor.<ref>{{bokref\n | author = Hallbäck, M, Groth, J & Johansson, A V\n | title = A Reynolds stress closure for the dissipation in anisotropic turbulent flows\n | volume = Symposium on Turbulent Shear Flows, 7th, Stanford, CA, Aug. 21-23, 1989, Proceedings\n | year = 1989\n | publisher = Stanford University\n}}</ref>\n\n         <math>e_{\\rm ij}</math> = <math>[1+ \\alpha ( \\frac{II_{a}}{2} - \\frac{2}{3})] a_{ij} - \\alpha (a_{\\rm ik}a_{\\rm kj}-\\frac{1}{3}II_{a}\\delta_{\\rm ij})</math>\n\nwhere <math>II_{a}</math> = <math>a_{\\rm ij}a_{\\rm ji}</math> is the second invariant of the tensor <math>a_{\\rm ij}</math> and <math>\\alpha</math> is a parameter that, in principle, could depend on the turbulent Reynolds number, the mean strain rate parameter etc.\n\nHowever, Groth, Hallbäck and Johansson used rapid distortion theory to evaluate the limiting value of <math>\\alpha</math> which turns out to be 3/4.<ref>{{tidskriftsref \n | author = Hallbäck, M, Groth, J & Johansson, A V\n | redaktör = \n | title = An algebraic model for nonisotropic turbulent dissipation rate in Reynolds stress clousers\n | year = 1990\n | journal = Phys. Fluids A\n | volume = 2\n | page = 1859\n | doi = 10.1063/1.857908\n}}</ref><ref>{{bokref\n | author = Groth, J, Hallbäck, M & Johansson, A V\n | title = A nonlinear model for the dissipation rate term in Reynolds stress models\n | volume = Engineering Turbulence Modelling and Experiments: Proceedings of the International Symposium on Engineering Turbulence Modelling and Measurements\n | year = 1990\n | publisher = Elsevier\n | isbn = 978-0444015631\n}}</ref> Using this value the model was tested in DNS-simulations of four different homogeneous turbulent flows. Even though the parameters in the cubic dissipation rate model were fixed through the use of realizability and RDT prior to the comparisons with the DNS data the agreement between model and data was very good in all four cases.\n\nThe main difference between this model and the linear one is that each component of <math>e_{\\rm ij}</math> is influenced by the complete anisotropic state. The benefit of this cubic model is apparent from the case of an irrotational plane strain in which the streamwise component of <math>a_{\\rm ij}</math> is close to zero for moderate strain rates whereas the corresponding component of <math>e_{\\rm ij}</math> is not. Such a behaviour cannot be described by a linear model.<ref>{{bokref\n | author = Hallbäck, M, Groth, J & Johansson, A V\n | title = Anisotropic Dissipation Rate - Implications for Reynolds Stress Models \n | volume = Advances in Turbulence 3\n | year = 1991\n | publisher = Springer, Berlin, Heidelberg\n | isbn = 978-3-642-84401-0\n | doi = 10.1007/978-3-642-84399-0_45\n | page = 414\n }}</ref>\n\n== Diffusion term ==\n\nThe [[mathematical model|modelling]] of [[diffusion]] term <math>D_{ij}</math> is based on the assumption that the rate of transport of Reynolds stresses by diffusion is proportional to the gradients of [[Reynolds stresses]]. This is an application of the concept of the gradient diffusion hypothesis to modeling the effect of spatial redistribution of the Reynolds stresses due to the fluctuating velocity field. The simplest form of <math>D_{ij}</math> that is followed by commercial [[Computational fluid dynamics|CFD]] codes is\n\n <math>D_{ij}</math> = <math>\\frac{\\partial}{\\partial x_{m}}\\left (\\frac{v_{t}}{\\sigma_{k}}\\frac{\\partial R_{ij}}{\\partial x_{m}}\\right )</math> = <math>\\operatorname{div} \\left (\\frac{v_{t}}{\\sigma_{k}}\\nabla(R_{ij})\\right )</math>\nwhere <math>\\upsilon_{t}</math> = <math>C_{\\mu} \\frac{k^2}{\\varepsilon}</math> , <math>\\sigma_{k}</math> = 1.0 and <math>C_{\\mu}</math> = 0.9\n\n== Rotational term ==\n\nThe rotational term is given as\n<ref>\n{{cite book\n | title = An Introduction to Computational Fluid Dynamics\n | edition = Second\n | author = H.Versteeg & W.Malalasekera\n | publisher = Pearson Education Limited\n | year = 2013\n | isbn = 9788131720486\n | page = 96\n }}</ref>\n\n  <math>\\Omega_{ij}=-2\\omega_{k}\\left (R_{jm}e_{ikm}+R_{im}e_{jkm}\\right )</math>\nhere <math>\\omega_{k}</math> is the [[rotation vector]], <math>e_{ijk}</math>=1 if i,j,k are in cyclic order and are different,<math>e_{ijk}</math>=-1 if i,j,k are in anti-cyclic order and are different and  <math>e_{ijk}</math>=0 in case any two indices are same.\n\n== Advantages of RSM ==\n\n1) Unlike the k-ε model which uses an isotropic eddy viscosity, RSM solves all components of the turbulent transport. <br />\n2) It is the most general of all [[turbulence]] models and works reasonably well for a large number of engineering flows.<br />\n3) It requires only the initial and/or [[boundary conditions]] to be supplied.<br />\n4) Since the production terms need not be modeled, it can selectively damp the stresses due to [[buoyancy]], curvature effects etc.\n\n==See also==\n*[[Reynolds Stress]]\n*[[Isotropy]]\n*[[Turbulence Modeling]]\n*[[Eddy (fluid dynamics)|Eddy]]\n*[[k-epsilon turbulence model]]\n\n==See also==\n*[[k-epsilon turbulence model]]\n*[[Mixing length model]]\n\n==References==\n{{reflist}}\n\n==Bibliography==\n*\"Turbulent Flows\", S. B. Pope, Cambridge University Press (2000).\n*\"Modelling Turbulence in Engineering and the Environment: Second-Moment Routes to Closure\", Kemal Hanjalić and Brian Launder, Cambridge University Press (2011).\n\n{{DEFAULTSORT:Reynolds Stress Equation Model}}\n[[Category:Turbulence]]\n[[Category:Turbulence models]]"
    },
    {
      "title": "Spalart–Allmaras turbulence model",
      "url": "https://en.wikipedia.org/wiki/Spalart%E2%80%93Allmaras_turbulence_model",
      "text": "{{Multiple issues|{{context|date=May 2011}}\n{{One source|date=April 2017}}\n{{Unreferenced section|date=April 2017}}\n{{technical|date=May 2011}}}}\n\nThe Spalart–Allmaras model is a one-equation model that solves a modelled transport equation for the kinematic [[Eddy current|eddy]] [[turbulent]] [[viscosity]]. The Spalart–Allmaras model was designed specifically for [[aerospace]] applications involving wall-bounded flows and has been shown to give good results for boundary layers subjected to adverse pressure gradients. It is also gaining popularity in [[turbomachinery]] applications.\n\nIn its original form, the model is effectively a low-[[Reynolds number]] model, requiring the viscosity-affected region of the boundary layer to be properly resolved ( y+ ~1 meshes). In ANSYS FLUENT, the Spalart–Allmaras model has been extended with a y+ -insensitive wall treatment (Enhanced Wall Treatment), which allows the application of the model independent of the near wall y+ resolution.\n\nThe formulation blends automatically from a viscous sublayer formulation to a logarithmic formulation based on y+. On intermediate grids, (1< y+ <30), the formulation maintains its integrity and provides consistent wall shear stress and heat transfer coefficients. While the y+ sensitivity is removed, it still should be ensured that the boundary layer is resolved with a minimum resolution of 10–15 cells.\n\nThe Spalart–Allmaras model was developed for aerodynamic flows. It is not calibrated for general industrial flows, and does produce relatively larger errors for some free shear flows, especially plane and round jet flows. In addition, it cannot be relied on to predict the decay of homogeneous, isotropic turbulence.\n\nIt solves a [[transport equation]] for a viscosity-like variable <math>\\tilde{\\nu}</math>. This may be referred to as the ''Spalart–Allmaras variable''.\n\n== Original model ==\nThe turbulent [[Viscosity|eddy viscosity]] is given by\n\n:<math>\n\\nu_t = \\tilde{\\nu} f_{v1}, \\quad f_{v1} = \\frac{\\chi^3}{\\chi^3 + C^3_{v1}}, \\quad \\chi := \\frac{\\tilde{\\nu}}{\\nu}\n</math>\n\n:<math>\n\\frac{\\partial \\tilde{\\nu}}{\\partial t} + u_j \\frac{\\partial \\tilde{\\nu}}{\\partial x_j} = C_{b1} [1 - f_{t2}] \\tilde{S} \\tilde{\\nu} + \\frac{1}{\\sigma} \\{ \\nabla \\cdot [(\\nu + \\tilde{\\nu}) \\nabla \\tilde{\\nu}] + C_{b2} | \\nabla \\tilde{\\nu} |^2 \\} - \\left[C_{w1} f_w - \\frac{C_{b1}}{\\kappa^2} f_{t2}\\right] \\left( \\frac{\\tilde{\\nu}}{d} \\right)^2 + f_{t1} \\Delta U^2\n</math>\n\n:<math>\n\\tilde{S} \\equiv S + \\frac{ \\tilde{\\nu} }{ \\kappa^2 d^2 } f_{v2}, \\quad f_{v2} = 1 - \\frac{\\chi}{1 + \\chi f_{v1}}\n</math>\n\n:<math>\nf_w = g \\left[ \\frac{ 1 + C_{w3}^6 }{ g^6 + C_{w3}^6 } \\right]^{1/6}, \\quad g = r + C_{w2}(r^6 - r), \\quad r \\equiv \\frac{\\tilde{\\nu} }{ \\tilde{S} \\kappa^2 d^2 }\n</math>\n\n:<math>\nf_{t1} = C_{t1} g_t \\exp\\left( -C_{t2} \\frac{\\omega_t^2}{\\Delta U^2} [ d^2 + g^2_t d^2_t] \\right)\n</math>\n\n:<math>\nf_{t2} = C_{t3} \\exp\\left(-C_{t4} \\chi^2 \\right)\n</math>\n\n:<math>\nS = \\sqrt{2 \\Omega_{ij} \\Omega_{ij}}\n</math>\n\nThe [[rotation]] [[tensor]] is given by\n:<math>\n\\Omega_{ij} = \\frac{1}{2} ( \\partial u_i / \\partial x_j - \\partial u_j / \\partial x_i )\n</math>\nwhere d is the distance from the closest surface and <math>\\Delta U^2</math> is the norm of the difference between the velocity at the trip (usually zero) and that at the field point we are considering.\n\nThe [[Constant (mathematics)|constants]] are\n\n:<math>\n\\begin{matrix}\n\\sigma &=& 2/3\\\\\nC_{b1} &=& 0.1355\\\\\nC_{b2} &=& 0.622\\\\\n\\kappa &=& 0.41\\\\\nC_{w1} &=& C_{b1}/\\kappa^2 + (1 + C_{b2})/\\sigma \\\\\nC_{w2} &=& 0.3 \\\\\nC_{w3} &=& 2 \\\\\nC_{v1} &=& 7.1 \\\\\nC_{t1} &=& 1 \\\\\nC_{t2} &=& 2 \\\\\nC_{t3} &=& 1.1 \\\\\nC_{t4} &=& 2\n\\end{matrix}\n</math>\n\n== Modifications to original model ==\nAccording to Spalart it is safer to use the following values for the last two constants:\n:<math>\n\\begin{matrix}\nC_{t3} &=& 1.2 \\\\\nC_{t4} &=& 0.5\n\\end{matrix}\n</math>\n\nOther models related to the S-A model:\n\nDES (1999) [http://www.cfd-online.com/Wiki/Detached_eddy_simulation_%28DES%29]\n\nDDES (2006)\n\n== Model for compressible flows ==\nThere are two approaches to adapting the model for [[compressible flow]]s. In the first approach, the turbulent dynamic viscosity is computed from\n\n:<math>\n\\mu_t = \\rho \\tilde{\\nu} f_{v1}\n</math>\n\nwhere <math>\\rho</math> is the local density. The [[convective]] terms in the equation for <math>\\tilde{\\nu}</math> are modified to\n\n:<math>\n\\frac{\\partial \\tilde{\\nu}}{\\partial t} + \\frac{\\partial}{\\partial x_j} (\\tilde{\\nu} u_j)= \\mbox{RHS}\n</math>\n\nwhere the [[Sides of an equation|right hand side]] (RHS) is the same as in the original model.\n\n== Boundary conditions ==\nWalls: <math>\\tilde{\\nu}=0</math>\n\nFreestream:\n\nIdeally <math>\\tilde{\\nu}=0</math>, but some solvers can have problems with a zero value, in which case <math>\\tilde{\\nu} \\leq \\frac{\\nu}{2}</math> can be used.\n\nThis is if the trip term is used to \"start up\" the model.  A convenient option is to set <math>\\tilde{\\nu}=5{\\nu}</math> in the [[freestream]].  The model then provides \"Fully Turbulent\" behavior, i.e., it becomes turbulent in any region that contains [[shear stress|shear]].\n\nOutlet: convective outlet.\n\n== References ==\n\n* ''Spalart, P. R. and Allmaras, S. R.'', 1992, '''\"A One-Equation Turbulence Model for Aerodynamic Flows\"''' ''AIAA Paper 92-0439''\n\n== External links ==\n\n* This article was based on the [http://www.cfd-online.com/Wiki/Spalart-Allmaras_model Spalart-Allmaras model] article in [http://www.cfd-online.com/Wiki CFD-Wiki]\n* [http://www.kxcad.net/STAR-CCM/online/138-spalartAllmarasTurbulence-02.html What Are the Spalart-Allmaras Turbulence Models?] from kxcad.net\n* [http://turbmodels.larc.nasa.gov/spalart.html The Spalart-Allmaras Turbulence Model] at NASA's Langley Research Center Turbulence Modelling Resource site\n\n{{DEFAULTSORT:Spalart-Allmaras turbulence model}}\n[[Category:Turbulence models]]"
    },
    {
      "title": "SST (Menter’s Shear Stress Transport)",
      "url": "https://en.wikipedia.org/wiki/SST_%28Menter%E2%80%99s_Shear_Stress_Transport%29",
      "text": "'''SST (Menter’s Shear Stress Transport) turbulence model''' is a widely used and robust two-equation eddy-viscosity turbulence model used in [[Computational Fluid Dynamics]].   The model combines the [[k-omega turbulence model]] and [[K-epsilon turbulence model]] such that the k-omega is used in the inner region of the [[boundary layer]] and switches to the k-epsilon in the free [[shear flow]].\n\n==History==\nThe SST two equation turbulence model was introduced in 1994 by F.R. Menter to deal with the strong [[freestream]] sensitivity of the [[k-omega turbulence model]] and improve the predictions of adverse [[pressure gradient]]s. The formulation of the SST model is based on physical experiments and attempts to predict solutions to typical engineering problems. Over the last two decades the model has been altered to more accurately reflect certain [[flow conditions]].  The Reynold's Averaged [[Turbulence modeling|Eddy-viscosity]] is a [[Fictitious force|pseudo-force]] and not physically present in the system.  The two variables calculated are usually interpreted so k is the [[turbulence kinetic energy]] and omega is the rate of [[dissipation]] of the eddies. \n\n==SST (Menter’s Shear Stress Transport) turbulence model <ref name=\"Menter, 1994\" />==\n\n<math> \\frac{\\partial (\\rho k)}{\\partial t} + \\frac{\\partial (\\rho u_j k)}{\\partial x_j} = P - \\beta^* \\rho \\omega k + \\frac{\\partial}{\\partial x_j} \\left[\\left(\\mu + \\sigma_k \\mu_t \\right)\\frac{\\partial k}{\\partial x_j}\\right] </math>\n\n<math>\n    \\frac{\\partial (\\rho \\omega)}{\\partial t} + \\frac{\\partial (\\rho u_j \\omega)}{\\partial x_j} = \\frac{\\gamma}{\\nu_t}  P - \\beta \\rho \\omega^2 + \\frac{\\partial}{\\partial x_j} \\left[ \\left( \\mu + \\sigma_{\\omega} \\mu_t \\right) \\frac{\\partial \\omega}{\\partial x_j} \\right] + 2(1-F_1) \\frac{\\rho \\sigma_{\\omega 2}}{\\omega} \\frac{\\partial k}{\\partial x_j} \\frac{\\partial \\omega}{\\partial x_j} </math>\n\n==Variable Definition==\n\n<math> P = \\tau_{ij} \\frac{\\partial u_i}{\\partial x_j} </math>\n\n<math> \\tau_{ij} = \\mu_t \\left(2S_{ij} - \\frac{2}{3} \\frac{\\partial u_k}{\\partial x_k} \\delta_{ij} \\right) - \\frac{2}{3} \\rho k \\delta_{ij} </math>\n\n<math> S_{ij} = \\frac{1}{2} \\left( \\frac{\\partial u_i}{\\partial x_j} + \\frac{\\partial u_j}{\\partial x_i} \\right) </math>\n\n<math> \\mu_t = \\frac{\\rho a_1 k}{{\\rm max} (a_1 \\omega, \\Omega F_2)} </math>\n\n<math> \\phi = F_1 \\phi_1 + (1-F_1) \\phi_2  </math>\n\n<math> F_1 = {\\rm tanh} \\left({\\rm arg}_1^4 \\right) </math>\n\n<math> {\\rm arg}_1 = {\\rm min} \\left[ {\\rm max} \\left( \\frac{\\sqrt{k}}{\\beta^*\\omega d}, \\frac{500 \\nu}{d^2 \\omega} \\right) , \\frac{4 \\rho \\sigma_{\\omega 2} k}{{\\rm CD}_{k \\omega} d^2} \\right] </math>\n\n<math>  {\\rm CD}_{k \\omega} = {\\rm max} \\left(2 \\rho \\sigma_{\\omega 2} \\frac{1}{\\omega} \\frac{\\partial k}{\\partial x_j} \\frac{\\partial \\omega}{\\partial x_j}, 10^{-20} \\right) </math>\n\n<math> F_2 = {\\rm tanh} \\left({\\rm arg}_2^2 \\right) </math>\n\n<math> {\\rm arg}_2 = {\\rm max} \\left( 2 \\frac{\\sqrt{k}}{\\beta^* \\omega d}, \\frac{500 \\nu}{d^2 \\omega} \\right) </math>\n\n==Constants==\n===K-W Closure===\n<math> \\sigma_{k1} = 0.85 </math> , \n<math> \\sigma_{w1} = 0.65 </math> , \n<math> \\beta_{1} = 0.075 </math>\n\n===K-e Closure===\n<math> \\sigma_{k2} = 1.00 </math> , \n<math> \\sigma_{w2} = 0.856 </math> , \n<math> \\beta_{2} = 0.0828 </math>\n\n===SST Closure Constants===\n<math> \\beta^* = 0.09 </math> ,\n<math> a_1 = 0.31 </math>\n\n==Boundary and Far Field Conditions==\n\n===Far Field===\n<math> \\frac{U_{\\infty}}{L} < w_{\\rm farfield} < 10 \\frac{U_{\\infty}}{L} </math>\n\n<math> \\frac{10^{-5} U_{\\infty}^2}{Re_L} < k_{\\rm farfield} < \\frac{0.1 U_{\\infty}^2}{Re_L} </math>\n\n===Boundary/Wall Conditions===\n<math> \\omega_{wall} = 10 \\frac{6 \\nu}{\\beta_1 (\\Delta d_1)^2} </math>\n\n<math> k_{wall} = 0 </math>\n\n==Validation with experimental results==\nA good agreement between mass-transfer simulations with experimental data were attained for turbulent flow using the SST two equation turbulence model developed by F.R. Menter,<ref name=\"Colli and Bisang, 2018\" /> and the curvature correction for curved rotating systems.<ref name=\"Colli and Bisang, 2019\" />\n\n==References==\n{{Reflist|colwidth=35em|refs=\n\n\n<ref name=\"Menter, 1994\" >{{Cite journal\n  |title=Two-Equation Eddy-Viscosity Turbulence Models for Engineering Applications\n  |first1=F. R.  |last1=Menter\n  |journal=AIAA Journal\n  |volume=32  |issue=8\n  |pages=1598–1605\n  |date=August 1994\n  |url=https://arc.aiaa.org/doi/abs/10.2514/3.12149?journalCode=aiaaj\n|doi=10.2514/3.12149  }}</ref>\n\n\n\n<ref name=\"Colli and Bisang, 2018\" >{{Cite journal\n  |title=A CFD Study with Analytical and Experimental Validation of Laminar and Turbulent Mass-Transfer in Electrochemical Reactors\n  |first1=A. N.  |last1=Colli\n  |first2=J. M.  |last2=Bisang\n  |journal=Journal of the Electrochemical Society\n  |volume=165  |issue=2\n  |pages=E81–E88\n  |date=January 2018\n  |url=http://jes.ecsdl.org/content/165/2/E81\n|doi=10.1149/2.0971802jes  }}</ref>\n\n<ref name=\"Colli and Bisang, 2019\" >{{Cite journal\n  |title=Time-dependent mass-transfer behaviour under laminar and turbulent flow conditions in rotating electrodes: A CFD study with analytical and experimental validation\n  |first1=A. N.  |last1=Colli\n  |first2=J. M.  |last2=Bisang\n  |journal=International Journal of Heat and Mass Transfer\n  |volume=137  |issue=\n  |pages=835-846\n  |date=July 2019\n  |url=https://www.sciencedirect.com/science/article/pii/S0017931019304508\n|doi=10.1016/j.ijheatmasstransfer.2019.03.152  }}</ref>\n\n}}\n\n==Notes==\n* 'CFD Online Wilcox k-omega turbulence model description'. Accessed May 12, 2014. http://www.cfd-online.com/Wiki/Wilcox%27s_k-omega_model\n* 'An Introduction to Computational Fluid Dynamics: The Finite Volume Method (2nd Edition)', H. Versteeg,  W. Malalasekera; Pearson Education Limited; 2007; {{ISBN|0131274988}}\n* 'Turbulence Modeling for CFD' 2nd Ed., Wilcox C. D. ; DCW Industries ; 1998 ; {{ISBN|0963605100}}\n* 'An introduction to turbulence and its measurement', Bradshaw, P. ; Pergamon Press ; 1971 ; {{ISBN|0080166210}}\n\n{{DEFAULTSORT:SST (Menter's Shear Stress Transport)}}\n[[Category:Turbulence models]]"
    },
    {
      "title": "Transition modeling",
      "url": "https://en.wikipedia.org/wiki/Transition_modeling",
      "text": "'''Transition modeling''' is the use of a [[mathematical model|model]] to predict the change from [[Laminar flow|laminar]] and [[turbulence]] flows in fluids and their respective effects on the overall solution. The complexity and lack of understanding of the underlining physics of the problems makes simulating the interaction between laminar and turbulent flow to be difficult and very case specific.  Transition does have the wide range of turbulence options available for most CFD applications for the following reasons. Transition involves a wide range of scales where the energy and momentum transfer are strong influenced by inertial or non-linear effects that are unique to the simulation. Transition also occurs using different ways, (such as natural or bypass) where modelling all options are difficult. Most CFD code uses RANS where averaging eliminates linear disturbance.<ref>{{citation |title=A selective review of CFD transition models |author=D.Di Pasquale, A.Roma, S.J. Garett |journal=39th AIAA Fluid Dynamics Conference. 22-25 June 2009 }}</ref> \n\n==Common models==\nThe following is a list of commonly employed transition models in modern engineering applications.\n{{div col}}\n*[[Stability theory approach]]\n*[[Intermittency Transport]] \n*[[Laminar Fluctuation Energy Method]]  \n*[[Direct numerical simulation]] \n*[[Large eddy simulation|Large Eddy Simulation]]\n*[[Gamma-Re Transition Model]] \n\t\n{{div col end}}\n\n==References==\n{{Reflist}}\n\n==Notes==\n* 'A selective review of CFD transition models'. Accessed Dec 4, 2014. https://www2.le.ac.uk/departments/mathematics/extranet/staff-material/staff-profiles/sjg50/2009-3812.pdf\n\n[[Category:Aerodynamics]]\n[[Category:Turbulence models]]"
    },
    {
      "title": "Turbulence modeling",
      "url": "https://en.wikipedia.org/wiki/Turbulence_modeling",
      "text": "{{More citations needed|date=November 2016}}\n\n'''Turbulence modeling''' is the construction and use of a [[mathematical model]] to predict the effects of [[turbulence]]. Turbulent flows are commonplace in most real life scenarios, including the flow of blood through the cardiovascular system<ref>{{cite journal\n | last = Sallam\n | first = Ahmed\n | last2 =  Hwang\n | first2 = Ned\n | title = Human red blood cell hemolysis in a turbulent shear flow: contribution of Reynolds shear stresses\n | journal = Biorheology\n | date =1984\n | url = https://content.iospress.com/articles/biorheology/bir21-6-05\n }}</ref>, the airflow over an aircraft wing<ref>{{cite journal\n | last = Rhie\n | first = C\n | last2 =  Chow\n | first2 = Li\n | title = Numerical study of the turbulent flow past an airfoil with trailing edge separation\n | journal = AIAA Journal\n | date =1983\n | url = http://www.academia.edu/download/44716428/rhie1983.pdf\n }}</ref>, the re-entry of space vehicles<ref>{{cite journal\n | last = Reddy\n | first = K\n | last2 =  Silva\n | first2 = D\n | last3 =  Krishnendu\n | first3 = Sinha\n | title = Hypersonic turbulent flow simulation of Fire II reentry vehicle afterbody\n | journal = AIAA Journal\n | date =1983\n | url=http://www.hypersonic-cfd.com/Inhouse_papers/2009/Hypersonic-Turbulent-Flow-Simulation-of-FIRE-II.pdf\n }}</ref>, besides others. In spite of decades of research, there is no analytical theory to predict the evolution of these turbulent flows. The equations governing turbulent flows can only be solved directly for simple cases of flow. For most real life turbulent flows, [[Computational fluid dynamics|CFD simulations]] use turbulent models to predict the evolution of turbulence. These turbulence models are simplified constitutive equations that predict the statistical evolution of turbulent flows<ref>{{cite book |last=Pope |first=Stephen |date=2000 |title=Turbulent Flows}}</ref>.\n\n==Closure problem==\n\nThe [[Navier–Stokes equations]] govern the velocity and pressure of a fluid flow. In a turbulent flow, each of these quantities may be decomposed into a mean part and a fluctuating part. Averaging the equations gives the [[Reynolds-averaged Navier–Stokes equations|Reynolds-averaged Navier–Stokes (RANS) equations]], which govern the mean flow. However, the nonlinearity of the Navier–Stokes equations means that the velocity fluctuations still appear in the RANS equations, in the nonlinear term <math>-\\rho \\overline{v_i^\\prime v_j^\\prime}</math> from the convective acceleration. This term is known as the [[Reynolds stress]], <math>R_{ij}</math>.<ref>{{cite book|last=Andersson|first=Bengt|title=Computational fluid dynamics for engineers|date=2012|publisher=Cambridge University Press|location=Cambridge|isbn=978-1-107-01895-2|page=83|display-authors=etal}}</ref> Its effect on the mean flow is like that of a stress term, such as from pressure or viscosity.\n\nTo obtain equations containing only the mean velocity and pressure, we need to close the RANS equations by modelling the Reynolds stress term <math>R_{ij}</math> as a function of the mean flow, removing any reference to the fluctuating part of the velocity. This is the ''closure problem''.\n\n==Eddy viscosity==\n[[Joseph Valentin Boussinesq]] was the first to attack the closure problem<ref>{{cite book|last=Boussinesq|first=Joseph|title=Boussinesq, J. (1903). Thōrie analytique de la chaleur mise en harmonie avec la thermodynamique et avec la thōrie mc̄anique de la lumi_re: Refroidissement et c̄hauffement par rayonnement, conductibilit ̄des tiges, lames et masses cristallines, courants de convection, thōrie mc̄anique de la lumi_re|date=1903|publisher=Gauthier-Villars}}</ref>, by introducing the concept of [[Viscosity#Eddy viscosity|eddy viscosity]]. In 1877 Boussinesq proposed relating the turbulence stresses to the mean flow to close the system of equations. Here the Boussinesq hypothesis is applied to model the Reynolds stress term. Note that a new proportionality constant <math>\\nu_t > 0</math>, the turbulence eddy viscosity, has been introduced. Models of this type are known as eddy viscosity models or EVM's.\n\n:<math>-\\overline{v_i^\\prime v_j^\\prime} = \\nu_t\\left (\\frac{\\partial\\overline{v_i}}{\\partial x_j}+\\frac{\\partial\\overline{v_j}}{\\partial x_i} \\right )-\\frac{2}{3}k \\delta_{ij}</math>\n:Which can be written in shorthand as\n:<math>-\\overline{v_i^\\prime v_j^\\prime} = 2\\nu_t S_{ij}-\\frac{2}{3}k\\delta_{ij}</math>\n:where <math>S_{ij}</math> is the [[Reynolds-averaged Navier–Stokes equations#Derivation of RANS equations|mean rate of strain tensor]]\n:<math>\\nu_t</math> is the turbulence eddy viscosity\n:<math>k = \\frac{1}{2}\\overline{v_i' v_i'}</math> is the [[turbulence kinetic energy]]\n:and <math>\\delta_{ij}</math> is the [[Kronecker delta]].\n\nIn this model, the additional turbulence stresses are given by augmenting the [[Molecule|molecular]] viscosity with an eddy viscosity.<ref>{{citation |url=https://books.google.com/books?id=edy-vDzifvAC&pg=PA6 |title=Advances in Hypersonics: Modeling hypersonic flows |author1=John J. Bertin |author2=Jacques Periaux |author3=Josef Ballmann }}</ref> This can be a simple constant eddy viscosity (which works well for some free [[Shear (fluid)|shear]] flows such as axisymmetric jets, 2-D jets, and mixing layers).\n\n==Prandtl's mixing-length concept==\nLater, [[Ludwig Prandtl]] introduced the additional concept of the mixing length<ref>{{cite journal |last=Prandtl |first1=Ludwig  |date=1925 |title=Bericht uber Untersuchungen zur ausgebildeten Turbulenz  |journal=Zs. angew. Math. Mech. |volume=2 }}</ref>, along with the idea of a [[boundary layer]]. For wall-bounded turbulent flows, the eddy viscosity must vary with distance from the wall, hence the addition of the concept of a 'mixing length'. In the simplest wall-bounded flow model, the eddy viscosity is given by the equation:\n\n: <math>\\nu_t = \\left|\\frac{\\partial u}{\\partial y}\\right|l_m^2</math>\n\n:where:\n\n:<math>\\frac{\\partial u}{\\partial y}</math> is the partial derivative of the streamwise velocity (u) with respect to the wall normal direction (y);\n\n:<math>l_m</math> is the mixing length.\n\nThis simple model is the basis for the \"[[law of the wall]]\", which is a surprisingly accurate model for wall-bounded, attached (not separated) flow fields with small [[pressure gradient]]s.\n\nMore general [[:Category:Turbulence models|turbulence models]] have evolved over time, with most modern turbulence models given by [[field equation]]s similar to the [[Navier–Stokes equations]].\n\n==Smagorinsky model for the sub-grid scale eddy viscosity==\n[[Joseph Smagorinsky]] was the first who proposed a formula for the eddy viscosity in Large Eddy Simulation models<ref>{{cite journal |last1= Smagorinsky|first1= Joseph |date=1963 |title= Smagorinsky, Joseph. \"General circulation experiments with the primitive equations: I. The basic experiment |journal= Monthly Weather Review|volume=91 |issue=3 }}</ref>, based on the local derivatives of the velocity field and the local grid size:\n\n:<math>\\nu_t = \\Delta x \\Delta y \\sqrt{\\left(\\frac{\\partial u}{\\partial x}\\right)^2 + \\left(\\frac{\\partial v}{\\partial y}\\right)^2 + \\frac{1}{2}\\left(\\frac{\\partial u}{\\partial y} + \\frac{\\partial v}{\\partial x}\\right)^2}</math>\n\nIn the context of [[Large eddy simulation|Large Eddy Simulation]], turbulence modeling refers to the need to parameterize the subgrid scale stress in terms of features of the filtered velocity field. This field is called [http://www.scholarpedia.org/article/Turbulence:_Subgrid-Scale_Modeling subgrid-scale modeling].\n\n==Spalart–Allmaras, ''k''–ε and ''k''–ω models==\nThe Boussinesq hypothesis is employed in the [[Spalart–Allmaras turbulence model|Spalart–Allmaras]] (S–A), [[k-epsilon turbulence model|''k''–ε]] (''k''–epsilon), and [[k-omega turbulence model|''k''–ω]] (''k''–omega) models and offers a relatively low cost computation for the turbulence viscosity <math>\\nu_t</math>. The S–A model uses only one additional equation to model turbulence viscosity transport, while the ''k''–ε and ''k''–ω models use two.\n\n==Common models==\nThe following is a brief overview of commonly employed models in modern engineering applications.\n{{div col}}\n* [[Spalart–Allmaras turbulence model|Spalart–Allmaras (S–A)]] \nThe Spalart–Allmaras model<ref>{{cite journal\n | last = Spalart\n | first = P.\n | last2 = Allmaras\n | first2 = S.\n | title = A one-equation turbulence model for aerodynamic flows\n | journal = 30th aerospace sciences meeting and exhibit, AIAA\n | date =1992\n }}</ref> is a one-equation model that solves a modelled transport equation for the kinematic eddy turbulent viscosity. The Spalart–Allmaras model was designed specifically for aerospace applications involving wall-bounded flows and has been shown to give good results for boundary layers subjected to adverse pressure gradients. It is also gaining popularity in turbomachinery applications.{{Citation needed|date=April 2017}}\n\n* [[k-epsilon turbulence model|''k''–ε (''k''–epsilon)]] \nK-epsilon (k-ε) turbulence model<ref>{{cite journal\n | last = Hanjalic\n | first = K.\n | last2 = Launder\n | first2 = B.\n | title = A Reynolds stress model of turbulence and its application to thin shear flows\n | journal = Journal of Fluid Mechanics\n | date =1972\n | url = https://www.researchgate.net/profile/Kemal_Hanjalic/publication/233832584_Hanjalic-Launder_JFM_Vol52_1972/links/09e4150bf2f2d8396e000000/Hanjalic-Launder-JFM-Vol52-1972.pdf\n }}</ref>is the most common model used in computational fluid dynamics (CFD) to simulate mean flow characteristics for turbulent flow conditions. It is a two-equation model which gives a general description of turbulence by means of two transport equations (PDEs). The original impetus for the K-epsilon model was to improve the mixing-length model, as well as to find an alternative to algebraically prescribing turbulent length scales in moderate to high complexity flows.\n\n* [[k-omega turbulence model|''k''–ω (''k''–omega)]]\nIn computational fluid dynamics, the k–omega (k–ω) turbulence model<ref>{{cite journal\n | last = Wilcox\n | first = D. C.\n | title = Formulation of the k-omega Turbulence Model Revisited\n | journal = AIAA Journal\n | date =2008\n }}</ref> is a common two-equation turbulence model that is used as a closure for the Reynolds-averaged Navier–Stokes equations (RANS equations). The model attempts to predict turbulence by two partial differential equations for two variables, k and ω, with the first variable being the turbulence kinetic energy (k) while the second (ω) is the specific rate of dissipation (of the turbulence kinetic energy k into internal thermal energy).\n\n* [[SST (Menter’s Shear Stress Transport)]]\nSST (Menter's shear stress transport) turbulence model<ref>{{cite journal\n | last = Menter\n | first = F. R.\n | title = Two-Equation Eddy-Viscosity Turbulence Models for Engineering Applications\n | journal = AIAA Journal\n | date =1994\n | url = http://www.academia.edu/download/54560714/1._Two_Equation_Eddy_Viscosity_Turbulence_Models_for_Engineering.pdf\n }}</ref> is a widely used and robust two-equation eddy-viscosity turbulence model used in computational fluid dynamics. The model combines the k-omega turbulence model and K-epsilon turbulence model such that the k-omega is used in the inner region of the boundary layer and switches to the k-epsilon in the free shear flow.\n\n* [[Reynolds stress equation model]]\nThe Reynolds stress equation model (RSM), also referred to as second moment closure model<ref>{{cite book |last1= Hanjalić  |first1=Hanjalić  |last2=Launder |first2=Brian |date=2011 |title=Modelling Turbulence in Engineering and the Environment: Second-Moment Routes to Closure}} </ref>, is the most complete classical turbulence modelling approach. Popular eddy-viscosity based models like the [[k-epsilon turbulence model|''k''–ε (''k''–epsilon)]] model and the [[k-omega turbulence model|''k''–ω (''k''–omega)]] models have significant shortcomings in complex engineering flows. This arises due to the use of the eddy-viscosity hypothesis in their formulation. For instance, in flows with high degrees of anisotropy, significant streamline curvature, flow separation, zones of recirculating flow or flows influenced by rotational effects, the performance of such models is unsatisfactory.<ref>{{cite journal\n | last = Mishra\n | first = Aashwin\n | last2 = Girimaji\n | first2 = Sharath\n | title = Intercomponent energy transfer in incompressible homogeneous turbulence: multi-point physics and amenability to one-point closures\n | journal = Journal of Fluid Mechanics\n | volume = 731\n | pages =639–681\n | date =2013\n | doi=10.1017/jfm.2013.343\n | bibcode =2013JFM...731..639M\n }}</ref> In such flows, Reynolds stress equation models offer much better accuracy.<ref>Pope, Stephen. \"Turbulent Flows\". Cambridge University Press, 2000.</ref>\n\nEddy viscosity based closures cannot account for the return to isotropy of turbulence,<ref>{{cite journal\n | last = Lumley\n | first = John\n | last2 = Newman\n | first2 = Gary\n | title = The return to isotropy of homogeneous turbulence\n | journal = Journal of Fluid Mechanics\n | volume = 82\n | pages =161–178\n | date =1977\n | doi=10.1017/s0022112077000585\n | bibcode =1977JFM....82..161L\n }}</ref> observed in decaying turbulent flows. Eddy-viscosity based models cannot replicate the behaviour of turbulent flows in the Rapid Distortion limit,<ref>{{cite journal\n | last = Mishra\n | first = Aashwin\n | last2 = Girimaji\n | first2 = Sharath\n | title = Intercomponent energy transfer in incompressible homogeneous turbulence: multi-point physics and amenability to one-point closures\n | journal = Journal of Fluid Mechanics\n | volume = 731\n | pages =639–681\n | date =2013\n | doi=10.1017/jfm.2013.343\n | bibcode =2013JFM...731..639M\n }}</ref> where the turbulent flow essentially behaves like an elastic medium<ref>{{cite book |last1=Sagaut |first1=Pierre  |last2=Cambon |first2=Claude |date=2008 |title=Homogeneous Turbulence Dynamics}}</ref>.\n\n{{div col end}}\n\n==References==\n\n===Notes===\n{{reflist}}\n\n===Other===\n*  Townsend, A.A. (1980) \"The Structure of Turbulent Shear Flow\" 2nd Edition (Cambridge Monographs on Mechanics), {{ISBN|0521298199}}\n* Bradshaw, P. (1971) \"An introduction to turbulence and its measurement\" (Pergamon Press), {{ISBN|0080166210}}\n* Wilcox C. D., (1998), \"Turbulence Modeling for CFD\" 2nd Ed., (DCW Industries, La Cañada), {{ISBN|0963605100}}\n\n[[Category:Turbulence]]\n[[Category:Turbulence models]]"
    },
    {
      "title": "Two-dimensional point vortex gas",
      "url": "https://en.wikipedia.org/wiki/Two-dimensional_point_vortex_gas",
      "text": "The '''two-dimensional point vortex gas''' is a discrete particle model used to study [[Turbulence modeling|turbulence]] in two-dimensional [[ideal fluid]]s. The '''two-dimensional guiding-center plasma''' is a completely equivalent model used in plasma physics.\n\n==General setup==\nThe model is a [[Hamiltonian system]] of ''N'' points in the two-dimensional plane executing the motion\n:<math>k_i\\frac{dx_i}{dt} = \\frac{\\partial H}{\\partial y_i},\\qquad k_i\\frac{dy_i}{dt} = -\\frac{\\partial H}{\\partial x_i},</math>\n\n(In the confined version of the problem, the logarithmic potential is modified.)\n\n==Interpretations==\nIn the point-vortex gas interpretation, the particles represent either point [[vortex|vortices]] in a two-dimensional fluid, or parallel line vortices in a three-dimensional fluid. The constant ''k''<sub>''i''</sub> is the [[circulation (fluid dynamics)|circulation]] of the fluid around the ''i''th vortex. The Hamiltonian ''H'' is the interaction term of the fluid's [[integrated kinetic energy]]; it may be either positive or negative. The equations of motion simply reflect the drift of each vortex's position in the velocity field of the other vortices.\n\nIn the guiding-center plasma interpretation, the particles represent long filaments of charge parallel to some external magnetic field. The constant ''k''<sub>''i''</sub> is the linear [[charge density]] of the ''i''th filament. The Hamiltonian ''H'' is just the two-dimensional [[Coulomb potential]] between lines. The equations of motion reflect the [[guiding center]] [[drift (plasma physics)|drift]] of the charge filaments, hence the name.\n\n==See also==\n*[[List of plasma (physics) articles]]\n\n==Notes==\n{{reflist}}\n\n==References==\n*{{cite journal |author=Eyink, Gregory |author2=Katepalli Sreenivasan |last-author-amp=yes |title=Onsager and the theory of hydrodynamic turbulence |journal=Reviews of Modern Physics |volume=78 |issue=1 |date=January 2006 |pages=87–135 |doi=10.1103/RevModPhys.78.87 |bibcode=2006RvMP...78...87E|citeseerx=10.1.1.516.6219 }}\n\n[[Category:Turbulence models]]\n[[Category:Plasma physics]]"
    },
    {
      "title": "Domain decomposition methods",
      "url": "https://en.wikipedia.org/wiki/Domain_decomposition_methods",
      "text": "[[File:Ddm original logo.png|thumb|Domain decomposition methods]]\n\nIn [[mathematics]], [[numerical analysis]], and [[numerical partial differential equations]], '''domain decomposition methods''' solve a [[boundary value problem]] by splitting it into smaller boundary value problems on subdomains and iterating to coordinate the solution between adjacent subdomains. A [[coarse problem]] with one or few unknowns per subdomain is used to further coordinate the solution between the subdomains globally. The problems on the subdomains are independent, which makes domain decomposition methods suitable for [[parallel computing]]. Domain decomposition methods are typically used as [[preconditioner]]s for [[Krylov space]] [[iterative method]]s, such as the [[conjugate gradient method]] or [[GMRES]].\n\nIn overlapping domain decomposition methods, the subdomains overlap by more than the interface. Overlapping domain decomposition methods include the [[Schwarz alternating method]] and the [[additive Schwarz method]]. Many domain decomposition methods can be written and analyzed as a special case of the [[abstract additive Schwarz method]].\n\nIn non-overlapping methods, the subdomains intersect only on their interface. In primal methods, such as [[Balancing domain decomposition]] and [[BDDC]], the continuity of the solution across subdomain interface is enforced by representing the value of the solution on all neighboring subdomains by the same unknown. In dual methods, such as [[FETI]], the continuity of the solution across the subdomain interface is enforced by [[Lagrange multiplier]]s. The [[FETI-DP]] method is hybrid between a dual and a primal method.\n\nNon-overlapping domain decomposition methods are also called '''iterative substructuring methods'''.\n\n[[Mortar method]]s are discretization methods for partial differential equations, which use separate discretization on nonoverlapping subdomains. The meshes on the subdomains do not match on the interface, and the equality of the solution is enforced by Lagrange multipliers, judiciously chosen to preserve the accuracy of the solution. In the engineering practice in the finite element method, continuity of solutions between non-matching subdomains is implemented by [[multiple-point constraint]]s.\n\nFinite element simulations of moderate size models require solving linear systems with millions of unknowns. Several hours per time step is an average sequential run time, therefore, parallel computing is a necessity. Domain decomposition methods embody large potential for a parallelization of the finite element methods, and serve a basis for distributed, parallel computations.\n\n==Example 1: 1D Linear BVP==\n<math> u''(x)-u(x)=0 </math><br>\n<math> u(0)=0, u(1)=1 </math><br>\nThe exact solution is:<br>\n<math> u(x)=\\frac{e^x-e^{-x}}{e^{1}-e^{-1}} </math><br>\nSubdivide the domain into two subdomains, one from <math>\\left[0,\\frac{1}{2}\\right]</math> and another from <math>\\left[\\frac{1}{2},1\\right]</math>. In each of these two subdomains define interpolating functions <math> v_1(x) </math> and <math> v_2 (x) </math> At the interface between these two subdomains the following inferface conditions shall be imposed:<br>\n<math> v_1\\left(\\frac{1}{2}\\right)=v_2 \\left(\\frac{1}{2}\\right) </math><br>\n<math> v_1'\\left(\\frac{1}{2}\\right)=v_2'\\left(\\frac{1}{2}\\right)</math><br>\nLet the interpolating functions be defined as:<br>\n<math> v_1 (x) =\\sum_{n=0}^{N} u_{n} T_n (y_1(x)) </math><br>\n<math> v_2 (x) =\\sum_{n=0}^{N} u_{n+N} T_n (y_2(x)) </math><br>\n<math> y_1(x)=4x-1 </math><br>\n<math> y_2(x)=4x-3 </math><br>\nWhere <math> T_n (y) </math> is the nth cardinal function of the chebyshev polynomials of the first kind with input argument y.<br>\nIf N=4 then the following approximation is obtained by this scheme:<br>\n<math> u_1 =0.06236 </math><br>\n<math> u_2 =0.21495 </math><br>\n<math> u_3 =0.37428 </math><br>\n<math> u_4 =0.44341 </math><br>\n<math> u_5 =0.51492 </math><br>\n<math> u_6 =0.69972 </math><br>\n<math> u_7 =0.90645 </math><br>\nThis was obtained with the following MATLAB code. <br>\n<source lang=\"matlab\">\nclear all\nN=4;\na1=0; b1=1/2; \n\n[T D1 D2 E1 E2 x xsub]=cheb(N,a1,b1); % the diff matrices on [0,1/2] are the same\n%as those on [1/2 1].\nI=eye(N+1);\nH=D2-I;\nH1=[[1 zeros(1,N)]; H(2:end-1,:); [zeros(1,N) 1]];\nH1=[H1 [zeros(N,N+1); -[1 zeros(1,N)]]];\nH2=[D1(1,:); H(2:end-1,:); [zeros(1,N) 1]];\nH2=[[-D1(N+1,:); zeros(N,N+1)] H2];\nK=[H1; H2];\nF=[zeros(2*N+1,1); 1];\nu=K\\F;\nxx=-cos(pi*(0:N)'/N);\nx1=1/4*(xx+1); x2=1/4*(xx+3);\nx=[x1; x2];\nuex=(exp(x)-exp(-x))./(exp(1)-exp(-1));\n</source>\n\n==See also==\n*[[Multigrid method]]\n\n{{Numerical PDE}}\n\n== External links ==\n* [http://www.ddm.org The official Domain Decomposition Methods page]\n* [http://www.domain-decomposition.com Domain Decomposition - Numerical Simulations page]\n\n{{DEFAULTSORT:Domain Decomposition Methods}}\n[[Category:Domain decomposition methods| ]]\n[[Category:Articles with example MATLAB/Octave code]]"
    },
    {
      "title": "Abstract additive Schwarz method",
      "url": "https://en.wikipedia.org/wiki/Abstract_additive_Schwarz_method",
      "text": "In [[mathematics]], the '''abstract additive Schwarz method''', named after [[Hermann Schwarz]], is an abstract version of the [[additive Schwarz method]] for [[boundary value problem]]s on [[partial differential equation]]s, formulated only in terms of [[linear algebra]] without reference to domains, subdomains, etc. Many if not all [[domain decomposition methods]] can be cast as abstract additive Schwarz method, which is often the first and most convenient approach to their analysis.<ref>{{citation|first1=Maksymilian|last1=Dryja|first2=Olof B.|last2=Widlund|author2-link=Olof B. Widlund|contribution=Towards a unified theory of domain decomposition algorithms for elliptic problems|editor1-first=Tony|editor1-last=Chan|editor2-first=Roland|editor2-last=Glowinski|editor3-first=Jacques|editor3-last=Périaux|editor4-first=Olof B.|editor4-last=Widlund|title=Third International Symposium on Domain Decomposition Methods for Partial Differential Equations (Houston, Texas, March 20–22, 1989)|pages=3–21|publisher=SIAM|location=Philadelphia, PA|year=1990|url=http://www.ddm.org/DD03/Towards_a_Unified_Theory_of_Domain_Decomposition_Algorithms_for_Elliptic_Problems_(Dryj.pdf}}.</ref>\n\n==References==\n{{reflist}}\n\n{{Numerical PDE}}\n\n{{DEFAULTSORT:Abstract Additive Schwarz Method}}\n[[Category:Domain decomposition methods]]\n\n\n{{mathapplied-stub}}"
    },
    {
      "title": "Additive Schwarz method",
      "url": "https://en.wikipedia.org/wiki/Additive_Schwarz_method",
      "text": "In [[mathematics]], the '''additive Schwarz method''', named after [[Hermann Schwarz]], solves a [[boundary value problem]] for a [[partial differential equation]] approximately by splitting it into boundary value problems on smaller domains and adding the results.\n\n== Overview ==\n\nPartial differential equations (PDEs) are used in all [[science]]s to [[mathematical modelling|model]] phenomena. For the purpose of exposition, we give an example physical problem and the accompanying boundary value problem (BVP). Even if the reader is unfamiliar with the notation, the purpose is merely to show what a BVP looks like when written down.\n\n:'''(Model problem)''' The heat distribution in a square metal plate such that the left edge is kept at 1 degree, and the other edges are kept at 0 degree, after letting it sit for a long period of time satisfies the following boundary value problem:\n\n::''f''<sub>''xx''</sub>(''x'',''y'') + ''f''<sub>''yy''</sub>(''x'',''y'') = 0 \n::''f''(0,''y'') = 1; ''f''(''x'',0) = ''f''(''x'',1) = ''f''(1,''y'') = 0\n\n:where ''f'' is the unknown [[function (mathematics)|function]], ''f''<sub>''xx''</sub> and ''f''<sub>''yy''</sub> denote the second [[partial derivative]]s with respect to ''x'' and ''y'', respectively.\n\nHere, the [[domain (mathematics)|domain]] is the square [0,1] × [0,1].\n\nThis particular problem can be solved exactly on paper, so there is no need for a computer. However, this is an exceptional case, and most BVPs cannot be solved exactly. The only possibility is to use a computer to find an approximate solution.\n\n=== Solving on a computer ===\n\nA typical way of doing this is to ''sample'' ''f'' at regular [[interval (mathematics)|intervals]] in the [[Square (geometry)|square]] [0,1] × [0,1]. For instance, we could take 8 samples in the ''x'' direction at ''x'' = 0.1, 0.2, ..., 0.8 and 0.9, and 8 samples in the ''y'' direction at similar [[coordinate system|coordinates]]. We would then have 64 samples of the square, at places like (0.2,0.8) and (0.6,0.6). The goal of the [[computer program]] would be to calculate the value of ''f'' at those 64 points, which seems easier than finding an abstract function of the square.\n\nThere are some difficulties, for instance it is not possible to calculate ''f''<sub>''xx''</sub>(0.5,0.5) knowing ''f'' at only 64 points in the square. To overcome this, one uses some sort of numerical approximation of the derivatives, see for instance the [[finite element method]] or [[finite difference]]s. We ignore these difficulties and concentrate on another aspect of the problem.\n\n=== Solving linear problems ===\n\nWhichever method we choose to solve this problem, we will need to solve a large [[linear system of equations]]. The reader may recall linear systems of equations from high school, they look like this:\n\n:2''a'' + 5''b'' = 12 (*)\n:6''a'' − 3''b'' = −3\n\nThis is a system of 2 equations in 2 unknowns (''a'' and ''b''). If we solve the BVP above in the manner suggested, we will need to solve a system of 64 equations in 64 unknowns. This is not a hard problem for modern computers, but if we use a larger number of samples, even modern computers cannot solve the BVP very efficiently.\n\n=== Domain decomposition ===\n\nWhich brings us to domain decomposition methods. If we split the domain [0,1] × [0,1] into two ''subdomains'' [0,0.5] × [0,1] and [0.5,1] × [0,1], each has only half of the sample points. So we can try to solve a version of our model problem on each subdomain, but this time each subdomain has only 32 sample points. Finally, given the solutions on each subdomain, we can attempt to reconcile them to obtain a solution of the original problem on [0,1] × [0,1].\n\n==== Size of the problems ====\n\nIn terms of the linear systems, we're trying to split the system of 64 equations in 64 unknowns into two systems of 32 equations in 32 unknowns. This would be a clear gain, for the following reason. Looking back at system (*), we see that there are 6 important pieces of information. They are the coefficients of ''a'' and ''b'' (2,5 on the first line and 6,−3 on the second line), and the right hand side (which we write as 12,−3). On the other hand, if we take two \"systems\" of 1 equation in 1 unknown, it might look like this:\n\n:System 1: 2''a'' = 12\n:System 2: -3''b'' = −3\n\nWe see that this system has only 4 important pieces of information. This means that a computer program will have an easier time solving two 1×1 systems than solving a single 2×2 system, because the pair of 1×1 systems are simpler than the single 2×2 system. While the 64×64 and 32×32 systems are too large to illustrate here, we could say by analogy that the 64×64 system has 4160 pieces of information, while the 32×32 systems each have 1056, or roughly a quarter of the 64×64 system.\n\n==== Domain decomposition algorithm ====\n\nUnfortunately, for technical reasons it is usually not possible to split our grid of 64 points (a 64×64 system of linear equations) into two grids of 32 points (two 32×32 systems of linear equations) and obtain an answer to the 64×64 system. Instead, the following algorithm is what actually happens:\n\n:1) Begin with an approximate solution of the 64×64 system.\n:2) From the 64×64 system, create two 32×32 systems to improve the approximate solution.\n:3) Solve the two 32×32 systems.\n:4) Put the two 32×32 solutions \"together\" to improve the approximate solution to the 64×64 system.\n:5) If the solution isn't very good yet, repeat from 2.\n\nThere are two ways in which this can be better than solving the base 64×64 system. First, if the number of repetitions of the algorithm is small, solving two 32×32 systems may be more efficient than solving a 64×64 system. Second, the two 32×32 systems need not be solved on the same computer, so this algorithm can be run in ''parallel'' to use the power of multiple computers.\n\nIn fact, solving two 32×32 systems instead of a 64×64 system on a single computer (without using parallelism) is unlikely to be efficient. However, if we use more than two subdomains, the picture can change. For instance, we could use four 16×16 problems, and there's a chance that solving these will be better than solving a single 64×64 problem even if the domain decomposition algorithm needs to iterate a few times.\n\n== A technical example ==\n\nHere we assume that the reader is familiar with partial differential equations.\n\nWe will be solving the partial differential equation\n\n:''u''<sub>''xx''</sub> + ''u''<sub>''yy''</sub> = ''f'' (**)\n\nThe boundary condition is boundedness at infinity.\n\nWe decompose the domain '''R'''² into two overlapping subdomains H<sub>1</sub> = (<nowiki>− ∞,1]</nowiki> × '''R''' and H<sub>2</sub> = <nowiki>[0,+ ∞</nowiki>) × '''R'''. In each subdomain, we will be solving a BVP of the form:\n\n:''u''<sup>( ''j'' )</sup><sub>''xx''</sub> + ''u''<sup>( ''j'' )</sup><sub>''yy''</sub> = ''f'' in H<sub>''j''</sub>\n:''u''<sup>( ''j'' )</sup>(''x''<sub>''j''</sub>,''y'') = ''g''(''y'')\n\nwhere ''x''<sub>1</sub> = 1 and ''x''<sub>2</sub> = 0 and taking boundedness at infinity as the other boundary condition. We denote the solution ''u''<sup>( ''j'' )</sup> of the above problem by S(''f'',''g''). Note that S is bilinear.\n\nThe Schwarz algorithm proceeds as follows:\n\n#Start with approximate solutions ''u''<sup>( 1 )</sup><sub>0</sub> and ''u''<sup>( 2 )</sup><sub>0</sub> of the PDE in subdomains H<sub>1</sub> and H<sub>2</sub> respectively. Initialize ''k'' to 1.\n#Calculate ''u''<sup>( ''j'' )</sup><sub>''k'' + 1</sub> = S(''f'',''u''<sup>(3 − ''j'')</sup><sub>''k''</sub>(''x''<sub>''j''</sub>)) with ''j'' = 1,2.\n#Increase ''k'' by one and repeat 2 until sufficient precision is achieved.\n\n==See also==\n*[[Domain decomposition method]]\n*[[Schwarz alternating method]]\n\n== References ==\n\n* Barry Smith, Petter Bjørstad, William Gropp, Domain Decomposition, Parallel Multilevel Methods for Elliptic Partial Differential Equations, Cambridge University Press 1996\n* Andrea Toselli and Olof Widlund, Domain Decomposition Methods - Algorithms and Theory,  Springer Series in Computational Mathematics, Vol. 34, 2004\n\n== External links ==\n* [http://www.ddm.org The official Domain Decomposition Methods page]\n\n{{Numerical PDE}}\n\n[[Category:Domain decomposition methods]]"
    },
    {
      "title": "Balancing domain decomposition method",
      "url": "https://en.wikipedia.org/wiki/Balancing_domain_decomposition_method",
      "text": "In [[numerical analysis]], the '''balancing domain decomposition method (BDD)''' is an [[iterative method]] to find the solution of a [[symmetric]] [[positive definite]] system of [[linear]] [[algebraic equation]]s arising from the [[finite element method]].<ref name=\"Mandel-1993-BDD\">J. Mandel, ''Balancing domain decomposition'', Comm. Numer. Methods Engrg., 9 (1993), pp. 233&ndash;241. {{doi|10.1002/cnm.1640090307}}\n\n</ref> In each iteration, it combines the solution of local problems on non-overlapping subdomains with a coarse problem created from the subdomain [[null space|nullspaces]]. BDD requires only solution of subdomain problems rather than access to the matrices of those problems, so it is applicable to situations where only the solution operators are available, such as in [[oil reservoir]] [[simulation]] by [[mixed finite elements]].<ref name=\"Cowsar-1995-BDD\">L. C. Cowsar, J. Mandel, and M. F. Wheeler, ''Balancing domain decomposition for mixed finite elements'', Math. Comp., 64 (1995), pp. 989&ndash;1015. {{doi|10.1090/S0025-5718-1995-1297465-9}}\n\n</ref> In its original formulation, BDD performs well only for 2nd order problems, such [[Elasticity (physics)|elasticity]] in 2D and 3D. For 4th order problems, such as [[plate bending]], it needs to be modified by adding to the coarse problem special basis functions that enforce continuity of the solution at subdomain corners,<ref name=\"LeTallec-1998-NND\">P. Le Tallec, J. Mandel, and M. Vidrascu, ''A Neumann&ndash;Neumann domain decomposition algorithm for solving plate and shell problems'', SIAM Journal on Numerical Analysis, 35 (1998), pp. 836&ndash;867. {{doi|10.1137/S0036142995291019}}\n\n</ref> which makes it however more expensive. The [[BDDC]] method uses the same corner basis functions as,<ref name=\"LeTallec-1998-NND\"/> but in an additive rather than multiplicative fashion.<ref name=\"Mandel-2003-CBD\">J. Mandel and C. R. Dohrmann, ''Convergence of a balancing domain decomposition by constraints and energy minimization'', Numer. Linear Algebra Appl., 10 (2003), pp. 639–659. {{doi|10.1002/nla.341}}\n\n</ref> The dual counterpart to BDD is [[FETI]], which enforces the equality of the solution between the subdomain by Lagrange multipliers. The base versions of BDD and FETI are not mathematically equivalent, though a special version of FETI designed to be robust for hard problems <ref name=\"Bhardwaj-2000-AFM\">M. Bhardwaj, D. Day, C. Farhat, M. Lesoinne, K. Pierson, and D. Rixen, ''Application of the FETI method to ASCI problems – scalability results on 1000 processors and discussion of highly heterogeneous problems'', International Journal for Numerical Methods in Engineering, 47 (2000), pp. 513&ndash;535. {{doi|10.1002/(SICI)1097-0207(20000110/30)47:1/3<513::AID-NME782>3.0.CO;2-V}}\n\n</ref> has the same [[eigenvalue]]s and thus essentially the same performance as BDD.<ref name=\"Fragakis-2007-FDD\">Y. Fragakis, ''Force and displacement duality in Domain Decomposition Methods for Solid and Structural Mechanics''. To appear in Comput. Methods Appl. Mech. Engrg., 2007.\n\n</ref><ref name=\"Sousedik-2008-EPD\">B. Sousedík and J. Mandel, ''On the equivalence of primal and dual substructuring preconditioners''. arXiv:math/0802.4328, 2008.</ref>\n\nThe operator of the system solved by BDD is the same as obtained by eliminating the unknowns in the interiors of the subdomain, thus reducing the problem to the [[Schur complement]] on the subdomain interface. Since the BDD preconditioner involves the solution of [[Neumann problem]]s on all subdomain, it is a member of the [[Neumann–Neumann methods|Neumann–Neumann class of methods]], so named because they solve a Neumann problem on both sides of the interface between subdomains.\n\nIn the simplest case, the [[coarse problem|coarse space]] of BDD consists of functions constant on each subdomain and averaged on the interfaces. More generally, on each subdomain, the coarse space needs to only contain the [[nullspace]] of the problem as a subspace.\n\n==References==\n\n<references/>\n\n==External links==\n* [https://web.archive.org/web/20080228054053/http://www.mgnet.org/mgnet/Codes/jmandel/ BDD reference implementation at mgnet.org]\n* [http://www.domain-decomposition.com Domain Decomposition – Theory, publications, methods, algorithms.]\n\n{{Numerical PDE}}\n\n{{DEFAULTSORT:Balancing Domain Decomposition}}\n[[Category:Domain decomposition methods]]"
    },
    {
      "title": "BDDC",
      "url": "https://en.wikipedia.org/wiki/BDDC",
      "text": "In [[numerical analysis]], '''BDDC (balancing domain decomposition by constraints)''' is a [[domain decomposition method]] for solving large [[symmetric matrix|symmetric]], [[positive definite matrix|positive definite]] systems of [[linear equations]] that arise from the [[finite element method]]. BDDC is used as a [[preconditioner]] to the [[conjugate gradient method]]. A specific version of BDDC is characterized by the choice of coarse degrees of freedom, which can be values at the corners of the subdomains, or averages over the edges or the faces of the interface between the subdomains. One application of the BDDC preconditioner then combines the solution of local problems on each subdomains with the solution of a global [[coarse problem]] with the coarse degrees of freedom as the unknowns. The local problems on different subdomains are completely independent of each other, so the method is suitable for [[parallel computing]]. With a proper choice of the coarse degrees of freedom (corners in 2D, corners plus edges or corners plus faces in 3D) and with regular subdomain shapes, the [[condition number]] of the method is bounded when increasing the number of subdomains, and it grows only very slowly with the number of elements per subdomain. Thus the number of iterations is bounded in the same way, and the method scales well with the problem size and the number of subdomains.\n\n==History==\n\nBDDC was introduced by  different authors and different approches at about the same time, i.e., by Cros<ref name=\"Cros-2003-PSC\">J.-M. Cros, ''A preconditioner for the Schur complement domain decomposition method'', in Domain Decomposition Methods in Science and Engineering, I. Herrera, D. E. Keyes, and O. B. Widlund, eds., National Autonomous University of Mexico (UNAM), México, 2003, pp. 373-380. 14th International Conference on Domain Decomposition Methods, Cocoyoc, Mexico, January 6–12, 2002.\n\n</ref>, Dohrmann<ref name=\"Dohrmann-2003-PSC\">C. R. Dohrmann, ''A preconditioner for substructuring based on constrained energy minimization'', SIAM J. Sci. Comput., 25 (2003), pp. 246--258.\n\n</ref>, and Fragakis and Papadrakakis<ref name=\"Fragakis-2003-MHP\">Y. Fragakis and M. Papadrakakis, ''The mosaic of high performance domain decomposition methods for structural mechanics: Formulation, interrelation and numerical efficiency of primal and dual methods'', Comput. Methods Appl. Mech. Engrg., 192 (2003), pp. 3799--3830.\n\n</ref>, as a primal alternative to the [[FETI-DP]] domain decomposition method by [[Charbel Farhat|Farhat]] et al.<ref name=\"Farhat-2001-FDP\">C. Farhat, M. Lesoinne, P. LeTallec, K. Pierson, and D. Rixen, ''FETI-DP: a dual-primal unified FETI method. I. A faster alternative to the two-level FETI method, Internat. J. Numer. Methods Engrg., 50 (2001), pp. 1523--1544.\n\n</ref><ref name=\"Farhat-2000-SDP\">C. Farhat, M. Lesoinne, and K. Pierson, ''A scalable dual-primal domain decomposition method'', Numer. Linear Algebra Appl., 7 (2000), pp. 687--714. Preconditioning techniques for large sparse matrix problems in industrial applications (Minneapolis, MN, 1999).\n\n</ref> See <ref name=\"Mandel-2007-BFM\">J. Mandel and B. Sousedík, ''BDDC and FETI-DP under minimalist assumptions'', Computing, 81 (2007), pp. 269--280.</ref> for a proof that these are all actually the same method as BDDC. The name of the method was coined by [[Jan Mandel|Mandel]] and Dohrmann,<ref name=\"Mandel-2003-CBD\">J. Mandel and C. R. Dohrmann, ''Convergence of a balancing domain decomposition by constraints and energy minimization'', Numer. Linear Algebra Appl., 10 (2003), pp. 639--659.\n\n</ref> because it can be understood as further development of the BDD ([[balancing domain decomposition]]) method.<ref name=\"Mandel-1993-BDD\">J. Mandel, ''Balancing domain decomposition'', Comm. Numer. Methods Engrg., 9 (1993), pp. 233--241.\n\n</ref> Mandel, Dohrmann, and Tezaur <ref name=\"Mandel-2005-ATP\">J. Mandel, C. R. Dohrmann, and R. Tezaur, ''An algebraic theory for primal and dual substructuring methods by constraints'', Appl. Numer. Math., 54 (2005), pp. 167--193.\n\n</ref> proved that the eigenvalues of BDDC and FETI-DP are identical, except for the eigenvalue equal to one, which may be present in BDDC but not for FETI-DP, and thus their number of iterations is practically the same. Much simpler proofs of this fact were obtained later by Li and [[Olof B. Widlund|Widlund]] <ref name=\"Li-2006-FBB\">J. Li and O. B. Widlund, ''FETI-DP, BDDC, and block Cholesky methods'', Internat. J. Numer. Methods Engrg., 66 (2006), pp. 250--271.\n\n</ref> and by [[Susanne Brenner|Brenner]] and Sung.<ref name=\"Brenner-2007-BFW\">[[Susanne Brenner|S. C. Brenner]] and L.-Y. Sung, ''BDDC and FETI-DP without matrices or vectors'', Comput. Methods Appl. Mech. Engrg., 196 (2007), pp. 1429--1435.\n\n</ref>\n\n==Coarse space==\n\nThe [[coarse problem|coarse space]] of BDDC consists of energy minimal functions with the given values of the coarse degrees of freedom. This is the same coarse space as used for corners in a version of BDD for [[Bending|plate]]s and [[Thin-shell structure|shells]].<ref>Le Tallec, Patrick; Mandel, Jan; Vidrascu, Marina, ''A Neumann-Neumann domain decomposition algorithm for solving plate and shell problems.''  SIAM J. Numer. Anal.  35  (1998),  no. 2, 836--867</ref> The difference is that in BDDC, the coarse problem is used in an additive fashion, while in BDD, it is used a multiplicatively.\n\n==A mechanical description==\n\nThe BDDC method is often used to solve problems from [[linear elasticity]], and it can be perhaps best explained in terms of the deformation of an elastic structure. The elasticity problem is to determine the deformation of a structure subject to prescribed displacements and forces applied to it. After applying the finite element method, we obtain a system of linear algebraic equations, where the unknowns are the displacements at the nodes of the elements and the right-hand side comes from the forces (and from nonzero prescribed displacements on the boundary, but, for simplicity, assume that these are zero).\n\nA preconditioner takes a right hand side and delivers an approximate solution. So, suppose we have an elastic structure divided into nonoverlapping substructures, and, for simplicity, suppose the coarse degrees of freedom are only subdomain corners. Suppose forces applied to the structure are given.\n\nThe first step in the BDDC method is the interior correction, which consists of finding the deformation of each subdomain separately given the forces applied to the subdomain except at the interface of the subdomain with its neighbors. Since the interior of each subdomain moves independently and the interface remains at zero deformation, this causes kinks at the interface. The forces on the interface necessary to keep the kinks in balance are added to the forces already given on the interface. The interface forces are then distributed to the subdomain (either equally, or with weights in proportion to the stiffness of the material of the subdomains, so that stiffer subdomains get more force).\n\nThe second step, called subdomain correction, is finding the deformation for these interface forces on each subdomain separately subject to the condition of zero displacements on the subdomain corners. Note that the values of the subdomain correction across the interface in general differ.\n\nAt the same time as the subdomain correction, the coarse correction is computed, which consists of the displacement at all subdomain corners, interpolated between the corners on each subdomain separately by the condition that the subdomain assumes the same shape as it would with no forces applied to it at all. Then the interface forces, same as for the subdomain correction, are applied to find the values of the coarse correction at subdomain corners. Thus, the interface forces are averaged and the coarse solution is found by the [[Galerkin method]]. Again, the values of the coarse correction on subdomain interfaces is in general discontinuous across the interface.\n\nFinally, the subdomain corrections and the coarse correction are added and the sum is averaged across the subdomain interfaces, with the same weights as were used to distribute the forces to the subdomain earlier. This gives the value of the output of BDDC on the interfaces between the subdomains. The values of the output of BDDC in the interior of the subdomains are then obtained by repeating the interior correction.\n\nIn a practical implementation, the right-hand-side and the initial approximation for the iterations are preprocessed so that all forces inside the subdomains are zero. This is done by one application of the interior correction as above. Then the forces inside the subdomains stay zero during the conjugate gradients iterations, and so the first interior correction in each application of BDDC can be omitted.\n\n==External links==\n*[http://www.esi-topics.com/fbp/2007/june07-Mandel_Dohrmann_Tezaur.html Authors' comments] to the \"[[Institute for Scientific Information|fast breaking paper]]\",<ref name=\"Mandel-2005-ATP\"/> ESI Special Topics, June 2007\n*[http://www.esi-topics.com/fbp/2007/june07-Widlund_Li.html Authors' comments] to the \"fast breaking paper\",<ref name=\"Li-2006-FBB\"/> ESI Special Topics, June 2007\n\n==References==\n\n<references/>\n\n{{Numerical PDE}}\n\n{{DEFAULTSORT:Bddc}}\n[[Category:Domain decomposition methods]]"
    },
    {
      "title": "Coarse space (numerical analysis)",
      "url": "https://en.wikipedia.org/wiki/Coarse_space_%28numerical_analysis%29",
      "text": ": ''This article deals with a component of numerical methods. For coarse space in topology, see [[coarse structure]].''\n\nIn [[numerical analysis]], '''coarse problem''' is an auxiliary system of equations used in an [[iterative method]] for the solution of a given larger system of equations. A coarse problem is basically a version of the same problem at a lower resolution, retaining its essential characteristics, but with fewer variables. The purpose of the coarse problem is to propagate information throughout the whole problem globally.\n\nIn [[multigrid method]]s for [[partial differential equation]]s, the coarse problem is typically obtained as a discretization of the same equation on a coarser grid (usually, in [[finite difference method]]s) or by a [[Galerkin approximation]] on a [[linear subspace|subspace]], called a '''coarse space'''. In [[finite element method]]s, the Galerkin approximation is typically used, with the coarse space generated by larger elements on the same [[Domain decomposition methods|domain]].  Typically, the coarse problem corresponds to a grid that is twice or three times coarser.\n\nCoarse spaces (coarse model, [[surrogate model]]) are the backbone of algorithms and methodologies exploiting the [[space mapping]] concept for solving computationally intensive engineering modeling and design problems.<ref>J.W. Bandler, R.M. Biernacki, S.H. Chen, P.A. Grobelny, and R.H. Hemmers, [http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=339794 “Space mapping technique for electromagnetic optimization,”] IEEE Trans. Microwave Theory Tech., vol. 42, no. 12, pp. 2536-2544, Dec. 1994.</ref><ref>J.W. Bandler, R.M. Biernacki, S.H. Chen, R.H. Hemmers, and K. Madsen, [http://ieeexplore.ieee.org/xpls/abs_all.jsp?arnumber=475649&tag=1 “Electromagnetic optimization exploiting aggressive space mapping,”] IEEE Trans. Microwave Theory Tech., vol. 43, no. 12, pp. 2874-2882, Dec. 1995.</ref><ref>A.J. Booker, J.E. Dennis, Jr., P.D. Frank, D.B. Serafini, V. Torczon, and M.W. Trosset,[https://link.springer.com/article/10.1007%2FBF01197708 \"A rigorous framework for optimization of expensive functions by surrogates,\"] Structural Optimization, vol. 17, no. 1, pp. 1-13, Feb. 1999.</ref><ref>J.W. Bandler, Q. Cheng, S.A. Dakroury, A.S. Mohamed, M.H. Bakr, K. Madsen and J. Søndergaard, [http://ieeexplore.ieee.org/xpls/abs_all.jsp?arnumber=1262727 \"Space mapping: the state of the art,\"] IEEE Trans. Microwave Theory Tech., vol. 52, no. 1, pp. 337-361, Jan. 2004.</ref><ref>T.D. Robinson, M.S. Eldred, K.E. Willcox, and R. Haimes, [http://arc.aiaa.org/doi/abs/10.2514/1.36043 \"Surrogate-Based Optimization Using Multifidelity Models with Variable Parameterization and Corrected Space Mapping,\"] AIAA Journal, vol. 46, no. 11, November 2008.</ref><ref>M. Redhe and L. Nilsson, [https://link.springer.com/article/10.1007%2Fs00158-004-0396-x “Optimization of the new Saab 9-3 exposed to impact load using a space mapping technique,”] Structural and Multidisciplinary Optimization, vol. 27, no. 5, pp. 411-420, July 2004.</ref><ref>J.E. Rayas-Sanchez, [http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=7423860&action=search&sortType=&rowsPerPage=&searchField=Search_All&matchBoolean=true&queryText=(%22Document%20Title%22:simplicity%20in%20asm) \"Power in simplicity with ASM: tracing the aggressive space mapping algorithm over two decades of development and engineering applications\"], IEEE Microwave Magazine, vol. 17, no. 4, pp. 64-76, April 2016.</ref><ref>J.W. Bandler and S. Koziel [http://ieeexplore.ieee.org/document/7540085/ \"Advances in electromagnetics-based design optimization\"], IEEE MTT-S Int. Microwave Symp. Digest (San Francisco, CA, 2016).</ref> In [[space mapping]], a fine or high fidelity (high resolution, computationally intensive) model is used to calibrate or recalibrate—or update on the fly, as in aggressive space mapping—a suitable coarse model. An updated coarse model is often referred to as [[surrogate model]] or mapped coarse model. It permits fast, but more accurate, harnessing of the underlying coarse model in the exploration of designs or in design optimization.\n\nIn [[domain decomposition method]]s, the construction of a coarse problem follows the same principles as in multigrid methods, but the coarser problem has much fewer unknowns, generally only one or just a few unknowns per subdomain or substructure, and the coarse space can be of a quite different type that the original finite element space, e.g. piecewise constants with averaging in [[balancing domain decomposition]] or built from energy minimal functions in [[BDDC]]. The construction of the coarse problem in [[FETI]] is unusual in that it is not obtained as a Galerkin approximation of the original problem, however.\n\nIn [[Algebraic Multigrid Method]]s and in [[iterative aggregation method]]s in [[mathematical economics]] and [[Markov chain]]s, the coarse problem is generally obtained by the Galerkin approximation on a subspace. In mathematical economics, the coarse problem may be obtained by the aggregation of products or industries into a coarse description with fewer variables. In Markov chains, a coarse Markov chain may be obtained by aggregating states.\n\nThe speed of convergence of multigrid and domain decomposition methods for [[elliptic partial differential equation]]s without a coarse problem deteriorates with decreasing mesh step (or decreasing element size, or increasing number of subdomains or substructures), thus making a coarse problem necessary for a [[scalable]] algorithm.\n\n==References==\n{{Reflist}}\n\n* [[Jan Mandel]] and Bedrich Sousedik, ''Coarse space over the ages'', Nineteenth International Conference on Domain Decomposition, Springer-Verlag, submitted, 2009. [https://arxiv.org/abs/0911.5725 arXiv:0911.5725]\n* [[Olof B. Widlund]], ''The Development of Coarse Spaces for Domain Decomposition Algorithms'', in: Domain Decomposition Methods in Science and Engineering XVIII, Bercovier, M. and  Gander, M.J. and Kornhuber, R. and Widlund, O. (eds.), Lecture Notes in Computational Science and  Engineering 70, Springer-Verlag, 2009, Proceedings of 18th International Conference on Domain Decomposition, Jerusalem, Israel, January 2008. [http://numerik.mi.fu-berlin.de/DDM/DD18/Widlund-2.pdf article]{{dead link|date=August 2017 |bot=InternetArchiveBot |fix-attempted=yes }}\n\n==See also==\n* [[Multiscale modeling]]\n\n[[Category:Domain decomposition methods]]"
    },
    {
      "title": "FETI",
      "url": "https://en.wikipedia.org/wiki/FETI",
      "text": "In [[mathematics]], in particular [[numerical analysis]], the '''FETI''' method ('''finite element tearing and interconnect''') is an [[iterative substructuring]] method for solving [[systems of linear equations]] from the [[finite element method]] for the solution of [[elliptic partial differential equation]]s, in particular in [[computational mechanics]]<ref>C. Farhat and F. X. Roux, A method of finite element tearing and interconnecting and its parallel solution algorithm, Internat. J. Numer. Meths. Engrg. 32, 1205-1227 (1991)</ref> In each iteration, FETI requires the solution of a [[Neumann problem]] in each substructure and the solution of a [[coarse problem]]. The simplest version of FETI with no preconditioner (or only a diagonal preconditioner) in the substructure is scalable with the number of substructures<ref>Charbel Farhat, Jan Mandel, and François-Xavier Roux, Optimal convergence properties of the FETI domain decomposition method, Comput. Meth. Appl. Mech. Engrg. 115(1994)365-385</ref> but the condition number grows polynomially with the number of elements per [[Substructure (mathematics)|substructure]]. FETI with a (more expensive) preconditioner consisting of the solution of a [[Dirichlet problem]] in each substructure is scalable with the number of substructures and its condition number grows only polylogarithmically with the number of elements per substructure.<ref>J. Mandel and R. Tezaur, On the Convergence of a Substructuring Method with Lagrange multipliers, Numerische Mathematik 73 (1996) 473-487</ref> The [[coarse problem|coarse space]] in FETI consists of the [[nullspace]] on each substructure.\n\n==See also==\n*[[Balancing domain decomposition]]\n*[[FETI-DP]]\n\n==References==\n\n\n{{reflist}}\n\n==External links==\n* [http://www.google.com/search?q=C.+Farhat+and+F.+X.+Roux%2C+A+method+of+finite+element+tearing+and+interconnecting%0A&start=0&ie=utf-8&oe=utf-8&client=firefox-a&rls=org.mozilla:en-US:official Google Scholar search]\n{{Numerical PDE}}\n\n{{DEFAULTSORT:Feti}}\n[[Category:Domain decomposition methods]]\n\n\n{{engineering-stub}}"
    },
    {
      "title": "FETI-DP",
      "url": "https://en.wikipedia.org/wiki/FETI-DP",
      "text": "The '''FETI-DP''' method is a [[domain decomposition method]] <ref name=\"Farhat-2001-FDP\">C. Farhat, M. Lesoinne, P. LeTallec, K. Pierson, and D. Rixen, ''FETI-DP: a dual-primal unified FETI method. I. A faster alternative to the two-level FETI method'', Internat. J. Numer. Methods Engrg., 50 (2001), pp. 1523--1544.\n\n</ref>  that enforces equality of the solution at subdomain interfaces by [[Lagrange multipliers]] except at subdomain corners, which remain primal variables.The first mathematical analysis of the method was provided by Mandel and Tezaur.<ref name=\"Mandel-2001-CDP\">J. Mandel and R. Tezaur, ''On the convergence of a dual-primal substructuring method'', Numerische Mathematik, 88 (2001), pp. 543--558.</ref> The method was further improved by enforcing the equality of averages across the edges or faces on subdomain interfaces<ref name=\"Farhat-2000-SDP\">C. Farhat, M. Lesoinne, and K. Pierson, ''A scalable dual-primal domain decomposition method'', Numer. Linear Algebra Appl., 7 (2000), pp. 687--714. Preconditioning techniques for large sparse matrix problems in industrial applications (Minneapolis, MN, 1999).\n\n</ref><ref name=\"Klawonn-2002-DPF\">A. Klawonn, O. B. Widlund, and M. Dryja, ''Dual-primal FETI methods for three-dimensional elliptic problems with heterogeneous coefficients'', SIAM J. Numer. Anal., 40 (2002), pp. 159--179.\n\n</ref> which is important for parallel scalability for 3D problems. FETI-DP is a simplification and a better performing version of [[FETI]]. The eigenvalues of FETI-DP are same as those of [[BDDC]], except for the eigenvalue equal to one, and so the performance of FETI-DP and BDDC is essentially same.<ref name=\"Mandel-2005-ATP\">J. Mandel, C. R. Dohrmann, and R. Tezaur, ''An algebraic theory for primal and dual substructuring methods by constraints'', Appl. Numer. Math., 54 (2005), pp. 167--193.\n\n</ref>\n\nFETI-DP methods are very suitable for high performance parallel computing. A structural simulation using a FETI-DP algorithm and running on 3783 processors of the ASCI White supercomputer was awarded a Gordon Bell prize in 2002.<ref name=\"bhardwaj-salinas\">Manoj Bhardwaj, Kendall H. Pierson, Garth Reese, Tim Walsh, David Day, Ken Alvin, James Peery, Charbel Farhat, and Michel Lesoinne. ''Salinas: A scalable software for high performance structural and mechanics simulation. In ACM/IEEE Proceedings of SC02: High Performance Networking and Computing. Gordon Bell Award'', pages 1–19, 2002. \n</ref>\nA recent FETI-DP method has scaled to more than 65000 processor cores of the JUGENE supercomputer solving a model problem.<ref name=Klawonn_ZAMM>{{citation|first1=A.|last1=Klawonn|first2=O.|last2=Rheinbach|title=Highly scalable parallel domain decomposition methods with an application to biomechanics|doi=10.1002/zamm.200900329|journal=[[Journal of Applied Mathematics and Mechanics]]|volume=90|issue=1|pages=5–32}}.</ref>\n\n==See also==\n\n*[[BDDC]]\n*[[FETI]]\n\n==References==\n\n<references/>\n\n{{Numerical PDE}}\n\n{{DEFAULTSORT:Feti-Dp}}\n[[Category:Domain decomposition methods]]\n\n\n{{mathapplied-stub}}"
    },
    {
      "title": "Fictitious domain method",
      "url": "https://en.wikipedia.org/wiki/Fictitious_domain_method",
      "text": "In [[mathematics]], the '''Fictitious domain method''' is a method to find the solution of a [[partial differential equation]]s on a complicated [[Domain of a function|domain]] <math>D</math>, by substituting  a given  problem\nposed on a domain <math>D</math>, with a new problem posed on a simple domain <math>\\Omega</math> containing <math>D</math>.\n\n==General formulation==\nAssume in some area <math>D \\subset \\mathbb{R}^n </math> we want to find solution <math>u(x)</math> of the [[equation]]:\n\n: <math>\n Lu = - \\phi(x), x = (x_1, x_2, \\dots , x_n) \\in D\n</math>\n\nwith [[Boundary value problem|boundary conditions]]:\n\n: <math>\n lu = g(x), x \\in \\partial D\n</math>\n\nThe basic idea of fictitious domains method is to substitute  a given  problem\nposed on a domain <math>D</math>, with a new problem posed on a simple [[shaped domain]] <math>\\Omega</math> containing <math>D</math> (<math>D \\subset \\Omega</math>). For example, we can choose ''n''-dimensional parallelotope as <math>\\Omega</math>.\n\nProblem in the [[extended domain]] <math>\\Omega</math> for the new solution <math>u_{\\epsilon}(x)</math>:\n\n: <math>\n L_\\epsilon u_\\epsilon = - \\phi^\\epsilon(x), x = (x_1, x_2, \\dots , x_n) \\in \\Omega\n</math>\n\n: <math>\n l_\\epsilon u_\\epsilon = g^\\epsilon(x), x \\in \\partial \\Omega\n</math>\n\nIt is necessary to pose the problem in the extended area so that the following condition is fulfilled:\n\n: <math>\n u_\\epsilon (x) \\xrightarrow[\\epsilon \\rightarrow 0]{ } u(x), x \\in D\n</math>\n\n== Simple example, 1-dimensional problem ==\n\n:<math>\n \\frac{d^2u}{dx^2} = -2, \\quad 0 < x < 1 \\quad (1) \n</math>\n\n:<math>\n u(0) = 0, u(1) = 0\n</math>\n\n=== Prolongation by leading coefficients ===\n\n<math>u_\\epsilon(x)</math> solution of problem:\n\n: <math>\n \\frac{d}{dx}k^\\epsilon(x)\\frac{du_\\epsilon}{dx} = - \\phi^{\\epsilon}(x), 0 < x < 2 \\quad (2)\n</math>\nDiscontinuous [[coefficient]] <math>k^{\\epsilon}(x)</math> and right part of equation previous equation we obtain from expressions:\n\n: <math>\nk^\\epsilon (x)=\\begin{cases} 1, &  0 < x < 1 \\\\ \\frac{1}{\\epsilon^2}, & 1 < x < 2\n \\end{cases}\n</math>\n: <math>\n\\phi^\\epsilon (x)=\\begin{cases} 2, &  0 < x < 1 \\\\ 2c_0, & 1 < x < 2 \n \\end{cases}\\quad (3)\n</math>\n\nBoundary conditions:\n\n: <math>\n u_\\epsilon(0) = 0, u_\\epsilon(2) = 0\n</math>\n\nConnection conditions in the point <math>x = 1</math>:\n\n: <math>\n [u_\\epsilon] = 0,\\  \\left[k^\\epsilon(x)\\frac{du_\\epsilon}{dx}\\right] = 0\n</math>\n\nwhere <math>[ \\cdot ]</math> means:\n\n: <math>\n [p(x)] = p(x + 0) - p(x - 0)\n</math>\n\nEquation (1) has [[analytical solution]] therefore we can easily obtain error:\n\n: <math>\n u(x) - u_\\epsilon(x) = O(\\epsilon^2), \\quad 0 < x < 1\n</math>\n\n===Prolongation by lower-order coefficients===\n<math>u_\\epsilon(x)</math> solution of problem:\n\n: <math>\n \\frac{d^2u_\\epsilon}{dx^2} - c^\\epsilon(x)u_\\epsilon = - \\phi^\\epsilon(x), \\quad 0 < x < 2 \\quad (4)\n</math>\n\nWhere <math>\\phi^{\\epsilon}(x)</math> we take the same as in (3), and expression for <math>c^{\\epsilon}(x)</math>\n\n: <math>\nc^\\epsilon(x)=\\begin{cases} \n  0,                    &  0 < x < 1 \\\\ \n  \\frac{1}{\\epsilon^2}, & 1 < x < 2.\n \\end{cases}\n</math>\n\nBoundary conditions for equation (4) same as for (2).\n\nConnection conditions in the point <math>x = 1</math>:\n\n: <math>\n [u_\\epsilon(0)] = 0,\\  \\left[\\frac{du_\\epsilon}{dx}\\right] = 0\n</math>\n\nError:\n\n: <math>\n u(x) - u_\\epsilon(x) = O(\\epsilon), \\quad 0 < x < 1\n</math>\n\n==Literature==\n\n* P.N. Vabishchevich, The Method of Fictitious Domains in Problems of Mathematical Physics, Izdatelstvo Moskovskogo Universiteta, Moskva, 1991.\n* Smagulov S. Fictitious Domain Method for Navier–Stokes equation, Preprint CC SA USSR, 68, 1979.\n* Bugrov A.N., Smagulov S. Fictitious Domain Method for Navier–Stokes equation, Mathematical model of fluid flow, Novosibirsk, 1978, p.&nbsp;79–90\n\n{{Numerical PDE}}\n\n{{DEFAULTSORT:Fictitious Domain Method}}\n[[Category:Domain decomposition methods]]\n[[Category:Applied mathematics]]"
    },
    {
      "title": "Mortar methods",
      "url": "https://en.wikipedia.org/wiki/Mortar_methods",
      "text": "In [[numerical analysis]], '''mortar methods''' are [[discretization method]]s for [[partial differential equation]]s, which use separate [[finite element]] discretization on nonoverlapping subdomains. The [[Polygon mesh|mesh]]es on the subdomains do not match on the interface, and the equality of the solution is enforced by [[Lagrange multipliers]], judiciously chosen to preserve the accuracy of the solution.<ref name=\"Maday-1989-NMM\">Y. Maday, C. Mavriplis, and A. T. Patera, ''Nonconforming mortar element methods: application to spectral discretizations'', in Domain decomposition methods (Los Angeles, CA, 1988), SIAM, Philadelphia, PA, 1989, pp. 392--418.\n\n</ref><ref name=\"Wohlmuth-2000-MFE\">[[Barbara Wohlmuth|B. I. Wohlmuth]], ''A mortar finite element method using dual spaces for the Lagrange multiplier'', SIAM J. Numer. Anal., 38 (2000), pp. 989--1012.</ref> Mortar discretizations lend themselves naturally to the solution by iterative [[domain decomposition method]]s such as [[FETI]] and [[balancing domain decomposition]]<ref name=\"Dryja-2005-NAM\">M. Dryja, ''A Neumann-Neumann algorithm for a mortar discretization of elliptic problems with discontinuous coefficients'', Numer. Math., 99 (2005), pp. 645--656.\n\n</ref><ref name=\"Marcinkowski-2001-DDM\">L. Marcinkowski, ''Domain decomposition methods for mortar finite element discretizations of plate problems'', SIAM J. Numer. Anal., 39 (2001), pp. 1097--1114 (electronic).\n\n</ref><ref name=\"Stefanica-2005-PFA\">D. Stefanica, ''Parallel FETI algorithms for mortars'', Appl. Numer. Math., 54 (2005), pp. 266--279.\n\n</ref><ref name=\"Pencheva-2003-BDD\">G. Pencheva and I. Yotov, ''Balancing domain decomposition for mortar mixed finite element methods'', Numer. Linear Algebra Appl., 10 (2003), pp. 159--180. Dedicated to the 60th birthday of Raytcho Lazarov.\n\n</ref> In the engineering practice in the finite element method, continuity of solutions between non-matching subdomains is implemented by [[multiple-point constraint]]s.\n\n==References==\n\n<references/>\n\n{{Numerical PDE}}\n\n{{DEFAULTSORT:Mortar Methods}}\n[[Category:Domain decomposition methods]]\n\n\n{{mathapplied-stub}}"
    },
    {
      "title": "Neumann–Dirichlet method",
      "url": "https://en.wikipedia.org/wiki/Neumann%E2%80%93Dirichlet_method",
      "text": "In mathematics, the '''Neumann–Dirichlet method''' is a [[domain decomposition]] [[preconditioner]] which involves solving [[Neumann problem|Neumann]] [[boundary value problem]] on one subdomain and [[Dirichlet problem|Dirichlet]] [[boundary value problem]] on another, adjacent across the interface between the subdomains.<ref name=\"Widlund-1988-ISM\">O. B. Widlund, ''Iterative substructuring methods: algorithms and theory for elliptic problems in the plane'', in First International Symposium on Domain Decomposition Methods for Partial Differential Equations (Paris, 1987), SIAM, Philadelphia, PA, 1988, pp. 113&ndash;128.</ref> On a problem with many subdomains organized in a rectangular mesh, the subdomains are assigned Neumann or Dirichlet problems in a checkerboard fashion.\n\n==See also==\n\n*[[Neumann&ndash;Neumann method]]\n\n==References==\n\n<references/>\n\n{{Numerical PDE}}\n\n{{DEFAULTSORT:Neumann-Dirichlet Method}}\n[[Category:Domain decomposition methods]]\n\n\n{{mathapplied-stub}}"
    },
    {
      "title": "Neumann–Neumann methods",
      "url": "https://en.wikipedia.org/wiki/Neumann%E2%80%93Neumann_methods",
      "text": "In mathematics, '''Neumann–Neumann methods''' are domain decomposition [[preconditioner]]s named so because they solve a [[Neumann problem]] on each subdomain on both sides of the interface between the subdomains.<ref name=\"Klawonn-2001-FNN\">A. Klawonn and O. B. Widlund, ''FETI and Neumann–Neumann iterative substructuring methods: connections and new results'', Comm. Pure Appl. Math., 54 (2001), pp. 57–90.</ref>  Just like all domain decomposition methods, so that the number of iterations does not grow with the number of subdomains, Neumann–Neumann methods require the solution of a coarse problem to provide global communication. The [[balancing domain decomposition]] is a Neumann–Neumann method with a special kind of coarse problem.\n\nMore specifically, consider a domain Ω, on which we wish to solve the Poisson equation\n\n:<math>-\\Delta u = f, \\qquad u|_{\\partial\\Omega} = 0</math>\n\nfor some function ''f''. Split the domain into two non-overlapping subdomains Ω<sub>1</sub> and Ω<sub>2</sub> with common boundary Γ and let ''u''<sub>1</sub> and ''u''<sub>2</sub> be the values of ''u'' in each subdomain. At the interface between the two subdomains, the two solutions must satisfy the matching conditions\n\n:<math>u_1 = u_2, \\qquad \\partial_nu_1 = \\partial_nu_2</math>\n\nwhere ''n'' is the unit normal vector to Γ.\n\nAn iterative method for approximating each u<sub>i</sub> satisfying the matching conditions is to first solve the decoupled problems (i=1,2)\n\n:<math>-\\Delta u_i^{(k)} = f_i, \\qquad u_i^{(k)}|_{\\partial\\Omega} = 0, \\quad u^{(k)}_i|_\\Gamma = \\lambda^{(k)}</math>\n\nfor some function λ<sup>(k)</sup> on Γ. We then solve the two Neumann problems\n\n:<math>-\\Delta\\psi_i^{(k)} = 0, \\qquad \\psi_i^{(k)}|_{\\partial\\Omega} = 0, \\quad \\partial_n\\psi_i^{(k)} = \\partial_nu_1^{(k)} - \\partial_nu_2^{(k)}.</math>\n\nWe then obtain the next iterate by setting\n\n:<math>\\lambda^{(k+1)} = \\lambda^{(k)} - \\omega(\\theta_1\\psi_1^{(k)}|_\\Gamma - \\theta_2\\psi_2^{(k)}|_\\Gamma)</math>\n\nfor some parameters ω, θ<sub>1</sub> and θ<sub>2</sub>.\n\nThis procedure can be viewed as a [[Modified Richardson iteration|Richardson iteration]] for the iterative solution of the equations arising from the [[Schur complement method]].<ref name=\"Quarteroni\">A. Quarteroni and A. Valli, ''Domain Decomposition Methods for Partial Differential Equations'', Oxford Science Publications 1999.</ref>\n\nThis continuous iteration can be discretized by the finite element method and then solved—in parallel—on a computer. The extension to more subdomains is straightforward, but using this method as stated as a preconditioner for the Schur complement system is not scalable with the number of subdomains; hence the need for a global coarse solve.\n\n==See also==\n* [[Neumann–Dirichlet method]]\n\n==References==\n\n<references/>\n\n{{Numerical PDE}}\n\n{{DEFAULTSORT:Neumann-Neumann Methods}}\n[[Category:Domain decomposition methods]]"
    },
    {
      "title": "Poincaré–Steklov operator",
      "url": "https://en.wikipedia.org/wiki/Poincar%C3%A9%E2%80%93Steklov_operator",
      "text": "In [[mathematics]], a '''Poincaré–Steklov operator''' (after [[Henri Poincaré]] and [[Vladimir Steklov (mathematician)|Vladimir Steklov]]) maps the values of one [[boundary condition]] of the solution of an [[elliptic partial differential equation]] in a [[domain (mathematical analysis)|domain]] to the values of another boundary condition. Usually, either of the boundary conditions determines the solution. Thus, a Poincaré–Steklov operator encapsulates the boundary response of the system modelled by the partial differential equation. When the partial differential equation is discretized, for example by [[finite elements]] or [[finite differences]], the discretization of the Poincaré–Steklov operator is the [[Schur complement]] obtained by eliminating all degrees of freedom inside the domain.\n\nNote that there may be many suitable different boundary conditions for a given partial differential equation and the direction in which a Poincaré–Steklov operator maps the values of one into another is given only by a convention.<ref name=\"Bossavit\">A. Bossavit, The \"scalar\" Poincaré–Steklov operator and the \"vector\" one: algebraic structures which underlie their duality. In ''Fourth International Symposium on Domain Decomposition Methods for Partial Differential Equations (Moscow, 1990), pages 19–26. SIAM, Philadelphia, PA, 1991.</ref>\n\n==Dirichlet-to-Neumann operator on a bounded domain==\n\nConsider a [[steady-state]] distribution of [[temperature]] in a body for given temperature values on the body surface. Then the resulting [[heat flux]] through the boundary (that is, the heat flux that would be required to maintain the\ngiven surface temperature) is determined uniquely. The mapping of the surface temperature to the surface heat flux is a Poincaré–Steklov operator. This particular Poincaré–Steklov operator is called the Dirichlet to Neumann (DtN) operator. The values of the temperature on the surface is the [[Dirichlet boundary condition]] of the [[Laplace equation]], which describes the distribution of the temperature inside the body. The heat flux through the surface is the [[Neumann boundary condition]] (proportional to the [[normal derivative]] of the temperature).\n\nMathematically, for a function <math>u</math> [[harmonic function|harmonic]] in a domain <math>\\Omega\\subset R^n</math>, the Dirichlet-to-Neumann operator maps the values of <math>u</math> on the boundary of <math>\\Omega</math> to the normal derivative <math>\\partial u/\\partial n</math> on the boundary of <math>\\Omega</math>. This Poincaré–Steklov operator is at the foundation of [[iterative substructuring]].<ref name=\"Quarteroni\">Alfio Quarteroni and Alberto Valli, Domain Decomposition Methods for Partial Differential Equations, Oxford Science Publications, 1999</ref>\n\n[[Alberto Calderon|Calderón]]'s inverse boundary problem is the problem of finding the coefficient of a divergence form elliptic partial differential equation from its Dirichlet-to-Neumann operator. This is the mathematical formulation of [[electrical impedance tomography]].\n\n==Dirichlet-to-Neumann operator for a boundary condition at infinity==\n\nThe solution of partial differential equation in an [[Domain (mathematical analysis)|external domain]] gives rise to a Poincaré–Steklov operator that brings the boundary condition from infinity to the boundary. One example is the Dirichlet-to-Neumann operator that maps the given temperature on the boundary of a cavity in infinite medium with zero temperature at infinity to the heat flux on the cavity boundary. Similarly, one can define the Dirichlet-to-Neumann operator on the boundary of a sphere for the solution for the [[Helmholtz equation]] in the exterior of the sphere. Approximations of this operator are at the foundation of a class of method for the modeling of acoustic scattering in infinite medium, with the scatterer enclosed in the sphere and the Poincaré–Steklov operator serving as a non-reflective (or absorbing) boundary condition.<ref name=\"Oberai\">Assad A. Oberai, Manish Malhotra, and Peter M. Pinsky, On the implementation of the Dirichlet-to-Neumann radiation condition for iterative solution of the Helmholtz equation. Appl. Numer. Math., 27(4):443–464, 1998.</ref>\n\n==Poincaré–Steklov operator in electromagnetics==\nThe Poincaré–Steklov operator is defined to be the operator mapping the time-harmonic (that is, dependent on time as <math>e^{i\\omega t}</math>) tangential electric field on the boundary of a region to the equivalent electric current on its boundary.<ref>L. F. Knockaert, On the complex symmetry of the Dirichlet-to-Neumann operator, Progress in Electromagnetics Research B, Vol. 7, 145–157, 2008. {{doi|10.2528/PIERB08022102}}</ref>\n\n==See also==\n*[[Fluid-structure interaction]] (boundary/interface) analysis\n*[[Schur complement method|Schur complement domain decomposition method]]\n\n==References==\n* [[Vyacheslav Ivanovich Lebedev|Lebedev]], V. I.; Agoshkov, V. I. Operatory Puankare-Steklova i ikh prilozheniya v analize. (Russian) [Poincaré Steklov operators and their applications in analysis] Akad. Nauk SSSR, Vychisl. Tsentr, Moscow, 1983. 184 pp. {{MathSciNet|id= 827980}}\n* Vassilevski, P. S. Poincaré–Steklov operators for elliptic difference problems.  C. R. Acad. Bulgare Sci.  38  (1985),  no. 5, 543—546. {{MathSciNet|id= 799809}}\n<references/>\n*<!-- E.B. Curtis, D. Ingerman, J.A. Morrow. Circular planar graphs and resistor networks. Linear Algebra and its Applications. Volume 283, Issues 1–3, 1 November 1998, Pages 115–150.-->\n{{Numerical PDE}}\n\n{{DEFAULTSORT:Poincare-Steklov Operator}}\n[[Category:Domain decomposition methods]]"
    },
    {
      "title": "Schur complement method",
      "url": "https://en.wikipedia.org/wiki/Schur_complement_method",
      "text": "{{dablink|This article is not about [[Schur complement]]s of matrices.}}\n\nIn [[numerical analysis]], the '''Schur complement method''', named after [[Issai Schur]], is the basic and the earliest version of non-overlapping [[domain decomposition method]], also called [[iterative substructuring]]. A [[finite element]] problem is split into non-overlapping subdomains, and the unknowns in the interiors of the subdomains are eliminated. The remaining Schur complement system on the unknowns associated with subdomain interfaces is solved by the [[conjugate gradient method]].\n\n== The method and implementation ==\nSuppose we want to solve the Poisson equation\n:<math>-\\Delta u = f, \\qquad u|_{\\partial\\Omega} = 0</math>\non some domain Ω. When we discretize this problem we get an ''N''-dimensional linear system ''AU = F''. The Schur complement method splits up the linear system into sub-problems. To do so, divide Ω into two subdomains Ω<sub>1</sub>, Ω<sub>2</sub> which share an interface Γ. Let ''U''<sub>1</sub>, ''U''<sub>2</sub> and ''U''<sub>Γ</sub> be the degrees of freedom associated with each subdomain and with the interface. We can then write the linear system as\n:<math>\\left[\\begin{matrix} A_{11} & 0 & A_{1\\Gamma} \\\\ 0 & A_{22} & A_{2\\Gamma} \\\\ A_{\\Gamma 1} & A_{\\Gamma 2} & A_{\\Gamma\\Gamma}\\end{matrix}\\right]\\left[\\begin{matrix} U_1 \\\\ U_2 \\\\ U_\\Gamma\\end{matrix}\\right] = \\left[\\begin{matrix} F_1 \\\\ F_2 \\\\ F_\\Gamma\\end{matrix}\\right],</math>\nwhere ''F''<sub>1</sub>, ''F''<sub>2</sub> and ''F''<sub>Γ</sub> are the components of the load vector in each region.\n\nThe Schur complement method proceeds by noting that we can find the values on the interface by solving the smaller system\n:<math>\\Sigma U_\\Gamma = F_\\Gamma - A_{\\Gamma 1}A_{11}^{-1}F_1 - A_{\\Gamma 2}A_{22}^{-1}F_2,</math>\nfor the interface values ''U''<sub>Γ</sub>, where we define the ''Schur complement'' matrix\n:<math>\\Sigma = A_{\\Gamma\\Gamma} - A_{\\Gamma 1}A_{11}^{-1}A_{1\\Gamma} - A_{\\Gamma 2}A_{22}^{-1}A_{2\\Gamma}.</math>\nThe important thing to note is that the computation of any quantities involving <math>A_{11}^{-1}</math> or <math>A_{22}^{-1}</math> involves solving decoupled [[Dirichlet problem]]s on each domain, and these can be done in parallel. Consequently, we need not store the Schur complement matrix explicitly; it is sufficient to know how to multiply a vector by it.\n\nOnce we know the values on the interface, we can find the interior values using the two relations\n:<math>A_{11}U_1 = F_1 - A_{1\\Gamma}U_\\Gamma, \\qquad A_{22}U_2 = F_2 - A_{2\\Gamma}U_\\Gamma,</math>\nwhich can both be done in parallel.\n\nThe multiplication of a vector by the Schur complement is a [[discretization|discrete]] version of the [[Poincaré&ndash;Steklov operator]], also called the [[Dirichlet to Neumann mapping]].\n\n== Advantages ==\n\nThere are two benefits of this method. First, the elimination of the interior unknowns on the subdomains, that is the solution of the Dirichlet problems, can be done in parallel. Second, passing to the Schur complement reduces condition number and thus tends to decrease the number of iterations. For second-order problems, such as the [[Laplace equation]] or [[linear elasticity]], the matrix of the system has [[condition number]] of the order 1/''h''<sup>2</sup>, where ''h'' is the characteristic element size. The Schur complement, however, has condition number only of the order&nbsp;1/''h''.\n\nFor performances, the Schur complement method is combined with preconditioning, at least a [[diagonal preconditioner]]. The [[Neumann&ndash;Neumann method]] and the [[Neumann&ndash;Dirichlet method]] are the Schur complement method with particular kinds of preconditioners.\n\n{{Numerical PDE}}\n\n{{DEFAULTSORT:Schur Complement Method}}\n[[Category:Domain decomposition methods]]"
    },
    {
      "title": "Schwarz alternating method",
      "url": "https://en.wikipedia.org/wiki/Schwarz_alternating_method",
      "text": "In [[mathematics]], the '''Schwarz alternating method''' or '''alternating process''' is an [[iterative method]] introduced in 1869-1870 by [[Hermann Schwarz]] in the theory of [[conformal mapping]]. Given two overlapping regions in the complex plane in each of which the [[Dirichlet problem]] could be solved, Schwarz described an [[iterative method]] for solving the Dirichlet problem in their union, provided their intersection was suitably well behaved.  This  was one of several constructive techniques of conformal mapping developed by Schwarz as a contribution to the problem of [[Uniformization theorem|uniformization]], posed by [[Bernhard Riemann|Riemann]] in the 1850s and first resolved rigorously by [[Paul Koebe|Koebe]] and [[Poincaré]] in 1907.  It furnished a scheme for uniformizing the union of two regions knowing how to uniformize each of them separately, provided their intersection was topologically a disk or an annulus. From 1870 onwards [[Carl Neumann]] also contributed to this theory.\n\nIn the 1950s Schwarz's method was generalized in the theory of [[partial differential equation]]s to an iterative method for finding the solution of a [[elliptic boundary value problem]] on a [[domain (mathematics)|domain]] which is the union of two overlapping subdomains. It involves solving the boundary value problem on each of the two subdomains in turn, taking always the last values of the approximate solution as the next [[boundary conditions]]. It is used in [[numerical analysis]], under the name '''multiplicative Schwarz method''' (in opposition to [[additive Schwarz method]]) as a [[domain decomposition method]].\n\n==History==\n[[File:Ddm original logo.png|thumb|DDM original logo: representation of the problem considered by [[Hermann Schwarz|H. A. Schwarz]] in 1870. The blue rectangle was originally a square]]\n\nIt was first formulated by [[Hermann Schwarz|H. A. Schwarz]] <ref name=\"Schwarz-1870-UGA\">See his paper {{Harv|Schwarz|1870b}}</ref> and served as a theoretical tool: its convergence for general second order [[elliptic partial differential equation]]s was first proved much later, in 1951, by [[Solomon Mikhlin]].<ref>See the paper {{Harv|Mikhlin|1951}}: a comprehensive exposition was given by the same author in later books</ref>\n\n==The algorithm==\n\nThe original problem considered by Schwarz was a [[Dirichlet problem]] (with the [[Laplace's equation]]) on a domain consisting of a circle and a partially overlapping square. To solve the Dirichlet problem on one of the two subdomains (the square or the circle), the [[Dirichlet conditions|value of the solution must be known on the border]]: since a part of the border is contained in the other subdomain, the Dirichlet problem must be solved jointly on the two subdomains. An iterative algorithm is introduced:\n# Make a first guess of the solution on the circle's boundary part that is contained in the square\n# Solve the Dirichlet problem on the circle\n# Use the solution in (2) to approximate the solution on the square's boundary\n# Solve the Dirichlet problem on the square\n# Use the solution in (4) to approximate the solution on the circle's boundary, then go to step (2).\nAt convergence, the solution on the overlap is the same when computed on the square or on the circle.\n\n==Optimized Schwarz methods==\nThe convergence speed depends on the size of the overlap between the subdomains, and on the transmission conditions (boundary conditions used in the interface between the subdomains). It is possible to increase the convergence speed of the Schwarz methods by choosing adapted transmission conditions: theses methods are then called Optimized Schwarz methods.<ref>\n{{citation|first=Martin J.|last=Gander|first2=Laurence|last2=Halpern| first3=Frédéric| last3=Nataf| title=Optimized Schwarz Methods| year=2001 |journal=12th International Conference on Domain Decomposition Methods}}\n ([http://www.ddm.org/DD12/Gander.pdf PDF])\n</ref>\n\n==See also==\n*[[Uniformization theorem]]\n*[[Schwarzian derivative]]\n*[[Schwarz triangle map]]\n*[[Schwarz reflection principle]]\n*[[Additive Schwarz method]]\n\n==Notes==\n<references/>\n\n==References==\n'''Original papers'''\n\n*{{citation|first=H.A.|last=Schwarz|title= Über einige Abbildungsaufgaben|journal= J. Reine Angew. Math.|volume=1869|issue=70|year=1869|pages=105–120|author-link = Hermann Schwarz|doi=10.1515/crll.1869.70.105}}\n*{{citation|first=H.A.|last=Schwarz|title=Über die Integration der partiellen Differentialgleichung {{math|1=∂<sup>2</sup>''u''/∂''x''<sup>2</sup> + ∂<sup>2</sup>''u''/∂''y''<sup>2</sup> = 0}} unter vorgeschriebenen Grenz- und Unstetigkeitbedingungen|journal=Monatsber. Der Königlichen Akademie der Wissenschaft zu Berlin|year=1870a|pages=767–795|author-link = Hermann Schwarz}}\n*{{Citation\n| last = Schwarz\n| first = H. A.\n| author-link = Hermann Schwarz\n| title = Über einen Grenzübergang durch alternierendes Verfahren\n| journal = Vierteljahrsschrift der Naturforschenden Gesellschaft in Zürich\n| volume = 15\n| issue = \n| pages = 272–286\n| year = 1870b\n| month =\n| url = https://www.biodiversitylibrary.org/item/34472#page/280/mode/1up\n| doi = \n| jfm =02.0214.02\n}}\n*{{citation|first=Carl|last=Neumann|authorlink=Carl Neumann|title=Zur Theorie des Potentiales|journal= Math. Ann.|volume= 2|issue=3|year=1870|page= 514|doi=10.1007/bf01448242|url=https://zenodo.org/record/1428252}}\n*{{citation|first=Carl|last=Neumann|authorlink=Carl Neumann|title=Untersuchungen über das logarithmische und Newton'sche Potential|publisher= Teubner|year=1877}}\n*{{citation|first=Carl|last=Neumann|authorlink=Carl Neumann|title=Vorlesungen über Riemann's Theorie der abelschen Integrale |edition=2nd|publisher=Teubner|year=1884}}\n\n'''Conformal mapping and harmonic functions'''\n\n*{{citation|last=Nevanlinna|first= Rolf|title=Über das alternierende Verfahren von Schwarz|journal= J. Reine Angew. Math.|volume= 180|pages= 121–128|year=1939}}\n*{{citation|last=Nevanlinna|first= Rolf|title=Bemerkungen zum alternierenden Verfahren|journal=Monatsh. Math. Phys.|volume= 48|year= 1939|pages= 500–508|doi=10.1007/bf01696203}}\n*{{citation|last=Nevanlinna|first= Rolf|title= Uniformisierung|series=Die Grundlehren der Mathematischen Wissenschaften in Einzeldarstellungen mit besonderer Berücksichtigung der Anwendungsgebiete|volume=64|publisher= Springer|year= 1953}}\n*{{citation|last=Sario|first= Leo|title=Alternating method on arbitrary Riemann surfaces|journal=Pacific J. Math.|volume= 3|issue= 3|year=1953|pages=631–645|doi=10.2140/pjm.1953.3.631}}\n*{{citation|last=Morgenstern|first=Dietrich|title=Begründung des alternierenden Verfahrens durch Orthogonalprojektion|\njournal=Z. Angew. Math. Mech.|volume= 36|issue=7–8|year= 1956|pages= 255–256|doi=10.1002/zamm.19560360711|hdl=10338.dmlcz/100409}}\n*{{citation|last=Cohn|first= Harvey|title=Conformal mapping on Riemann surfaces|publisher=Dover|year=1980|isbn=0-486-64025-6|pages=242–262}}, Chapter 12, Alternating Procedures\n*{{citation|title=Harmonic Measure|first=John B.|last= Garnett|first2= Donald E.|last2= Marshall|publisher=Cambridge University Press|year= 2005|isbn=1139443097}}\n*{{citation|last= Freitag|first= Eberhard|title=Complex analysis. 2. Riemann surfaces, several complex variables, abelian functions, higher modular functions|publisher=Springer|year= 2011|isbn=978-3-642-20553-8}}\n*{{citation|first=Henri Paul|last= de Saint-Gervais|title=Uniformization of Riemann Surfaces: revisiting a hundred-year-old theorem|translator=Robert G. Burns|\nisbn=978-3-03719-145-3|doi= 10.4171/145|year=2016|url=http://www.ems-ph.org/books/book.php?proj_nr=198|publisher=European Mathematical Society}}, translation of [http://perso.ens-lyon.fr/ghys/articles/Uniformisationsurfaces.pdf French text]\n*{{citation|first=Renaud|last=Chorlay|title=L'émergence du couple local-global dans les théories géométriques, de Bernhard Riemann à la théorie des faisceaux|year=2007|url=http://www.sphere.univ-paris-diderot.fr/IMG/pdf/These_Chorlay_Partie_1.pdf|pages=123–134}} (cited in de Saint-Gervais)\n*{{citation|title=Hidden Harmony—Geometric Fantasies: The Rise of Complex Function Theory|series= Sources and Studies in the History of Mathematics and Physical Sciences|\nfirst=Umberto|last= Bottazzini|first2= Jeremy|last2= Gray|publisher=Springer|year= 2013|isbn=978-1461457251}}\n\n'''PDEs and numerical analysis'''\n\n*{{Citation\n| last = Mikhlin\n| first = S.G.\n| author-link = Solomon Mikhlin\n| title = On the Schwarz algorithm\n| journal = [[Doklady Akademii Nauk SSSR]]\n| language = Russian\n| series = n. Ser.\n| volume = 77\n| pages = 569–571\n| year = 1951\n| url = \n| mr =0041329\n| zbl = 0054.04204\n}}\n\n==External links==\n*{{springer\n| title= Schwarz alternating method\n| id= Schwarz_alternating_method&oldid=13958\n| last= Solomentsev\n| first= E.D.\n| author-link=\n}}\n\n{{Numerical PDE|state=collapsed}}\n\n{{DEFAULTSORT:Schwarz Alternating Method}}\n[[Category:Conformal mapping]]\n[[Category:Harmonic functions]]\n[[Category:Domain decomposition methods]]\n\n\n{{mathanalysis-stub}}"
    },
    {
      "title": "Barsoum elements",
      "url": "https://en.wikipedia.org/wiki/Barsoum_elements",
      "text": "'''Barsoum elements''' are a technique of [[finite element method|finite element analysis]] used in fracture analysis first introduced by R. Barsoum.<ref name=Barsoum1976>\n{{cite journal\n  |title=Further application of quadratic isoparametric finite elements to linear fracture mechanics of plate bending and general shells\n  |journal=International Journal of Fracture\n  |date=February 1975\n  |first=Roshdy S.|last=Barsoum\n  |volume=11|pages=167–169\n  |number=1\n|doi=10.1007/BF00034724\n  }}</ref>\n\n==Technique==\nIn this method, the usual isoparametric 6 node triangular or 8 node isoparametric quadrilateral elements are employed. The mid side nodes on 2 adjacent sides are shifted towards the corner node to the quarter point location. For these locations of the mid nodes, the [[Jacobian matrix and determinant|Jacobian]] becomes [[Mathematical singularity|singular]] at the corner node thus making displacement derivatives infinite and stresses and strains become infinite as well. It can be shown that the variation of stresses along the 2 sides of the elements is according to {{math|1/{{radical|r}}}}.\n\nOn the other hand, if all the three nodes on the side of an 8 node quadrilateral element are collapsed to one node (given the same node number) then the stress or strain varies as {{math|1/{{radical|r}}}} along any radial line emanating from crack tip. All the mid side nodes adjacent to the crack tip are at quarter point locations. From the displacement field solution the stress intensity factor ''K<sub>1</sub>'' in a mode 1 case can be calculated as per the following relation:\n\n<math>K_1 = \\frac{2\\mu\\sqrt{2\\pi}(4V_B-V_C)}{(k+1)\\sqrt{L}}</math>\n\nwhere ''V<sub>B</sub>'' and ''V<sub>C</sub>'' are the displacement in the y direction behind the crack tip.\n\nIt has been demonstrated that ''K<sub>1</sub>'' found by this method is within 2% of theoretical solutions. Accuracy of finite element calculation can be improved if the neighboring elements are also modeled to have the terms depicting the stresses for a crack with its tip outside the element.\n\n== References ==\n{{reflist}}\n\n[[Category:Finite element method]]"
    },
    {
      "title": "Bridge Software Institute",
      "url": "https://en.wikipedia.org/wiki/Bridge_Software_Institute",
      "text": "{{Infobox Organization\n|name         = Bridge Software Institute\n|image        = \n|image_border = \n|size         = \n|caption      = \n|map          =\n|msize        = \n|mcaption     =\n|motto        =\n|formation    = 2000\n|type         = Institute\n|headquarters = [[Gainesville, Florida]]\n|location     = {{flagicon|USA}} [[United States]]\n|membership   =\n|language     =\n|leader_title = Director\n|leader_name  = Gary Consolazio, Ph.D.\n|key_people   = Michael Davidson, Ph.D., P.E. (Associate Director); Henry Bollmann, P.E. (Senior Engineer); Anand Patil, P.E. (Assistant Engineer); Clinton Monari (Lead UI Developer); Brandon Crow (Developer); Cary Peterson (Licensing and Distribution)\n|num_staff    = \n|budget       = \n|website      = [https://bsi.ce.ufl.edu/ Official website]\n}}\nThe '''Bridge Software Institute''' is headquartered at the [[University of Florida]] (UF) in Gainesville, Florida. It was established in January 2000 to oversee the development of bridge related software products at UF. Today, Bridge Software Institute has a leadership position in the bridge software industry and Bridge Software Institute products are used by engineers nationwide, both in state Departments of Transportation and leading private consulting firms. Bridge Software Institute software is also used for the analysis of bridges in various countries by engineers around the world.\n\n==Background==\nThe institute is headquartered in [[Gainesville, Florida]] at the [[University of Florida]]. The Bridge Software Institute was officially established January 2000 and is nationally acclaimed. The mission of the institute is to address the increasing demands of the transportation industry. The Bridge Software Institute develops cutting-edge bridge software used extensively in the transportation industry.\n\nThe software is engineered by leveraging the institutional research activities of the Structural/Geotechnical Research Groups in the [[Gator Engineering|Engineering School of Sustainable Infrastructure & Environment at the University of Florida]]. One of the main strengths of the institute, is in nonlinear dynamic finite element analysis and its applications to solving large-scale extreme event problems.\n\nSince 2003, the Bridge Software Institute has developed a robust database system that integrates the application of geotechnical engineering data and associated metadata which enables the construction of services in the digital environment. The [[Florida Department of Transportation]] Database System is now being used in large-scale implementations, with more applications currently under development.\n\nBridge Software Institute also participates in the development and promotion of the Data Interchange for Geotechnical and GeoEnvironmental Specialists (DIGGS).<ref>[http://www.diggsml.com/applications DIGGS Applications] {{webarchive |url=https://web.archive.org/web/20090408143706/http://www.diggsml.com/applications |date=April 8, 2009 }}</ref> DIGGS is a coalition of government agencies, universities and industry partners whose focus is on the creation and maintenance of an international data transfer standard for transportation related data. The coalition came into existence through coordination with the U.S. Federal Highway Administration who sponsored meetings and eventually formed the pooled fund study project.\n\nThis intellectual and creative combination of academia, government, and industry is the reason behind the success of the Bridge Software Institute. It invigorates the work of the faculty, staff, and the students associated with Bridge Software Institute.\n\n==Products==\n\n===FB-MultiPier===\nFB-MultiPier is a nonlinear finite element analysis program capable of analyzing multiple bridge pier structures interconnected by bridge spans. The full structure can be subjected to static analysis, AASHTO load analysis, response spectrum analysis, and time-history analysis. Each pier structure is composed of pier columns and cap supported on a pile cap and piles/shafts embedded in soil. This program couples nonlinear structural finite element analysis with nonlinear soil resistance models for axial, lateral, rotational, and torsional soil behavior to provide a robust system of analysis for coupled bridge pier structures and foundation systems. FB-MultiPier allows for finite element model generation based on graphical input and parametric descriptions of the structure and foundation systems. This allows the engineer to work directly with design parameters and improves efficiency in model creation and interpretation of analysis results.\n\n===FB-Deep===\nThe FB-Deep computer program is a Windows-based program used to estimate the static axial capacity of drilled shafts and driven piles. The drilled shaft methodology is based upon Federal Highway Administration reports. Driven pile methodology utilizes two types of analyses: SPT and CPT. SPT methodology is based on empirical correlations between cone penetrometer tests and standard penetration tests for typical Florida soil types. Unit end bearing resistance and unit skin friction resistance versus SPT N values are given in the FDOT research bulletin RB-121, for the different soil types. Driven pile capacity calculated using CPT data can be determined by three separate methods. The first method is the Schmertmann method proposed by Schmertmann in 1978 (AASHTO LRFD Bridge Design Manual). The second method is the LCPC method proposed by Bustamante and Gianeselli for the French Highway Department in 1982. The third method is the UF method proposed by Bloomquist, McVay and Hu for the FDOT in 2007.\n\n===Pile Technician===\nPile Technician was developed for the FDOT to provide a fast and efficient manner of entering Pile data to calculate payment for work performed by the contractor.\n\n===Atlas===\nATLAS is an analysis/design program which is used for the analysis and design of signal lights and signs supported by the dual cable system. The analysis consists of an iterative technique which is a combination of the Force Density Method (FDM) and the Direct Stiffness Method (DSM). The FDM is ideal for the analysis of cable structures whereas the DSM is the most widely used technique for the analysis of framed structures. The nature of the structures under consideration lead to the development of this analysis technique which is a combination of the two methods. ATLAS handles the wind loading in a realistic manner. It allows the user to specify the wind speed as well as the areas of the signal lights or signs, parallel to the X and Y axis. In doing so the program calculates the applied loads on the corresponding nodal points internally, based on the specified element areas of the LIGHT elements in each plane. The loads are calculated in each cycle of the nonlinear process. Therefore, the applied loads in each cycle change with the rotation angle of the light. Thus the load are more realistic since they change with the swinging of the light. The angle change of the light also causes an uplift load at the cable nodal points.\n\n==See also==\n*[[University of Florida]]\n*[[University of Florida College of Engineering]]\n\n==References==\n{{Reflist|2}}\n\n==External links==\n* [http://bsi.ce.ufl.edu/ Bridge Software Institute]\n\n{{University of Florida}}\n\n[[Category:Computer-aided engineering software]]\n[[Category:Finite element method]]\n[[Category:University of Florida]]\n[[Category:3D graphics software]]\n[[Category:2000 establishments in Florida]]"
    },
    {
      "title": "Discrete exterior calculus",
      "url": "https://en.wikipedia.org/wiki/Discrete_exterior_calculus",
      "text": "{{Expert-subject|Mathematics|date=February 2009}}\n\nIn [[mathematics]], the '''discrete exterior calculus''' ('''DEC''') is the extension of the [[exterior algebra|exterior calculus]] to [[discrete mathematics|discrete]] spaces including [[graph theory|graphs]] and [[finite element method|finite element meshes]]. DEC methods have proved to be very powerful in improving and analyzing finite element methods: for instance, DEC-based methods allow the use of highly non-uniform meshes to obtain accurate results. Non-uniform meshes are advantageous because they allow the use of large elements where the process to be simulated is relatively simple, as opposed to a fine resolution where the process may be complicated (e.g., near an obstruction to a fluid flow), while using less computational power than if a uniformly fine mesh were used.\n\n==The discrete exterior derivative==\n\n[[Stokes' theorem]] relates the [[integral]] of a [[differential form|differential (''n''&nbsp;&minus;&nbsp;1)-form]] ''ω'' over the [[boundary (topology)|boundary]] ∂''M'' of an ''n''-[[dimension]]al manifold ''M'' to the integral of d''ω'' (the [[exterior derivative]] of ''ω'', and a differential ''n''-form on ''M'') over ''M'' itself:\n\n:<math>\\int_{M} \\mathrm{d} \\omega = \\int_{\\partial M} \\omega.</math>\n\nOne could think of differential ''k''-forms as [[linear operator]]s that act on ''k''-dimensional \"bits\" of space, in which case one might prefer to use the [[bra–ket notation]] for a dual pairing. In this notation, Stokes' theorem reads as\n\n:<math>\\langle \\mathrm{d} \\omega \\mid M \\rangle = \\langle \\omega \\mid \\partial M \\rangle.</math>\n\nIn finite element analysis, the first stage is often the approximation of the domain of interest by a [[triangulation (topology)|triangulation]], ''T''. For example, a curve would be approximated as a union of straight line segments; a surface would be approximated by a union of triangles, whose edges are straight line segments, which themselves terminate in points. Topologists would refer to such a construction as a [[simplicial complex]]. The boundary operator on this triangulation/simplicial complex ''T'' is defined in the usual way: for example, if ''L'' is a directed line segment from one point, ''a'', to another, ''b'', then the boundary ∂''L'' of ''L'' is the formal difference ''b''&nbsp;&minus;&nbsp;''a''.\n\nA ''k''-form on ''T'' is a linear operator acting on ''k''-dimensional subcomplexes of ''T''; e.g., a 0-form assigns values to points, and extends linearly to linear combinations of points; a 1-form assigns values to line segments in a similarly linear way. If ''ω'' is a ''k''-form on ''T'', then the '''discrete exterior derivative''' d''ω'' of ''ω'' is the unique (''k''&nbsp;+&nbsp;1)-form defined so that Stokes' theorem holds:\n\n:<math>\\langle \\mathrm{d} \\omega \\mid S \\rangle = \\langle \\omega \\mid \\partial S \\rangle.</math>\n\nFor every (''k''&nbsp;+&nbsp;1)-dimensional subcomplex of ''T'', ''S''. Other concepts such as the discrete [[wedge product]] and the discrete [[Hodge star]] can also be defined.\n\n==See also==\n*[[Discrete differential geometry]]\n*[[Discrete Morse theory]]\n*[[Topological combinatorics]]\n\n==References==\n*[http://leogrady.net/wp-content/uploads/2017/01/grady2010discrete.pdf Discrete Calculus], Grady, Leo J., Polimeni, Jonathan R., 2010\n*[http://www.cs.jhu.edu/~misha/Fall09/Hirani03.pdf Hirani Thesis on Discrete Exterior Calculus]\n*[https://arxiv.org/abs/1611.03955 Convergence of discrete exterior calculus approximations for Poisson problems], E. Schulz & G. Tsogtgerel, arXiv:1611.03955 [math.NA]\n*[https://aip.scitation.org/doi/full/10.1063/1.2830977 On geometric discretization of elasticity], Arash Yavari, J. Math. Phys. 49, 022901 (2008), DOI:10.1063/1.2830977\n*[https://www.cs.cmu.edu/~kmcrane/Projects/DDG/ Discrete Differential Geometry: An Applied Introduction], Keenan Crane, 2018\n\n[[Category:Finite element method]]\n[[Category:Multilinear algebra]]"
    },
    {
      "title": "Finite element exterior calculus",
      "url": "https://en.wikipedia.org/wiki/Finite_element_exterior_calculus",
      "text": "'''Finite element exterior calculus (FEEC)''' is a [[mathematics|mathematical]] framework that formulates [[finite element method]]s in the calculus of [[differential form]]s. Its main application has been a comprehensive theory for finite element methods in [[computational electromagnetism]]. FEEC has been developed in the early 2000s by [[Douglas N. Arnold]], [[Richard S. Falk]] and [[Ragnar Winther]], \n<ref>Arnold, Douglas N., Richard S. Falk, and Ragnar Winther. \"[https://conservancy.umn.edu/bitstream/handle/11299/4216/2094.pdf?sequence=1&isAllowed=y Finite element exterior calculus, homological techniques, and applications].\" Acta numerica 15 (2006): 1-155.</ref>\n<ref>Arnold, Douglas, Richard Falk, and Ragnar Winther. \"[https://www.ams.org/bull/2010-47-02/S0273-0979-10-01278-4/S0273-0979-10-01278-4.pdf Finite element exterior calculus: from Hodge theory to numerical stability].\" Bulletin of the American mathematical society 47.2 (2010): 281-354.</ref>\n<ref>{{cite book |last=Arnold |first=Douglas N. |authorlink=Douglas N. Arnold |date=2018 |title=Finite Element Exterior Calculus|publisher=SIAM|isbn=978-1-611975-53-6}}</ref>\namong others. \n<ref>Alan Demlow and Anil Hirani, [https://arxiv.org/pdf/1203.0803 A posteriori error estimates for finite element exterior calculus: The de Rham complex], Found. Comput. Math. 14 (2014), 1337-1371.</ref> \n<ref>Christiansen, Snorre, and Ragnar Winther. \"[https://www.ams.org/mcom/2008-77-262/S0025-5718-07-02081-9/S0025-5718-07-02081-9.pdf Smoothed projections in finite element exterior calculus].\" Mathematics of Computation 77.262 (2008): 813-829.</ref> \n<ref>Christiansen, Snorre, and Francesca Rapetti. \"[https://arxiv.org/pdf/1306.4835 On high order finite element spaces of differential forms].\" Mathematics of Computation 85.298 (2016): 517-548.</ref> \n<ref>Holst, Michael, Adam Mihalik, and Ryan Szypowski. \"[http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.766.8507&rep=rep1&type=pdf Convergence and optimality of adaptive methods in the finite element exterior calculus framework].\" arXiv preprint arXiv:1306.1886 (2013).</ref> \n<ref>Holst, Michael, and Ari Stern. \"[https://arxiv.org/pdf/1005.4455 Geometric variational crimes: Hilbert complexes, finite element exterior calculus, and problems on hypersurfaces].\" Foundations of Computational Mathematics 12.3 (2012): 263-293.</ref> \n<ref>Hiptmair, Ralf. \"[https://www.ams.org/mcom/1999-68-228/S0025-5718-99-01166-7/S0025-5718-99-01166-7.pdf Canonical construction of finite elements].\" Mathematics of Computation of the American Mathematical Society 68.228 (1999): 1325-1346.</ref>\n<ref>Hiptmair, Ralf. \"[https://pdfs.semanticscholar.org/cb77/bb244f3528c938c98ae3b5ebdc6cd33547f2.pdf Finite elements in computational electromagnetism].\" Acta Numerica 11 (2002): 237-339.</ref> \n<ref>Kirby, Robert C. \"[https://cpb-us-east-1-juc1ugur1qwqqqo4.stackpathdns.com/sites.baylor.edu/dist/6/32/files/2015/01/ssec-1zn3ii2.pdf Low-complexity finite element algorithms for the de Rham complex on simplices].\" SIAM Journal on Scientific Computing 36.2 (2014): A846-A868.</ref> \n<ref>Licht, Martin Werner. [http://www.math.ucsd.edu/~mlicht/thesis.pdf On the A Priori and A Posteriori Error Analysis in Finite Element Exterior Calculus]. Diss. Dissertation, Department of Mathematics, University of Oslo, Norway, 2017.</ref>\nFinite element exterior calculus is sometimes called as an example of a compatible discretization technique, and bears similarities with [[discrete exterior calculus]], although they are distinct theories.\n\n==References==\n{{reflist}}\n\n[[Category:Finite element method]]\n\n\n{{applied-math-stub}}"
    },
    {
      "title": "Finite element machine",
      "url": "https://en.wikipedia.org/wiki/Finite_element_machine",
      "text": "[[File:FEMhw.jpg|thumb|left]]\nThe '''Finite Element Machine (FEM)''' was a late 1970s-early 1980s [[NASA]] project to build and evaluate the performance of a [[parallel computer]] for [[structural analysis]]. The FEM was completed and successfully tested at the [[NASA Langley Research Center]] in [[Hampton, Virginia]].<ref name=\"FEM machine\"/> The motivation for FEM arose from the merger of two concepts: the [[finite element method]] of [[structural analysis]] and the introduction of relatively low-cost [[microprocessors]].\n\nIn the finite element method, the behavior (stresses, strains and displacements resulting from load conditions) of large-scale structures is [[approximate]]d by a FE model consisting of structural elements (members) connected at structural node points. Calculations on traditional computers are performed at each node point and results communicated to adjacent node points until the behavior of the entire structure is computed. On the Finite Element Machine, microprocessors located at each node point perform these nodal computations in parallel. If there are more node points (N) than microprocessors (P), then each microprocessor performs N/P computations. The Finite Element Machine contained 32 processor boards each with a [[Texas Instruments TMS9900]] processor, 32 [[Input/Output]] (IO) boards and a TMS99/4 controller. The FEM was conceived, designed and fabricated at NASA Langley Research Center. The TI 9900 processor chip was selected by the NASA team as it was the [[TI99/4A#First domestic computer with a 16-bit processor|first 16-bit processor]] available on the market which until then was limited to less powerful [[8-bit]] processors. The FEM concept was first successfully tested to solve beam bending equations on a Langley FEM [[prototype]] ([[IMSAI 8080|4 IMSAI 8080s]]). This led to full-scale FEM fabrication & testing by the FEM hardware-software-applications team led by Dr. [[Olaf Storaasli]] formerly of [[NASA Langley Research Center]] and [[Oak Ridge National Laboratory]] (currently at [[USEC]]).\nThe first significant Finite Element Machine results are documented in: The Finite Element Machine: An experiment in parallel processing (NASA TM 84514).<ref name=\"FEM machine\"/>\n\nBased on the Finite Element Machine's success in demonstrating Parallel Computing viability, (alongside [[ILLIAC IV]] and [[Goodyear MPP]]), commercial parallel computers soon were sold. NASA Langley subsequently purchased a Flex/32 Multicomputer (and later [[Intel iPSC]] and [[Intel Paragon]]) to continue parallel finite element [[algorithm]] [[R&D]]. In 1989, the parallel equation solver code, first prototyped on FEM, and tested on FLEX was ported to NASA's first Cray YMP via Force<ref name=\"Force\"/> (Fortran for Concurrent Execution) to reduce the structural analysis computation time for the space shuttle Challenger Solid Rocket Booster resdesign with 54,870 equations from 14 hours to 6 seconds. This research accomplishment was awarded the first Cray GigaFLOP Performance Award at Supercomputing '89. This code evolved into NASA's General-Purpose Solver (GPS) for Matrix Equations used in numerous finite element codes to speed solution time. GPS sped up [[AlphaStar Corporation]]'s Genoa code 10X, allowing 10X larger applications for which the team received NASA's 1999 Software of the Year Award and a 2000 R&D100 Award.\n\n== References ==\n<references>\n<ref name=\"FEM machine\">{{Cite report\n | author1    = O.O. Storaasli\n | author2    = S.W. Peebles\n | author3    = T.W. Crockett\n | author4    = J.D. Knott\n | year       = 1982\n | title      = The finite element machine: An experiment in parallel processing\n | url        = https://ntrs.nasa.gov/archive/nasa/casi.ntrs.nasa.gov/19820024127.pdf\n | publisher  = NASA\n | accessdate = May 9, 2016\n}}</ref>\n<ref name=\"Force\">{{Cite report\n | author    = Harry F. Jordan\n | year       = 1986\n | title      = The Force on the Flex: global parallelism and portability\n | url        = http://www.dtic.mil/dtic/tr/fulltext/u2/a211391.pdf\n | publisher  = NASA\n | accessdate = May 9, 2016\n}}</ref>\n</references>\n\n;Further reading\n* [https://ntrs.nasa.gov/search.jsp?N=0&Ntk=all&Ntx=mode%20matchall&Ntt=knott%2Bcrockett System software for the finite element machine]\n* [https://ntrs.nasa.gov/search.jsp?N=0&Ntk=Title&Ntx=mode%20matchall&Ntt=PASLIB PASLIB programmer's guide for the finite element machine, revision 2.1-A]\n* [http://portal.acm.org/citation.cfm?id=646739.702119 Operating systems support for the finite element machine]\n*[https://web.archive.org/web/20070930200950/http://pdf.aiaa.org/jaPreview/JGCD/1990/PVJAPRE25369.pdf Three Parallel Computation Methods for Structural Vibration Analysis].\n* [https://web.archive.org/web/20070927230200/http://www.aiaa.org/content.cfm?pageid=406&gTable=mtgpaper&gID=50410 Solution of Structural Analysis Problems on a Parallel Computer].\n* [http://eislab.gatech.edu/pubs/journals/cas-storaasli Structural Dynamic Analysis on a Parallel Computer: The Finite Element Machine]\n\n[[Category:History of Hampton, Virginia]]\n[[Category:NASA online]]\n[[Category:Parallel computing]]\n[[Category:Massively parallel computers]]\n[[Category:Supercomputers]]\n[[Category:One-of-a-kind computers]]\n[[Category:Finite element method]]\n[[Category:NASA]]\n\n== See Also ==\n[[Minisupercomputer]]"
    },
    {
      "title": "Finite element updating",
      "url": "https://en.wikipedia.org/wiki/Finite_element_updating",
      "text": "'''Finite element model updating''' is the process of ensuring that [[finite element analysis]] results in [[Mathematical model|models]] that better reflect the measured data than the initial models.  It is part of [[verification and validation]] of numerical models.\n\n==The process==\nThe process is conducted by first choosing the [[Domain of a function|domain]] in which data is presented.  The domains used include [[time domain]], [[frequency domain]], modal domain, and time-frequency domain.\n\nThe second step is to determine which parts of the initial models are thought to have been modeled incorrectly.\n\nThe third task is to formulate a [[Function (mathematics)|function]] which has the parameters that are expected to be design variables, and which represents the distance between the ''measured'' data and the finite element model ''predicted'' data.\n\nThe fourth step is to implement the [[Optimization (mathematics)|optimization]] method to identify parameters that [[Maxima and minima|minimize]] this function.  In most cases, a gradient-based optimization strategy will be used.  For [[Nonlinear system|nonlinear]] analysis, more specific methods like [[Response surface methodology|response surface]] modeling, [[particle swarm optimization]], [[Monte Carlo method|Monte Carlo optimization]], and [[genetic algorithm]]s can be used. Recently, finite element model updating has been conducted using [[Bayesian statistics]] which gives a probabilistic interpretation of model updating.\n\n==References==\n*{{cite book |last1=Friswell |first1=M.I. |last2=Mottershead |first2= J.E. |title=Finite element model updating in structural dynamics |series=Solid Mechanics and Its Applications |volume=38 |year=1995 |publisher=[[Kluwer Academic Publishers Group]] |location=MA |isbn=978-0-7923-3431-6 |pages=1–286 }}\n*{{cite journal |last=Marwala |first=Tshilidzi |year=2002 |title=Finite element model updating using wavelet data and genetic algorithm |journal=Journal of Aircraft |volume=39 |issue=4 |pages=709–711 |doi=10.2514/2.2985 }} \n*Marwala, T., and Heyns, P.S., \"A multiple criterion method for detecting damage on structures\" AIAA Journal, 195(2), 1998, pp.&nbsp;1494-1501. \n*{{cite journal |author1=Levin, R.I.  |author2=Lieven, N.A.J. |date=January 1998 |title=Dynamic finite element model updating using simulated annealing and genetic algorithms |journal=Mechanical Systems and Signal Processing |volume=12 |issue=1 |pages=91–120 |publisher=[[Elsevier]] |doi=10.1006/mssp.1996.0136 }}\n*{{cite book |last1=Marwala |first1= Tshilidzi|title=Finite Element Model Updating Using Computational Intelligence Techniques: Applications to Structural Dynamics|year=2010 |publisher=[[Springer Science+Business Media|Springer]] |location=Heidelberg |isbn=978-1-84996-322-0 |pages=1–247 }}\n*{{cite book |last1=Marwala |first1= Tshilidzi| last2=Boulkaibet |first2= Ilyes |last3=Adhikari |first3= Sondipon |title=Probabilistic Finite Element Model Updating Using Bayesian Statistics: Applications to Aeronautical and Mechanical Engineering |year=2016 |publisher=[[John Wiley & Sons]] |location=London |isbn=978-1-119-15303-0}}\n*{{cite journal |author1=Warwick, B.T.  |author2=Kim, I.Y. |author3=Mechefske, C.K. |date=2019 |title=Multi-Objective Model Updating Optimization Considering Orthogonality |journal=Journal of Computational and Nonlinear Dynamics |volume=14 |issue=6 |pages=1-11 |doi=10.1115/1.4043086 }}\n\n==External links==\n*[http://www.femtools.com FEMtools : Software for finite element model updating in static and dynamic structural analysis]\n\n{{DEFAULTSORT:Finite Element Model Updating}}\n[[Category:Finite element method]]"
    },
    {
      "title": "Flexcom",
      "url": "https://en.wikipedia.org/wiki/Flexcom",
      "text": "{{Infobox software\n| name                   = Flexcom\n| title                  = Flexcom\n| logo                   = FlexcomLogo.png\n| logo size              = 300px\n| screenshot             = [[File:Screenshot_of_Flexcom_8.3.2_Software.png|Screenshot of Flexcom 8.3.2|300px]]\n| caption                = Flexcom 8.3.2 running on [[Windows 7]]\n| collapsible            =\n| author                 = \n| developer              = [https://www.woodplc.com/ Wood]\n| released               = <!-- {{Start date|YYYY|MM|DD}} -->\n| discontinued           =\n| latest release version = 8.10.1\n| latest release date    = {{Start date and age|2018|07|24}}\n| operating system       = [[Microsoft Windows]]\n| platform               = \n| size                   =\n| language               =\n| status                 = Actively developed\n| genre                  = [[Finite element analysis]]\n| license                = [[Proprietary software|Proprietary]] [[commercial software]]\n| website                = [https://www.woodgroup.com/flexcom Flexcom]\n}}\n\n'''Flexcom''' is a [[Finite element method|finite element]] package used in the [[Offshore drilling|offshore oil and gas]] and [[Marine energy|marine renewable energy]] industries. An educational version is also available for [[University|universities]].\n\n==History==\n\nThe name ''Flexcom'' derives from its origins as a ''com''putational software initially geared towards the analysis of ''flex''ible [[steel catenary riser|risers]], befitting the emerging riser technology of the [[North Sea]] in the early 1980s. Although originally a [[time domain]] analysis tool, more recent versions of Flexcom also incorporate [[frequency domain]] analysis capabilities. It is also capable of performing [[Modal analysis using FEM|modal analysis]] and estimating damage caused by [[Fatigue (material)|fatigue]]. The first version of the software was released in 1983, and a continuous update program has been maintained since then. As of July 2018, the version on general release is Flexcom 8.10.1.\n\n==Applications==\n\nTypical applications include:\n\n*[[Subsea production system]]s\n\n*[[Steel catenary riser]]s\n\n*[[Drilling riser]]s\n\n*[[Mooring (watercraft)|Mooring lines]]\n\n*[[Submarine pipeline]]s\n\n*[[Pipe-laying|Offshore pipe-laying]]\n\n*[[Wave power|Wave energy converters]]\n\n*[[Floating wind turbine]]s\n\n==Solution Methodology==\n\n===Structural Model===\n\nThe global analysis of the system is performed using a finite element solution technique. For a numerical solver to be capable of analysing both flexible materials (such as mooring wires, power cables etc.), and inflexible structures (such as the rigid columns and pontoons of a floating platform), a solution scheme is required which caters for bending stiffness values which are much lower than corresponding axial stiffness values. To achieve this effect, axial force is explicitly included as a solution variable, which is solved for independently of the axial strain. The stress-strain compatibility relationship is applied outside of the [[virtual work]] statement by means of a Lagrangian constraint.<ref name=\"One\"/> Torque is handled in a similar manner, which leads to a fourteen degree of freedom hybrid finite element with two end nodes, where the axial force and torque are added to the usual form of a three-dimensional beam element.\n\nFloating bodies typically undergo significant rigid body motions when subjected to [[Wind wave|ocean waves]], so the numerical solver must also cater for arbitrarily large and non-linear displacements and rotations in three dimensions. This is a key aspect of the structural model which is necessary to ensure accurate modelling of the restoring forces such as [[Tension (physics)|effective tension]] and [[bending moment]]. The solver uses a convected coordinate technique to cater for large three-dimensional displacements and rotations.<ref name=\"Two\"/> Each element of the finite element discretisation has a local axis system associated with it, which moves with the element as it moves in space and time. The internal and external virtual work statements are written in the convected system, and deformations along the element relative to this system are assumed to be moderate.\n\n===Hydrodynamic Model===\n\nHydrodynamic loading on the beam elements is based on [[Morison equation|Morison’s equation]]. Morison’s equation is widely established in marine engineering for modelling wave forces on slender offshore structures such as oil and gas export lines and mooring lines. In situations where the body size becomes significant with respect to wavelength, the underlying assumptions become invalid, and the effects of radiation and diffraction must also be considered. \n\nHydrodynamic loading on larger bodies is based on the application of [[Potential theory]]. Dedicated hydrodynamic modelling packages such as [[WAMIT]] solve the velocity potential using a [[boundary integral equation method]], and provide hydrodynamic coefficients which may be subsequently used as inputs by Flexcom. This provides a more detailed model than Morison’s equation, and includes wave excitation forces (due to the [[pressure]] acting on a still vessel), [[diffraction]] forces (caused by disturbances of the wave field due the presence of the vessel), and radiation [[damping]] forces (representing waves caused by oscillations of the vessel itself). Flexcom uses a [[convolution]] technique to integrate frequency-dependent [[added mass]] and radiation damping terms into the time domain simulation. \n\n==See also==\n\n[[List of finite element software packages]]\n\n==References==\n\n<!--- See http://en.wikipedia.org/wiki/Wikipedia:Footnotes on how to create references using <ref></ref> tags which will then appear here automatically -->\n{{reflist|\nrefs=\n\n<ref name=\"One\">{{citation |last1=O'Brien |first1=P.J. |last2=McNamara |first2=J.F. |contribution=Analysis of Flexible Riser Systems Subject to Three-Dimensional Seastate Loading |title=Proceedings of the International Conference on Behaviour of Offshore Structures |date=1988 |volume=3 |pages=1373–1388 }}</ref>\n\n<ref name=\"Two\">{{citation |last1=O'Brien |first1=P.J. |last2=McNamara |first2=J.F. |contribution=Improvements to the convected co-ordinates method for predicting large deflection extreme riser response |title=In 21st International Conference on Offshore Mechanics and Arctic Engineering |publisher=ASME |date=2002 |pages=481–488 }}</ref>\n\n}}\n\n== External links ==\n\n* {{Official website|https://www.woodgroup.com/flexcom}}\n\n<!--- \n[[Category:Offshore engineering]]\n[[Category:Finite element software]]\n -->\n[[Category:Finite element method]]"
    },
    {
      "title": "Flexibility method",
      "url": "https://en.wikipedia.org/wiki/Flexibility_method",
      "text": "{{Refimprove|date=September 2014}}\nIn [[structural engineering]], the '''flexibility method''', also called the '''method of consistent [[deformation (mechanics)|deformations]]''', is the traditional method for computing member forces and [[displacement (vector)|displacement]]s in structural systems. Its modern version formulated in terms of the members' flexibility [[matrix (mathematics)|matrices]] also has the name the '''matrix force method''' due to its use of member forces as the primary unknowns.<ref name=IUST>{{cite web|title=Matrix Force method|url=http://www.iust.ac.ir/files/cefsse/pg.cef/Contents/force_method_ch6.pdf|publisher=IUST|accessdate=29 December 2012}}</ref>\n\n==Member flexibility==\nFlexibility is the inverse of [[stiffness]]. For example, consider a spring that has ''Q'' and ''q'' as, respectively, its force and deformation:\n* The spring stiffness relation is ''Q = k q'' where ''k'' is the spring stiffness.\n* Its flexibility relation is ''q = f Q'', where ''f'' is the spring flexibility.\n* Hence, ''f'' = 1/''k''.\n\nA typical member flexibility relation has the following general form:\n\n:<math>\\mathbf{q}^m = \\mathbf{f}^m \\mathbf{Q}^m + \\mathbf{q}^{om} \\qquad \\qquad \\qquad \\mathrm{(1)}</math>\nwhere\n:''m'' = member number ''m''.\n:<math>\\mathbf{q}^m </math> = vector of member's characteristic deformations.\n:<math>\\mathbf{f}^m </math> = member flexibility matrix which characterises the member's susceptibility to deform under forces.\n:<math>\\mathbf{Q}^m </math> = vector of member's independent characteristic forces, which are unknown internal forces. These independent forces give rise to all member-end forces by member equilibrium.\n:<math>\\mathbf{q}^{om} </math> = vector of member's characteristic deformations caused by external effects (such as known forces and temperature changes) applied to the isolated, disconnected member (i.e. with <math>\\mathbf{Q}^m = 0 </math>).\n\nFor a system composed of many members interconnected at points called nodes, the members' flexibility relations can be put together into a single matrix equation, dropping the superscript m:\n\n:<math>\\mathbf{q}_{M \\times 1} = \\mathbf{f}_{M \\times M} \\mathbf{Q}_{M \\times 1} + \\mathbf{q}^{o}_{M \\times 1} \\qquad \\qquad \\qquad \\mathrm{(2)}</math>\n\nwhere ''M'' is the total number of members' characteristic deformations or forces in the system.\n\nUnlike the [[matrix stiffness method]], where the members' stiffness relations can be readily integrated via nodal equilibrium and compatibility conditions, the present flexibility form of equation (2) poses serious difficulty. With member forces <math> \\mathbf{Q}_{M \\times 1} </math> as the primary unknowns, the number of nodal equilibrium equations is insufficient for solution, in general—unless the system is [[statically determinate]].\n\n==Nodal equilibrium equations==\nTo resolve this difficulty, first we make use of the nodal equilibrium equations in order to reduce the number of independent unknown member forces. The nodal equilibrium equation for the system has the form:\n\n:<math>\\mathbf{R}_{N \\times 1} = \\mathbf{b}_{N \\times M} \\mathbf{Q}_{M \\times 1} + \\mathbf{W}_{N \\times 1} \\qquad \\qquad \\qquad \\mathrm{(3)} </math>\n\nwhere\n: <math> \\mathbf{R}_{N \\times 1} </math>: Vector of nodal forces at all N [[degrees of freedom (engineering)|degrees of freedom]] of the system.\n: <math> \\mathbf{b}_{N \\times M} </math>: The resulting nodal equilibrium matrix\n: <math> \\mathbf{W}_{N \\times 1} </math>: The vector of forces arising from loading on the members.\n\nIn the case of determinate systems, matrix '''b''' is square and the solution for '''Q''' can be found immediately from (3) provided that the system is stable.\n\n==The primary system==\nFor [[statically indeterminate]] systems, ''M > N'', and hence, we can augment (3) with ''I = M-N'' equations of the form:\n\n:<math> X_i = \\alpha Q_j + \\beta Q_k + . . .  \\qquad i=1,2, ... I\\qquad \\qquad \\mathrm{(4)} </math>\n\nThe vector '''X''' is the so-called vector of [[redundancy (engineering)|redundant]] forces and ''I'' is the degree of statical indeterminacy of the system. We usually choose ''j'', ''k'', ..., <math> \\alpha </math>, and <math> \\beta </math> such that <math> X_i </math> is a support reaction or an internal member-end force. With suitable choices of redundant forces, the equation system (3) augmented by (4) can now be solved to obtain:\n\n:<math>\\mathbf{Q}_{M \\times 1} = \\mathbf{B}_R \\mathbf{R}_{N \\times 1} + \\mathbf{B}_X \\mathbf{X}_{I \\times 1} + \\mathbf{Q}_{v \\cdot M \\times 1} \\qquad \\qquad \\qquad \\mathrm{(5)} </math>\n\nSubstitution into (2) gives:\n\n:<math>\\mathbf{q}_{M \\times 1} = \\mathbf{f}_{M \\times M}\n\n\\Big( \\mathbf{B}_R \\mathbf{R}_{N \\times 1} + \\mathbf{B}_X \\mathbf{X}_{I \\times 1} + \\mathbf{Q}_{v \\cdot M \\times 1} \\Big)\n\n + \\mathbf{q}^{o}_{M \\times 1} \\qquad \\qquad \\qquad \\mathrm{(6)}</math>\n\nEquations (5) and (6) are the solution for the ''primary system'' which is the original system that has been rendered statically determinate by cuts that expose the redundant forces <math>\\mathbf{X} </math>. Equation (5) effectively reduces the set of unknown forces to <math>\\mathbf{X} </math>.\n\n==Compatibility equation and solution==\nNext, we need to set up  <math> I </math>  compatibility equations in order to find <math>\\mathbf{X} </math>. The compatibility equations restore the required continuity at the cut sections by setting the relative displacements <math>\\mathbf{r}_{X}</math> at the redundants '''X''' to zero. That is, using the [[unit dummy force method]]:\n\n:<math>\\mathbf{r}_{X} = \\mathbf{B}_X^T \\mathbf{q} = \\mathbf{B}_X^T \\Big[ \\mathbf{f}\n\\Big( \\mathbf{B}_R \\mathbf{R} + \\mathbf{B}_X \\mathbf{X} + \\mathbf{Q}_v \\Big) + \\mathbf{q}^{o} \\Big] = 0 \\qquad \\qquad \\qquad \\mathrm{(7a)} </math>\n\n:or  <math>\\mathbf{r}_{X} = \\mathbf{F}_{XX} \\mathbf{X} + \\mathbf{r}^o_X = 0 \\qquad \\qquad \\qquad \\mathrm{(7b)} </math>\nwhere\n: <math> \\mathbf{F}_{XX} = \\mathbf{B}_X^T \\mathbf{f} \\mathbf{B}_X </math>\n\n:<math> \\mathbf{r}^o_X = \\mathbf{B}_X^T \\Big[ \\mathbf{f}\n\\Big( \\mathbf{B}_R \\mathbf{R} + \\mathbf{Q}_v \\Big) + \\mathbf{q}^{o} \\Big] </math>\n\nEquation (7b) can be solved for '''X''', and the member forces are next found from (5) while the nodal displacements can be found by\n\n:<math>\\mathbf{r}_{R} = \\mathbf{B}_R^T \\mathbf{q} = \\mathbf{F}_{RR} \\mathbf{R} + \\mathbf{r}^o_R </math>\n\nwhere\n: <math> \\mathbf{F}_{RR} = \\mathbf{B}_R^T \\mathbf{f} \\mathbf{B}_R </math> is the ''system flexibility matrix''.\n\n:<math> \\mathbf{r}^o_R = \\mathbf{B}_R^T \\Big[ \\mathbf{f}\n\\Big( \\mathbf{B}_X \\mathbf{X} + \\mathbf{Q}_v \\Big) + \\mathbf{q}^{o} \\Big] </math>\n\nSupports' movements taking place at the redundants can be included in the right-hand-side of equation (7), while supports' movements at other places must be included in <math> \\mathbf{r}^o_X </math> and <math> \\mathbf{r}^o_R </math> as well.\n\n==Advantages and disadvantages==\nWhile the choice of redundant forces in (4) appears to be arbitrary and troublesome for automatic computation, this objection can be overcome by proceeding from (3) directly to (5) using a modified [[Gauss-Jordan elimination]] process. This is a robust procedure that automatically selects a good set of redundant forces to ensure numerical stability.\n\nIt is apparent from the above process that the matrix stiffness method is easier to comprehend and to implement for automatic computation. It is also easier to extend for advanced applications such as non-linear analysis, stability, vibrations, etc. For these reasons, the matrix stiffness method is the method of choice for use in general purpose structural analysis software packages. On the other hand, for linear systems with a low degree of statical indeterminacy, the flexibility method has the advantage of being computationally less intensive. This advantage, however, is a moot point as personal computers are widely available and more powerful. The main redeeming factor in learning this method nowadays is its educational value in imparting the concepts of equilibrium and compatibility in addition to its historical value. In contrast, the procedure of the direct stiffness method is so mechanical that it risks being used without much understanding of the structural behaviors.\n\nThe upper arguments were valid up to the late 1990s. However, recent advances in numerical computing have shown a comeback of the force method, especially in the case of nonlinear systems. New frameworks have been developed that allow \"exact\" formulations irrespectively of the type or nature of the system nonlinearities. The main advantages of the flexibility method is that the result error is independent of the discretization of the model and that it is indeed a very fast method. For instance, the elastic-plastic solution of a continuous beam using the force method requires only 4 beam elements whereas a commercial \"stiffness based\" [[Finite element method|FEM]] code requires 500 elements in order to give results with the same accuracy. To conclude, one can say that in the case where the solution of the problem requires recursive evaluations of the force field like in the case of structural optimization or [[system identification]], the efficiency of the flexibility method is indisputable.\n\n==See also==\n*[[Finite element method in structural mechanics]]\n*[[Structural analysis]]\n*[[Direct stiffness method|Stiffness method]]\n\n==References==\n\n{{reflist}}\n\n==External links==\n*[http://www.public.iastate.edu/~fanous/ce332/force/homepage.html Consistent Deformations - Force Method]\n\n[[Category:Structural analysis]]\n[[Category:Finite element method]]"
    },
    {
      "title": "Functionally graded element",
      "url": "https://en.wikipedia.org/wiki/Functionally_graded_element",
      "text": "{{unreferenced|date=July 2014}}\nIn materials science and mathematics, '''functionally graded elements''' are elements used in [[finite element analysis]]. They can be used to describe a [[functionally graded material]].\n\n== See also ==\n* [[Graded (mathematics)]]\n\n\n{{mathapplied-stub}}\n\n[[Category:Finite element method]]\n[[Category:Materials science]]"
    },
    {
      "title": "Guyan reduction",
      "url": "https://en.wikipedia.org/wiki/Guyan_reduction",
      "text": "{{Orphan|date=June 2017}}\n{{Unreferenced|date=July 2018}}\n\nIn [[computational mechanics]], '''Guyan reduction''', also known as '''static condensation''', is a [[dimensionality reduction]] method which reduces the number of degrees of freedom by ignoring the inertial terms of the equilibrium equations and expressing the unloaded degrees of freedom in terms of the loaded degrees of freedom.\n\n== Basic concept ==\nThe static equilibrium equation can be expressed as:\n\n:<math>\n\\mathbf{K}\\mathbf{d} = \\mathbf{f}\n</math>\nwhere <math>\\mathbf{K}</math> is the stiffness matrix, <math>\\mathbf{f}</math> the force vector, and <math>\\mathbf{d}</math> the displacement vector. The number of the degrees of freedom of the static equilibrium problem is the length of the displacement vector. \nBy partitioning the above system of linear equations with regards to loaded (master) and unloaded (slave) degrees of freedom, the static equilibrium equation may be expressed as:\n\n:<math>\n\\begin{bmatrix}\n\\mathbf{K}_{mm} & \\mathbf{K}_{ms} \\\\\n\\mathbf{K}_{sm} & \\mathbf{K}_{ss}\n\\end{bmatrix}\n\\begin{Bmatrix}\n\\mathbf{d}_{m} \\\\\n\\mathbf{d}_{s}\n\\end{Bmatrix}\n=\n\\begin{Bmatrix}\n\\mathbf{f}_{m} \\\\\n\\mathbf{0}\n\\end{Bmatrix}\n</math>\nwhere <math>\\mathbf{0}</math> represents the zero vector.\nFocusing on the lower partition of the above system of linear equations, the dependent (slave) degrees of freedom are expressed by the following equation.\n\n:<math>\n\\mathbf{K}_{sm} \\mathbf{d}_{m} + \\mathbf{K}_{ss}\\mathbf{d}_{s} = \\mathbf{0}\n</math>\n\nSolving the above equation in terms of the independent (master) degrees of freedom leads to the following dependency relations\n\n:<math>\n \\mathbf{d}_{s} = - \\mathbf{K}_{ss}^{-1}\\mathbf{K}_{sm}\\mathbf{d}_{m}\n</math>\n\nSubstituting the dependency relations on the upper partition of the static equilibrium problem condenses away the slave degrees of freedom, leading to the following reduced system of linear equations.\n\n:<math>\n\\left(\\mathbf{K}_{mm} - \\mathbf{K}_{ms}\\mathbf{K}_{ss}^{-1}\\mathbf{K}_{sm}\\right)\\mathbf{d}_{m} = \\mathbf{f}\n</math>\n\nThe above system of linear equations is equivalent to the original problem, but expressed in terms of the master degrees of freedom alone.\nThus, the Guyan reduction method results in a reduced system by condensing away the slave degrees of freedom.\n\n== Linear transformation ==\n\nThe Guyan reduction can also be expressed as a [[change of basis]] which produces a low-dimensional representation of the original space, represented by the master degrees of freedom.\nThe linear transformation that maps the reduced space onto the full space is expressed as:\n\n:<math>\n\\begin{Bmatrix}\n\\mathbf{d}_m \\\\\n\\mathbf{d}_s\n\\end{Bmatrix} =\n\\begin{bmatrix}\n\\mathbf{I} \\\\\n- \\mathbf{K}_{ss}^{-1}\\mathbf{K}_{sm}\n\\end{bmatrix}\n\\begin{Bmatrix}\n\\mathbf{d}_m\n\\end{Bmatrix}\n=\n\\begin{Bmatrix}\n\\mathbf{T}_G\n\\end{Bmatrix}\n\\begin{Bmatrix}\n\\mathbf{d}_m\n\\end{Bmatrix}\n</math>\nwhere <math>\\mathbf{T}_G</math> represents the Guyan reduction [[transformation matrix]].\nThus, the reduced problem is represented as:\n\n:<math>\n\\mathbf{K}_G\\mathbf{d}_m = \\mathbf{f}_m\n</math>\n\nIn the above equation, <math>\\mathbf{K}_G</math> represents the reduced system of linear equations that's obtained by applying the Guyan reduction transformation on the full system, which is expressed as:\n\n:<math>\n\\mathbf{K}_G = \\mathbf{T}_G^T \\mathbf{K} \\mathbf{T}_G\n</math>\n\n== See also ==\n\n* [[finite element method]]\n\n== References ==\n<references/>\n\n[[Category:Finite element method]]\n[[Category:Structural analysis]]"
    },
    {
      "title": "Hp-FEM",
      "url": "https://en.wikipedia.org/wiki/Hp-FEM",
      "text": "{{Tone|date=September 2011}}\n\n{{lowercase}}\n'''hp-FEM''' is a general version of the [[finite element method]] (FEM), a [[numerical analysis|numerical]] method for solving [[partial differential equation]]s based on piecewise-polynomial [[approximation]]s that employs elements of variable size\n''(h)'' and polynomial degree ''(p)''. The origins of hp-FEM date back to the pioneering work of Ivo Babuška et al.\n<ref>[[Ivo Babuška|I. Babuška]], B.Q. Guo: The h, p and h-p version of the finite element method: basis theory and applications, Advances in Engineering Software, Volume 15, Issue 3-4, 1992.</ref> who discovered that the finite element method converges ''exponentially fast'' when\nthe mesh is refined using a suitable combination of h-refinements\n(dividing elements into smaller ones) and [[P-FEM|p-refinements]] (increasing their\npolynomial degree). The exponential convergence makes the method\na very attractive choice compared to most other finite element methods\nwhich only converge with an algebraic rate. The exponential convergence\nof the hp-FEM was not only predicted theoretically but also observed\nby numerous independent researchers.<ref>J.M. Melenk: hp-Finite Element Methods for Singular Perturbations, Springer, 2002</ref>\n<ref>C. Schwab: p- and hp- Finite Element Methods: Theory and Applications in Solid and Fluid Mechanics, Oxford University Press, 1998</ref>\n<ref>P. Solin: Partial Differential Equations and the Finite Element Method, J. Wiley & Sons, 2005</ref>\n\n==Differences from standard FEM==\nThe hp-FEM differs from the standard (lowest-order) FEM in many aspects.<ref>P. Solin, K. Segeth, I. Dolezel: Higher-Order Finite Element Methods, Chapman & Hall/CRC Press, 2003</ref>\n* '''Choice of higher-order shape functions'''{{Examples|date=September 2011}}: To begin with, the higher-degree polynomials in elements can be generated using different sets of shape functions. The choice of such set can influence dramatically the conditioning of the stiffness matrix, and in turn the entire solution process. This problem was first documented by Babuska et al.<ref>I. Babuska, M. Griebel and J. Pitkaranta, The problem of selecting the shape functions for a p-type finite element, Internat. J. Numer. Methods Engrg. (1989), pp. 1891–1908</ref>\n* '''Automatic hp-adaptivity''': In the hp-FEM, an element can be hp-refined in many different ways. One way is to just increase its polynomial degree without subdividing it in space. Or, the element can be subdivided geometrically, and various polynomial degrees can be applied to the subelements. The number of element refinement candidates easily reaches 100 in 2D and 1000 in 3D. Therefore, clearly, one number indicating the size of error in an element is not enough to guide automatic hp-adaptivity (as opposed to adaptivity in standard FEM). Other techniques such as ''reference solutions'' or ''analyticity considerations'' must be employed to obtain more information about the ''shape of error'' in every element.<ref>L. Demkowicz, W. Rachowicz, and Ph. Devloo:  A Fully Automatic hp-Adaptivity, Journal of Scientific Computing, 17, Nos 1–3 (2002), 127–155</ref>\n* '''Ratio of assembling and solution CPU times''': In standard FEM, the stiffness matrix usually is assembled quickly but it is quite large. Therefore, typically, the solution of the discrete problem consumes the largest part of the overall computing time. By contrast, the stiffness matrices in the hp-FEM typically are much smaller, but (for the same matrix size) their assembly takes more time than in standard FEM. Mostly, this is due to the computational cost of numerical quadrature, which must have higher precision, and therefore be of higher order, compared to standard FEM to take advantage of the faster convergence rates.\n* '''Analytical challenges''': The hp-FEM is more difficult to understand from the analytical point of view than standard FEM.{{Whom?|date=September 2011}} This concerns numerous techniques, such as the discrete maximum principles (DMP) for elliptic problems. These results state that, usually with some limiting assumptions on the mesh, the piecewise-polynomial FEM approximation obeys analogous maximum principles as the underlying elliptic PDE. Such results are very important since they guarantee that the approximation remain physically admissible, leaving no possibility of computing a negative density, negative concentration, or negative absolute temperature. The DMP are quite well understood for lowest-order FEM but completely unknown for the hp-FEM in two or more dimensions. The first DMP in one spatial dimension were formulated recently.<ref>P. Solin, T. Vejchodsky: A Weak Discrete Maximum Principle for hp-FEM, J. Comput. Appl. Math. 209 (2007) 54–65</ref><ref>T. Vejchodsky, P. Solin: Discrete Maximum Principle for Higher-Order Finite Elements in 1D, Math. Comput. 76 (2007), 1833–1846</ref>\n* '''Programming challenges''': It is much harder to implement a hp-FEM solver than standard FEM code. The multiple issues that need to be overcome include (but are not limited to): higher-order quadrature formulas, higher-order shape functions, connectivity and orientation information relating shape functions on the reference domain with basis functions in the physical domain, etc.<ref>L. Demkowicz, J. Kurtz, D. Pardo, W. Rachowicz, M. Paszynski, A. Zdunek: Computing with hp-Adaptive Finite Elements, Chapman & Hall/CRC Press, 2007</ref>\n\n==Example: the Fichera problem==\n\nThe [[Fichera problem]] (also called the Fichera corner problem) is a standard benchmark problem for adaptive FEM codes. One can use it to show the dramatic difference in the performance of standard FEM and the hp-FEM. The problem geometry is a cube with missing corner. The exact solution has a singular gradient (an analogy of infinite stress) at the center. The knowledge of the exact solution makes it possible to calculate the approximation error exactly and thus compare various numerical methods. For illustration, the problem was solved using three different versions of adaptive FEM: with linear elements, quadratic elements, and the hp-FEM.\n\n<gallery>\nImage:grad fichera.png|Fichera problem: singular gradient.\nImage:conv fichera.png|Fichera problem: convergence comparison.\n</gallery>\n\nThe convergence graphs show the approximation error as a function of the number of degrees of freedom (DOF). By DOF we mean (unknown) parameters that are needed to define the approximation. The number of DOF equals the size of the stiffness matrix. The reader can see in the graphs that the convergence of the hp-FEM is much faster than the convergence of both other methods. Actually, the performance gap is so huge that the linear FEM might not converge at all in reasonable time and the quadratic FEM would need hundreds of thousands or perhaps millions of DOF to reach the accuracy that the hp-FEM attained with approximately 17,000 DOF. Obtaining very accurate results using relatively few DOF is the main strength of the hp-FEM.\n\n==Why is hp-FEM so efficient?==\nSmooth functions can be approximated much more efficiently using large high-order elements than small piecewise-linear ones. This is illustrated in the figure below, where a 1D Poisson equation with zero Dirichlet boundary conditions is solved on two different meshes. The exact solution is the sine function.\n\n* Left: mesh consisting of two linear elements.\n* Right: mesh consisting of one quadratic element.\n\n[[Image:grad sin h.png|Piecewise-linear approximation.]]\n[[Image:conv sin hp.png|Quadratic approximation.]]\n\nWhile the number of unknowns is the same in both cases (1 DOF), the errors in the corresponding norm are 0.68 and 0.20, respectively. This means that the quadratic approximation was roughly 3.5-times more efficient than the piecewise-linear one. When we proceed one step further and compare (a) four linear elements to (b) one quartic element (p=4), then both discrete problems will have three DOF but the quartic approximation will be approximately 40-times more efficient. When performing few more steps like this, the reader will see that the efficiency gap opens extremely fast.\n\nOn the contrary, small low-order elements can capture small-scale features such as singularities much better than large high-order ones. The hp-FEM is based on an optimal combination of these two approaches which leads to exponential convergence. Note, that this exponential convergence is expressed in axis of error vs degrees of freedom. For real-life applications we usually consider computational time needed to reach the same level of accuracy. For this performance indicator h- and hp-refinement can provide similar results, e.g. see the final figure at <ref>http://hpfem.org/wp-content/uploads/doc-web/doc-examples/src/hermes2d/examples/maxwell/microwave-oven.html</ref> (WebArchive link <ref>https://web.archive.org/web/20180807173436/http://hpfem.org/wp-content/uploads/doc-web/doc-examples/src/hermes2d/examples/maxwell/microwave-oven.html</ref>). As soon as it is harder to program and parallelize hp-FEM compared to h-FEM the convergence excellence of hp-refinement may turn to be unpractical.\n\n==What is hp-adaptivity?==\n\n<!-- Image with unknown copyright status removed: [[Image:hpfem split.png|thumb|150px|Sample hp-refinement candidates.]] -->\n\nSome FEM sites describe hp-adaptivity as a combination of h-adaptivity (splitting elements in space while keeping their polynomial degree fixed) and p-adaptivity (only increasing their polynomial degree). This is not entirely accurate. The hp-adaptivity is significantly different from both h- and p-adaptivity since the hp-refinement of an element can be done in many different ways. Besides a p-refinement, the element can be subdivided in space (as in h-adaptivity), but there are many combinations for the polynomial degrees on the subelements. This is illustrated in the figure on the right. For example, if a triangular or quadrilateral element is subdivided into four subelements where the polynomial degrees are allowed to vary by at most two, then this yields 3^4 = 81 refinement candidates (not considering polynomially anisotropic candidates). Analogously, splitting a hexahedron into eight subelements and varying their polynomial degrees by at most two yields 3^8 =  6,561 refinement candidates. Clearly, standard FEM error estimates providing one constant number per element are not enough to guide automatic hp-adaptivity.\n\n==Higher-order shape functions==<!-- Provide actual examples of functions here, not just pictures.  How are they derived? -->\nIn standard FEM one only works with shape functions associated with grid\nvertices (the so-called ''vertex functions''). In contrast to that,\nin the hp-FEM one moreover regards ''edge functions'' (associated with\nelement edges), ''face functions'' (corresponding to element faces – 3D only),\nand ''bubble functions'' (higher-order polynomials which vanish on\nelement boundaries). The following images show these functions\n(restricted to a single element):\n\n<gallery>\nImage:vertex new.jpg|Vertex function.\nImage:edge new.jpg|Edge function.\nImage:face new.jpg|Face function.\nImage:bubble new.jpg|Bubble function.\n</gallery>\n\nNote: all these functions are defined in the entire element interior!\n\n==Open source hp-FEM codes==\n* [[Deal.II]]: deal.II is a free, open source library to solve partial differential equations using the finite element method.\n* [http://www.concepts.math.ethz.ch/ Concepts]: C/C++ hp-FEM/DGFEM/BEM library for elliptic equations developed at SAM, ETH Zurich (Switzerland) and in the group of K. Schmidt at TU Berlin (Germany).\n* 2dhp90, 3dhp90: Fortran codes for elliptic problems and Maxwell's equations developed by L. Demkowicz at ICES, UT Austin.\n* PHAML: The Parallel Hierarchical Adaptive MultiLevel Project. Finite element software developed at the National Institute for Standards and Technology, USA, for numerical solution of 2D elliptic partial differential equations on distributed memory parallel computers and multicore computers using adaptive mesh refinement and multigrid solution techniques. \n* [[Hermes Project]]: C/C++/Python library for rapid prototyping of space- and space-time adaptive hp-FEM solvers for a large variety of PDEs and multiphysics PDE systems, developed by the hp-FEM group at the University of Nevada, Reno (USA), Institute of Thermomechanics, Prague (Czech Republic), and the University of West Bohemia in Pilsen (Czech Republic) – with the [[Agros2D]] engineering software built on top of the Hermes library.\n* [http://lsec.cc.ac.cn/phg/index_en.htm PHG]: PHG is a toolbox for developing parallel adaptive finite element programs. It's suitable for h-, p- and hp-fem. PHG is currently under active development at State Key Laboratory of Scientific and Engineering Computing,  Institute of Computational Mathematics and Scientific/Engineering Computing of Chinese Academy of Sciences(LSEC, CAS, China). PHG deals with conforming tetrahedral meshes and uses bisection for adaptive local mesh refinement and MPI for message passing. PHG has an object oriented design which hides parallelization details and provides common operations on meshes and finite element functions in an abstract way, allowing the users to concentrate on their numerical algorithms.\n* [http://mofem.eng.gla.ac.uk MoFEM] is a finite element analysis code tailored for the solution of multi-physics problems with arbitrary levels of approximation, different levels of mesh refinement and optimised for high-performance computing. It is designed to be able to manage complexities related to a heterogeneous order of approximations for L2,H1,H-div and H-curl spaces\n\n==References==\n{{reflist|30em}}\n\n{{Numerical PDE}}\n\n[[Category:Finite element method]]"
    },
    {
      "title": "Interval finite element",
      "url": "https://en.wikipedia.org/wiki/Interval_finite_element",
      "text": "{{More footnotes|date=January 2010}}\n\n[[Image:Von-Mises-Max-8x8.gif|thumb|right|Maximum von Mises stress in plane stress problem with the interval parameters (calculated by using gradient method).]]\nIn [[numerical analysis]], the '''interval finite element method''' ('''interval FEM''') is a [[finite element method]] that uses interval parameters. Interval FEM can be applied in situations where it is not possible to get reliable probabilistic characteristics of the structure. This is important in concrete structures, wood structures, geomechanics, composite structures, biomechanics and in many other areas.<ref name=\"apcie\">http://andrzej.pownuk.com/IntervalEquations.htm</ref> The goal of the Interval Finite Element is to find upper and lower bounds of different characteristics of the model (e.g. [[Stress (mechanics)|stress]], [[Displacement (vector)|displacements]], [[yield surface]] etc.) and use these results in the design process. This is so called worst case design, which is closely related to the [[limit state design]].\n\nWorst case design require less information than [[probabilistic design]] however the results are more conservative [Köylüoglu and [[Elishakoff]] 1998]. {{Citation needed|date=January 2010}}\n\n== Applications of the interval parameters to the modeling of uncertainty ==\n\nConsider the following equation:\n\n:<math> ax=b \\,</math>\n\nwhere ''a'' and ''b'' are [[real number]]s, and <math> x=\\frac{b}{a} </math>.\n\nVery often, the exact values of the parameters ''a'' and ''b'' are unknown.\n\nLet's assume that <math> a\\in[1,2]=\\mathbf{a} </math> and <math> b\\in[1,4]=\\mathbf{b} </math>. In this case, it is necessary to solve the following equation\n\n:<math> [1,2]x=[1,4] </math>\n\nThere are several definitions of the solution set of this equation with interval parameters.\n\n=== United solution set ===\n\nIn this approach the solution is the following set\n\n:<math> \\mathbf{x}=\\left\\{ x: ax=b, a\\in\\mathbf{a}, b\\in\\mathbf{b} \\right\\} = \\frac{\\mathbf{b}}{\\mathbf{a}}=\\frac{[1,4]}{[1,2]}=[0.5, 4]  </math>\n\nThis is the most popular solution set of the interval equation and this solution set will be applied in this article.\n\nIn the multidimensional case the united solutions set is much more complicated.\nThe solution set of the following system of [[Interval arithmetic#Linear interval systems|linear interval equations]]\n\n:<math> \n\\left[\n\\begin{array}{cc}\n {[-4,-3]} & {[-2,2]}\\\\\n {[-2,2]} & {[-4,-3]}\n\\end{array}\n\\right]\n\\left[\n\\begin{array}{c}\nx_1\\\\\nx_2\n\\end{array}\n\\right]\n=\n\\left[\n\\begin{array}{c}\n{[-8,8]}\\\\\n{[-8,8]}\n\\end{array}\n\\right]\n</math>\n\nis shown on the following picture\n\n[[image:Solution_set.png|600px|550px]]\n\n: <math> \\sum{_{\\exists\\exists}}(\\mathbf{A},\\mathbf{b})=\\{x: Ax=b, A\\in\\mathbf{A},b\\in\\mathbf{b}\\} </math>\n\nThe exact solution set is very complicated, thus it is necessary to find the smallest interval which contains the exact solution set\n\n[[image:Solution-set-3.png|600px|550px]]\n\n: <math> \\diamondsuit\\left(\\sum{_{\\exists\\exists}}(\\mathbf{A},\\mathbf{b})\\right)=\\diamondsuit\\{x: Ax=b, A\\in\\mathbf{A},b\\in\\mathbf{b}\\} </math>\n\nor simply\n\n: <math> \\diamondsuit\\left(\\sum{_{\\exists\\exists}}(\\mathbf{A},\\mathbf{b})\\right)=[\\underline x_1,\\overline x_1]\\times \n[\\underline x_2,\\overline x_2]\\times ... \\times [\\underline x_n,\\overline x_n] </math>\n\nwhere\n\n: <math> \\underline x_i=\\min\\{x_i: Ax=b, A\\in\\mathbf{A},b\\in\\mathbf{b}\\}, \\ \\ \\overline x_i = \\max\\{x_i: Ax=b, A\\in\\mathbf{A},b\\in\\mathbf{b}\\} </math>\n\n: <math> x_i\\in\\{x_i: Ax=b, A\\in\\mathbf{A},b\\in\\mathbf{b}\\}=[\\underline x_i,\\overline x_i] </math>\nSee also [http://www.ippt.gov.pl/~kros/pccmm99/01Title.html]\n\n===Parametric solution set of interval linear system===\n\nThe Interval Finite Element Method requires the solution of a parameter-dependent system of equations (usually with a symmetric positive definite matrix.) An example of the solution set of general parameter dependent system of equations\n\n:<math>\n\\left[\n\\begin{array}{cc}\np_1 & p_2\\\\\np_2 + 1 & p_1 \n\\end{array}  \n\\right]\n\\left[\n\\begin{array}{cc}\nu_1\\\\\nu_2\n\\end{array}  \n\\right]\n=\n\\left[\n\\begin{array}{c}\n\\frac{p_1+6p_2}{5.0} \\\\\n2p_1-6\n\\end{array}  \n\\right],\n\\ \\ \\ for \\ \\ p_1\\in[2,4], p_2\\in[-2,1].\n</math>\n\nis shown on the picture below<ref>[http://cose.math.bas.bg/webMathematica/webComputing/ParametricSSet.jsp E. Popova, Parametric Solution Set of Interval Linear System] {{webarchive|url=https://web.archive.org/web/20100127132504/http://cose.math.bas.bg/webMathematica/webComputing/ParametricSSet.jsp |date=2010-01-27 }}</ref>.\n\n[[Image:Interval-equation.gif|Solution set of the parameter dependent system of equations]]\n\n=== Algebraic solution ===\n\nIn this approach x is an [[Interval (mathematics)|interval number]] for which the equation\n\n:<math> [1,2]x=[1,4] </math>\n\nis satisfied. In other words, the left side of the equation is equal to the right side of the equation.\nIn this particular case the solution is <math> x =[1,2] </math> because\n\n:<math> ax =[1,2][1,2]=[1,4] </math>\n\nIf the uncertainty is larger, i.e. <math> a=[1,4] </math>, then <math>x=[1,1]</math> because\n\n:<math> ax =[1,4][1,1]=[1,4] </math>\n\nIf the uncertainty is even larger, i.e. <math> a=[1,8] </math>, then the solution doesn't exist. It is very complex to find a physical interpretation of the algebraic interval solution set.\nThus, in applications, the united solution set is usually applied.\n\n== The method ==\n\nConsider PDE with the interval parameters\n\n:<math>(1) \\ \\ \\  G(x,u,p)=0 </math>\n\nwhere <math> p = (p_1,\\dots,p_m) \\in {\\mathbf p} </math> is a vector of parameters which belong to given intervals\n\n:<math>p_i\\in[\\underline p_i,\\overline p_i]={\\mathbf p}_i, </math>\n\n:<math> {\\mathbf p}={\\mathbf p}_1\\times {\\mathbf p}_2 \\times \\cdots \\times {\\mathbf p}_m. </math>\n\nFor example, the heat transfer equation\n\n:<math> k_x \\frac{\\partial^2 u}{\\partial x^2}+ k_y\\frac{\\partial^2 u}{\\partial y^2} +q =0 \\text{ for } x \\in \\Omega </math>\n\n:<math> u(x)=u^*(x) \\text{ for } x \\in \\partial\\Omega </math>\n\nwhere <math> k_x, k_y </math> are the interval parameters (i.e. <math> k_x\\in{\\mathbf k}_x, \\ k_y\\in{\\mathbf k}_y </math>).\n\nSolution of the equation (1) can be defined in the following way\n\n:<math> \\tilde{u}(x):=\\{u(x):G(x,u,p)=0,p\\in {\\mathbf p} \\} </math>\n\nFor example, in the case of the heat transfer equation\n\n:<math> \\tilde{u}(x) = \\{ u(x) :k_x \\frac{\\partial^2 u}{\\partial x^2}+ k_y\\frac{\\partial^2 u}{\\partial y^2} +q =0 \\text{ for } x \\in \\Omega , u(x)=u^*(x) \\text{ for } x \\in \\partial\\Omega,  k_x\\in{\\mathbf k}_x, \\ k_y\\in{\\mathbf k}_y \\} </math>\n\nSolution <math> \\tilde {u} </math> is very complicated because of that in practice it is more interesting to find the smallest possible interval which contain the exact solution set <math>\\tilde {u}</math>.\n\n:<math> {\\mathbf u}(x)=\\lozenge  \\tilde{u}(x) = \\lozenge \\{u(x):G(x,u,p)=0,p\\in {\\mathbf p} \\} </math>\n\nFor example, in the case of the heat transfer equation\n\n:<math> {\\mathbf u}(x) = \\lozenge \\{ u(x) :k_x \\frac{\\partial^2 u}{\\partial x^2}+ k_y\\frac{\\partial^2 u}{\\partial y^2} +q =0 \\text{ for } x \\in \\Omega , u(x)=u^*(x) \\text{ for } x \\in \\partial\\Omega,  k_x\\in{\\mathbf k}_x, \\ k_y\\in{\\mathbf k}_y \\} </math>\n\nFinite element method lead to the following parameter dependent system of algebraic equations\n\n:<math>  K(p) u = Q(p), \\ \\ \\ p \\in {\\mathbf p} </math>\n\nwhere {{mvar|K}} is a [[stiffness matrix]] and {{mvar|Q}} is a right hand side.\n\nInterval solution can be defined as a multivalued function\n\n:<math> {\\mathbf u} = \\lozenge \\{u:K(p)u = Q(p),p\\in {\\mathbf p}\\} </math>\n \nIn the simplest case above system can be treat as a system of [[Interval arithmetic#Linear interval systems|linear interval equations]].\n\nIt is also possible to define the interval solution as a solution of the following optimization problem\n\n:<math> \\underline u_i = \\min \\{u_i : K(p)u = Q(p), p\\in {\\mathbf p}\\} </math>\n\n:<math> \\overline u_i = \\max \\{u_i : K(p)u = Q(p), p\\in {\\mathbf p}\\} </math>\n\nIn multidimensional case the intrval solution can be written as\n\n:<math> \\mathbf{u}=\\mathbf{u}_1\\times\\cdots\\times\\mathbf{u}_n= [\\underline u_1,\\overline u_1]\\times \\cdots\\times [\\underline u_n,\\overline u_n] </math>\n\n== Interval solution versus probabilistic solution ==\n\nIt is important to know that the interval parameters generate different results than [[Uniform distribution (continuous)|uniformly distributed random variables]].\n\nInterval parameter <math> \\mathbf{p}=[\\underline p,\\overline p] </math> take into account all possible probability distributions (for <math> p\\in[\\underline p,\\overline p] </math>).\n\nIn order to define the interval parameter it is necessary to know only upper <math> \\overline p </math> and lower bound <math> \\underline p </math>.\n\nCalculations of probabilistic characteristics require the knowledge of a lot of experimental results.\n\nIt is possible to show that the sum of n interval numbers is <math> \\sqrt{n} </math> times wider than the sum of appropriate normally distributed random variables.\n\nSum of ''n'' interval number <math> \\mathbf{p}=[\\underline p,\\overline p]  </math> is equal to\n\n:<math> n\\mathbf{p} = [n\\underline p,n\\overline p] </math>\n\nWidth of that interval is equal to\n\n:<math> n\\overline p - n\\underline p = n(\\overline p - \\underline p) = n\\Delta p  </math>\n\nConsider [[Normal distribution|normally distributed random variable]] ''X'' such that\n\n:<math> m_X=E[X]=\\frac{\\overline p + \\underline p }{2}, \\sigma_X=\\sqrt{Var[X]}=\\frac{\\Delta p}{6}  </math>\n\nSum of ''n'' normally distributed random variable is a normally distributed random variable with the following characteristics (see [[Six Sigma]])\n\n:<math> E[nX]=n\\frac{\\overline p + \\underline p }{2}, \\sigma_{nX}=\\sqrt{nVar[X]}=\\sqrt{n}\\sigma=\\sqrt{n}\\frac{\\Delta p}{6}  </math>\n  \nWe can assume that the width of the probabilistic result is equal to 6 sigma (compare [[Six Sigma]]).\n\n:<math> 6\\sigma_{nX}=6\\sqrt{n}\\frac{\\Delta p}{6}=\\sqrt{n}\\Delta p  </math>\n\nNow we can compare the width of the interval result and the probabilistic result\n\n:<math> \\frac{width \\ of \\ n \\ intervals }{width \\ of \\ n \\ random \\ variables}=\\frac{n\\Delta p}{\\sqrt{n}\\Delta p} = \\sqrt{n} </math>\n\nBecause of that the results of the interval finite element (or in general worst case analysis) may be overestimated in comparison to the stochastic fem analysis (see also [[propagation of uncertainty]]).\nHowever, in the case of nonprobabilistic uncertainty it is not possible to apply pure probabilistic methods.\nBecause probabilistic characteristic in that case are not known exactly [ [[Elishakoff]] 2000].\n\nIt is possible to consider random (and fuzzy random variables) with the interval parameters (e.g. with the interval mean, variance etc.). \nSome researchers use interval (fuzzy) measurements in statistical calculations (e.g. [http://www.cs.utep.edu/interval-comp/interval.02/fers.pdf]). As a results of such calculations we will get so called [[imprecise probability]].\n\n[[Imprecise probability]] is understood in a very wide sense. It is used as a generic term to cover all mathematical models which measure chance or uncertainty without sharp numerical probabilities. It includes both qualitative (comparative probability, partial preference orderings, …) and quantitative modes (interval probabilities, belief functions, upper and lower previsions, …). Imprecise probability models are needed in inference problems where the relevant information is scarce, vague or conflicting, and in decision problems where preferences may also be incomplete [http://www.sipta.org/].\n\n== Simple example: modeling tension, compression, strain, and stress) ==\n\n[[image:TensionCompression.JPG|400px]]\n\n=== 1-dimension example ===\n\nIn the [[tension (physics)|tension]]-[[compression (physics)|compression]] problem, the following [[equation]] shows the relationship between [[displacement (vector)|displacement]] {{mvar|u}} and [[force]] {{mvar|P}}:\n\n:<math> \\frac{EA}{L}u=P </math>\n\nwhere {{mvar|L}} is length, {{mvar|A}} is the area of a cross-section, and {{mvar|E}} is [[Young's modulus]].\n\nIf the Young's modulus and force are uncertain, then\n\n:<math> E\\in[\\underline E,\\overline E], P\\in[\\underline P,\\overline P] </math>\n\nTo find [[upper and lower bounds]] of the displacement {{mvar|u}}, calculate the following [[partial derivative]]s:\n\n:<math> \\frac{\\partial u}{\\partial E} = \\frac{-PL}{E^2A} < 0 </math>\n\n:<math> \\frac{\\partial u}{\\partial P} = \\frac{L}{EA} > 0 </math>\n\nCalculate extreme values of the displacement as follows:\n\n:<math> \\underline u = u(\\overline E,\\underline P) = \\frac{\\underline PL}{\\overline EA} </math>\n\n:<math> \\overline u = u(\\underline E,\\overline P) = \\frac{\\overline PL}{\\underline EA} </math>\n\nCalculate [[Strain (mechanics)|strain]] using following formula:\n\n:<math> \\varepsilon = \\frac{1}{L} u </math>\n\nCalculate derivative of the strain using derivative from the displacements:\n\n:<math> \\frac{\\partial \\varepsilon}{\\partial E} = \\frac{1}{L} \\frac{\\partial u}{\\partial E} = \\frac{-P}{E^2A} < 0 </math>\n\n:<math> \\frac{\\partial \\varepsilon}{\\partial P} = \\frac{1}{L} \\frac{\\partial u}{\\partial P} = \\frac{1}{EA} > 0 </math>\n\nCalculate extreme values of the displacement as follows:\n\n:<math> \\underline \\varepsilon = \\varepsilon(\\overline E,\\underline P) = \\frac{\\underline P}{\\overline EA} </math>\n\n:<math> \\overline \\varepsilon = \\varepsilon(\\underline E,\\overline P) =  \\frac{\\overline P}{\\underline EA}  </math>\n\nIt is also possible to calculate extreme values of strain using the displacements\n\n:<math> \\frac{\\partial \\varepsilon}{\\partial u} = \\frac{1}{L} > 0</math>\n\nthen\n\n:<math> \\underline \\varepsilon = \\varepsilon(\\underline u) = \\frac{\\underline P}{\\overline EA} </math>\n\n:<math> \\overline \\varepsilon = \\varepsilon(\\overline u) = \\frac{\\overline P}{\\underline EA} </math>\n\nThe same methodology can be applied to the [[Stress (mechanics)|stress]]\n\n:<math> \\sigma = E \\varepsilon </math>\n\nthen\n\n:<math> \\frac{\\partial \\sigma}{\\partial E} = \\varepsilon + E\\frac{\\partial \\varepsilon}{\\partial E} =\\varepsilon + E\\frac{1}{L} \\frac{\\partial u}{\\partial E} = \\frac{P}{EA} - \\frac{P}{EA}= 0 </math>\n\n:<math> \\frac{\\partial \\sigma}{\\partial P} = E\\frac{\\partial \\varepsilon}{\\partial P} =E\\frac{1}{L} \\frac{\\partial u}{\\partial P} = \\frac{1}{A} >0 </math>\n\nand\n\n:<math> \\underline \\sigma = \\sigma (\\underline P) = \\frac{\\underline P}{A} </math>\n\n:<math> \\overline \\sigma = \\sigma (\\overline P) = \\frac{\\overline P}{A} </math>\n\nIf we treat stress as a function of strain then\n\n:<math> \\frac{\\partial \\sigma}{\\partial\\varepsilon}=\\frac{\\partial }{\\partial\\varepsilon}(E\\varepsilon)=E> 0</math>\n\nthen\n\n:<math> \\underline \\sigma = \\sigma (\\underline \\varepsilon) =E\\underline \\varepsilon = \\frac{\\underline P}{A} </math>\n\n:<math> \\overline \\sigma = \\sigma (\\overline \\varepsilon) = E\\overline \\varepsilon = \\frac{\\overline P}{A} </math>\n\nStructure is safe if stress <math> \\sigma </math> is smaller than a given value <math> \\sigma_0 </math> i.e.\n\n:<math> \\sigma < \\sigma_0 </math>\n\nthis condition is true if\n\n:<math> \\overline \\sigma < \\sigma_0  </math>\n\nAfter calculation we know that this relation is satisfied if\n\n:<math> \\frac{\\overline P}{A} < \\sigma_0  </math>\n\nThe example is very simple but it shows the applications of the interval parameters in mechanics. Interval FEM use very similar methodology in multidimensional cases [Pownuk 2004].\n\nHowever, in the multidimensional cases relation between the uncertain parameters and the solution is not always monotone. In that cases more complicated optimization methods have to be applied.<ref name=\"apcie\"/>\n\n=== Multidimensional example ===\nIn the case of tension-[[compression (physical)|compression]] problem the equilibrium equation has the following form\n\n:<math> \\frac{d}{dx}\\left( EA\\frac{du}{dx} \\right)+n=0 </math>\n\nwhere {{mvar|u}} is displacement, {{mvar|E}} is [[Young's modulus]], {{mvar|A}} is an area of cross-section, and {{mvar|n}} is a distributed load.\nIn order to get unique solution it is necessary to add appropriate boundary conditions e.g.\n\n:<math> u(0)=0 </math>\n\n:<math> \\frac{du(0)}{dx}EA=P </math>\n\nIf [[Young's modulus]] {{mvar|E}} and {{mvar|n}} are uncertain then the interval solution can be defined in the following way\n \n:<math> {\\mathbf u}(x)=\\left\\{u(x):\\frac{d}{dx}\\left( EA\\frac{du}{dx} \\right)+n=0,u(0)=0,\\frac{du(0)}{dx}EA=P,E\\in[\\underline E,\\overline E],P\\in[\\underline P,\\overline P] \\right\\} </math>\n\nFor each FEM element it is possible to multiply the equation by the test function {{mvar|v}}\n\n:<math> \\int\\limits_{0}^{L^{e}} \\left( \\frac{d}{dx}\\left( EA\\frac{du}{dx} \\right)+n \\right)v=0 </math>\n\nwhere <math> x\\in[0,L^{(e)}]. </math>\n\nAfter integration by parts we will get the  equation in the weak form\n\n:<math> \\int\\limits_{0}^{L^{(e)}}  EA\\frac{du}{dx}\\frac{dv}{dx} dx=\\int\\limits_{0}^{L^{(e)}}  nv dx </math>\n\nwhere <math> x\\in[0,L^{(e)}]. </math>\n\nLet's introduce a set of grid points <math> x_0,x_1,...,x_{Ne} </math>, where <math> Ne </math> is a number of elements, and linear shape functions for each FEM element\n\n:<math> N_1^{(e)}(x)=1-\\frac{1-x_{0}^{(e)}}{x_{1}^{(e)}-x_{0}^{(e)}},  \\ \\ N_2^{(e)}(x)=\\frac{1-x_{0}^{(e)}}{x_{1}^{(e)}-x_{0}^{(e)}}.  </math>\n\nwhere <math> x\\in [x_{0}^{(e)}, x_{1}^{(e)}]. </math>\n\n<math> x_{1}^{(e)} </math> left endpoint of the element, <math> x_{1}^{(e)} </math> left endpoint of the element number \"e\". \nApproximate solution  in the \"e\"-th element is a linear combination of the shape functions\n\n:<math> u^{(e)}_{h}(x) = u^{e}_1 N_1^{(e)}(x)+u^{e}_2 N_2^{(e)}(x), \\ \\ v^{(e)}_{h}(x) = u^{e}_1 N_1^{(e)}(x)+u^{e}_2 N_2^{(e)}(x)  </math>\n\nAfter substitution to the weak form of the equation we will get the following system of equations\n\n:<math> \n\\left[\n\\begin{array}{cc}\n\\frac{E^{(e)}A^{(e)}}{L^{(e)}} &  -\\frac{E^{(e)}A^{(e)}}{L^{(e)}} \\\\\n-\\frac{E^{(e)}A^{(e)}}{L^{(e)}} &  \\frac{E^{(e)}A^{(e)}}{L^{(e)}} \\\\\n\\end{array}\n\\right]\n\\left[\n\\begin{array}{c}\nu^{(e)}_1 \\\\\nu^{(e)}_2\n\\end{array}\n\\right]\n=\n\\left[\n\\begin{array}{c}\n\\int\\limits_{0}^{L^{(e)}} n N_1^{(e)}(x)dx \\\\\n\\int\\limits_{0}^{L^{(e)}} n N_2^{(e)}(x)dx\n\\end{array}\n\\right]\n</math>\nor in the matrix form\n\n<math>\nK^{(e)} u^{(e)} = Q^{(e)}\n</math>\n\nIn order to assemble the global stiffness matrix it is necessary to consider an equilibrium equations in each node.\nAfter that the equation has the following matrix form\n\n<math>\nK u = Q\n</math>\n\nwhere\n\n:<math> \nK=\\left[\n\\begin{array}{ccccc}\nK_{11}^{(1)} & K_{12}^{(1)} & 0 & ... & 0 \\\\\nK_{21}^{(1)} & K_{22}^{(1)}+K_{11}^{(2)} & K_{12}^{(2)} & ... & 0 \\\\\n0            & K_{21}^{(2)} & K_{22}^{(2)}+K_{11}^{(3)}  & ... & 0 \\\\\n...          &          ... &  ... &  ... & ... \\\\\n0 & 0 & ... & K_{22}^{(Ne-1)} + K_{11}^{(Ne)}  & K_{11}^{(Ne)} \\\\\n0 & 0 & ... & K_{21}^{(Ne)}  & K_{22}^{(Ne)} \n\\end{array}\n\\right]\n</math>\n\nis the global stiffness matrix,\n\n:<math> \nu=\\left[\n\\begin{array}{c}\nu_0 \\\\\nu_1 \\\\\n... \\\\\nu_{Ne} \\\\\n\\end{array}\n\\right]\n</math>\n\nis the solution vector,\n\n:<math> \nQ=\\left[\n\\begin{array}{c}\nQ_0 \\\\\nQ_1 \\\\\n... \\\\\nQ_{Ne} \\\\\n\\end{array}\n\\right]\n</math>\n\nis the right hand side.\n\nIn the case of tension-compression problem\n\n:<math> \nK=\\left[\n\\begin{array}{ccccc}\n\\frac{E^{(1)}A^{(1)}}{L^{(1)}} & -\\frac{E^{(1)}A^{(1)}}{L^{(1)}} & 0 & ... & 0 \\\\\n-\\frac{E^{(1)}A^{(1)}}{L^{(1)}} & \\frac{E^{(1)}A^{(1)}}{L^{(1)}} + \\frac{E^{(2)}A^{(2)}}{L^{(2)}} & -\\frac{E^{(2)}A^{(2)}}{L^{(2)}} & ... & 0 \\\\\n0            & -\\frac{E^{(2)}A^{(2)}}{L^{(2)}} & \\frac{E^{(2)}A^{(2)}}{L^{(2)}}+ \\frac{E^{(3)}A^{(3)}}{L^{(3)}}  & ... & 0 \\\\\n...          &          ... &  ... &  ... & ... \\\\\n0 & 0 & ... & \\frac{E^{(Ne-1)}A^{(Ne-1)}}{L^{(Ne-1)}} + \\frac{E^{(Ne)}A^{(Ne)}}{L^{(Ne)}} & -\\frac{E^{(Ne)}A^{(Ne)}}{L^{(Ne)}} \\\\\n0 & 0 & ... & -\\frac{E^{(Ne)}A^{(Ne)}}{L^{(Ne)}}  & \\frac{E^{(Ne)}A^{(Ne)}}{L^{(Ne)}}\n\\end{array}\n\\right] \n</math>\n\nIf we neglect the distributed load {{mvar|n}}\n\n:<math> \nQ=\\left[\n\\begin{array}{c}\nR \\\\\n0 \\\\\n... \\\\\n0\\\\\nP \\\\\n\\end{array}\n\\right]\n</math>\n\nAfter taking into account the boundary conditions the stiffness matrix has the following form\n\n:<math> \nK=\\left[\n\\begin{array}{ccccc}\n1 & 0 & 0 & ... & 0 \\\\\n0 & \\frac{E^{(1)}A^{(1)}}{L^{(1)}} + \\frac{E^{(2)}A^{(2)}}{L^{(2)}} & -\\frac{E^{(2)}A^{(2)}}{L^{(2)}} & ... & 0 \\\\\n0            & -\\frac{E^{(2)}A^{(2)}}{L^{(2)}} & \\frac{E^{(2)}A^{(2)}}{L^{(2)}}+ \\frac{E^{(3)}A^{(3)}}{L^{(3)}}  & ... & 0 \\\\\n...          &          ... &  ... &  ... & ... \\\\\n0 & 0 & ... & \\frac{E^{(e-1)}A^{(e-1)}}{L^{(e-1)}} + \\frac{E^{(e)}A^{(e)}}{L^{(e)}} & -\\frac{E^{(e)}A^{(e)}}{L^{(e)}} \\\\\n0 & 0 & ... & -\\frac{E^{(e)}A^{(e)}}{L^{(e)}}  & \\frac{E^{(e)}A^{(e)}}{L^{(e)}}\n\\end{array}\n\\right] = K(E,A)=K(E^{(1)},...,E^{(Ne)},A^{(1)},...,A^{(Ne)})\n</math>\n\nRight-hand side has the following form\n\n:<math> \nQ=\\left[\n\\begin{array}{c}\n0 \\\\\n0 \\\\\n... \\\\\n0\\\\\nP \\\\\n\\end{array}\n\\right] = Q(P)\n</math>\n\nLet's assume that Young's modulus {{mvar|E}}, area of cross-section {{mvar|A}} and the load {{mvar|P}} are uncertain and belong to some intervals\n\n:<math> E^{(e)} \\in [\\underline E^{(e)},\\overline E^{(e)}] </math>\n\n:<math> A^{(e)} \\in [\\underline A^{(e)},\\overline A^{(e)}] </math>\n\n:<math> P \\in [\\underline P,\\overline P] </math>\n\nThe interval solution can be defined calculating the following way\n\n:<math> {\\mathbf u}=\\lozenge \\{u : K(E,A)u=Q(P) ,E^{(e)} \\in [\\underline E^{(e)},\\overline E^{(e)}], A^{(e)} \n\\in [\\underline A^{(e)},\\overline A^{(e)}]  ,P\\in[\\underline P,\\overline P] \\} </math>\n\nCalculation of the interval vector <math>  {\\mathbf u} </math> is in general [[NP-hard]], however in specific cases it is possible to calculate the solution which can be used in many engineering applications.\n\nThe results of the calculations are the interval displacements\n\n:<math> u_i \\in [\\underline u_i, \\overline u_i] </math>\n\nLet's assume that the displacements in the column have to be smaller than some given value (due to safety).\n\n<math> u_i< u^{\\max}_i </math>\n\nThe uncertain system is safe if the interval solution satisfy all safety conditions.\n\nIn this particular case\n\n<math> u_i< u^{\\max}_i, \\ \\ \\ u_i\\in [\\underline u_i, \\overline u_i] </math>\n\nor simple\n\n<math> \\overline u_i< u^{\\max}_i </math>\n\nIn postprocessing it is possible to calculate the interval stress, the interval strain and the interval [[Yield surface|limit state functions]] and use these values in the design process.\n\nThe interval finite element method can be applied to the solution of problems in which there is not enough information to create reliable probabilistic characteristic of the structures [ [[Elishakoff]] 2000]. Interval finite element method can be also applied in the theory of [[imprecise probability]].\n\n== Endpoints combination method ==\n\nIt is possible to solve the equation <math> K(p)u(p)=Q(p) </math> for all possible combinations of endpoints of the interval <math> \\hat p </math>. <br />\nThe list of all vertices of the interval <math> \\hat p </math> can be written as <math> L=\\{p^*_1,...,p^*_n\\} </math>. <br />\nUpper and lower bound of the solution can be calculated in the following way\n\n:<math> \\underline u_i = \\min\\{u_i(p_k^*):K(p_k^*) u(p_k^*) =Q(p_k^*), p_k^*\\in L\\} </math>\n\n:<math> \\overline u_i = \\max\\{u_i(p_k^*):K(p_k^*) u(p_k^*) =Q(p_k^*), p_k^*\\in L\\} </math>\n\nEndpoints combination method gives solution which is usually exact; unfortunately the method has exponential computational complexity and cannot be applied to the problems with many interval parameters [Neumaier 1990].\n\n== Taylor expansion method ==\n\nThe function <math> u=u(p) </math> can be expanded by using [[Taylor series]].\nIn the simplest case the Taylor series use only linear approximation\n\n:<math> u_i(p) \\approx u_i(p_0)+\\sum_j\\frac{\\partial u(p_0)}{\\partial p_j}\\Delta p_j  </math>\n\nUpper and lower bound of the solution can be calculated by using the following formula\n\n:<math> \\underline u_i \\approx u_i(p_0)-\\left|\\sum_j\\frac{\\partial u(p_0)}{\\partial p_j}\\right|\\Delta p_j  </math>\n\n:<math> \\overline u_i \\approx u_i(p_0)+\\left|\\sum_j\\frac{\\partial u(p_0)}{\\partial p_j}\\right|\\Delta p_j  </math>\n\nThe method is very efficient however it is not very accurate.<br />\nIn order to improve accuracy it is possible to apply higher order Taylor expansion [Pownuk 2004].<br />\nThis approach can be also applied in the [[interval finite difference method]] and the [[interval boundary element method]].\n\n== Gradient method ==\n\nIf the sign of the derivatives <math> \\frac{\\partial u_i}{\\partial p_j} </math> is constant then the functions <math> u_i= u_i(p)</math> is monotone and the exact solution can be calculated very fast.\n\n:if <math>  \\frac{\\partial u_i}{\\partial p_j} \\ge 0 </math> then <math> p_i^{\\min} = \\underline p_i, \\ p_i^{\\max} = \\overline p_i  </math>\n\n:if <math>  \\frac{\\partial u_i}{\\partial p_j} < 0 </math> then <math> p_i^{\\min} = \\overline p_i, \\ p_i^{\\max} = \\underline p_i  </math>\n\nExtreme values of the solution can be calculated in the following way\n\n:<math>  \\underline u_i=u_i(p^{\\min}), \\ \\overline u_i=u_i(p^{\\max})  </math>\n\nIn many structural engineering applications the method gives exact solution. <br />\nIf the solution is not monotone the solution is usually reasonable. In order to improve accuracy of the method it is possible to apply monotonicity tests and higher order sensitivity analysis. The method can be applied to the solution of linear and nonlinear problems of computational mechanics [Pownuk 2004]. Applications of sensitivity analysis method to the solution of civil engineering problems can be found in the following paper [M.V. Rama Rao, A. Pownuk and I. Skalna 2008].<br />\nThis approach can be also applied in the [[interval finite difference method]] and the [[interval boundary element method]].\n\n==Element by element method==\n\nMuhanna and Mullen applied element by element formulation to the solution of finite element equation with the interval parameters [Muhanna, Mullen 2001]. Using that method it is possible to get the solution with guaranteed accuracy in the case of truss and frame structures.\n\n==Perturbation methods==\nThe solution <math> u=u(p) </math> [[stiffness matrix]] <math> K=K(p) </math> and the load vector <math> Q=Q(p) </math> can be expanded by using [[perturbation theory]]. Perturbation theory lead to the approximate value of the interval solution [Qiu, [[Elishakoff]] 1998]. The method is very efficient and can be applied to large problems of computational mechanics.\n\n==Response surface method==\nIt is possible to approximate the solution <math> u=u(p) </math> by using [[Response surface methodology|response surface]]. Then it is possible to use the response surface to the get the interval solution [Akpan 2000]. Using response surface method it is possible to solve very complex problem of computational mechanics [Beer 2008].\n\n==Pure interval methods==\nSeveral authors tried to apply pure interval methods to the solution of finite element problems with the interval parameters. In some cases it is possible to get very interesting results e.g. [Popova, Iankov, Bonev 2008]. However, in general the method generates very overestimated results [Kulpa, Pownuk, Skalna  1998].\n\n==Parametric interval systems==\n[Popova 2001] and [Skalna 2006] introduced the methods for the solution of the system of linear equations in which the coefficients are linear combinations of interval parameters. In this case it is possible to get very accurate solution of the interval equations with guaranteed accuracy.\n\n==See also==\n* [[Interval boundary element method]]\n* [[Interval (mathematics)]]\n* [[Interval arithmetic]]\n* [[Imprecise probability]]\n* [[Multivalued function]]\n* [[Differential inclusion]]\n* [[Observational error]]\n* [[Random compact set]]\n* [[Reliability (statistics)]]\n* [[Confidence interval]]\n* [[Best, worst and average case]]\n* [[Probabilistic design]]\n* [[Propagation of uncertainty]]\n* [[Experimental uncertainty analysis]]\n* [[Sensitivity analysis]]\n* [[Perturbation theory]]\n* [[Continuum mechanics]]\n* [[Solid mechanics]]\n* [[Truss]]\n* [[Space frame]]\n* [[Linear elasticity]]\n* [[Strength of materials]]\n\n==References==\n<references/>\n* U.O. Akpan, T.S. Koko, I.R. Orisamolu, B.K. Gallant, Practical fuzzy finite element analysis of structures, Finite Elements in Analysis and Design, 38, pp.&nbsp;93–111, 2000.\n* M. Beer, Evaluation of Inconsistent Engineering data, The Third workshop on Reliable Engineering Computing (REC08) Georgia Institute of Technology, February 20–22, 2008, Savannah, Georgia, USA.\n* Dempster, A. P. (1967). \"Upper and lower probabilities induced by a multivalued mapping\". The Annals of Mathematical Statistics 38 (2): 325-339. [https://www.jstor.org/stable/2239146]. Retrieved 2009-09-23\n* Analyzing Uncertainty in Civil Engineering, by W. Fellin, H. Lessmann, M. Oberguggenberger, and R. Vieider (eds.), Springer-Verlag, Berlin, 2005\n* [[I. Elishakoff]], Possible limitations of probabilistic methods in engineering. Applied Mechanics Reviews, Vol.53, No.2, pp.&nbsp;19–25, 2000.\n* Hlavácek, I., Chleboun, J., Babuška, I.: Uncertain Input Data Problems and the Worst Scenario Method. Elsevier, Amsterdam (2004)\n* Köylüoglu, U.,  [[Isaac Elishakoff]]; A comparison of stochastic and interval finite elements applied to shear frames with uncertain stiffness properties, Computers & Structures Volume: 67, Issue: 1-3, April 1, 1998, pp.&nbsp;91–98\n* [[Zenon Kulpa|Kulpa Z.]], Pownuk A., Skalna I., Analysis of linear mechanical structures with uncertainties by means of interval methods. Computer Assisted Mechanics and Engineering Sciences, vol. 5, 1998, pp.&nbsp;443–477\n* D. Moens and D. Vandepitte, Interval sensitivity theory and its application to frequency response envelope analysis of uncertain structures. Computer Methods in Applied Mechanics and Engineering Vol. 196, No. 21-24,1 April 2007, pp.&nbsp;2486–2496.\n* Möller, B., Beer, M., Fuzzy Randomness - Uncertainty in Civil Engineering and Computational Mechanics, Springer, Berlin, 2004.\n* R.L. Muhanna, R.L. Mullen, Uncertainty in Mechanics Problems - Interval - Based Approach. Journal of Engineering Mechanics, Vol.127, No.6, 2001, 557-556\n* A. Neumaier, Interval methods for systems of equations, Cambridge University Press, New York, 1990\n* E. Popova, On the Solution of Parametrised Linear Systems. W. Kraemer, J. Wolff von Gudenberg (Eds.): Scientific Computing,Validated Numerics, Interval Methods. Kluwer Acad. Publishers, 2001, pp.&nbsp;127–138.\n* E. Popova, R. Iankov, Z. Bonev: Bounding the Response of Mechanical Structures with Uncertainties in all the Parameters. In R.L.Muhannah, R.L.Mullen (Eds): Proceedings of the NSF Workshop on Reliable Engineering Computing (REC), Svannah, Georgia USA, Feb. 22-24, 2006, 245-265\n* A. Pownuk, Numerical solutions of fuzzy partial differential equation and its application in computational mechanics, Fuzzy Partial Differential Equations and Relational Equations: Reservoir Characterization and Modeling (M. Nikravesh, L. Zadeh and V. Korotkikh, eds.), Studies in Fuzziness and Soft Computing, Physica-Verlag, 2004, pp.&nbsp;308–347\n* A. Pownuk, Efficient Method of Solution of Large Scale Engineering Problems with Interval Parameters Based on Sensitivity Analysis, Proceeding of NSF workshop on Reliable Engineering Computing, September 15–17, 2004, Savannah, Georgia, USA, pp.&nbsp;305–316\n*M.V. Rama Rao, A. Pownuk and I. Skalna, Stress Analysis of a Singly Reinforced Concrete Beam with Uncertain Structural Parameters, NSF workshop on Reliable Engineering Computing, February 20–22, 2008, Savannah, Georgia, USA, pp.&nbsp;459–478\n* I. Skalna, A Method for Outer Interval Solution of Systems of Linear Equations Depending Linearly on Interval Parameters, Reliable Computing, Volume 12, Number 2, April, 2006, pp.&nbsp;107–120\n* Z. Qiu and [[I. Elishakoff]], Antioptimization of structures with large uncertain but non-random parameters via interval analysis Computer Methods in Applied Mechanics and Engineering, Volume 152, Issues 3-4, 24 January 1998, Pages 361-372\n* Bernardini, Alberto, Tonon, Fulvio, Bounding Uncertainty in Civil Engineering, Springer 2010\n\n* Ben-Haim Y., [[Elishakoff I.]], 1990, Convex Models of Uncertainty in Applied Mechanics. Elsevier Science Publishers, New York\n\n* Valliappan S., Pham T.D., 1993, Fuzzy Finite Element Analysis of A Foundation on Elastic Soil Medium. International Journal for Numerical and Analytical Methods in Geomechanics, Vol.17, pp.&nbsp;771–789\n\n* [[Elishakoff I.]], Li Y.W., Starnes J.H., 1994, A deterministic method to predict the effect of unknown-but-bounded elastic moduli on the buckling of composite structures. Computer methods in applied mechanics and engineering, Vol.111, pp.&nbsp;155–167\n\n* Valliappan S. Pham T.D., 1995, Elasto-Plastic Finite Element Analysis with Fuzzy Parameters. International Journal for Numerical Methods in Engineering, 38, pp.&nbsp;531–548\n\n* Rao S.S., Sawyer J.P., 1995, Fuzzy Finite Element Approach for the Analysis of Imprecisly Defined Systems. AIAA Journal, Vol.33, No.12, pp.&nbsp;2364–2370\n\n* Köylüoglu H.U., Cakmak A., Nielsen S.R.K., 1995, Interval mapping in structural mechanics. In: Spanos, ed. Computational Stochastic Mechanics. 125-133. Balkema, Rotterdam\n\n* Muhanna, R. L. and R. L. Mullen (1995). \"Development of Interval Based Methods for Fuzziness in Continuum Mechanics\" in Proceedings of the 3rd International Symposium on Uncertainty Modeling and Analysis and Annual Conference of the North American Fuzzy Information Processing Society (ISUMA–NAFIPS'95),IEEE, 705–710\n\n== External links ==\n* [https://web.archive.org/web/20080725062851/http://www.gtsav.gatech.edu/rec Reliable Engineering Computing, Georgia Institute of Technology, Savannah, USA]\n* [http://www.cs.utep.edu/interval-comp/ Interval Computations]\n* [http://www.springerlink.com/content/102987/ Reliable Computing (Journal)]\n* [http://andrzej.pownuk.com/IntervalEquations.htm Interval equations (collections of references)]\n* [http://andrzej.pownuk.com/interval_web_applications.htm Interval finite element web applications]\n* [https://web.archive.org/web/20100127132504/http://cose.math.bas.bg/webMathematica/webComputing/ParametricSSet.jsp E. Popova, Parametric Solution Set of Interval Linear System]\n* [http://www.sipta.org/ The Society for Imprecise Probability: Theories and Applications]\n\n[[Category:Finite element method]]"
    },
    {
      "title": "Isogeometric analysis",
      "url": "https://en.wikipedia.org/wiki/Isogeometric_analysis",
      "text": "'''Isogeometric analysis''' is a recently{{When|date=March 2019}} developed computational approach that offers the possibility of integrating [[finite element analysis]] (FEA) into conventional [[NURBS]]-based [[Computer-aided design|CAD]] design tools. Currently, it is necessary to convert data between CAD and FEA packages to analyse new designs during development, a difficult task since the computational geometric approach for each is different. Isogeometric analysis employs complex NURBS geometry (the basis of most CAD packages) in the FEA application directly. This allows models to be designed, tested and adjusted in one go, using a common data set.<ref name=\"cottrell\">{{cite book|last1=Cottrell|first1=J. Austin|last2=Hughes|first2=Thomas J.R.|last3=Bazilevs|first3=Yuri|title=Isogeometric Analysis: Toward Integration of CAD and FEA|publisher=[[John Wiley & Sons]]|date=October 2009|pages=|isbn=978-0-470-74873-2|url=http://as.wiley.com/WileyCDA/WileyTitle/productCd-0470748737.html|accessdate=2009-09-22}}</ref>\n\nThe pioneers of this technique are [[Thomas J.R. Hughes|Tom Hughes]] and his group at [[The University of Texas at Austin]]. A reference [[free software]] implementation of some isogeometric analysis methods is GeoPDEs.<ref name=\"geopdes\">{{Cite web|url=http://geopdes.sourceforge.net|title=GeoPDEs: a free software tool for isogeometric analysis of PDEs|accessdate=November 7, 2010|year=2010}}</ref><ref>{{cite journal|last=de Falco|first=C.|author2=A. Reali |author3=R. Vázquez |title=GeoPDEs: a research tool for Isogeometric Analysis of PDEs|journal=Adv. Eng. Softw.|volume=42|pages=1020–1034|year=2011}}</ref>  Likewise, other implementations can be found online. For instance, PetIGA<ref name=\"PetIGA\">{{Cite web|url=https://bitbucket.org/dalcinl/petiga|title=PetIGA: A framework for high performance Isogeometric Analysis|accessdate=August 7, 2012|year=2012}}</ref> is an open framework for high performance isogeometric analysis heavily based on [[PETSc]]. In addition, MIGFEM is another IGA code which is implemented in Matlab and supports Partition of Unity enrichment IGA for 2D and 3D fracture. Furthermore, G+Smo<ref name=\"G+Smo\">{{Cite web|url=http://gs.jku.at/gismo|title=G+Smo: a C++ library for isogeometric analysis, developed at RICAM, Linz|accessdate=July 9, 2017|year=2017}}</ref> is an open C++ library for isogeometric analysis. In particular, FEAP<ref name=\"FEAP\">{{Cite web|url=http://projects.ce.berkeley.edu/feap/|title=FEAP: FEAP is a general purpose finite element analysis program which is designed for research and educational use, developed at University of California, Berkeley|accessdate=April 21, 2018|year=2018}}</ref> is a finite element analysis program which includes an Isogeometric analysis library FEAP '''IsoGeometric''' (Version FEAP84 & Version FEAP85).\n \n\n== References ==\n{{reflist}}\n\n==External links==\n*[http://www.freepatentsonline.com/y2009/0024370.html U.S. Patent: Method and System for Performing T-Spline Based Isogeometric Analysis]\n*[http://geopdes.sourceforge.net GeoPDEs: a free software tool for Isogeometric Analysis based on [[Octave]] ]\n*[https://sourceforge.net/projects/cmcodes/files/ MIG(X)FEM: a free Matlab code for IGA (FEM and extended FEM)]\n*[https://bitbucket.org/dalcinl/petiga PetIGA: A framework for high-performance Isogeometric Analysis based on [[PETSc]] ]\n*[http://gs.jku.at/gismo G+Smo (Geometry plus Simulation modules): a C++ library for isogeometric analysis, developed at RICAM, Linz]\n*[http://projects.ce.berkeley.edu/feap/ FEAP: a general purpose finite element analysis program which is designed for research and educational use, developed at University of California, Berkeley]\n*[http://www.bembel.eu Bembel: An open-source isogeometric boundary element library for Laplace, Helmholtz, and Maxwell problems written in C++] \n\n[[Category:Finite element method]]\n[[Category:Computer-aided design]]"
    },
    {
      "title": "Marine Unsaturated Model",
      "url": "https://en.wikipedia.org/wiki/Marine_Unsaturated_Model",
      "text": "{{Orphan|date=June 2017}}\n\nThe '''Marine Unsaturated Model''' ('''MARUN model''') is a two-dimensional (vertical slice) finite element model capable of simulating the migration of water and solutes in saturated-unsaturated porous media while accounting for the impact of solute concentration on water density and viscosity, as saltwater is heaving and more viscous than freshwater.  The detailed formulation of the MARUN model is found in (Boufadel et al. 1998)<ref>Boufadel, M. C., M. T. Suidan, C. H. Rauch, A. D. Venosa and P. Biswas (1998). \"2-D variably-saturated flow: Physical scaling and Bayesian estimation.\" Journal of Hydrologic Engineering '''3'''(10): 223-231.</ref> and (Boufadel et al. 1999).<ref>Boufadel, M. C., M. T. Suidan and A. D. Venosa (1999). \"A numerical model for density-and-viscosity-dependent flow in two-dimensional variably-saturated media.\" Journal of Contaminant Hydrology '''37''': 1-20.</ref>  The model was used to investigate seepage flow in trenches and dams (Boufadel et al. 1999,<ref>Boufadel, M., M. Suidan, A. Venosa and M. Bowers (1999). \"Steady Seepage in Trenches and Dams: Effect of Capillary Flow.\" Journal of Hydraulic Engineering '''125'''(3): 286-294.</ref> Naba et al. 2002 <ref>Naba, B., M. C. Boufadel and J. Weaver (2002). \"The role of capillary forces in steady‐state and transient seepage flows.\" Groundwater '''40'''(4): 407-415.</ref> ), the migration of [[brine]] following [[evaporation]] (Boufadel et al. 1999) <ref>Boufadel, M., M. Suidan and A. Venosa (1999). \"Numerical modeling of water flow below dry salt lakes: effect of capillarity and viscosity.\" Journal of Hydrology '''221'''(1): 55-74.</ref> and (Geng and M.C. 2015),<ref>Geng, X. and B. M.C. (2015). \"Numerical modeling of water flow and salt transport in bare saline soil subjected to evaporation.\" Journal of Hydrology '''524''': 427-438.</ref> submarine groundwater discharge (Li et al. 2008),<ref>Li, H., M. C. Boufadel and J. W. Weaver (2008). \"Tide-induced seawater–groundwater circulation in shallow beach aquifers.\" Journal of Hydrology '''352'''(1): 211-224.</ref> and beach [[hydrodynamics]] to explain the persistence of some of the [[Exxon Valdez oil spill|Exxon Valdez oil]] in Alaska beaches (Li and Boufadel 2010).<ref>Li, H. and M. C. Boufadel (2010). \"Long-term persistence of oil from the Exxon Valdez spill in two-layer beaches.\" Nature Geoscience '''3'''(2): 96-99.</ref>\n\n==Model formulation==\n\nIn the absence of source/sink terms, the equation for the conservation of the fluid mass (water + salt) is:  \n:<math> \n  \\frac{\\partial\\left(\\beta \\phi S\\right)}{\\partial t*} = \\frac{\\partial\\left(\\beta \\delta K_x* \\frac{\\partial \\psi *}{\\partial x*} \\right)}{\\partial x*} + \\frac{\\partial\\left(\\beta \\delta K_z* \\frac{\\partial \\psi *}{\\partial z*} \\right)}{\\partial z*} + \\frac{\\partial\\left({\\beta}^2 K_z* \\right)}{\\partial z*}  \n</math> \nwhere <math> \\phi \\left[ - \\right] </math> is the porosity of the medium() and S is the water saturation ratio of soil moisture with a value of 1 implying fully saturated soil,\n\nIn the absence of source/sink terms, the equation for the conservation of the solute equation is expressed as:\n:<math>\n  \\frac{\\partial \\left( \\phi S c* \\right)}{\\partial t*} = \\triangledown \\left( \\phi S \\underline{D}* \\triangledown \\cdot c* \\right) - \\triangledown \\left( \\underline{q}* c* \\right)\n</math>\n\n==BIOMARUN==\nThe model BIO-MARUN resulted from combining the model BIOB (for [[biodegradation]] in a block) with the MARUN model.  The BIOB model (Geng et al. 2012)<ref>Geng, X., M. C. Boufadel and B. Wrenn (2012). \"Mathematical modeling of the biodegradation of residual hydrocarbon in a variably-saturated sand column.\" Biodegradation '''24'''(2): 153-163.</ref> and (Geng et al. 2014)<ref>Geng, X., M. C. Boufadel, Y. Personna, K. Lee and D. Tsao (2014). \"BioB: A Mathematical Modeling for the Biodegradation of Low Solubility Hydrocarbons.\" Marine Pollution Bulletin (In press).</ref> requires the concentration of hydrocarbons, the microbial density, and oxygen and nutrient concentrations.  It uses Monod kinetics to predict microbial growth, oxygen consumption, and CO2 production.  An implementation of the model was also conducted by (Torlapati and Boufadel 2014).<ref>Torlapati, J. and M. C. Boufadel (2014). \"Evaluation of the biodegradation of Alaska North Slope oil in microcosms using the biodegradation model BIOB.\" Frontiers in Aquatic Microbiology '''5'''(212): 1-15.</ref> The BIOB model can also revert to using default values.\n\nThe BIOMARUN model allows tracking of two substrates (or food), two microbial communities, and up to 8 solutes, and it was used to predict oil biodegradation under natural conditions (Geng et al. 2015) <ref>Geng, X., M. C. Boufadel, K. Lee, S. Abrams and M. Suidan (2015). \"Biodegradation of subsurface oil in a tidally influenced sand beach: Impact of hydraulics and interaction with pore water chemistry.\" Water Resources Research.</ref> and with amendments (i.e., bioremediation) (Geng et al. 2016).<ref>Geng, X., Z. Pan, B. M.C., T. Ozgokmen, K. Lee and L. Zhao (2016). \"Simulation of oil bioremediation of a tidally-influenced beach: Spatio-temporal evolution of nutrient and dissolved oxygen.\" Journal of Geophysical Research, Oceans.</ref>  The BIOMARUN model was also used to investigate the biodegradation of benzene in tidally influenced beaches (Geng et al. 2016) <ref>Geng, X., M. C. Boufadel and F. Cui (2016). \"Numerical modeling of subsurface release and fate of benzene and toluene in coastal aquifers subjected to tides.\" Journal of Hydrology.</ref>\n\n==TMARUN==\nTo account for heat transfer through liquid and vapor transport, the model MARUN was coupled with equations for the migration of heat through conduction and vapor transport as documented closely in (Geng and M.C. 2015,<ref>Geng, X. and B. M.C. (2015). \"Numerical modeling of water flow and salt transport in bare saline soil subjected to evaporation.\" Journal of Hydrology '''524''': 427-438.</ref> Geng et al. 2016 <ref>Geng, X., M. C. Boufadel and N. Jackson (2016). \"Evidence of salt accumulation in beach intertidal zone due to evaporation.\" Scientific Report 6(31486; doi: 10.1038/srep31486): 1-5.</ref>). The TMARUN model was used to explain the presence of high salinity (100 g/L more than 3 times that of seawater) in the intertidal zone of beaches.\n\n==Notes and references==\n{{Reflist}}\n\n[[Category:Finite element method]]"
    },
    {
      "title": "MFEM",
      "url": "https://en.wikipedia.org/wiki/MFEM",
      "text": "{{Infobox software\n| name = MFEM\n| screenshot = Mfem-logo-300.png\n| caption = The logo of MFEM shows some of its features: curvilinear elements, adaptive mesh refinement and parallel partitioning.\n| latest release version = 4.0\n| latest release date = {{Start date and age|2019|05|24}}\n| latest preview version = \n| latest preview date = \n| repo = https://github.com/mfem/mfem\n| programming language = [[C++]]\n| operating system = [[Linux]], [[MacOS]], [[Microsoft Windows]]\n| platform = \n| genre = [[Finite element analysis]]\n| license = [[LGPL]] version 2.1\n| website = {{URL|mfem.org}}\n}}\n\n'''MFEM''' is an [[open-source software|open-source]] C++ library for solving [[partial differential equation]]s using the [[finite element method]], developed and maintained by researchers at the [[Lawrence Livermore National Laboratory]]. MFEM is [[free software]] released under the [[GNU Lesser General Public License]] (LGPL-2.1).<ref>{{cite journal |last1=Auten |first1=Holly |title=The High Value of Open-Source Software |journal=Science & Technology Review |volume=January/February 2018 |pages=5–11 |url=https://str.llnl.gov/content/pages/2018-01/pdf/01.18.pdf}}</ref>\n\nThe library consists of C++ classes that serve as building blocks for developing finite element solvers applicable to problems of [[fluid dynamics]],<ref>{{cite journal |last1=Anderson |first1=Robert W. |last2=Dobrev |first2=Veselin A. |last3=Kolev |first3=Tzanio V. |last4=Rieben |first4=Robert N. |title=High-Order Multi-Material ALE Hydrodynamics |journal=SIAM Journal on Scientific Computing |date=2018 |volume=40 |issue=1 |pages=B32–B58 |doi=10.1137/17M1116453}}</ref> [[structural mechanics]],<ref>{{cite journal |last1=White |first1=D. A. |last2=Stowell |first2=M. L. |last3=Tortorelli |first3=D. A. |title=Topological optimization of structures using Fourier representations |journal=Structural and Multidisciplinary Optimization |volume=58 |issue=3 |date=2018 |pages=1205–1220 |doi=10.1007/s00158-018-1962-y}}</ref> [[electromagnetics]],<ref>{{cite journal |last1=Shiraiwa |first1=S. |last2=Wright |first2=J. C. |last3=Bonoli |first3=P. T. |last4=Kolev |first4=T. |last5=Stowell |first5=M. |title=RF wave simulation for cold edge plasmas using the MFEM library |journal=22 Topical Conference on Radio-Frequency Power in Plasmas |date=23 October 2017 |volume=157 |pages=03048 |doi=10.1051/epjconf/201715703048|bibcode=2017EPJWC.15703048S }}</ref> [[radiative transfer]]<ref>{{cite journal |last1=Holec |first1=M. |last2=Limpouch |first2=J. |last3=Liska |first3=R. |last4=Weber |first4=S. |title=High‐order discontinuous Galerkin nonlocal transport and energy equations scheme for radiation hydrodynamics |journal=Numerical Methods in Fluids |date=10 April 2017 |volume=83 |issue=10 |pages=779–797 |doi=10.1002/fld.4288|bibcode=2017IJNMF..83..779H }}</ref> and many others.\n\nMFEM is part of the [http://ceed.exascaleproject.org/ Center for Efficient Exascale Discretizations] in the [https://www.exascaleproject.org/ Exascale Computing Project], the [https://fastmath-scidac.llnl.gov/index.html FASTMath] institute in the [https://www.scidac.gov/ SciDAC] program, the [https://xsdk.info/ Extreme-scale Scientific Software Development Kit], and the [[OpenHPC]] distribution.\n\n== Features ==\n\nSome of the features of MFEM include<ref>{{cite web |title=MFEM - Finite Element Discretization Library |url=http://mfem.org/features/}}</ref>\n\n* Arbitrary high order finite elements with curved boundaries.\n* H<sup>1</sup>, H(curl) and H(div) conforming, discontinuous (L<sub>2</sub>), and [[NURBS]] finite element spaces.\n* Local [[Adaptive mesh refinement|mesh refinement]], both conforming ([[simplex]] meshes) and non-conforming ([[quadrilateral]]/[[Hexahedron|hexahedral]] meshes).\n* Highly scalable [[Message Passing Interface|MPI]]-based parallelism and [[Gpu computing|GPU]] acceleration.\n* Tight integration with the [[Hypre]] parallel linear algebra library.\n* Many built-in solvers and interfaces to external libraries such as [[PETSc]], [[SuperLU]], [[UMFPACK|SuiteSparse]], [[SUNDIALS]], etc.\n*Accurate and flexible visualization with [http://glvis.org/ GLVis] and [[VisIt]].\n* Lightweight design and conservative use of C++ templating.\n* Documentation in the form of examples and mini-applications.\n\n== See also ==\n\n*[[List of numerical analysis software]]\n*[[List of finite element software packages]]\n\n== References ==\n\n{{Reflist}}\n\n== External links ==\n* {{Official website|www.mfem.org}}\n*[http://mfem.org/examples/ Examples and miniapps]\n*[http://mfem.org/publications/ Publications]\n*[https://github.com/mfem MFEM organization] on [[GitHub]]\n*[http://ceed.exascaleproject.org/ Center for Efficient Exascale Discretizations (CEED)]\n\n{{Numerical analysis software}}\n\n{{DEFAULTSORT:MFEM Project}}\n[[Category:Scientific simulation software]]\n[[Category:C++ numerical libraries]]\n[[Category:Finite element method]]\n[[Category:Free software]]"
    },
    {
      "title": "Mixed finite element method",
      "url": "https://en.wikipedia.org/wiki/Mixed_finite_element_method",
      "text": "In [[numerical analysis]], the '''mixed finite element method''', also known as the hybrid finite element method, is a type of [[finite element method]] in which extra [[independent variables]] are introduced as nodal variables during the discretization of a [[partial differential equation]] problem. The extra independent variables are constrained by using [[Lagrange multipliers]]. To be distinguished from the mixed finite element method, usual [[finite element methods]] that do not introduce such extra independent variables are also called irreducible finite element methods.<ref>{{cite book|last=Olek C Zienkiewicz, Robert L Taylor and J.Z. Zhu|title=The Finite Element Method: Its Basis and Fundamentals|publisher=Elsevier}}</ref> The mixed finite element method is efficient for some problems that would be numerically ill-posed if discretized by using the irreducible [[finite element method]]; one example of such problems is to compute the [[Stress–strain curve|stress and strain]] fields in an almost incompressible [[Elasticity (physics)|elastic]] body.\n\n== References ==\n{{reflist}}\n\n[[Category:Finite element method]]\n\n\n{{analysis-stub}}\n\n{{Numerical PDE}}"
    },
    {
      "title": "Motz's problem",
      "url": "https://en.wikipedia.org/wiki/Motz%27s_problem",
      "text": "In mathematics, '''Motz's problem''' is a problem which is widely employed as a [[wikt:benchmark|benchmark]] for [[Mathematical singularity|singularity]] problems to compare the effectiveness of [[numerical methods]].  The problem was first presented in 1947 by H. Motz in the paper \"The treatment of singularities of [[partial differential equation]]s by relaxation methods\".\n\n[[Category:Partial differential equations]]\n[[Category:Finite element method]]\n\n{{Mathanalysis-stub}}"
    },
    {
      "title": "Multiphase topology optimisation",
      "url": "https://en.wikipedia.org/wiki/Multiphase_topology_optimisation",
      "text": "The '''Multi Phase Topology Optimisation''' is a simulation technique based on the principle of the [[finite element method]] which is able to determine the optimal distribution of two or more different materials in combination under thermal and mechanical loads.\n\nThe objective of optimization is to minimize the component’s [[elastic energy]]. Conventional [[topology optimisation]] methods which simulate adaptive bone mineralization have the disadvantage that there is a continuous change of mass by the growth process.  However, MPTO keeps all initial material concentrations and uses methods adapted for molecular dynamics to find energy minimum. Applying MPTO to Mechanically loaded components with a high number of different material densities, the optimization results show graded and sometimes [[anisotropic]] porosity distributions which are very similar to natural bone structures.  This allows the [[Macroscopic scale|macro-]] and [[microstructure]] of a mechanical component in one step. This method uses the [[Rapid Prototyping]] techniques, [[3D printing]] and [[selective laser sintering]] to produce very stiff, light weight components with graded [[porosities]] calculated by MPTO.\n\n==References==\n\n*{{cite web\n|last = Burblies and Busse\n|first = Adreas and Matthias\n|date =  2006\n|title = Computer Based Porosity Design by Multi Phase Topology Optimization\n|publisher = Fraunhofer - IFAM\n|url = http://www.custom-fit.org/index.php/page/10/\n|accessdate = 2008-01-30\n}}\n\n[[Category:Finite element method]]"
    },
    {
      "title": "Patch test (finite elements)",
      "url": "https://en.wikipedia.org/wiki/Patch_test_%28finite_elements%29",
      "text": "{{About|a numerical problem solving technique|allergy testing|Patch test}}\nThe '''patch test''' in the [[finite element method]] is a simple indicator of the quality of a finite element, developed by [[Bruce Irons (engineer)|Bruce Irons]].\nThe patch test uses a [[partial differential equation]] on a domain consisting from several elements set up so that the exact solution is known and can be reproduced, in principle, with zero error. Typically, in [[mechanics]], the prescribed exact solution consists of displacements that vary as piecewise linear functions in space (called a constant [[Strain (materials science)|strain]] solution). The elements pass the patch test if the finite element solution is the same as the exact solution.<ref>{{cite book|last=Zienkiewicz  |first=O. C.|authorlink=Olgierd Zienkiewicz|author2=R. L. Taylor |author3=J. Z. Zhu |title=The Finite Element Method: Its Basis and Fundamentals|publisher=[[Butterworth-Heinemann]]|date=May 2005|edition=6|isbn=0-7506-6320-0}}</ref>\n\nIt was long conjectured by engineers that passing the patch test is sufficient for the convergence of the finite element, that is, to ensure that the solutions from the finite element method converge to the exact solution of the [[partial differential equation]] as the finite element mesh is refined. However, this is not the case, and the patch test is neither sufficient nor necessary for convergence.<ref>{{cite book|last=Bathe|first=Klaus-Jürgen|authorlink=Klaus-Jürgen Bathe|title=Finite Element Procedures|publisher=[[Prentice Hall]]|date=June 1995|edition=2|isbn=0-9790049-0-X}}</ref>\n\nA broader definition of  '''patch test''' (applicable to any numerical method, including and beyond finite elements) is any test problem having an exact solution that can, in principle, be exactly reproduced by the numerical approximation. Therefore, a finite-element simulation that uses linear shape functions has patch tests for which the exact solution must be piecewise linear, while higher-order finite elements have correspondingly higher-order patch tests.\n\n==References==\n{{reflist}}\n\n[[Category:Finite element method]]\n\n\n{{mathapplied-stub}}"
    },
    {
      "title": "SAMCEF",
      "url": "https://en.wikipedia.org/wiki/SAMCEF",
      "text": "{{Unreferenced|date=October 2008}}\n'''SAMCEF''' is a [[finite element analysis]] (FEA) software package dedicated to mechanical virtual prototyping.  '''SAMCEF''' development started in 1965 at the [[University of Liège]] and is still developed and sold by [[SAMTECH]], a Belgian company the HQ of which is located in [[Liège (city)|Liège]], [[Belgium]].\n\n==Software features==\nSAMCEF software package is made of several modules that can be used and bought independently from one another.\n\nSAMCEF Field is the package Graphical User Interface (GUI) where users will define their models based on CAD geometry.  SAMCEF Field is able to drive all SAMCEF solvers modules within the same environment, making it easy for users to investigate different aspects of the case he is studying without having to learn new ways of doing it for each of them.\n\nHere is the list of the most important modules available:\n\n* SAMCEF Linear: dedicated to linear analysis, including linear static (SAMCEF Asef), modal analysis (SAMCEF Dynam), response to harmonic forces (SAMCEF Repdyn), Buckling stability (SAMCEF Stabi) and response to random vibrations (SAMCEF Spectral)\n* SAMCEF Mecano - Non Linear static and dynamic analysis (implicit formulation) with the unique ability to enable the integration of MBS (Multi Body Simulation) features in the models, mostly kinematic joints like hinges, sliders...\n* SAMCEF Thermal - Linear and Non Linear, transient and steady state thermal analysis, including conduction, convection, radiations and potentially thermal ablation (SAMCEF Amaryllis)\n* BOSS Quattro - Parametric Applications Manager and Multi Disciplinary Optimization\n\nSAMCEF modules are also used as the foundation for solutions dedicated to specific industries.  In that case, users can use SAMCEF products inside environments dedicated to their specific applications:\n\n* S4WT (SAMCEF For Wind Turbines): dedicated to basic and advanced design and load computations inside Wind Turbines.\n* S4PL&S (SAMCEF For Powerlines and Substations): dedicated to the design of electrical transport devices, including computations of the effects of wind, frost and short circuits.\n* S4R (SAMCEF For Rotors): dedicated to the study of fast rotating machines, including Campbell diagrams computations, blades loss, engine start-up...  based on 1D, 2D and 3D Finite Elements.\n\n\n[[Category:Finite element method]]\n[[Category:1960s software]]"
    },
    {
      "title": "Superelement",
      "url": "https://en.wikipedia.org/wiki/Superelement",
      "text": "{{multiple issues|\n{{confusing|date=February 2013}}\n{{context|date=February 2013}}\n}}\nA '''superelement''' is a [[finite element method]] technique which consists of defining a new type of finite element by grouping and processing a set of finite elements. A superelement describes a part of a [[Problem solving|problem]], and can be locally solved, before being implemented in the global problem. Substructuring a problem by means of superelements may facilitate the [[division of labor]] and overcome [[computer memory]] limitations.\n\n== History ==\nSuperelements were invented in the [[aerospace]] industry, where complexity and the size of problems exceeded the solving capabilities of the computational hardware. The development of superelements made solving of larger problems possible, by breakdown of [[complex system]]s such as complete airplanes.\n\n==References==\n* {{cite book | title=Model Order Reduction Techniques: with Applications in Finite Element Analysis | author=Zu-Qing Qu | publisher=Springer | year=2004 | isbn=1852338075 | page=257}}\n* {{cite book | title=Concepts and Applications of Finite Element Analysis | author= Robert D. Cook |display-authors=etal | publisher=John Wiley & Sons. Inc. | year=2002 | isbn=0471356050 | page=359}}\n\n[[Category:Finite element method]]\n\n\n{{Mathanalysis-stub}}"
    },
    {
      "title": "Surface triangulation",
      "url": "https://en.wikipedia.org/wiki/Surface_triangulation",
      "text": "[[File:Tri-brezel.svg|300px|thumb|Triangulation of an implicit surface of [[Genus (mathematics)|genus]] 3]]\n[[File:Affens-triang.svg|400px|thumb|Triangulation of a parametric surface ([[monkey saddle|Monkey Saddle]])]]\n\n'''Triangulation''' of a [[surface (mathematics)|surface]] means\n* a ''net'' of triangles, which covers a given surface partly or totally, ''or''\n* the ''procedure'' of generating the points and triangles of such a net of triangles.\n\nThis article describes the generation of a net of triangles. In literature there are contributions which deal with the optimization of a given net.\n\nSurface triangulations are important for\n* [[Visualization (computer graphics)|visualizing]] surfaces and\n* the application of [[finite element method]]s.\n\nThe triangulation of a ''parametrically'' defined surface is simply achieved by triangulating the area of definition (see second figure, depicting the [[monkey saddle|Monkey Saddle]]). However, the triangles may vary in shape and extension in object space, posing a potential drawback. This can be minimized through adaptive methods that consider step width while triangulating the parameter area.\n\nTo triangulate an ''implicit surface'' (defined by one or more equations) is more difficult.\nThere exist essentially two methods.\n\n* One method divides the 3D region of consideration into cubes and determines the intersections of the surface with the edges of the cubes in order to get polygons on the surface, which thereafter have to be triangulated (''cutting cube method'').<ref>M. Schmidt: ''Cutting Cubes – visualizing implicit surfaces by adaptive polygonization''. Visual Computer (1993) 10, pp. 101–115</ref><ref>J. Bloomenthal: Polygonization of implicit surfaces, Computer Aided Geometric Design (1988), pp. 341–355</ref> The expenditure for managing the data is great.\n* The second and simpler concept is the ''marching method''.<ref>[http://www.mathematik.tu-darmstadt.de/~ehartmann/cdgen0104.pdf E. Hartmann: ''Geometry and Algorithms for COMPUTER AIDED DESIGN''], p. 81</ref><ref>E. Hartmann: ''A marching method for the triangulation of surfaces'', The Visual Computer (1998), 14, pp. 95–108</ref><ref>S. Akkouche & E Galin: ''Adaptive Implicit Surface Polygonization Using Marching Triangles'', COMPUTER GRAPHICS forum (2001), Vol. 20, pp. 67–80</ref> The triangulation starts with a triangulated hexagon at a starting point.  This hexagon is then surrounded by new triangles, following given rules, until the surface of consideration is triangulated. If the surface consists of several components, the algorithm has to be started several times using suitable starting points.\n\nThe cutting cube algorithm determines, at the same time, all components of the surface within the surrounding starting cube depending on prescribed limit parameters. An advantage of the marching method is the possibility to prescribe boundaries (see picture).\n\n'''Polygonizing''' a surface means to generate a [[polygon mesh]].\n \nThe triangulation of a surface should not be confused with the triangulation of a [[Discrete mathematics|discrete]] prescribed plane ''set of points''. See [[Delaunay triangulation]].\n{{Clear}}\n<gallery widths=\"330\" heights=\"250\">\nFile:Triang-cyl-sph4.svg|Triangulation: cylinder, surface <math>x^4+y^4+z^4=1</math>\nFile:Triang-cyl-sph4-pov.png|Triangulation: cylinder, surface <math>x^4+y^4+z^4=1</math>, [[POV-Ray]] image\n</gallery>\n<gallery widths=\"300\" heights=\"200\">\nFile:Torus-triang.svg|Torus: triangulated by the marching method\nFile:Torus-cutting-cube.svg|Torus: polygonized by the cutting cube method\n</gallery>\n\n== See also ==\n* [[Computer-aided design]]\n* [[Tessellation (computer graphics)]]\n* [[Marching cubes]]\n\n== References ==\n<references />\n\n== External links ==\n*Tasso Karkanis & A. James Stewart: ''Curvature-Dependent Triangulation of Implicit Surfaces'' [http://cs.queensu.ca/~jstewart/papers/cga01.html]\n\n[[Category:Surfaces]]\n[[Category:Computer-aided design]]\n[[Category:Finite element method]]"
    },
    {
      "title": "Vflo",
      "url": "https://en.wikipedia.org/wiki/Vflo",
      "text": "[[File:Vflo splashpage.jpg|right]]'''V''flo''''' is a commercially available, [[physics]]-based distributed [[hydrologic]] model generated by [http://www.vieuxinc.com Vieux & Associates, Inc.]  V''flo'' uses [[weather radar|radar rainfall]] data for [[hydrologic]] input to simulate distributed [[runoff model (reservoir)|runoff]].<ref>Vieux, B.E., 2004, Distributed Hydrologic Modeling Using GIS, Kluwer Academic Publishers, Dordrecht, The Netherlands, 289 pp.</ref><ref>Bedient, P.B., W.C. Huber, and B.E. Vieux, 2008, Hydrology and Floodplain Analysis, Fourth Edition, Prentice Hall, Upper Saddle River, NJ, 795 pp.</ref> V''flo'' employs [[GIS]] maps for parameterization via a desktop interface.<ref>Vieux, B.E., Z. Cui, and A. Gaur, 2004, Evaluation of a physics-based distributed hydrologic model for flood forecasting. ''J. Hydrol.'', '''298'''(1-4): 155-177. DMIP special issue.</ref>  The model is suited for [[Distributed parameter system|distributed]] hydrologic forecasting in post-analysis and in continuous operations.  V''flo'' output is in the form of [[hydrograph]]s at selected [[Drainage system (geomorphology)|drainage network]] grids, as well as [[Distributed parameter system|distributed]] runoff maps covering the watershed. Model applications include civil [[infrastructure]] operations and maintenance, [[stormwater]] prediction and [[emergency management]], continuous and short-term surface water [[runoff model (reservoir)|runoff]], recharge estimation, [[soil moisture]] monitoring, [[land use]] planning, [[water quality]] monitoring, and water resources management.\n\n== History ==\nV''flo'' considers the spatial character of the [[parameter]]s and precipitation controlling hydrologic processes, and thus improves upon lumped representations previously used in [[Hydrological modelling|hydrologic modeling]].  Historical practice has been to use lumped representations because of computational limitations or because sufficient data was not available to populate a [[Distributed parameter system|distributed]] model database.<ref>Desconnets, J.-C., B.E. Vieux, B. Cappelaere, and F. Delclaux (1996), “A GIS for hydrologic modeling in the semi-arid, HAPEX-Sahel experiment area of Niger Africa.” ''Trans. in GIS'', '''1'''(2): 82-94.</ref>  Advances in [[computation]]al speed; development of high-resolution precipitation data from [[weather radar|radar]] and satellites; and availability of worldwide digital data sets and [[GIS]] technology makes distributed, physics-based modeling possible.<ref>ASCE, 1999, ''GIS Modules and Distributed Models of the Watershed'', Report, ASCE Task Committee, GIS Modules and Distributed Models of the Watershed, P.A. DeBarry, R.G. Quimpo, eds., American Society of Civil Engineers, Reston, VA., p. 120.</ref>  V''flo'' is designed to take advantage of the spatial variability of high resolution [[Weather radar|radar rainfall]] input, [[GIS]] datasets, and hydraulic channel characteristics.  Because it is [[physics]]-based, it produces [[hydrograph]]s based on conservation equations and the hydraulics of the [[Drainage system (geomorphology)|drainage network]], and can be employed in locations where there are no [[rain gauge]]s or previous modeling studies.  In addition, V''flo''’s network approach makes models scalable from upland [[Drainage basin|watersheds]] to river basins using the same [[Drainage system (geomorphology)|drainage network]].\n\n== Formulation ==\nV''flo'' is suited for distributed hydrologic forecasting in post-analysis and continuous operations.  V''flo'' models may be [[calibration|calibrated]] by loading precipitation maps for historical events and comparing simulated volume/peak [[hydrograph]]s to observed hydrographs.  Elevation data are taken from a [[digital elevation model]].  A vector channel representation is employed.  Parameterization utilizes digital data sets at any resolution, including [[LIDAR]] terrain data and other digital maps of [[Permeability (earth sciences)|impervious area]], soils, and land use/cover.  V''flo'' is developed to utilize multi-sensor inputs from [[Weather radar|radar]], satellites, [[rain gauge]]s, or model forecasts.  The kinematic wave analogy is used to represent hydraulic conditions in a [[Drainage basin|watershed]].\n\n== Specific simulation options ==\n*Rainfall input\n**[[Weather radar|Radar-rainfall]]: UF, [[ESRI grid|ASCII]], [[NEXRAD]] Level II, [[Comma-separated values|CSV]]\n**Satellite data\n**[[Rain gauge]]s, [[Barnes interpolation|Barnes objective analysis]]\n**Quantitative precipitation estimates from model forecasts\n**Multi-sensor precipitation estimates\n*[[Evapotranspiration]]\n*[[Snowmelt]]\n*[[Sensitivity analysis]]\n*Inundation mapping\n*[[Infiltration (hydrology)|Infiltration]]\n**Enhanced [[Infiltration (hydrology)#Green-Ampt|Green-Ampt]] infiltration module with initial saturation calibration factor (slider), saturated hydraulic conductivity, wetting front suction, effective porosity, and soil depth\n**Abstraction and impervious area parameters with [[ESRI grid|ASCII]] import/export\n*Overland flow\n**Manning's equation\n*Channel flow\n**Kinematic Wave Analogy\n**Modified Puls\n**Observed flow\n**Looped rating curve modification (Jones method)\n**Rating curves and cross sections for complex hydraulics\n*Flood watch points\n*Design storms, SCS, user generated\n\n== Applications ==\n*Continuous and short-term surface water [[Surface runoff|runoff]]\n*Stormwater prediction and management\n*[[Flash flood]] forecasting\n*Operational flood alert\n*Flood event reconstruction\n*Design Storm development\n*Recharge estimation\n*Soil moisture monitoring\n*[[Hydrology]] and [[Hydraulics]] studies\n*[[Land use]] planning scenarios\n*[[Water quality]] studies\n*[[Hydropower]] management\n*[[Hydrology]] education\n*[[Hydrologic]] research\n\n== References ==\n{{Reflist}}\n\n[[Category:Integrated hydrologic modelling]]\n[[Category:Hydrology models]]\n[[Category:Environmental engineering]]\n[[Category:Physical geography]]\n[[Category:Hydraulic engineering]]\n[[Category:Water resources management]]\n[[Category:Finite element software]]\n[[Category:Computer-aided engineering software]]\n[[Category:Finite element method]]\n[[Category:Applied mathematics]]\n[[Category:Mathematical modeling]]\n[[Category:Weather radars]]\n[[Category:Radar meteorology]]"
    },
    {
      "title": "VisualFEA",
      "url": "https://en.wikipedia.org/wiki/VisualFEA",
      "text": "{{Infobox Software\n| name = VisualFEA\n| logo =VisualFEA Icon.png\n| logo size =32px\n| screenshot = VisualFEA Screen Shot.png\n| screenshot size = 320px\n| caption = Screen shot of VisualFEA 5.0\n| author = \n| developer = Intuition Software\n| released = January 2000\n| latest release version = 5.11\n| latest release date = {{release date|2016|1|18}}\n| latest preview version = \n| latest preview date =\n| operating system = [[Microsoft Windows|Windows]], [[Mac OS X]]\n| language =\n| status =\n| genre = [[Finite element analysis]]\n| license = [[Proprietary software|Proprietary]]\n| website = [http://www.visualfea.com]\n}}\n\n'''VisualFEA''' is a finite element analysis program running on MS Windows and Mac OS X platforms. The program is being developed and distributed by Intuition Software, Inc. in South Korea, and is used chiefly for structural and geotechnical analysis.  The strongest point of the program is its intuitive and user-friendly usage based on graphical pre- and postprocessing capabilities.  VisualFEA has educational functions for teaching and learning structural mechanics and finite element analysis through graphical simulation. Thus, this program is widely used in college courses related to structural mechanics and finite element method.\n\n==Overview==\nVisualFEA is a full-fledged finite element analysis program with many easy-to-use but powerful features, which can be classified largely into four parts: finite element processing, pre-processing, post-processing and educational simulation.  All the functions are integrated into a single executable module, which is a characteristic of the program distinguished from other finite element analysis programs generally composed of multiple modules.  The whole procedure from pre-processing to analysis, and to post-processing can be completed on the spot without launching one program after another, or without pipelining data from one program to another.\n\n==Processing==\nVisualFEA can solve the following types of problems.\n* Mechanical analysis\n:Truss, frame, plane stress, plane strain, axisymmetric, plate bending, shell and 3D solid \n:Linear, material nonlinear or geometric nonlinear analysis\n:Static or dynamic analysis\n:Construction staged analysis\n:Geotechnical analysis (consolidation, slope stability analysis)\n* Heat conduction analysis\n:Plane, axisymmetric and 3D volume\n:Steady state or transient analysis\n:Linear or nonlinear material model\n:Fire damage analysis\n* Seepage analysis\n:Plane, axisymmetric and 3D volume\n:Steady state or transient analysis\n:Confined or unconfined boundary condition\n* Coupled analysis\n:Heat conduction coupled mechanical analysis\n:Seepage coupled mechanical analysis\n\n==Pre-processing==\nA finite element model in VisualFEA consists of various objects: curve, primitive surface, node, element and mesh. VisualFEA has its own CAD-like capabilities of creating graphical objects without aid of external programs. VisualFEA can create structured or unstructured meshes in two- or three-dimensional space using the following mesh generation schemes.\n* Mapping scheme (lofting, tri-mapping, transfinite mapping, isoparametric mapping)  \n* Sweeping scheme (extrusion, translation, rotation, twisting)\n* Auto mesh scheme (triangulation, tetrahedronization)\n* Mesh treatment (mesh carving, mesh operation, intersection, distortion)\nThe program has the function to save the generated mesh data in text format for use by other application programs. Other pre-processing capabilities include the following items.\n* Definition and assignment of boundary conditions, material properties and element joints, etc.\n* Node number or element number optimization\n* Handling of element orientation, local coordinate axes\n\n==Post-processing==\nVisualFEA has various functions of visualizing the numerical data generated by solving the analysis models.  The most frequently used graphical representation of the data are the contour and vector images.  There are many other forms of graphical representation available in VisualFEA.<ref>J.Y.Lee and S-Y.Ahn, Interactive visualization of elasto-plastic behavior through stress paths and yield surfaces in finite element analysis, Finite Elements in Analysis and Design, 47(2011), pp496-510</ref>\n\n* Iso-surface\n* Sliced plane, parallel plane, cross plane\n* Diagram (bending moment diagram, shear force diagram, etc.)\n* Curve plotting\n* Data probing\n* Animation\n\n==Educational Simulation==\nVisualFEA can be used as a tool for computer-aided education of structural mechanics and finite element method.  The tools are operated with the user-created modeling data and their ensuing analysis results on the basis of finite element technology.  They are devised to promote the understanding, and to stimulate the interest in the subjects by substantiating the conceptual principles and visually exhibiting the complex computational processes with the aid of interactive computer graphics.  The topics covered by the educational functions are as follows.\n* Mathematical relationships of internal forces in rigid frames.<ref>J.Y.Lee and S-Y.Ahn, Finite element implementation for computer-aided education of structural mechanics:Frame analysis, Computer Applications in Engineering Education, 22(2014), pp387-409</ref>\n* Geometric properties of an arbitrarily defined member section\n* Stresses on the member sections\n* Moving load\n* Mohr circle and its application to elasto-plastic yielding.<ref>J.Y.Lee, H.R.Ryu and Y.T.Park, Finite element implementation for computer-aided education of structural mechanics:Mohr's circle and its application, Computer Applications in Engineering Education, 22(2014), pp494-508</ref>\n* Stress path and yield surface\n* Buckling\n* Stiffness assembly and solution process in the finite element analysis.<ref>J.Y.Lee, Interactive simulation of finite element equation processing for educational purposes, Computer Applications in Engineering Education, 23 (2015) pp157-169, DOI 10.1002/cae.21586</ref>\n* Shape function and interpolation\n* Eigen value analysis.<ref>J.Y.Lee, H.R.Ryu, Interactive simulation of eigenmodes for instruction of finite element behavior, Computer Applications in Engineering Education, 23 (2015) pp872-886, DOI 10.1002/cae.21659</ref>\n* Concept of adaptive analysis\n\n==VisualFEA/CBT==\nVisualFEA/CBT is an educational version of the program<ref>R.D.Cook and Intuition Software, VisualFEA and General User Manual, John Wiley and Son's Inc, 2001</ref> published by [http://as.wiley.com/WileyCDA/Section/id-WILEYASIA2_SEARCH_RESULT.html?query=visualfea John Wiley and Son's Inc.] as a companion program to a textbook<ref>R.D.Cook, D.S.Malkus, M.E.Plesha, R.J.Witt, Concepts and Applications of Finite Element Analysis, 4th ed., John Wiley and Son's Inc, 2001</ref> on finite element method. The program has the limitation of 3000 nodes that can be handled.\n\n==References==\n{{reflist}}\n\n==External links==\n* [http://www.visualfea.com/ Intuition Software, Inc.]\n* [https://ecommons.cornell.edu/handle/1813/43749/browse?type=title Screen Demos, Internet-First University Press, Cornell University]\n\n[[Category:Finite element method]]\n[[Category:Structural engineering]]\n[[Category:Engineering education]]"
    },
    {
      "title": "Wood–Armer method",
      "url": "https://en.wikipedia.org/wiki/Wood%E2%80%93Armer_method",
      "text": "The '''Wood–Armer method''' is a [[structural analysis]] method based on [[finite element analysis]] used to design the [[reinforced concrete|reinforcement]] for [[concrete slab]]s.<ref name=\"Wood68\"/> This method provides simple equations to design a concrete slab based on the output from a finite element analysis software.\n\n==References==\n<references>\n<ref name=\"Wood68\">{{cite news|last=Wood|first =R. H.|title=The Reinforcement of Slabs in Accordance with a Pre-Determined Field of Moments, Concrete, V. 2, No. 2, |year=1968|pages=69–76.}}</ref>\n</references>\n\n{{DEFAULTSORT:Wood-Armer Method}}\n[[Category:Finite element method]]\n[[Category:Structural analysis]]\n\n\n{{technology-stub}}"
    },
    {
      "title": "Bilinear quadrilateral element",
      "url": "https://en.wikipedia.org/wiki/Bilinear_quadrilateral_element",
      "text": "The '''bilinear quadrilateral element''', also known as the '''Q4 element''',<ref name=\"Zien00\"/> is a type of element used in [[finite element analysis]] which is used to approximate in a 2D domain the exact solution to a given [[differential equation]].\n\nThe element consists of a combination of two sets of [[Lagrange polynomial]]s, each one used to define the variation of a field in each orthogonal direction of the local referential.\n\n== References ==\n<references>\n    <ref name=\"Zien00\">\n        {{cite book \n        | title    =The Finite Element Method Volume 1: The Basis\n        | last    =  Zienkiewicz\n        | first   = O. C.\n        | edition = 5th\n        | year    = 2000\n        }}\n</ref>\n</references>\n\n[[Category:FEM elements]]\n\n\n{{Mathanalysis-stub}}"
    },
    {
      "title": "Constant strain triangle element",
      "url": "https://en.wikipedia.org/wiki/Constant_strain_triangle_element",
      "text": "{{unreferenced|date=March 2012}}\nIn [[numerical mathematics]], the '''constant strain triangle element''', also known as the '''CST element''' or '''T3 element''', is a type of element used in [[finite element analysis]] which is used to provide an approximate solution in a 2D domain to the exact solution of a given [[differential equation]].\n\nThe name of this element reflects how the [[partial derivative]]s of this element's shape function are [[constant function]]s.  When applied to [[plane stress]] and [[plane strain]] problems, this means that the approximate solution obtained for the stress and strain fields are constant throughout the element's domain.\n\nThe element provides an approximation for the exact solution of a partial differential equation which is parametrized [[Barycentric coordinate system (mathematics)]]\n\n[[Category:FEM elements]]\n\n\n{{Mathanalysis-stub}}"
    },
    {
      "title": "Quadratic quadrilateral element",
      "url": "https://en.wikipedia.org/wiki/Quadratic_quadrilateral_element",
      "text": "The '''quadratic quadrilateral element''', also known as the '''Q8 element''' is a type of element used in [[finite element analysis]] which is used to approximate in a 2D domain the exact solution to a given [[differential equation]]. It is a two-dimensional finite element with both local and global coordinates. This element can be used for plane stress or plane strain problems in elasticity. The quadratic quadrilateral element has modulus of elasticity ''E'', Poisson’s ratio ''v'', and thickness ''t''.<ref>{{Citation|last=Kattan|first=Peter I.|date=2008|pages=311–336|publisher=Springer Berlin Heidelberg|language=en|doi=10.1007/978-3-540-70698-4_14|isbn=9783540706977|title=MATLAB Guide to Finite Elements|chapter=The Quadratic Quadrilateral Element}}</ref>\n\n== References ==\n<references />\n== See also ==\n* [[Lagrange element]]\n[[Category:FEM elements]]\n\n\n{{Mathanalysis-stub}}"
    },
    {
      "title": "Abaqus",
      "url": "https://en.wikipedia.org/wiki/Abaqus",
      "text": "{{More citations needed|date=July 2010}}\n{{Infobox software\n| name                   = SIMULIA Abaqus FEA\n| title                  = SIMULIA Abaqus FEA\n| logo                   = Abaqus icon.png\n| screenshot             = Abaqus CAE 6.9.3.png\n| caption                =\n| collapsible            =\n| author                 = [[Dassault Systemes]]\n| developer              = ABAQUS Inc.,<ref>{{cite news\n  |title = Dassault Systemes to acquire Abaqus Inc for 413 mln usd cash\n  |url = https://www.forbes.com/feeds/afx/2005/05/17/afx2032273.html\n  |date = 17 May 2005\n  |accessdate =7 July 2010\n  |newspaper = [[Forbes.com]]\n  |publisher = [[Forbes]]\n}}</ref>\n| released               = <!-- {{Start date|YYYY|MM|DD}} -->\n| discontinued           =\n| latest release version = 2019 \n| latest release date    = {{Start date and age|2018|12|31}}\n| latest preview version =\n| latest preview date    =\n| programming language   =\n| operating system       = [[Microsoft Windows]]<br/> [[Linux]]<br/> <ref name=\"System Requirements\">{{cite web|url=http://www.3ds.com/support/certified-hardware/simulia-system-information/abaqus-612/system-requirements-for-abaqus-612-products|title=System Requirements - ABAQUS 6.12 - Dassault Systèmes®|website=www.3ds.com|deadurl=no|archiveurl=https://web.archive.org/web/20120819190250/http://www.3ds.com/support/certified-hardware/simulia-system-information/abaqus-612/system-requirements-for-abaqus-612-products|archivedate=19 August 2012|df=dmy-all}}</ref><ref name=\"Unix Requirements\">{{cite web|url=http://www.3ds.com/support/certified-hardware/unix-certified-hardware/|title=Hardware & Software Certification - Dassault Systèmes®|website=www.3ds.com|deadurl=no|archiveurl=https://web.archive.org/web/20121211013448/http://www.3ds.com/support/certified-hardware/unix-certified-hardware/|archivedate=11 December 2012|df=dmy-all}}</ref>\n| platform               = [[IA-32|Windows/x86-32]]<br/> [[x86-64|Windows/x86-64]]<br/> [[x86-64|Linux x86-64]]<ref name=\"System Requirements\" /><ref name=\"Unix Requirements\" />\n| size                   =\n| language               =\n| status                 = Actively developed\n| genre                  = [[Computer-aided engineering]], [[Finite Element Analysis]]\n| license                = [[Proprietary software|Proprietary]] [[commercial software]]\n| website                = {{URL|www.simulia.com}}\n}}\n'''Abaqus FEA'''<ref name=\"Official-prod-index\">{{cite web\n  |url = http://www.simulia.com/products/product_index.html\n  |title = Product Index\n  |work = SIMULIA web site\n  |publisher = Dassault Systèmes\n  |accessdate = 7 July 2010\n| archiveurl= https://web.archive.org/web/20100529084344/http://www.simulia.com/products/product_index.html| archivedate= 29 May 2010 <!--DASHBot-->| deadurl= no}}</ref><ref name=\"Official-prod-home\">{{cite web\n |url         = http://www.simulia.com/products/abaqus_fea.html\n |title       = Abaqus FEA\n |work        = SIMULIA web site\n |publisher   = Dassault Systèmes\n |accessdate  = 7 July 2010\n |deadurl     = no\n |archiveurl  = https://web.archive.org/web/20100502080747/http://www.simulia.com/products/abaqus_fea.html\n |archivedate = 2 May 2010\n |df          = dmy-all\n}}</ref> (formerly '''ABAQUS''') is a software suite for [[finite element analysis]] and [[computer-aided engineering]], originally released in 1978. The name and logo of this software are based on the [[abacus]] calculation tool.<ref>{{cite web\n |url         = http://www.eworksglobal.com/reports_127794587201093750.htm\n |title       = ABAQUS CEO Interview\n |accessdate  = 4 December 2012\n |deadurl     = no\n |archiveurl  = https://web.archive.org/web/20140718162656/http://www.eworksglobal.com/reports_127794587201093750.htm\n |archivedate = 18 July 2014\n |df          = dmy-all\n}}</ref>\nThe Abaqus product suite consists of five core software products:<ref name=\"Official-prod-home\" />\n# ''Abaqus/CAE'', or \"'''C'''omplete '''A'''baqus '''E'''nvironment\" (a [[backronym]] with an obvious root in [[Computer-Aided Engineering|'''C'''omputer-'''A'''ided '''E'''ngineering]]<ref>{{cite web|title=ABAQUS 6.9 User Documentation|url=http://abaqusdoc.ucalgary.ca/v6.9/books/usi/default.htm|work=Internet Manual|publisher=Simulia|accessdate=10 September 2011|deadurl=yes|archiveurl=https://web.archive.org/web/20110923141642/http://abaqusdoc.ucalgary.ca/v6.9/books/usi/default.htm|archivedate=23 September 2011|df=dmy-all}}</ref>). It is a software application used for both the modeling and analysis of mechanical components and assemblies (pre-processing) and visualizing the finite element analysis result. A subset of Abaqus/CAE including only the post-processing module can be launched independently in the ''Abaqus/Viewer'' product.\n# ''Abaqus/Standard'', a general-purpose Finite-Element analyzer that employs implicit integration scheme (traditional).\n# ''Abaqus/Explicit'', a special-purpose Finite-Element analyzer that employs explicit integration scheme to solve highly nonlinear systems with many complex contacts under transient loads.\n# ''Abaqus/CFD'', a [[Computational fluid dynamics|'''C'''omputational '''F'''luid '''D'''ynamics]] software application which provides advanced computational fluid dynamics capabilities with extensive support for preprocessing and postprocessing provided in Abaqus/CAE.<ref>{{cite web|url=http://www.3ds.com/products/simulia/portfolio/abaqus/abaqus-portfolio/abaquscfd/|title=Abaqus Unified FEA - SIMULIA™ by Dassault Systèmes®|website=www.3ds.com|deadurl=no|archiveurl=https://web.archive.org/web/20121115015727/http://www.3ds.com/products/simulia/portfolio/abaqus/abaqus-portfolio/abaquscfd/|archivedate=15 November 2012|df=dmy-all}}</ref> \n# ''Abaqus/Electromagnetic'', a [[Computational electromagnetics]] software application which solves advanced computational electromagnetic problems.\n\nThe Abaqus products use the [[open-source software|open-source]] scripting language [[Python (programming language)|Python]] for scripting and customization. Abaqus/CAE uses the [[fox-toolkit]] for [[GUI]] development.\n\n==History==\n\nAbaqus company was founded in 1978 by Dr. David Hibbitt, Dr. Bengt Karlsson, and Dr. Paul Sorensen with the original name Hibbitt, Karlsson & Sorensen, Inc., (HKS). Later on, the company name was changed to ABAQUS Inc. before the acquisition by Dassault Systèmes in 2005. After that, it became part of Dassault Systèmes Simulia Corp. The headquarters of the company was located in Providence, Rhode Island until 2014. Since 2014, the headquarters of the company are located in Johnston, Rhode Island, United States.\n\n== Release history== \n{| class=\"wikitable\"\n|-\n! Abaqus version\n! Release date\n|-\n| 1.0 \n| 1979?\n|-\n| 5.4 \n| 1994?\n|-\n| ... \n| ?\n|-\n| 6.1 \n| ?\n|-\n| 6.2 \n| 2001\n|-\n| 6.3 \n| 2002\n|-\n| 6.4 \n| 2003\n|-\n| 6.5 \n| 2004\n|-\n| 6.6 \n| 2006\n|-\n| 6.7 \n| 2007\n|-\n| 6.8 \n| 2008\n|-\n| 6.9 \n| 2009\n|-\n| 6.10 \n| 2010\n|-\n| 6.11\n| 2011\n|-\n| 6.12\n| 2012\n|-\n| 6.13\n| 2013\n|-\n| 6.14\n| 2014\n|-\n| 2016\n| 2015\n|-\n| 2017\n| 2016\n|-\n| 2018\n| 2018\n|-\n| 2019\n| 2019\n|}\n\nIn recent years, a new version of Abaqus is released near the end of every year.\n\n==Applications==\nAbaqus is used in the [[automotive industry|automotive]], [[aerospace]], and industrial products industries. The product is popular with non-academic and research institutions in engineering due to the wide material modeling capability, and the program's ability to be customized, for example, users can define their own material models so that new materials could also be simulated in Abaqus.  Abaqus also provides a good collection of [[multiphysics]] capabilities, such as coupled acoustic-structural, [[piezoelectric]], and structural-pore capabilities, making it attractive for production-level simulations where multiple fields need to be coupled.\n\nAbaqus was initially designed to address non-linear physical behavior; as a result, the package has an extensive range of material models such as [[elastomer]]ic (rubberlike) and hyperelastic ([[soft tissue]]) material capabilities.\n\nHere are some animated examples\n<gallery>\nFile:Flexionsimplegif.gif\nFile:Traction1gif.gif\nFile:Traction2gif.gif\nFile:Flexion3.gif\nFile:Flexion4.gif\n</gallery>\n<!-- {{multiple image\n | direction = vertical\n | align     = left\n | width     = 150\n | footer    = \n | image1    = Flexionsimplegif.gif\n | alt1      = \n | caption1  = \n | image2    = Traction1gif.gif\n | alt2      = \n | caption2  = \n | image3    = Traction2gif.gif\n | image4    = Flexion3.gif\n | image5    = Flexion4.gif\n}} -->\n\n== Solution Sequence ==\n[[File:Abaqus software FEA process.png|right|thumb|400px|''Abaqus FEA'' software products used in Finite Element Analysis and their order of use.]]\n\nEvery complete finite-element analysis consists of 3 separate stages:\n* ''Pre-processing'' or ''modeling'': This stage involves creating an input file which contains an engineer's design for a finite-element analyzer (also called \"solver\").\n* ''Processing'' or ''finite element analysis'': This stage produces an output visual file.\n* ''Post-processing'' or generating report, image, animation, etc. from the output file: This stage is a visual rendering stage.\n\nAbaqus/CAE is capable of pre-processing, post-processing, and monitoring the processing stage of the solver; however, the first stage can also be done by other compatible CAD software, or even a text editor. Abaqus/Standard, Abaqus/Explicit or Abaqus/CFD are capable of accomplishing the processing stage. Dassault Systemes also produces ''Abaqus for CATIA'' for adding advanced processing and post processing stages to a pre-processor like CATIA.\n\n{{Clear}}\n\n===Solvers Comparison===\nThe following is a comparison between the solver capabilities of Abaqus/Standard and Abaqus/Explicit.<ref>ABAQUS/CAE manual</ref>\n{| class=\"wikitable\"\n|-\n! Feature\n! Common\n! ABAQUS/\n\n! ABAQUS/Explicit only\n|-\n| Element library \n| Comprehensive\n| no limits\n| only elements appropriate for explicit solutions \n|-\n| Material models\n| Comprehensive\n| only yield models\n| yield and fracture models\n|-\n| Solution methods\n|\n| Implicit Integration<br/>needs solve multiple coupled equation<br/>Using the K Matrix (F=Ku)<br/>Stable\n| explicit integration<br/>step by step<br/>using small time steps<br/>sometimes not stable\n|-\n| Required Disk Space\n|\n| repetitive calculations likely<br/> takes a lot of space\n| no repetitive calculation<br/>normal\n|-\n| Types of Problems\n| Linear:<br>non-linear:<br/>Contact{{ref|star1|*}}:<br/>usual systems{{ref|star2|**}}<br/>\n| Can solve<br/>Can solve<br/>Can solve if simple<br/>Optimal under steady{{ref|star3_1|***}} loads<br/>\n| Can solve<br/>Optimal. even if highly non-linear <br/>Optimal. even for complex and varying conditions <br/>Optimal under transient{{ref|star3|***}} loads like Impact, Pulse and Explosion<br/>\n|}\n;Notes:\n{{Note|star1|*}} The more complex the contacts become, the more repetitive calculations ABAQUS/Standard has to solve, and the more time and disk space needed; ABAQUS Explicit is the optimal choice in this case\n\n{{Note|star2|**}} Like static elements (see the picture,) dynamic elements, thermal elements and electrical elements\n\n{{Note|star3_1}}{{Note|star3|***}} Steady, Static and Constant loads are the same. Transient loads include: quasi-static loads (slowly varying loads in which the effect of inertial is small enough to neglect) and dynamic loads (faster varying loads).\n\n==See also==\n{{Commons category|Abaqus FEA}}\n* [[ABAQUS, Inc]]\n* [[List of finite element software packages]]\n* [[Dassault Systèmes]]\n\n{{Clear}}\n\n==References==\n{{Reflist|colwidth=30em}}\n\n==External links==\n* {{Official website|www.simulia.com}}\n** [http://www.3ds.com Dassault Systèmes]\n\n{{Dassault Systèmes}}\n{{CAE software}}\n{{Use dmy dates|date=June 2013}}\n\n[[Category:Finite element software]]\n[[Category:Finite element software for Linux]]\n[[Category:1978 software]]"
    },
    {
      "title": "Advance Design",
      "url": "https://en.wikipedia.org/wiki/Advance_Design",
      "text": "'''Advance Design''' is a computer-aided engineering (CAE) software application developed by GRAITEC to structural analysis and design of reinforced concrete / steel / timber structures and automated creation of design reports.\n\n== Features ==\nAdvance Design offers an environment for the static and dynamic analysis of 2D and 3D reinforced concrete, steel and timber structures using the [[finite element method|finite elements method]]. Advance Design is part of the BIM structural GRAITEC Advance suite.\n\n== Release history ==\n{| class=\"wikitable\"\n|-\n! Official name\n! version\n! release\n! date of release\n|-\n|Advance Design 2019\n|2019\n|16\n|May 2018\n|-\n|Advance Design 2018\n|2018\n|15\n|May 2017\n|-\n|Advance Design 2017\n|2017\n|14\n|June 2016\n|-\n|Advance Design 2016\n|2016\n|13\n|June 2015\n|-\n|Advance Design 2015\n|2015\n|12\n|April 2014\n|-\n| Advance Design 2014\n| 2014\n| 11\n| September 2013\n|-\n| Advance Design 2013\n| 2013\n| 10\n| February 2013\n|-\n| Advance Design 2012\n| 2012\n| 9\n| December 2011\n|-\n| Advance Design 2011\n| 2011\n| 8\n| December 2010\n|-\n| Advance Design 2010\n| 2010\n| 7\n| September 2009\n|-\n| Advance Design 2009\n| 2009\n| 6\n| April 2009\n|-\n| Advance Design 3.1.\n| 3.1.\n| 5\n| January 2008\n|-\n| Advance Design 2.1.\n| 2.1\n| 4\n| January 2007\n|-\n| Effel Advance  1.2 (previous name for Advance Design) \n| 1.2\n| 3\n| April 2006\n|-\n| Effel Advance 1.1 (previous name for Advance Design)\n| 1.1\n| 2\n| June 2005\n|}\n\n== See also ==\n* [[Comparison of CAD editors for CAE]]\n\n== External links ==\n*[http://www.graitec.com/en/ad_main.asp Advance Design Official Page]\n\n<br />\n{{DEFAULTSORT:Advance Steel}}\n[[Category:Product lifecycle management]]\n[[Category:Computer-aided engineering software]]\n[[Category:Finite element software]]\n[[Category:Computer-aided design software]]\n[[Category:GRAITEC products]]"
    },
    {
      "title": "ANSA Pre-processor",
      "url": "https://en.wikipedia.org/wiki/ANSA_Pre-processor",
      "text": "{{Multiple issues|\n{{unreferenced|date=December 2010}}\n{{notability|Products|date=February 2013}}\n}}\n\n'''ANSA''' is a [[computer-aided engineering]] tool for [[Finite Element Analysis]] and [[Computational fluid dynamics|CFD Analysis]] widely used in the automotive industry. It is developed by BETA CAE Systems. \nThe software is distributed world wide by a number of BETA CAE Systems subsidiaries and business agents.\nIn the United States, it is distributed by Beta CAE Systems, USA, based in [[Farmington Hills, Michigan]].\n\nANSA maintains the association between CAD geometry and the FE mesh. This means that the FE meshes are better representations of their geometric parents. Also it is easy to maintain and update any changes in the geometry by simply reworking the updated area instead of recreating the FE from scratch.\n\nIt carries several proprietary algorithms for meshing suitable for both CFD and structural models.\nANSA was initially standing for 'Automatic net generation for structural analysis', but the software has gone beyond that very quickly.\nANSA has broadly six menus which are used to do various activities\nthose are:\nTOPO\nMESH\nVMESH\nDECK-SOLVER\nMORPH\nHBLOCK\n\n==External links==\n*[http://www.beta-cae.gr/ansa.htm ANSA page at BETA CAE Systems SA website]\n*[http://www.ansa-usa.com/ BETA CAE Systems USA Inc.]\n\n{{DEFAULTSORT:Ansa Pre-Processor}}\n[[Category:Finite element software]]\n[[Category:Computer-aided engineering software]]\n\n\n{{engineering-stub}}\n{{software-stub}}"
    },
    {
      "title": "Autodesk Simulation",
      "url": "https://en.wikipedia.org/wiki/Autodesk_Simulation",
      "text": "{{advert|date=August 2014}}\n{{Infobox software\n| name                   = Autodesk Simulation\n| title                  = \n| logo                   = \n| screenshot             = Autodesk_Simulation_Mechanical_2014.png\n| caption                = \n| collapsible            = \n| author                 = \n| developer              = \n| released               = <!-- {{Start date|YYYY|MM|DD|df=yes/no}} -->\n| discontinued           = \n| latest release version = Autodesk Simulation Mechanical/CFD 2014\n| latest release date    = <!-- {{Start date and age|YYYY|MM|DD|df=yes/no}} -->\n| latest preview version = \n| latest preview date    = <!-- {{Start date and age|YYYY|MM|DD|df=yes/no}} -->\n| programming language   = \n| operating system       = [[Linux]], [[Microsoft Windows]]\n| platform               = \n| size                   = \n| language               = \n| status                 = \n| genre                  = [[Finite element method|FEM software]]\n| license                = \n| website                = {{URL|www.autodesk.com}}\n}}\n\n'''Autodesk Simulation''' is a general-purpose multiphysics [[finite element analysis]] software package initially developed by ALGOR Incorporated and acquired by Autodesk in January 2009.\n<ref>Autodesk official press release - January 20th 2009, http://www.algor.com/contact_us/acquisition/press%20release%20-%20autodesk%20completes%20acquisition%20of%20algor,%20inc.pdf</ref>\nIt is intended for use with [[Microsoft Windows]] and [[Linux]] [[operating system]]s.\nIt is distributed in a number of different core packages to cater to specific applications, such as mechanical event simulation and [[computational fluid dynamics]].\n\nUnder the ALGOR name the software was used by many scientists and engineers worldwide.<ref>http://www.algor.com/service_support/customer/default.asp</ref> It has found application in aerospace,<ref>J. B. Binder, \"[http://adsabs.harvard.edu/abs/1995AeAm...33...16B Algor finite element modeling tools aid aerospace]\", ''Aerospace America'', vol. 33, no. 5, 1995.</ref> and it has received many favorable reviews.<ref>B. Turney, \"How two operating systems boost FEA productivity,\" 3/23/2006, http://machinedesign.com/article/how-two-operating-systems-boost-fea-productivity-0323{{Dead link|date=October 2018 |bot=InternetArchiveBot |fix-attempted=yes }}</ref><ref>J. Greco, \"[http://www.nxtbook.com/fx/books/advanstar/cadalystjan05/ Flexible FEA Program Supports Mixed Elements To Speed Up Analysis]\" ''CADALYST'', Jan. 2005.</ref><ref>R. Helms, \"ALGOR FEA Predicts Mechanism Failure and Confirms Design Modification,\" 4/1/2005, http://www.algor.com/news_pub/user_reviews/2005/Helms_V16_MD/.</ref>\n\n== Typical uses ==\nTypical uses include bending, mechanical contact, thermal (conduction, convection, radiation), fluid dynamics, and coupled or uncoupled multiphysics.\n\n== Materials and elements database ==\nAutodesk Simulation's library of material models includes [[metal]]s and [[alloy]]s, [[plastics]], [[glass]], [[foam]]s, [[fabric]]s, [[elastomer]]s, [[Concrete]] (with rebar), [[soil]]s and user-defined materials.\n\nAutodesk Simulation's element library depends on the geometry and the type of analysis performed. It includes 8 and 4 node solid, 8 and 4 node shell, as well as beam and rod elements.\n\n== References ==\n{{reflist}}\n\n== External links ==\n* [http://www.autodesk.com/products/simulation/overview Autodesk simulation products page]\n\n{{CAE software}}\n\n[[Category:Finite element software]]\n[[Category:Windows software stubs]]\n[[Category:Science software for Linux]]\n[[Category:Finite element software for Linux]]\n\n\n{{science-software-stub}}\n{{Windows-software-stub}}\n{{Linux-stub}}"
    },
    {
      "title": "COMSOL Multiphysics",
      "url": "https://en.wikipedia.org/wiki/COMSOL_Multiphysics",
      "text": "{{advert|date=March 2018}}\n{{third-party|date=May 2017}}\n{{Infobox Software\n| name = COMSOL Multiphysics\n| developer = COMSOL Inc.\n| latest_release_version = 5.4\n| latest_release_date = {{Start date and age|2018|10|03}}\n| operating_system = [[Cross-platform]]\n| genre = [[Computer-aided engineering]],\n         [[Finite element analysis]]\n| logo = Comsol logo.svg\n| screenshot = File:An_application_of_shell_and_tube_heat_exchanger_which_includes_the_model_and_an_instance_of_running_application.jpg_NOte.jpg\n| caption = \n| license = [[Proprietary software|Proprietary]] [[EULA]]\n| website = {{URL|www.comsol.com}}\n|}}\n{{Infobox company\n| name      =  COMSOL Inc.\n| logo      = \n| type      = [[Private company]]  \n| traded_as         = \n| foundation        = [[Stockholm]], [[Sweden]] (1986) \n| location          =  \n| key_people        = Svante Littmarck, CEO COMSOL Group\n                      Farhad Saeidi,  President COMSOL AB\n| industry          = [[Computer software]]\n| products          = COMSOL Multiphysics \n                      COMSOL Server\n| num_employees     = \n| revenue  =  \n| operating_income  =  \n| net_income  =  \n| assets  = \n| equity  =  \n| homepage    =  {{URL|www.comsol.com}}\n}}\n\n'''COMSOL Multiphysics''' is a cross-platform [[finite element]] analysis, solver and [[multiphysics]] [[simulation software]]. It allows conventional physics-based user interfaces and coupled systems of [[partial differential equation]]s (PDEs). COMSOL provides an [[Integrated development environment|IDE]] and unified workflow for electrical, mechanical, fluid, and chemical applications. \n\nAn API for [[Java (programming language)|Java]] and LiveLink for [[MATLAB]] may be used to control the software externally.\nAn App Builder can be used to develop independent custom domain-specific simulation applications. Users may use drag-and-drop tools (Form Editor) or programming (Method Editor). \nCOMSOL Server is a distinct software for the management of COMSOL simulation applications in companies.\n\nThe eponymous company COMSOL developing the software was founded in 1986 by Svante Littmarck and Farhad Saeidi in Stockholm, Sweden.<ref>{{cite web|title=The COMSOL Group|url=https://www.comsol.com/company|website=COMSOL.com|publisher=Comsol, Inc.|accessdate=22 June 2019}}</ref>\n\n==Multiphysics==\n\nSeveral modules are available for COMSOL,<ref>{{cite web|title=COMSOL Modeling Software|url=https://www.comsol.com/|website=COMSOL.com|publisher=Comsol, Inc.|accessdate=20 November 2015}}</ref> categorized according to the applications areas Electrical, Mechanical, Fluid, Chemical, Multipurpose, and Interfacing.\n\n==See also==\n*[[Finite element method]]\n*[[Multiphysics]]\n*[[List of computer simulation software]]\n\n==References==\n{{Reflist}}\n\n==External links==\n* {{Official website|www.comsol.com}}\n{{CAE software}}\n\n[[Category:Finite element software]]\n[[Category:Finite element software for Linux]]\n[[Category:Computer-aided engineering software]]\n[[Category:Electromagnetic simulation software]]"
    },
    {
      "title": "DIANA FEA",
      "url": "https://en.wikipedia.org/wiki/DIANA_FEA",
      "text": "{{Underlinked|date=May 2014}}\n\n{{Infobox software\n| name                   = DIANA\n| title                  = DIANA FEA\n| logo                   = Diana icon.png\n| screenshot             =\n| caption                =\n| collapsible            =\n| author                 = [[Netherlands Organisation for Applied Scientific Research|TNO]]\n| developer              = DIANA FEA BV\n| released               = {{Start date and age|1972}}\n| discontinued           =\n| latest release version = 10.1\n| latest release date    = \n| latest preview version =\n| latest preview date    =\n| programming language   =\n| operating system       = [[Microsoft Windows]]<br/> [[Linux]] \n| platform               = [[x86-64|Windows/x86-64]]<br/> [[x86-64|Linux x86-64]]\n| size                   =\n| language               =\n| status                 = Actively developed\n| genre                  = [[Computer-aided engineering]], [[Finite Element Analysis]]\n| license                = [[Proprietary software|Proprietary]] [[commercial software]]\n| website                = {{URL|dianafea.com}}\n}}\n\nDIANA (acronym '''DI'''splacement '''ANA'''lyser) is a [[Finite Element Analysis]] ('''FEA''') solver developed and distributed by DIANA FEA BV (previously TNO DIANA BV) and several other resellers worldwide. The software is utilised at both ends of the market, by small consultancies and global engineering consultants, research institutions and is utilised by many highly respected educational institutions worldwide in both civil and geotechnical engineering courses. DIANA is equipped with very powerful solvers which enables the analysis of a wide range of structures, large and small - with basic or advanced analyses. A large selection of material models, element libraries and analysis procedures are available within the package which gives DIANA a large degree of flexibility. The main fields of use of DIANA include design and analysis of dams & dikes; tunnels & underground structures; oil & gas<ref>{{cite book|title=DIANA Computational Mechanics '94|year=1994|publisher=Springer Netherlands|isbn=978-94-010-4454-7|pages=339–348|author=Endal. G|editor1=Kusters, G.M.A. |editor2=Hendriks, M.A.N. |chapter=Extreme Bending of Concrete Coated Offshore Pipes|doi=10.1007/978-94-011-1046-4_32}}</ref> & historical constructions and large reinforced concrete structures.<ref>{{cite web|title=Fibres in reinforced concrete structures - analysis, experiments and design|url=http://publications.lib.chalmers.se/records/fulltext/68889.pdf|publisher=Chalmers University of Technology|author=Jansson, A|year=2008}}</ref> Some of the specialised analyses available in DIANA for these fields of use include seismic analysis;<ref>{{cite web|title=A FEM model for the evaluation of the seismic behavior of internal joints in reinforced concrete frames|url=http://www.iitk.ac.in/nicee/wcee/article/14_05-01-0189.PDF|publisher=Indian Institute of Technology Kanpur|author=Manfredi, G|author2=Verderame, G.M. |author3=Lignola, G.P. |location=Beijing| date=October 2008 }}</ref> fire analysis and young hardening concrete.<ref>{{cite web|title=Computational modelling of concrete at early ages using DIANA|url=http://www.bst.bgu.tum.de/pdf/diana.pdf|publisher=Fachgebiet fur Baustatik|author=Eierle, B|author2=Schikora, K.}}</ref>\n\n== History ==\n=== 1970s to 1980s ===\nTNO ([[Netherlands Organisation for Applied Scientific Research]]) originally authored the code,<ref>{{cite web|title=Innovative History Matching|url=http://www.tno.nl/content.cfm?context=thema&content=prop_case&laag1=895&laag2=911&laag3=97&item_id=1648&Taal=2|accessdate=29 November 2013|author=Leemhuis, A.P.}}</ref> upon which the DIANA FEA BV flagship software “DIANA” is based, in 1972. The initial idea had been to develop an in-house code for consultancy work in the field of concrete mechanics and civil engineering. This code was based on the displacement method, and was called “DIANA” – an acronym for '''DI'''splacement '''ANA'''lyser. \nBy 1975, DIANA was being used for the analysis of a number of complex off-shore structures in the Netherlands. Experience gained from these projects led to the realisation that in order to model, mesh and analyse large reinforced concrete structures in a streamlined fashion (and within one package), a huge amount of processing power would be required. At that point TNO started to invest in not only developing the DIANA software but also in the purchase of, what was then, up to the minute computing equipment. In the following years, TNO continued to expand the limitations of the DIANA software, introducing MESH for automatic mesh generation and GRAPHI to display the model and analysis results. In 1977, DIANA was used to analyse parts of the [[Oosterscheldekering|Oosterschelde Deltawerken]] in Zeeland, the Netherlands. By this time, the amount of time required to carry out analyses had significantly decreased, and DIANA was becoming increasingly recognised for its capabilities.\n\n===1980s to 1990s===\nThe first release of DIANA, “DIANA-1”, was made available to the Ministry of Public Works in the Hague ([[Rijkswaterstaat]]) in 1980. The result of this and more sales, further funding and development took place and in 1984 the [http://www.dianausers.nl/eng/ DIANA Users Association] was established. This users forum was established to, and continues to, provide an exchange of users experience and indicate development priorities to TNO (now to DIANA FEA BV). Release 2.0 of DIANA was made available in 1988, this included new modules for potential flow analysis and connection to external pre/post processors. For the first time users manuals, course books and text books were made available in English – this quickly led to the first sales of DIANA outside of the Netherlands. In 1989, the DIANA Foundation was formed, members included TNO's major partners (a combination of universities, research institutes and industrial partners). The Foundation was granted access to the DIANA source code thus enabling them to further develop DIANA. It became the role of TNO to transfer these developments into the production version of DIANA.\n\n===1990s to 2003===\nBetween 1990 and 2003, with continuing development and input from the Users Association and the DIANA Foundation, DIANA became recognised worldwide for its analysis capabilities. DIANA Analysis BV was established to manage the sales, marketing, promotion and support of DIANA. In the late 1990s FEMGV (produced by FEMSYS Ltd (UK)) was introduced and promoted by TNO as a pre/post processor which could be coupled to DIANA providing an interactive graphical interface. In the early 2000s, FEMGV was embedded into the DIANA programme and became known as iDIANA and distributed as part of the DIANA package. FEMGV continued to be sold separately by TNO (and now TNO DIANA BV). \nIn October 2002 the Third DIANA World Conference<ref>{{cite book|title=Finite Element in Civil Engineering Applications|date=January 2002|isbn=978-9058095305|edition=1st|editor1=Hendriks, M.A.N. |editor2=Rots, J.A. }}</ref> took place in Tokyo. By this time, Japan had become the most important export market for DIANA. The emphasis of the conference was on application of advanced computational models in civil engineering applications.\n\n===2003 to present ===\nIn 2002 TNO prepared a new organization around DIANA: a company named TNO DIANA BV was founded and in the beginning of 2003 all technical activities were transferred from TNO Building and Construction research to the new company. Also the marketing and sales activities, until then being done by DIANA Analysis BV, were transferred to TNO DIANA BV. At the same time TNO DIANA BV became owner of Femsys Ltd. The purpose for creating this new organization was to combine commercial and technical activities and to have full focus to needs of DIANAusers worldwide.\n\nBetween 2006 and 2011, TNO DIANA BV established a relationship with the Korean software developer MIDAS. In conjunction with MIDAS, the FX+ for DIANA pre/post processor was developed for use specifically with DIANA and was sold as an additional option to purchasers. In return, TNO DIANA BV helped MIDAS embed elements of DIANA into their midasGTS product as its solver. During this period, TNO DIANA BV was also a reseller of MIDAS products: midasCIVIL; midasFEA; midasGEN; and midasGTS. At the end of 2011, following the completion of the FX for DIANA and midasGTS projects, the relationship between TNO DIANA BV and MIDAS was distanced allowing each company to concentrate on the sales and development of their own products.\n\nIn January 2012 came the next iteration of the DIANA software, DIANA 9.4.4. Two new application modules were made available which signified a leap forward in the analysis of reinforced concrete.\n\nThe module “Reinforcement Design Checks” gave civil engineers the opportunity to optimise the design of structures by assessing the additional capacity within the existing reinforcement. Running alongside this, the new module “Stiffness Adaptation Analysis” made it possible to predict crack patterns, the size of crack openings, plasticity onset, force distribution and deformations in serviceability limit state.\n\nFor geotechnical engineers the ability to carry out a Strength Reduction Analysis (C-Phi) was made available in a new module. This allowed the strength characteristics of the structural material to be reduced by factors leading to the loss of stability, typically used in slope stability analysis. In 2014 there were two releases of DIANA (9.5 & 9.6), these releases introduced the new Mesh Edit graphical user interface. With the ultimate goal of providing TNO DIANA's own integrated graphical user interface. Mesh Edit offers a streamlined and user friendly interface which will ultimately enable users to use all the functionality of DIANA within one program.\n\nThe initial iteration of MeshEdit gave the users the ability to import their model from FX+ or iDIANA and then define supports, loading, materials and analysis requirements; carry out the analysis; and deal with post processing. In 9.6 these features were extended to include a Python scripting console, the introduction of mesh sets and further post processing functionality.\n\nDIANA 10.1, is released in late 2016, with improved integration of modelling, meshing and analysis in one unique, and integrated, environment. This platform has been empowered by use of a parasolid geometry modeller and the latest generation of hexa dominant mesh engine. New post-processing features enable the user to interpret and visualise the results in a very flexible post-processing environment. On 1 July 2016, TNO DIANA BV changed its name to DIANA FEA BV \"to reflect the name of the product and place more emphasis on DIANA rather than its ties to TNO\".\n\n== DIANA functionality ==\n===Material models available within DIANA===\n* Linear, nonlinear and modified elasticity<ref>{{cite web|title=Numerical validation of compressive strength prediction for hollow concrete blocks|url=http://repositorium.sdum.uminho.pt/bitstream/1822/17279/1/Barbosa%20C.pdf|publisher=Technische Universitat Dresden|accessdate=29 November 2013|author=Barbosa, C S|author2=Hanai, J.b. |author3=Lourenco, P.B. |location=http://repositorium.sdum.uminho.pt/bitstream/1822/17279/1/Barbosa%20C.pdf|year=2010}}</ref>\n* Hyperelasticity<ref>{{cite journal|last=Guo|first=Z|author2=Sluys, L.J|title=Application of a new constitutive model for the description of rubber-like materials under monotonic loading|journal=International Journal of Solids and Structures| date=May 2006 |volume=43|issue=9|pages=2799–2819|url=http://www.sciencedirect.com/science/article/pii/S0020768305003434|accessdate=29 November 2013|doi=10.1016/j.ijsolstr.2005.06.026}}</ref>\n* Isotropic and orthotropic plasticity<ref>{{cite web|title=Othrotropic yield criteria in the material model for timber structures|url=http://www.cmm.il.pw.edu.pl/cd/pdf/108.pdf|publisher=University of Warmia and Mazury in Olsztyn|accessdate=29 November 2013|author=Malyszko, L}}</ref>\n* Viscoplasticity<ref>{{cite web|title=Evaluation of WST Method as a Fatigue Test for Plain and Fiber-reinforced Concrete|url=http://documents.vsect.chalmers.se/CPL/exjobb2006/ex2006-017.pdf|publisher=Chalmers University of Technology|accessdate=29 November 2013|author=Hanjari, K Z|year=2006}}</ref>\n* Smeared crack models<ref>{{cite web|title=Smeared crack models for reinforced concrete beams by finite element method|url=http://www.revistas.ibracon.org.br/index.php/riem/article/viewFile/86/63|publisher=Ibracon|accessdate=29 November 2013|author=Menin, R.C.G.|author2=Trautwein, L.M. |author3=Bittencourt, T.N. | date=June 2009 }}</ref>\n* Total strain fixed and rotating crack models<ref>{{cite journal|last=Jahangir Alam|first=A.K.M.|author2=Amanat, K.M.|title=Finite element simulation on punching shear behavior of reinforced concrete slabs|journal=ISRN Civil Engineering|year=2012|volume=2012 |issue=2012 |page=501516 |url=http://www.hindawi.com/isrn/civil.engineering/2012/501816/}}</ref>\n* Young hardening concrete models<ref>{{cite web|title=Early age behaviour of massive concrete piers|url=http://www.ceosfr.org/International-workshop/Additional-papers/Mancini-Early%20age%20cracking%20of%20massive%20concrete%20piers.pdf|author=Bertagnoli, G|author2=Mancini, G |author3=Tondolo, F }}</ref>\n* Fiber reinforced material models\n* Creep and shrinkage<ref>{{cite journal|last=Sofi|first=M.|author2=Mendis, P.A. |author3=Lie, S. |author4= Baweja, D. |title=Early age concrete and creep effects: relevance to anchorage zones of post-tensioned members|journal=Electronic Journal of Structural Engineering|year=2008|volume=8|url=http://www.ejse.org/Archives/Fulltext/2008/Normal/200823.pdf}}</ref>\n* Maekawa concrete model<ref>{{cite web|title=Fatigue in plain concrete|url=http://publications.lib.chalmers.se/records/fulltext/19627.pdf|publisher=Chalmers University of Technology|author=Ameen, P|author2=Szymanski, M|year=2006}}</ref>\n* Soil specials\n* Liquefaction models<ref>{{cite web|title=Modeling of caisson quay wall in three dimensional analysis of liquefaction-induced flow|url=http://www.iitk.ac.in/nicee/wcee/article/14_S26-016.PDF|publisher=Indian Institute of Technology Kanpur|author=Yoshida, N|author2=Ohya, Y|location=Beijing, China| date=October 2008 }}</ref>\n* Concrete and steel materials according to international design codes\n* Model Code models for concrete and steel\n* User-supplied models\n* Special models for interface elements\n* Ambient and time dependent mechanical, heat transfer and groundwater flow properties\n* Classic brick model for soil\n* Modified two-surface model for cyclic behaviour of steel\n* Menegotto-Pinto, Monti Nut, and Dodd Restreppo plasticity models for reinforcements\n\n===Analysis functionality available within DIANA===\n* Linear static\n* Fatigue failure\n* Linear transient\n* Frequency response\n* Spectral response\n* Physical and geometrical non linear\n* Transient non linear\n* Eigenvalue<ref>{{cite journal|last=van der Veen|first=H |author2=Vuik, K |author3=de Borst, R|title=The relation between numerical and material stress states|journal=Computer & Mathematics Applications|date=November 1999|volume=38|issue=9–10|pages=245–249|url=http://www.sciencedirect.com/science/article/pii/S0898122199002795|doi=10.1016/s0898-1221(99)00279-5}}</ref>\n* Buckling and post buckling<ref>{{cite journal|last=Rahman|first=T|author2=Jansen, E.L. |author3=Gurdal, Z |title=Dynamic buckling analysis of composite cylindrical shells using a finite element based perturbation method|journal=Nonlinear Dynamics|date=November 2011|volume=66|issue=3|pages=389–401|doi=10.1007/s11071-011-0056-9|url=http://resolver.tudelft.nl/uuid:ff449361-ed4c-4f6e-ae4d-b4211fe44657}}</ref>\n* Steady state and transient heat flow\n* Detailed and regional groundwater flow<ref>{{cite web|title=Simulation of glacially-driven hydromechanical processes for safety assessment of geological disposal sites |url=http://www.bmu.de/fileadmin/Daten_GD/Dokumente__PDFs_/Berichte/orlic_2001.pdf |publisher=Bundeministerium fur Umwelt, Naturschutz und Reakorsicherheit |author=Orlic, B |author2=Wildenborg, A.F.B. |year=2001 }}{{dead link|date=December 2016 |bot=InternetArchiveBot |fix-attempted=yes }}</ref>\n* Steady state and transient groundwater flow\n* Coupled flow-stress\n* Phased structural and potential flow\n* Hybrid frequency-time domain analysis\n* Fluid-structure interaction<ref>{{cite web|title=Eigenfrequency shifting due to fluid structure interaction|url=http://alexandria.tue.nl/repository/books/639742.pdf|accessdate=29 November 2013|author=de Bot, L|year=1994}}</ref>\n* Strength reduction analysis\n* Stiffness adaptation analysis\n* Parameter estimation\n* Lattice\n\n===Element types available within DIANA===\n* Truss\n* Solid<ref>{{cite web|title=Shear and torsion in concrete structures|url=http://publications.lib.chalmers.se/records/fulltext/70629.pdf|publisher=Chalmers University of Technology|accessdate=29 November 2013|author=Broo, H|year=2008}}</ref>\n* Contact\n* Flow\n* Timoshenko, Bernoulli, and Mindlin beam\n* Plane stress and plane strain<ref>{{cite web|title=A FEM model for the evaluation of the seismic behavior of internal joints in reinforced concrete frames|publisher=Indian Institute of Technology Kanpur|author=Manfredi, G|author2=Verderame, G.M. |author3=Lignola, G.P. |location=Beijing, China|year=2008}}</ref>\n* Complete plane strain\n* Axisymmetric\n* Plate bending<ref>{{cite web|title=A study on accuracy of FEM analysis for plates under distributed load|url=http://dlisv03.media.osaka-cu.ac.jp/infolib/user_contents/kiyo/DB00010947.pdf|publisher=Osaka City University|author=Yamawaki, M|author2=Shimada, I |author3=Kobayashi, H |location=Japan|year=2002}}</ref>\n* Flat, curved shell and layered shell\n* Composed\n* Interface<ref>{{cite journal|last=Irina |first=S |author2=Bjornar, S |title=Finite element simulations of reinforced concrete beams attacked by corrosion |year=2009 |pages=15–32 |url=http://www.norut.no/narvik_en/Norut-Narvik/Publications/Articles/Finite-element-simulations-of-reinforced-concrete-beams-attacked-by-corrosion |archive-url=https://archive.is/20140409062229/http://www.norut.no/narvik_en/Norut-Narvik/Publications/Articles/Finite-element-simulations-of-reinforced-concrete-beams-attacked-by-corrosion |dead-url=yes |archive-date=9 April 2014 |accessdate=29 November 2013 |publisher=Nordic concrete research |issn=0800-6377 }}</ref>\n* Discrete spring/dashpot<ref>{{cite web|title=Non-stationary seismic soil-structure-soil interaction|url=http://www.iitk.ac.in/nicee/wcee/article/WCEE2012_5821.pdf|author=Chatterjee, P|author2=Elkadi, A|year=2012}}</ref>\n* Base spring\n* Bounding (spring/dashpot)<ref>{{cite web|title=Dynamic analysis of rail track for high speed trains. 2D approach|url=http://docentes.fct.unl.pt/zdim/files/5wacmge_artigo.pdf|author=Gomes Correia, A.|author2=Cunha, J. |author3=Marcelino, J |author4=Caldeira, L. |author5=Varandas, J. |author6=Dimitrovova, A. |author7=Antao, A. |author8= Goncalves da Silva, M. }}</ref>\n* Point mass/damping\n* Embedded reinforcements\n* Embedded pile elements<ref>{{cite web |title=Estimation of pile group behavior using embedded piles |url=http://www.civil.iitb.ac.in/~dns/IACMAG08/pdfs/M20.pdf |accessdate=29 November 2013 |author=Engin, H.K. |author2=Septankika, E.G. |author3=Brinkgreve, R.B.J. |location=Goa, India |date=October 2008 |deadurl=yes |archiveurl=https://web.archive.org/web/20110409133145/http://www.civil.iitb.ac.in/~dns/IACMAG08/pdfs/M20.pdf |archivedate=9 April 2011 |df= }}</ref>\n* Boundary surface elements\n\n== DIANA FEA BV (previously TNO DIANA BV) ==\nDIANA FEA BV, the developer of the DIANA software was originally established in 2003 as a spin-off company of the Computational Mechanics department of TNO Building and Construction Research Institute ([[Netherlands Organisation for Applied Scientific Research|Nederlandse Organisatie voor Toegepast Natuurwetenschappelijk Onderzoek]]) in Delft, the Netherlands (an independent research organisation who work for a variety of customers including governments, the SME sector, large companies, service providers and non-governmental organisations).<ref>{{cite web|title=DIANA FEA Homepage|url=http://dianafea.com/|accessdate=29 November 2013}}</ref> The head office of DIANA FEA BV remains in Delft, the Netherlands where the software was originally and continues to be developed.\nDIANA FEA BV is predominantly a software developer, but also carries out consultancy projects utilising its “DIANA” software and some software customisation/development work for clients with specific requirements. \n* DIANA – Advanced finite element analysis (including the pre/post processor iDIANA) \n* Midas FX+ for DIANA – pre/post processor for DIANA\n* FEMGV – pre/post processor for use with DIANA and other solvers \n* FEMPAL – pallet racking stability analysis software\n* GEO5 – reseller for Benelux\n\n== Releases ==\n{| class=\"wikitable\"\n|-\n| 1972|| Initial code created by [http://www.tno.nl/content.cfm?context=overtno&content=overtnosub&laag1=32&item_id=95 TNO] (Nederlandse Organisatie voor Toegepast Natuurwetenschappelijk Onderzoek) (“TNO”)\n|-\n| 1977|| MESH and GRAPHI modules made available to allow users to display models and analysis results\n|-\n| 1980|| DIANA-1 release\n|-\n| 1988|| DIANA-2 release: \n* Potential flow analysis module\n* Users’ manual (in English) \n* Users’ course book (in English) \n* Users’ text book (in English) \n|-\n| 1990|| DIANA-3.2 release:\n* Fracture mechanics module\n* Dynamic response module\n* Stability analysis module\n* Extended element library including flat shell and interface elements; and elements for groundwater flow analysis\n|-\n| 1991|| DIANA-4.1 release: \n* Iterative solver\n* [http://www.bst.bgu.tum.de/pdf/diana.pdf Phased analysis module]\n* Indirect displacement control in nonlinear analysis\n* Extended element library including orthotropic membrane elements\n|-\n| 1993|| DIANA-5.1 release: \n* Sub-structuring technique in the solution procedure\n* Stability analysis module (with imperfections) \n* Nonlinear analysis control improved with arc-length and automatic load control\n* Parameter estimation module\n* Pipeline analysis module\n* Extended element library including higher order elements in various families of elements and layered elements\n|-\n| 1996|| DIANA-6.1 release: \n* Determination and plotting of influence lines\n* Contour plots\n* External pre/post processor FEMGV made available\n|-\n| 1998|| DIANA-7.1 release: \n* New material models: concrete cracking and crushing\n* Simulation of corrosion of reinforced steel\n* Mobile load analysis module\n* Extended options for geotechnical analysis\n* MS-Windows platform support\n|-\n| 1999|| DIANA-7.2\n* Interactive graphics for pre/post processing with FEMGV\n* New constitutive models for liquefaction of saturated soil (due to earthquakes)\n|-\n| 2002|| DIANA-8.1\n* Integrated pre/post processor (iDIANA)\n* Delft soft soil model\n* [[Hoek–Brown failure criterion|Hoek-Brown]] model \n* Rankine Hill anisotropic model\n* Young hardening concrete model\n* Spectral response analysis module \n* Fracture mechanics analysis\n* Beam cross-section analysis\n|-\n| 2004|| DIANA 9\n* Automatic nonlinear solutions procedures\n* Complete plane strain elements\n|-\n| 2006|| DIANA-9.2\n* Integrated with Midas FX+ pre/post processor \n|-\n| 2008|| [http://tnodiana.com/upload/files/DIANA/NewinDIANA93.pdf DIANA-9.3]\n* Optimized iterative solver\n* Direct sparse solver with parallel processing \n* 3D line interface element \n* Ambient dependent material properties in interface elements \n* Modified Maekawa concrete model \n|-\n| 2009|| [http://tnodiana.com/upload/files/DIANA/944/DIANA944_NewFeatures.pdf DIANA-9.4]\n* Enhanced parallel processing functionality\n* [http://publications.lib.chalmers.se/records/fulltext/68889.pdf Bond slip options for embedded reinforcements]\n|-\n| 2010|| DIANA-9.4.2\n* Curved shell elements (with drilling rotations) \n* Linear fluid-structure interface elements\n* D-min soil material model\n|-\n| 2010|| DIANA-9.4.3\n* Precompiled library files for user-supplied subroutines\n* Sequential linear analysis\n* Reinforcement grid design checking\n|-\n| 2012|| DIANA-9.4.4\n* Reinforcement design checks\n* Stiffness adaptation analysis\n* Strength reduction analysis (C-Phi) module\n|-\n| 2014|| DIANA-9.5\n* Introduction of new MeshEdit graphical user interface\n* [[Yield surface|Tresca]] and [[von Mises yield criterion|Von Mises plasticity]], total strain-stiffness diagrams\n* Bond slip relation as proposed by Shima et al. \n* Dodd-Restrepo Plasticity - for cyclic behaviour of steel reinforcements\n* User supplied subroutines for unixial springs\n* Total strain crack models - shear-retention, damage based shear retention, aggregate size based shear retention\n* Total strain crack model - Maekawa compression curve\n* Eurocode fire load curves as set out by Eurocodes 2 and 4\n* Modal pushover analysis\n* Automatic tying\n|-\n| 2014|| DIANA-9.6\n* [[Python (programming language)|Python scripting]] console, introduction of mesh-sets, renewed phased construction and spectral response analysis, linear constraints, slice and clipping planes, extended post-processing and diagram output in MeshEdit\n* Extended element library - element mesh and reinforcement mesh topology and property assignment, flat shell elements and analytically integrated flat shell elements\n* New model for tensile failure of fiber reinforced concrete as defined by CEB-FIB\n* Extension in tensile behaviour of Modified Maekawa Concrete Model\n* Ambient time influence on flat shell elements \n* Composite failure criteria: maximum criterion, Tsai-Hill criterion, [[Tsai-Wu failure criterion|Tsai-Wu criterion]]\n* Time and element age dependent hydraulic conductivity\n* Engineering liquefaction\n* Enhancements in Shima Bond-slip model\n* Enhancements in nonlinear behaviour of reinforcement behaviour based on JSCE Concrete Code 2012\n* Smart reinforcement evaluation & smart composed element evaluation\n* Initial state evaluation control option\n* Automatic transition of external loads in phased analysis\n* Physical nonlinear analysis options\n* Eigenvalue analysis based on FEAST method by using the Intel MKL Extended Eigensolver\n* Advancement in Response Spectrum Analysis for large systems \n* Superposition of the individual excitation spectra based on [http://eurocodes.jrc.ec.europa.eu/showpage.php?id=138 Eurocode 8 EN 1998-1]\n* Stiffness Adaptation Analysis based on CEB-FIP model codes 1990 and 2010\n* Modal Mass output for each eigenfrequency\n* Reinforcement Grid Design Checking extension\n|-\n| 2016|| DIANA-10\n* Introduction to interactive and integrated graphical user interface\n* Geometry modelling features based on Parasolid\n* Latest technology for embedded mesh engines, including hybrid mesher\n* New element types\n* Enhanced workflows for modelling of embedded reinforcement bars/grids, interface elements and boundary elements\n* Python scripting capabilities\n* New material models\n* Maekawa-Fukuura model\n* Shear-stiffness curves for simple soil models\n* JCSS Probabilistic Model Code for concrete\n* Predefined materials with reference to international design codes\n* Special functions attached to geometry and/or material\n* Parallel processing of element loops\n* Extensive post-processing features\n|-\n| 2016|| DIANA-10.1\n* Geometry data exchange (import IFC (Industry Foundation Classes), Autodesk Revit plug-in, 3D surfaces from cloud of nodes)\n* Multi-language interface\n* Enhanced modelling tools\n* New concepts for connecting bodies \n* New elements and meshing features \n* New masonry material model\n* Extension of hysteretic material models \n* Dynamic material properties graphs\n* Python scripting capabilities\n* Enhanced analysis procedures for Young Hardening Concrete\n* Perfectly matched layer method for energy absorption\n* New earthquake analysis features\n* Smart report generation, new visualisation with slicing/cutting planes, smart tabular output\n|-\n| 2017|| DIANA-10.2\n* Python version upgraded to 3.61\n* Multiple improvements to pre-processor \n* Additions to pre-processor - visualisation of 3D sections; embedded cooling pipes; new load and connection types; dynamic added mass \n* New and updated analysis functionality - automatic deactivation of interface and boundary elements; solver functions; explicit solver; sequential linear analysis\n* New post-processing features - graphs for tabular output; labels for eigen and NL results; user-defined contours; output of time dependent properties in Young Hardening Concrete\n|}\n\n== Supported platforms ==\n=== Current version: DIANA 10.2 ===\n{| class=\"wikitable\"\n|-\n! Platform !! Operating System !! Compilers Used\n|-\n| x86-64|| \n* Microsoft® Windows 7 SP1 (64 bit)\n* Microsoft® Windows 8.1 Update 1(64 bit)\n* Microsoft® Windows 10 (64 bit)\n* Microsoft® Windows Server 2008 R2 SP1\n* Microsoft® Windows Server 2012 \n* Microsoft® Windows Server 2012 R2\n* Microsoft® Windows Server 2016\n|| \n* Intel® Fortran Composer XE 2017 updated 4 (17.0.4.210 Build 20170411)\n* Microsoft® Visual Studio Pro 2014 14.025431.01 Update 3\n|-\n| x86-64|| \n* Red Hat Enterprise Linux 7.3\n* Cent OS 7.3\n|| \n* Intel® Parallel Studio XE 2017 update 4(17.0.4 20170411)\n\n|}\n\n== References ==\n{{Reflist|30em}}\n\n==External links==\n* {{Official website|tnodiana.com}}\n\n{{CAE software}}\n\n[[Category:Finite element software]]\n[[Category:Finite element software for Linux]]"
    },
    {
      "title": "Diffpack",
      "url": "https://en.wikipedia.org/wiki/Diffpack",
      "text": "{{refimprove|date=September 2017}}\n{{Infobox software\n| name                   = Diffpack\n| title                  = \n| logo                   = <!-- [[File: ]] -->\n| screenshot             = <!-- [[File: ]] -->\n| caption                = \n| collapsible            = \n| author                 = \n| developer              = \n| released               = 1991<!-- {{Start date|YYYY|MM|DD|df=yes/no}} -->\n| discontinued           = \n| latest release version = \n| latest release date    = <!-- {{Start date and age|YYYY|MM|DD|df=yes/no}} -->\n| latest preview version = \n| latest preview date    = <!-- {{Start date and age|YYYY|MM|DD|df=yes/no}} -->\n| programming language   = C++, Python, Perl\n| operating system       = [[Linux]], [[Unix]], [[Mac OS X]], [[Microsoft Windows|Windows]]\n| platform               = \n| size                   = \n| license                = proprietary (until 1997 [[public domain software]])\n| language               = \n| status                 = \n| genre                  = Scientific simulation software\n| website                = {{URL|http://www.diffpack.de}}\n}}\n'''Diffpack''' is a programming environment for developing simulation software for scientific and engineering applications. Diffpack has its main focus on the numerical modeling and solution of [[partial differential equation]]s, in particular by the [[finite element method]] and the [[finite difference method]] ([[finite volume method]] is also supported to some extent).\n\n== Features ==\nThe Diffpack software consists of a family of [[C++]] libraries for general tasks related to numerical solution of partial differential equations, plus a set of [[Perl]] and [[Python (programming language)|Python]] scripts that ease the development of simulation programs and problem solving environments for scientific or engineering research. The package was one of the very first to explore [[object-oriented programming]] and the C++ language for advanced, high-performance computing.\n\n== History ==\nDiffpack has been actively developed since 1991, with main contributions from [[University of Oslo]] and the research institutes [[SINTEF]] and [[Simula Research Laboratory]]. The initiators and main contributors to Diffpack in the 1990s were [[Hans Petter Langtangen]] and [[Are Magnus Bruaset]]. Version 1.0 of the software was released in the [[public domain]] in 1995, with a new version in 1997. \n\nThe Norwegian company Numerical Objects AS took over the rights of Diffpack 1997 and commercialized the product. In 2003, the German company inuTech GmbH purchased Diffpack and is now the principal maintainer and developer of the software. \n\n== Adoption ==\nPast and present Diffpack customers include AREVA NP, Air Force Research Laboratory, Robert Bosch GmbH, Cambridge University, Canon, CEA, CalCom, DaimlerChrysler, Furukawa, Harvard University, Intel, Mitsubishi, NASA, Nestle, Nippon Steel, Shell, Siemens, Stanford University, Statoil, Veritas, VAI GmbH, and Xerox. Diffpack applications have been built in diverse areas, such as oil and gas, mechanical engineering, telecommunication, medicine and finance. The customer activities span from simple prototype applications to projects involving several man-years of simulator development.\n\n== See also ==\n* [[List of finite element software packages]]\n* [[List of numerical analysis software]]\n\n== References ==\n* [http://www.diffpack.de/ Diffpack website]\n* [https://www.amazon.com/dp/354043416X Computational Partial Differential Equations - Numerical Methods and Diffpack Programming] (book)\n* [http://www.inutech.de/ inuTech GmbH]\n\n[[Category:Scientific simulation software]]\n[[Category:Finite element software]]\n[[Category:Finite element software for Linux]]"
    },
    {
      "title": "FEBio",
      "url": "https://en.wikipedia.org/wiki/FEBio",
      "text": "{{Infobox Software\n| name                   = FEBio\n| developer              = Musculoskeletal Research Laboratories (University of Utah) and Musculoskeletal Biomechanics Laboratory (Columbia University)\n| screenshot             = \n| caption                = \n| latest_release_version = 2.8\n| latest_release_date    = June, 2018\n| operating_system       = [[Linux]], [[Mac OS X]], [[Windows]] \n| genre                  = [[List of numerical analysis software|Technical computing]]\n| license                = Custom\n| website                = https://febio.org/\n}}\n'''FEBio'''<ref>{{cite journal|last=Maas|first=SA|author2=Ellis BJ |author3=Ateshian GA |author4=Weiss JA |title=FEBio: Finite elements for biomechanics|journal=Journal of Biomechanical Engineering|year=2012|volume=134|issue=1|url=http://mrl.sci.utah.edu/publications/original-research-articles?view=publication&task=show&id=552}}</ref><ref>{{Cite journal|last=Maas|first=Steve A.|last2=Ateshian|first2=Gerard A.|last3=Weiss|first3=Jeffrey A.|date=2017-06-20|title=FEBio: History and Advances|url=https://www.annualreviews.org/doi/10.1146/annurev-bioeng-071516-044738|journal=Annual Review of Biomedical Engineering|volume=19|issue=1|pages=279–299|doi=10.1146/annurev-bioeng-071516-044738|issn=1523-9829}}</ref>'''(Finite Elements for Biomechanics)''' is a [[Application software|software package]] for [[finite element analysis]]<ref>{{cite book | first1=Javier | last1=Bonet | first2=Richard | last2=Wood | title=Nonlinear Continuum Mechanics for Finite Element Analysis | publisher=Cambridge University Press | year=2008 | isbn=978-0-521-83870-2}}</ref> and was specifically designed for applications in [[biomechanics]] and bioengineering. It was developed in collaboration with research groups from the University of Utah (MRL, SCI) and Columbia University (MBL). \n\nFEBio offers modeling scenarios, constitutive models, and [[Boundary value problem|boundary conditions]] that are relevant to numerous research areas and specializes in the analysis of 3D multiphysics models that can undergo large deformations. Users can solve problems in [[solid mechanics]], contact analysis, [[Porous medium|porous media]] problems, fluid mechanics, and as of version 2.8, fluid-solid interaction (FSI) problems as well. FEBio supports both quasi-static and dynamic analyses. A more detailed overview of FEBio's features follows below.\n\nThe source code for FEBio is publicly available but it is not considered [[Open-source software]] because it is only free for non-commercial use.\n\nFEBio supports a plugin framework that allows users to easily extend and customize the set of features for their specific needs. Using this plugin framework users can develop new constitutive models, boundary conditions, body loads, nonlinear constraints, and even new finite element solvers (see e.g. the FEBioChem plugin, which implements a reaction-diffusion solver for solving chemical reactions in mixtures [https://febio.org/]). \n\n== Overview ==\nA brief overview of the available features (as of version 2.8) follows. A more complete list can be found in the FEBio User's [http://help.mrl.sci.utah.edu/help/index.jsp manual].\n\n*'''Solid Mechanics'''\n**Non-linear (quasi-) static, non-linear dynamic, energy conserving time integration schemes\n**[[Hyperelastic material|Hyperelastic]] materials (isotropic, transversely-isotropic, anisotropic), visco-hyperelastic materials, damage models, fiber materials. \n**Rigid body mechanics and rigid-deformable coupling.\n**Prescribed displacements, surface loads (e.g. pressure, traction), and body loads.\n**Multiple tied and sliding contact formulations with or without friction.\n**Solid 3D linear and quadratic elements (tetrahedral, hexahedral, pentahedral).\n**Linear and quadratic shell elements that can be free, or placed on top or between solid elements. \n*'''Multiphasic mechanics'''\n**Biphasic, biphasic-solute, triphasic (two solutes), and multiphasic materials with multiple solutes.\n**Steady-state or transient analysis conditions.\n**Special contact formulations that take solvent and/or solute flow across contact interface into account. \n**Solid-bound molecules that deform with the solid phase. \n**Chemical reactions between solutes/solid-bound molecules.\n**Specialized shell formulations for biphasic/multiphasic analyses.\n*'''Fluid mechanics'''\n**Steady-state and transient fluid dynamic analysis.\n**Viscous fluid flow (Newtonian, Carreau, Carreau-Yasuda, Powell-Eyring, Cross).\n**Flow stabilization algorithms.\n**Fluid-solid interaction (FSI)\n*'''Heat Transfer'''\n**Steady-state and transient linear heat transfer analysis. \n**Isotropic Fourier material.\n**Prescribed and initial temperature boundary condition, heat flux and convective heat flux, heat source. \n\n== PreView and PostView ==\nFEBio is a command-line application that only implements the solver and analysis algorithms. To assist with setting up FEBio models and analyzing the results, the PreView and PostView programs were developed. \n\n=== PreView ===\nPreView is a finite-element preprocessor that was specifically designed for setting up FEBio models using a graphical interface. It provides functionality for importing or generating 3D meshes, applying material parameters, setting up boundary, loading, and contact conditions, and defining analysis settings. Models are then exported to the xml-formatted FEBio input file.\n\n=== PostView ===\nPostView is a finite-element postprocessor that was designed for visualizing and analyzing the results from FEBio. FEBio stores results in the XPLT format, which can be imported in to PostView. PostView offers many visualizing tools such as contour plots, vector plots, plane cuts, isosurface and slice plots, streamlines and particle flows for flow visualization, and more. Users can take screenshots or record animations. Data can also be filtered and exported in various formats for further processing. \n\n== Support ==\nSupport for FEBio comes in various forms. A Theory manual and User manual are provided as part of the installation and are available online as well. [https://febio.org/] Users can also ask questions on the FEBio User forums [http://mrlforums.sci.utah.edu/forums/index.php], as well as report bugs and make new feature requests. \n\n== References ==\n\n{{reflist}}\n\n== External links ==\n*[http://febio.org/] FEBio software page\n*[http://mrlforums.sci.utah.edu/forums/index.php] FEBio forum\n*[https://simtk.org/search/?type_of_search=soft&words=febio] FEBio featured on SimTK\n*[http://biomedicalcomputationreview.org/4/2/4.pdf] FEBio featured on Biomedical Computation Review\n*[https://www.mathworks.com/matlabcentral/fileexchange/48208-gibboncode-gibbon]GIBBON: The Geometry and Image-Based Bioengineering add-On for MATLAB\n\n[[Category:Finite element software]]\n[[Category:Finite element software for Linux]]"
    },
    {
      "title": "FEFLOW",
      "url": "https://en.wikipedia.org/wiki/FEFLOW",
      "text": "{{Infobox software\n| author                 = Hans-Jörg G. Diersch\n| developer              = [[DHI Group]]\n| operating system       = [[Linux]], [[Microsoft Windows]]\n| genre                  = FEM software\n| license                = proprietary\n| website                = {{URL|www.feflow.com}}\n}}\n\n'''FEFLOW''' (Finite Element subsurface FLOW system) is a computer program for [[Computer simulation|simulating]] [[groundwater]] [[Fluid dynamics|flow]], [[mass transfer]] and [[heat transfer]] in [[porous media]] and fractured media. The program uses [[finite element analysis]] to solve the [[groundwater flow equation]] of both saturated and unsaturated conditions as well as mass and heat transport, including [[fluid]] [[density]] effects and [[chemical kinetics]] for [[multi-component reaction]] systems.\n\n== History ==\nThe software was firstly introduced by Hans-Jörg G. Diersch in 1979, see [http://www.feflow.com/story.html] and.<ref name=\"Diersch\"/> He developed the software in the Institute of Mechanics of the [[German Academy of Sciences Berlin]] up to 1990. In 1990 he was one of the founders of WASY GmbH of [[Berlin]], [[Germany]] (the acronym WASY translates from German to ''Institute for Water Resources Planning and Systems Research''), where FEFLOW has been developed further, continuously improved and extended as a commercial simulation package. In 2007 the shares of WASY GmbH were purchased by [[DHI (company)|DHI]]. The WASY company has been fused and FEFLOW became part of the DHI Group software portfolio. FEFLOW is being further developed at DHI by an international team. Software distribution and services are worldwide.\n\n== Technology ==\nThe program is offered in both [[32-bit]] and [[64-bit]] versions for [[Microsoft Windows]] and [[Linux]] operating systems.\n\nFEFLOW's theoretical basis is fully described in the comprehensive ''FEFLOW book''.<ref name=\"Diersch\">Diersch, Hans-Jörg G., ''FEFLOW – Finite element modeling of flow, mass and heat transport in porous and fractured media'', Springer, 2014, Berlin Heidelberg, XXXV, 996p., {{ISBN|978-3-642-38738-8}}, {{ISBN|978-3-642-38739-5}} (eBook), doi:10.1007/978-3-642-38739-5.</ref> It covers a wide range of physical and computational issues in the field of porous/fractured-media modeling. The book starts with a more general theory for all relevant flow and transport phenomena on the basis of the [[continuum mechanics]], systematically develops the basic framework for important classes of problems (e.g., multiphase/multispecies non-isothermal flow and transport phenomena, variably saturated [[porous media]], free-surface [[groundwater flow]], aquifer-averaged equations, discrete feature elements), introduces [[finite element methods]] for solving the basic multidimensional balance equations, in detail discusses advanced numerical algorithms for the resulting nonlinear and linear problems, and completes with a number of [[benchmark (computing)|benchmark]]s, applications and exercises to illustrate the different types of flow, mass and heat transport problems (e.g., subsurface flow and [[seepage]] problems, unsaturated-saturated flow, advective-diffusion transport, [[saltwater intrusion]], [[geothermal]] and [[thermohaline]] flow).\n\n== Other groundwater simulators ==\n* [[MODFLOW]]\n* [[MARTHE]]\n* [[HydroGeoSphere]]\n* [[HYDRUS]]\n* [[PORFLOW]]\n* [[MicroFEM LT]]\n* [[OpenGeoSys]]\n* [[Leapfrog Hydro]]\n* [[ECLIPSE simulator]] with the H2O extension\n\n==Peer review==\n*{{cite journal |last=Trefry |first=M.G. |author2=Muffels, C. |title=FEFLOW: a finite-element ground water flow and transport modeling tool |journal=Ground Water |volume=45 |issue=5 |year=2007 |doi=10.1111/j.1745-6584.2007.00358.x |pages=525–528}}\n\n==References==\n{{reflist}}\n\n==External links==\n*{{official website|www.feflow.com}}\n\n[[Category:Finite element software]]\n[[Category:Finite element software for Linux]]\n[[Category:Hydrogeology software]]\n[[Category:Scientific simulation software]]\n[[Category:Software that uses Motif]]\n[[Category:Engineering software that uses Qt]]\n[[Category:Geology software for Linux]]"
    },
    {
      "title": "FEM Element",
      "url": "https://en.wikipedia.org/wiki/FEM_Element",
      "text": "'''FEM Element''' is a commercial [[finite element method]] solver for electromagnetic structures from [[EEsof]].<ref>[http://www.keysight.com/find/eesof-empro EMPro home page]</ref>  FEM Element can perform electromagnetic simulation of arbitrarily-shaped, passive three-dimensional structures.\n\nIt is aimed at providing 3D EM simulation to designers working on RF circuits, MMICs, PC boards, modules, and [[signal integrity]] applications. It provides a full 3D electromagnetic field solver, a solid modeling [[GUI]], and fully automated meshing and convergence capabilities for modeling arbitrary 3D shapes such as connectors, machined parts, components, bond wires, antennas, and packages.\n\nFEM Element is available with integration into Keysight EEsof's [[Advanced Design System]] (ADS)<ref>[http://www.mwee.com/mwee_news/200900057 \"EDA platform speeds RF module design, verification\", by Ismini Scouras, eeProductCenter]</ref> and EMPro platforms.<ref>{{cite web|url=https://www.keysight.com/main/redirector.jspx?action=ref&cname=EDITORIAL&ckey=1706416&lc=eng&cc=US&nfr=-11143.0.00|title=Agilent Technologies' EMPro 2009 Improves Integration with Advanced Design System|last=|first=|date=|website=|archive-url=|archive-date=|dead-url=|access-date=}}</ref>\n\nIt was originally called Electromagnetic Design System (EMDS).\n\n==See also==\n\n* [[Computational electromagnetics]]\n\n==Notes==\n{{Reflist}}\n\n[[Category:Finite element software]]\n[[Category:Electronic design automation software]]"
    },
    {
      "title": "Femap",
      "url": "https://en.wikipedia.org/wiki/Femap",
      "text": "{{refimprove|date=July 2012}}\n{{Infobox Software\n|name = Femap\n|screenshot =\n|caption = Composite Wing Leading Edge Structure Modeled in Femap\n|developer = [[Siemens PLM Software]]\n|operating_system = [[Microsoft Windows|Windows XP, Windows Vista, Windows 7]] \n|genre = [[Computer aided engineering|Computer Aided Engineering (CAE)]] software\n|license = \n|website = {{URL|www.plm.automation.siemens.com/en_us/products/velocity/femap/index.shtml}}\n}}\n\n'''Femap''' ('''''F'''inite '''E'''lement '''M'''odeling '''A'''nd '''P'''ostprocessing'') is an [[engineering]] analysis program sold by [[Siemens PLM Software]] that is used to build [[finite element]] models of complex engineering problems (\"pre-processing\") and view solution results (\"post-processing\").  It runs on [[Microsoft]] [[Microsoft Windows|Windows]] and provides [[Computer-aided design|CAD]] import, modeling and meshing tools to create a finite element model, as well as postprocessing functionality that allows mechanical engineers to interpret analysis results.  The finite element method allows engineers to virtually model components, assemblies, or systems to determine behavior under a given set of boundary conditions, and is typically used in the design process to reduce costly prototyping and testing, evaluate differing designs and materials, and for structural optimization to reduce weight.\n\nProduct simulation applications include basic strength analysis, frequency and transient dynamic simulation, system-level performance evaluation and advanced response, fluid flow and multi-physics engineering analysis for simulation of functional performance.\n\nFemap is used by engineering organizations and consultants to model complex products, systems and processes including satellites, aircraft, defense electronics, heavy construction equipment, lift cranes, marine vessels and process equipment.\n\n== History ==\n\n1985 - ESP founded by George Rudy and Femap originally developed as a pre- and postprocessor to [[Nastran]].<br />\n1999 - ESP acquired by [[SDRC]]<br />\n2001 - SDRC acquired by [[Electronic Data Systems|EDS]]<br />\n2004 - Product Lifecycle Management (PLM) software suite spun off to form [[UGS Corp.|UGS]]<br />\n2007 - UGS acquired by the Automation & Drives Division of [[Siemens]] and [[Siemens PLM Software]] formed\n \nFemap product development continues as a CAD neutral and solver independent application. Also it is available bundled with a number of Siemens PLM solvers, including [[NX Nastran]], Advanced Non-Linear Solver, Thermal/Advanced Thermal Solver, and Flow Solver.<ref>\n{{cite web\n | title = Femap\n | url = http://structures.aero/products/femap-with-nx-nastran1/\n | website = Structures.Aero\n | publisher = SDA\n | accessdate = 30 June 2015\n}}\n</ref>\nAs a standalone utility Femap is typically used with independent solvers such as [[ADINA]], [[NEi Nastran]], [[LS-DYNA]], [[ANSYS]] or [[Abaqus]].\n\n== Application ==\n\nFemap is used in a number of industries, including aerospace <ref>[http://www.deskeng.com/articles/aaajps.htm \"Femap Used by Evektor in Aircraft Design and Development,\"] Desktop Engineering, June 2008.</ref> and marine.\n\n==Add-ons==\n'''[[SDC Verifier]]''' enhances Femap with a new functionality. Together they provide an accepted and sound solution for the verification of constructions according to Structural Design Standards. SDC Verifier uses Femap as the pre-processor for the generation of a model and its graphical interface to visualize the results.\n\n==References==\n{{Reflist}}\n\n\n\n{{CAE software}}\n\n[[Category:Finite element software]]\n[[Category:Product lifecycle management]]\n[[Category:Siemens software products]]\n[[Category:Windows-only software]]"
    },
    {
      "title": "FEMtools",
      "url": "https://en.wikipedia.org/wiki/FEMtools",
      "text": "{{Primary sources|date=September 2010}}\n'''FEMtools''' (Finite Element Model Tools) is a multi-functional, cross-platform and solver-independent family of CAE software programs providing analysis and scripting solutions for many different types of applications. The program is developed, supported and licensed by Dynamic Design Solutions (\"DDS\") NV .\n\n==Overview==\n\nFEMtools consists of many tools that are licensed as part of standard configurations or as optional add-ons. The program is available on [[Microsoft]] [[Microsoft Windows|Windows]] and Linux operating systems.   \nThe program can be used standalone or is used with solvers such as [[Nastran]], [[ANSYS]] and [[Abaqus]].\n\nApplications are built upon a proprietary framework that includes a GUI desktop, data interfacing and database management. A graphics viewer supports visualization of meshes and analysis results. A powerful scripting language and API is included to customize or extend the program. A wealth of tools and modules are available for equation solving, matrix operators, data manipulation, diagnostics, and results validation. Entire custom applications can be developed on top of the FEMtools framework.\n\nThe following technologies are available through the different program configurations:.\n\n•  Simulation and test data interfacing.<br />\n•  Database management, solver integration and CAE process automation.<br />\n•  Mesh generation, mesh morphing and mesh quality verification.<br />\n•  Classical and operational modal analysis.<br />\n•  Operational deflection shapes (ODS) analysis.<br />\n•  Rigid body properties extractor.<br />\n•  Structural dynamics simulation using finite element and test models.<br />\n•  Pre-test analysis and planning.<br />\n•  Test-analysis correlation analysis.<br />\n•  Sensitivity analysis.<br />\n•  Automated FE model updating.<br />\n•  Force identification.<br />\n•  Design optimization (topology, shape, size, material).<br />\n•  Design space sampling (Monte Carlo sampling, Design of Experiments, response surface modelling, genetic algorithms).<br />\n•  Uncertainty propagation and probabilistic structural analysis.\n\n==Application==\nFEMtools is designed to handle all sizes of finite element and test models for a wide range of industrial applications.\nIndustrial applications can be found in the fields for structural dynamics troubleshooting, NVH, finite element model verification, validation and updating (V&V), mesh coarsening or refinement, structural health monitoring (SHM), material and property identification, structural optimization, robust design and more.<ref>{{cite web |url=http://www.femtools.com/products/papers.htm |title=References to technical papers on the official site}}</ref>\n\nFEMtools is used by prestigious companies like Airbus, Boeing, Caterpillar, EADS, Ford, Goodrich, Honda, Honeywell, Johnson Controls, MAN, Northrop Grumman, Renault, Rolls Royce, Siemens, Sony, Toyota, Volvo, and Whirlpool.\n\nFEMtools has been used as the backbone for Hong Kong Stonecutter's Bridge structural health evaluation system.<ref>{{cite web |url=http://www.tenlinks.com/news/PR/dds/051408_hk_highways.htm |title=Hong Kong to Monitor Stonecutters Bridge With FEMtools}}</ref>\n\nAcademic applications include structural analysis education, algorithm development, and application research.<ref>{{cite web |url=http://alexandria.tue.nl/repository/books/633553.pdf |title=Model updating of a ‘clamped’-free beam system using FEMtools}}</ref><ref>{{cite web|url=http://vibration.sheffield.ac.uk/pdfs/ISMA_23_1.pdf |title=Updating of the Analytical Models of Two Footbridges Based on Modal Testing of Full-Scale Structures |deadurl=yes |archiveurl=https://web.archive.org/web/20110901055426/http://vibration.sheffield.ac.uk/pdfs/ISMA_23_1.pdf |archivedate=2011-09-01 |df= }}</ref>\n\n==History==\n1988 - Development started as a custom tool for FE model updating of Nastran and Ansys models that is called SYSTUNE.<br />\n1994 - Dynamic Design Solutions founded and acquiring the SYSTUNE source code.<br />\n1995 - SYSTUNE renamed as FEMtools.<br />\n2000 - Release of FEMtools 2.0 integrating a new scripting language.<br />\n2003 - Release of third generation (v3.0) of FEMtools.<br />\n2008 - Addition of a module for structural optimization.<br />\n2010 - Addition of a module for rigid body properties identification from FRFs.<br />\n2011 - Addition of a module for experimental modal analysis (classic input-output) and output-only operational modal analysis.<br />\n2017 - Release of FEMtools 4.\n\n==References==\n\n{{reflist}}\n\n==External links==\n* [http://www.femtools.com/ Official site]\n* [http://www.femtools.jp/ Japanese site]\n\n{{DEFAULTSORT:Femtools}}\n[[Category:Computer-aided engineering software]]\n[[Category:Finite element software]]\n[[Category:Finite element software for Linux]]"
    },
    {
      "title": "FEniCS Project",
      "url": "https://en.wikipedia.org/wiki/FEniCS_Project",
      "text": "{{ infobox software\n| name                   = FEniCS Project\n| status                 = Active\n| logo                   = fenics logo.png\n| operating_system       = [[Linux]], [[OS X]], [[Unix]], [[Windows Subsystem for Linux|WSL]]\n| license                = [[GNU Lesser General Public License]]\n| language               = C++, Python\n| genre                  = Scientific simulation software\n| website                = {{URL|www.fenicsproject.org}}\n}}\n\nThe '''FEniCS Project''' is a collection of [[free and open-source software]] components with the common goal to enable automated solution of [[differential equation]]s. The components provide [[scientific computing]] tools for working with computational meshes,\n[[finite element method|finite-element]] [[weak formulation|variational formulations]] of [[ordinary differential equations|ordinary]] and [[partial differential equations]], and [[numerical linear algebra]].<ref>{{cite web|title=The FEniCS Project page|url=http://www.fenicsproject.org|work=The FEniCS Project|accessdate=28 July 2016}}</ref><ref>{{cite book|title=Automated Solution of Differential Equations by the Finite Element Method|year=2011|publisher=Springer|isbn=978-3-642-23098-1|editor1=Anders Logg |editor2=Kent-Andre Mardal |editor3=Garth N. Wells }}</ref>\n\n== Design and components ==\n\nThe FEniCS Project is designed as an umbrella project for a collection of interoperable components. The core components are<ref>{{cite web|title=Core components of the FEniCS Project|url=http://fenicsproject.org/about/components.html#core-components|archive-url=https://web.archive.org/web/20111104045327/http://fenicsproject.org/about/components.html#core-components|dead-url=yes|archive-date=4 November 2011|work=The FEniCS Project|accessdate=8 December 2011|df=}}</ref> \n[[File:Fenics-map.png|thumb|left|alt=caption|A schematic overview of the FEniCS components and their interplay]]\n* UFL (Unified Form Language), a [[domain-specific language]] embedded in [[Python (programming language)|Python]] for specifying finite element discretizations of differential equations in terms of finite element variational forms;\n* FIAT (Finite element Automatic Tabulator), a Python module for generation of arbitrary order finite element basis functions on [[simplex|simplices]];\n* FFC (FEniCS Form Compiler), a [[compiler]] for finite element variational forms taking UFL code as input and generating UFC output;\n* UFC (Unified Form-assembly Code), a [[C++]] interface consisting of low-level functions for evaluating and assembling finite element variational forms;\n* Instant, a Python module for inlining [[C (programming language)|C]] and C++ code in Python;\n* DOLFIN, a C++/Python library providing data structures and algorithms for finite element meshes, automated finite element assembly, and numerical linear algebra.\n\nDOLFIN functions as the main problem solving environment and user interface. Its functionality integrates the other FEniCS components and handles communication with external libraries such as [[PETSc]], [[Trilinos]] and [[Eigen (C++ library)|Eigen]] for numerical linear algebra, [[ParMETIS]] and [[SCOTCH]] for mesh partitioning, and [[Message Passing Interface|MPI]] and [[OpenMP]] for distributed computing.\n\n== History ==\n\nThe FEniCS Project was initiated in 2003 as a research collaboration between the [[University of Chicago]] and [[Chalmers University of Technology]]. The following institutions are currently, or have been, actively involved in the development of the project\n\n* [[Argonne National Laboratory]]\n* [[Chalmers University of Technology]]\n* [[Charles University]]<ref name=\"fenics-gov-doc\">[https://bitbucket.org/fenics-project/governance/src/49fe0fefd2c7b8b1402b8c6a3c17f830835f8483/people.md?fileviewer=file-view-default ''FEniCS Governance documents.'' Retrieved 28 July 2016.]</ref>\n* [[Delft University of Technology]]\n* [[Royal Institute of Technology]]\n* [[Simula Research Laboratory]]\n* [[University of Cambridge]]\n* [[University of Chicago]]\n* [[University of Luxembourg]]<ref name=\"fenics-gov-doc\" />\n\n== See also ==\n* [[List of finite element software packages]]\n* [[List of numerical analysis software]]\n* Using the [[FEATool Multiphysics]] GUI to set up and solve FEniCS multiphysics models<ref>{{cite web|url=https://www.featool.com/tutorial/2017/06/16/Python-FEM-and-Multiphysics-Simulations-with-Fenics-and-FEATool.html|title=Python FEM and Multiphysics Simulations with FEniCS and FEATool |website=featool.com |date= |accessdate=2017-06-28}}</ref><ref>{{Cite book|title=Computational Reality {{!}} SpringerLink|volume = 55|last=Abali|first=Bilen Emek|language=en-gb|doi=10.1007/978-981-10-2444-3|series = Advanced Structured Materials|year = 2017|isbn = 978-981-10-2443-6}}</ref>\n\n== References ==\n{{Reflist}}\n\n==External links==\n* [http://bitbucket.org/fenics-project The FEniCS project] on [[Bitbucket]]\n\n{{CAE software}}\n{{Projects at Chalmers University of Technology}}\n\n[[Category:Scientific simulation software]]\n[[Category:Finite element software]]\n[[Category:Finite element software for Linux]]\n[[Category:Free software programmed in Python]]\n[[Category:Free software programmed in C++]]"
    },
    {
      "title": "Finite element model data post-processing",
      "url": "https://en.wikipedia.org/wiki/Finite_element_model_data_post-processing",
      "text": "\n[[Finite Element Method|Finite element models]] (FEM) are nowadays used to calculate complex structures and mechanical systems. Since the grown calculation capacity of computers makes it possible to make more and more detailed [[Finite Element Method|finite element models]], the file output of these programs can be enormous.  It can be so large that you need to ''post process'' this data. Postprocessing may be defined as the “art of results representation”.\n\nPost processing of finite element data generally requests additional software to organize the output such that it is easily understandable whether the construction is acceptable or not.<ref>J.Y.Lee and S-Y.Ahn,[https://pdfs.semanticscholar.org/7046/d3e729da7a638908c7c9d212c71a3890aa8a.pdf Interactive visualization of elasto-plastic behavior through stress paths and yield surfaces in finite element analysis], Finite Element in Analysis and Design, 47(2011), pp496-510</ref> It can include checks on the codes and standards to which the construction must comply e.g. the [https://femds.com/Panel_check_software.aspx check of panel stiffened structures].  Writing this software is part of the [[knowledge-based engineering]] principle.\n\n==References==\n{{reflist}}\n\n[[Category:Finite element software]]"
    },
    {
      "title": "Goma (software)",
      "url": "https://en.wikipedia.org/wiki/Goma_%28software%29",
      "text": "'''Goma''' is an [[Open-source software|open-source]], [[Parallel computing|parallel]], and scalable [[multiphysics]] software package for modeling and simulation of real-life physical processes, with a basis in [[computational fluid dynamics]] for problems with evolving geometry. It solves problems in all branches of [[mechanics]], including [[fluid mechanics|fluids]], [[solid mechanics|solids]], and [[heat transfer|thermal analysis]]. Goma uses advanced [[numerical method]]s, focusing on the low-speed flow regime with coupled phenomena for manufacturing and performance applications. It also provides a flexible software development environment for specialty physics.\n\nGoma was created by [[Sandia National Laboratories]] and is currently supported by both Sandia and the [[University of New Mexico]].\n\n==Capabilities==\n\nGoma is a finite element program which solves problems from all branches of mechanics, including fluid mechanics, solid mechanics, chemical reactions and mass transport, and energy \ntransport.  The conservation principles for momentum, mass, species, and \nenergy, together with material constitutive relations, can be described by partial \ndifferential equations. The equations are made discrete for solution on a digital \ncomputer with the finite element method in space and the finite difference \nmethod in time. The resulting nonlinear, time-dependent, algebraic equations \nare solved with a full Newton-Raphson method. The linearized equations are \nsolved with direct or Krylov-based iterative solvers. The simulations can be \nrun on a single processor or on multiple processors in parallel using domain \ndecomposition, which can greatly speed up engineering analysis.\n\nExample applications include, but are not limited to, coating and polymer processing flows, super-alloy processing, welding/soldering, electrochemical processes, and solid-network or solution film drying.  A full description of Goma's capabilities can be found in [https://goma.github.io/files/goma-capabilities.pdf Goma's capabilities document].\n\nGoma is frequently used in conjunction with other software packages.  [https://cubit.sandia.gov/ Cubit] is typically used to generate computational meshes, while [[ParaView]] is often used to visualize the simulation results.  Simulation output is generated in the ExodusII file format.\n\n==History==\n\nGoma originated in 1994 from an early version of MP_SALSA,<ref>{{cite journal | doi = 10.2172/237399 | title=MP Salsa: a finite element computer program for reacting flow problems. Part 1--theoretical development | date=1996 | first=J.N. | last=Shadid}}</ref> a finite element program designed to simulate chemically reacting flows in massively-parallel computing environments. As a point-of-departure, Goma was originally extended and adapted to free and moving boundary problems in fluid mechanics, heat transfer, and [[mass transfer]].  Five versions of Goma (1.0 through 5.0) were developed and released by Sandia from 1994 through 2012.  These original versions of Goma were not approved for public release, and were released only internally within the [[US Government]] and its contracted industrial and academic partners.\n\nIn 2013, Sandia released Goma 6.0 as open-source software under the [[GNU General Public License]].  It is hosted by [[GitHub]] and contains instructions on downloading additional software packages that are required to build Goma.\n\n==Awards==\n\nGoma 6.0 was awarded a 2014 R&D 100 Award by [http://www.rdmag.com/ R&D Magazine].<ref>http://www.rdmag.com/award-winners/2014/07/2014-r-d-100-award-winners</ref>  This award identifies the open-source release of Goma 6.0 as one of the top 100 technological innovations of 2013.\n\n==Publications==\n\nA user manual for Goma 6.0 has been published openly.<ref>{{cite journal | doi = 10.2172/1089869 | title=GOMA 6.0 : a full-Newton finite element program for free and moving boundary problems with coupled fluid/solid momentum, energy, mass, and chemical species transport : user's guide. | date=2013 | first=Peter Randall | last=Schunk}}</ref>  Goma simulations have underpinned at least 14 Sandia technical reports and over 25 journal articles.<ref>{{cite journal | doi = 10.1016/j.compfluid.2012.08.009 | title=Multiphase hydrodynamic lubrication flow using a three-dimensional shell finite element model | journal=Computers | date=2013 | volume=87 | pages=12–25 | first=Scott A. | last=Roberts}}, {{cite journal | doi = 10.1016/j.jnnfm.2011.06.006 | title=Numerical simulations of mounding and submerging flows of shear-thinning jets impinging in a container | journal=Journal of Non-Newtonian Fluid Mechanics | date=2011 | volume=166 | issue=19-20 | pages=1100–1115 | first=Scott A. | last=Roberts}}, among others.</ref>\n\n==External links==\n* [https://goma.github.io/ Goma hosted on GitHub]\n* [https://www.youtube.com/watch?v=1M4YjDJyUWI R&D 100 award nomination video]\n\n==References==\n{{Reflist}}\n\n[[Category:Finite element software]]\n[[Category:Finite element software for Linux]]\n[[Category:Scientific simulation software]]\n[[Category:Sandia National Laboratories]]"
    },
    {
      "title": "HFSS",
      "url": "https://en.wikipedia.org/wiki/HFSS",
      "text": "'''HFSS''' is a commercial [[finite element method]] solver for electromagnetic structures from [[Ansys]].  The acronym stands for '''high-frequency structure simulator'''. HFSS is one of several commercial tools used for [[Antenna (radio)|antenna]] design, and the design of complex [[radio frequency]] [[electronic circuit]] elements including filters, transmission lines, and packaging. It was originally developed by Professor Zoltan Cendes and his students at [[Carnegie Mellon University]]. Prof. Cendes and his brother Nicholas Cendes founded Ansoft and sold HFSS stand-alone under a 1989 marketing relationship with [[Hewlett-Packard]], and bundled into Ansoft products.<ref>[http://www.ansoft.com/news/articles/zol_rfglobalnet.pdf Q&A With Zoltan Cendes, Founder, Chairman, And CTO Of Ansoft Corporation, by Jim Pomager, Editor in Chief, RF Global Net] {{webarchive|url=https://web.archive.org/web/20071027163856/http://www.ansoft.com/news/articles/zol_rfglobalnet.pdf |date=2007-10-27 }}</ref> In 1997 [[Hewlett-Packard]] acquired Optimization Systems Associates Inc. (OSA), a company [[John Bandler]] founded in 1983. HP's acquisition was driven by the HP's need for an optimization capability for HFSS.<ref>[http://www.thefreelibrary.com/HP+Acquires+Optimization+Systems+Associates,+Expands+CAE+Software...-a020013729/ HP Acquires Optimization Systems Associates, Expands CAE Software Portfolio]</ref> After various business relationships over the period 1996–2006, HP (which became [[EEsof|Agilent EEsof EDA division]]) and Ansoft went their separate ways:<ref>[http://www.answers.com/topic/ansoft-corporation?cat=biz-fin ...In July 2001 Ansoft announced that it would purchase Agilent's HFSS product line...]</ref> Agilent with the critically acclaimed<ref>[http://www.chipdesignmag.com/display.php?articleId=1885 Max's Chips and Dips: Cool News from Agilent EEsof]</ref> [[FEM Element]] and Ansoft with their HFSS products, respectively. Ansoft was later acquired by Ansys.\n\n==References==\n{{Reflist}}\n\n==External links==\n*[http://www.ansys.com/Products/Electronics/ANSYS-HFSS Official site]\n*[http://www.emtalk.com/ HFSS Tutorials]\n\n[[Category:Finite element software]]\n[[Category:Electronic design automation software]]\n[[Category:Electromagnetic simulation software]]\n\n\n{{engineering-stub}}"
    },
    {
      "title": "HyperSizer",
      "url": "https://en.wikipedia.org/wiki/HyperSizer",
      "text": "{{COI|date=November 2018}}\n{{Infobox software\n| name = HyperSizer\n| logo = [[File:Hypersizer.png]]\n| developer = Collier Research Corporation\n| latest release version = 7.3\n| operating system = [[Windows 7]], [[Windows 8]], [[Windows 10]]\n| genre = Design & Analysis software\n| license = Commercial\n| website = {{URL |www.hypersizer.com}}\n}}\n\n'''HyperSizer''' is [[computer-aided engineering]] (CAE) software used for [[stress analysis]] and [[sizing optimization]] of metallic and composite structures. Originally developed at the US [[NASA|National Aeronautics and Space Administration]] (NASA) as ST-SIZE, it was licensed for commercial use by Collier Research Corporation in 1996. Additional proprietary code was added and the software was marketed under the name HyperSizer.<ref name= \"spin\">{{cite web | year = 1997 | title= Structural Analysis and Design Software | publisher = NASA | work = Spinoff |url= http://www.sti.nasa.gov/tto/spinoff1997/ct1.html |accessdate= August 14, 2011}}</ref>\n\n==History==\nHyperSizer developed from the NASA [[Langley Research Center]] (LaRC) ST-SIZE research code. ST-SIZE was originally developed because NASA identified a need for accurate methods of formulating panel stiffness and thermal expansion coefficients, leading to the development of ST-SIZE from 1988 to 1995. Another need was the reduction of mass on high-speed aircraft and weight reduction for optimization. ST-SIZE was developed by a team of engineers working on the [[National Aerospace Plane]] X-30.<ref name =\"craig\">{{cite web | title= Collier Comes Back to His Future at Langley | author= Sheri Beam | work= Researcher News | publisher = NASA Langley Research Center | date= November 3, 2008 | url = http://www.nasa.gov/centers/langley/news/researchernews/rn_collier.html |accessdate= August 14, 2011 }}</ref> Two major versions of ST-SIZE were created. The original version included formulations for stiffness terms and thermal expansion coefficients based on approximations often taken in traditional design methods. In 1990, a version of ST-SIZE was formed for structural design and weight prediction. A new method for formulation of stiffened panel properties was developed starting in 1991. A method for including composite lamina and laminate data in the formulation of stiffened panel structural properties was first developed. Thermal coefficients were created to handle both in-plane and through-the-thickness temperature gradients for membrane, bending, and membrane-bending coupling.  A method was then developed to enter these thermal expansion and bending coefficients into the [[MSC Software]] version of [[Nastran]] for [[finite element analysis]] (FEA) using a model with a single plane of finite elements.<ref name= \"msc\">{{cite web | title = Collier Research Corporation | work = Partners | publisher = MSC Software | url = http://www.mscsoftware.com/About-Us/Partners/detail.aspx?companyid=201 | accessdate= August 22, 2011}}</ref><ref>{{cite journal |author1= Craig Collier | author2= Phil Yarrington | author3= Mark Pickenheim | publisher = MSC | work = Americas Users’ Conference Proceedings |date= September 1998 |title= Design Optimization Using HyperSizer | format = [[PDF]] | url = http://www.mscsoftware.com/support/library/conf/amuc98/p00698.pdf |accessdate= August 22, 2011 }}</ref> Other solvers are supported such as [[I-DEAS]].\n\nIn May 1996, Collier Research Corporation was formed in [[Hampton, Virginia]] from the original ST-SIZE design team, which included Craig S. Collier. Collier Research obtained an exclusive, all-fields-of-use license, and became the first company to license NASA software for commercial use.<ref name = \"spin\" />  They combined the NASA LaRC ST-SIZE copyright research code with other company proprietary software; the combined software became HyperSizer.\n\n==Uses==\n[[Image:Virgin-globalflyer-040408-06cr.jpg |thumb |alt=jet airplane with one long wing |Hypersizer was used to design the [[Virgin Atlantic GlobalFlyer|GlobalFlyer]]  ]]\n\nCommercial customers use HyperSizer software to design and analyze [[composite material]] and metallic structures. For example, the [[wind turbine design]] industry uses the program to design 100-meter long blades that are light and manufacturable.<ref name=\"windpower\">{{cite web |title= Materials and design methods look for the 100-m blade |work= Windpower Engineering | date = May 10, 2011 | url = http://www.windpowerengineering.com/design/mechanical/materials-and-design-methods-look-for-the-100-m-blade/ |accessdate= August 22, 2011 }}</ref><ref>{{cite news |title= From Aircraft Wings to Wind Turbine Blades: NASA Software Comes Back to Earth with Green Energy Applications |author= Craig S. Collier | publisher = NASA | work = Tech Briefs | date = October 1, 2010 | url= http://www.techbriefs.com/component/content/article/8602 | accessdate = August 22, 2011}}</ref><ref name=\"luke\">{{cite news |title= Software To Optimize Composite Designs |date= June 8, 2011 | author= Luke Abaffy | work= Engineering News-Record | url= http://enr.construction.com/technology/information_technology/2011/0608-softwaretooptimizecompositedesigns.asp |accessdate= August 23, 2011}}</ref>\n\nBeginning with the NASA astronaut Composite Crew Module (CCM) of the [[Orion Multi-Purpose Crew Vehicle| Orion spacecraft]],<ref>{{cite news | title= Composite Crew Module passes critical NASA tests | work = High-Performance Composites | date = December 14, 2009 | url = http://www.compositesworld.com/news/composite-crew-module-passes-critical-nasa-tests | publisher = Composites world | accessdate= August 22, 2011}}</ref> the [[Bombardier CSeries|CSeries]] and [[Learjet 85]] of [[Bombardier Aerospace]], HyperSizer has seen use on projects that are primarily or entirely composite structures.<ref name= \"karen\">{{cite web |title= Learjet 85 composite pressurized cabin a cost cutter |author= Karen Wood |work= Composites World | publisher = High-Performance Composites |date=November 1, 2010 |url= http://www.compositesworld.com/articles/learjet-85-composite-pressurized-cabin-a-cost-cutter |accessdate= August 22, 2011}}</ref>  The record-setting [[Virgin Atlantic GlobalFlyer |Scaled Composites GlobalFlyer]] was designed with the help of Hypersizer,<ref name=\"craig\"/> as well as the [[Lunar Atmosphere and Dust Environment Explorer]].<ref name=\"luke\"/>\n\nEarlier codes were originally intended for weight prediction but evolved into ones that were able to assess structural integrity and find optimum sizes and materials.  HyperSizer Version 6.1, released in May 2011, contains an integrated suite of failure analysis predictions verified by test data. New capabilities optimize manufacturing.<ref name = \"beth\">{{cite web | title = HyperSizer v6 Keys in on Manufacturing Optimization |author= Beth Stackpole | work= Design News | date= May 13, 2011 | url = http://www.designnews.com/document.asp?doc_id=230495 |accessdate= August 17, 2011}}</ref>  Capabilities have been added to include: macromechanics, [[micromechanics]], [[failure mode and effects analysis]], panel concepts, composite optimization, and integration with [[Abaqus|Abaqus FEA]] software.<ref>{{cite web | title= Collier Research Corporation | work = Simulia alliance |publisher=  Dassault Systèmes  |url= http://www.simulia.com/alliances/alliances_collier.html |accessdate= August 22, 2011 }}</ref>{{-}}\nThere are two available versions of HyperSizer, Pro and Express. Both HyperSizer Pro and Express can equally analyze and design laminates and sandwich panels, and update the FEM, and report margins. HyperSizer Express (released 2016) delivers key capabilities of HyperSizer Pro in a user-friendly packaged aimed at the composite engineer. While HyperSizer Pro specializes in aerospace and space launch, applications for Express include automotive, sporting goods, medical, industrial, and marine.\n\n==Details==\nHyperSizer is written in [[Fortran]] and [[Visual Basic]] and contains over 400,000 lines of code. The software is compatible with [[Microsoft]] [[Windows 7]], Windows 8, and Windows 10.\n\nVersion 6.1 (released in May 2011) integrated with FEA solvers in an iterative loop conducting trade studies and examining potential design candidates. HyperSizer ensures structural integrity through failure analyses. It increases manufacturability by minimizing ply drops, identifying laminate transition add/drop boundaries, and defining ply shapes.<ref>{{cite web |title= Version History Detail |work= Hypersizer | url= http://hypersizer.com/support/version-history.php | accessdate= August 22, 2011}}</ref><ref>{{cite news |title= HyperSizer v6 Keys in on Manufacturing Optimization | author= Beth Stackpole | work= Design News |date= May 13, 2011 |url= http://www.designnews.com/document.asp?doc_id=230495}}</ref>\n\nHyperSizer competes in the analysis and sizing software market with [[Firehole Composites]], ESI, and ESAComp among others.\nHyperSizer Pro was rated first in the \"tools of the month\" by ''Desktop Engineering'' magazine in July 2011.<ref>{{cite news | title = Tools of the Month: New Products for Engineers |date= June 2011 |page=46 |work= Desktop Engineering | url= http://www.nxtbook.com/nxtbooks/level5/desktopengineering_201107/index.php?bm=normal#/48 |accessdate= August 23, 2011}}</ref> HyperSizer Express was named \"Editor's Pick\" by ''Desktop Engineering'' in March 2016.<ref>{{cite news | title = Editor's Pick: HyperSizer Express |date= March 2016 |page=1 |work= Desktop Engineering | url= https://www.digitalengineering247.com/article/editors-pick-hypersizer-express/ |accessdate= November 8, 2018}}</ref>\n\n== References ==\n<!--- See http://en.wikipedia.org/wiki/Wikipedia:Footnotes on how to create references using <ref></ref> tags which will then appear here automatically -->\n{{Reflist|colwidth=33em}}\n\n==Further reading==\n* {{cite web |title= HITEMP Material and Structural Optimization Technology Transfer |date= October 2001 |work= NASA Contract Report 2001-211166 |author= Craig S. Collier |url= http://gltrs.grc.nasa.gov/reports/2001/CR-2001-211166.pdf |accessdate= August 14, 2011 }}\n\n== External links ==\n* [http://www.hypersizer.com HyperSizer Official Web site]\n\n\n<!--- Categories --->\n[[Category:Computer-aided design software]]\n[[Category:Computer-aided engineering software]]\n[[Category:Finite element software]]\n[[Category:Structural analysis]]"
    },
    {
      "title": "JCMsuite",
      "url": "https://en.wikipedia.org/wiki/JCMsuite",
      "text": "{{Infobox company\n| name      = JCMwave GmbH\n| logo      = \n| type      = [[Private company]]  \n| traded_as         = \n| foundation        = [[Berlin]], [[Germany]] (2001) \n| location          = [[Berlin]], [[Germany]]\n| key_people        = \n| industry          = [[Computer software]]\n| products          = JCMsuite\n| num_employees     = \n| revenue  =  \n| operating_income  =  \n| net_income  =  \n| assets  = \n| equity  =  \n| homepage    =  {{URL|www.jcmwave.com}}\n}}\n\n{{Infobox software\n| name = JCMsuite\n| developer = JCMwave GmbH\n| latest_release_version = 3.6.1\n| latest_release_date = {{Start date and age|2017|01|27}}\n| operating_system = [[Windows]], [[Linux]]\n| genre = [[Computer-aided engineering]],\n         [[Finite element analysis]]\n| logo = \n| screenshot =\n| caption = \n| license = [[Proprietary software|Proprietary]] [[EULA]]\n| website = {{URL|www.jcmwave.com/JCMsuite/doc/html/}}\n|}}\n\n'''JCMsuite''' is a [[finite element analysis]] software package for the simulation and analysis of electromagnetic waves, elasticity and heat conduction. It also allows a mutual coupling between its optical, heat conduction and continuum mechanics solvers. The software is mainly applied for the analysis and optimization of [[Nanophotonics|nanooptical]] and microoptical systems. \nIts applications in research and development projects include\n[[Scatterometry|dimensional metrology systems]],<ref name=Potzick2008/><ref name=Marlowe2016/><ref name=Henn2016/>\n[[Photolithography|photolithographic systems]],<ref name=Tezuka2007/>\n[[photonic crystal fibers]],<ref name=Beravat2016/><ref name=Wong2012/><ref name=Couny2007/>\n[[Vertical-cavity surface-emitting laser|VCSELs]],<ref name=Shchukin2014/>\n[[Quantum dot laser|Quantum-Dot emitters]],<ref name=Gschrey2015/>\nlight trapping in [[solar cells]],<ref name=Yin2016/> \nand\n[[Surface plasmon|plasmonic systems]].<ref name=Shapiro2016/>\nThe design tasks can be embedded into the high-level scripting languages [[MATLAB]] and [[Python (programming language)|Python]], enabling a scripting of design setups in order to define parameter dependent problems or to run parameter scans.\n\n== Problem Classes ==\n\nJCMsuite allows to treat various physical models (problem classes).\n\n=== Optical Scattering ===\n\nScattering problems are problems, where the refractive index geometry of the objects is given, incident waves as well as (possibly) interior sources are known and the response of the structure in terms of reflected, refracted and diffracted waves has to be computed. The system is described by time-harmonic [[Maxwell's Equation]]\n:<math>\\mu^{-1}\\nabla \\times \\epsilon^{-1} \\nabla \\times \\mathbf{E} - \\omega^2\\mathbf{E} = - i \\omega \\epsilon^{-1} \\mathbf{J}</math>\n:<math>\\nabla\\cdot \\epsilon\\mathbf{E} = 0</math>. \nfor given sources <math>\\mathbf{J}</math> (current densities, e.g. electric dipoles) and incident fields. In scattering problems one considers the field exterior to the scattering object as superposition of source and scattered fields. Since the scattered fields move away from the object they have to satisfy a radiation condition at the boundary of the computational domain. In order to avoid reflections at the boundaries, they are modelled by the mathematical rigorous method of a [[perfectly matched layer]] (PML).\n\n=== Optical Waveguide Design ===\n\n[[Waveguides]] are structures which are invariant in one spatial dimension (e. g. in z-direction) and arbitrarily structured in the other two dimensions. To compute waveguide modes, the Maxwell's curl-curl Equation is solved in the following form\n:<math>\\nabla \\times \\epsilon^{-1} \\nabla \\times \\mathbf{E} = \\mu\\omega^2\\mathbf{E}</math>\n:<math>\\mathbf{E} = \\mathbf{E}(x,y) e^{i k_z z}.</math>\nDue to the symmetry of the problem, the electrical field <math>\\mathbf{E}</math> can be expressed as product of a field <math>\\mathbf{E}(x,y)</math> depending just on the position in the transverse plane and a phase factor. Given the permeability, permittivity and frequency, JCMsuite finds pairs of the electric field <math>\\mathbf{E}(x,y)</math> and the corresponding propagation constant (wavenumber) <math>k_z</math>. JCMsuite also solves the corresponding formulation for the magnetic field <math>\\mathbf{H}(x,y)</math>. A mode computation in cylindrical and twisted coordinate systems allows to compute the effect of fiber bending.\n\n=== Optical Resonances ===\n\nResonance problems are problems in 1D, 2D, or 3D where the refractive index geometry of resonating objects is given, and the angular frequencies <math>\\omega</math> and corresponding resonating fields have to be computed. No incident waves or interior sources are present. JCMsuite determines pairs of <math>\\mathbf{E}</math> and <math>\\omega</math> or <math>\\mathbf{H}</math> and <math>\\omega</math> fulfilling the time-harmonic Maxwell's curl-curl equation, e.g.,\n:<math>\\nabla \\times \\epsilon^{-1} \\nabla \\times \\mathbf{E} = \\mu\\omega^2\\mathbf{E}</math>\n:<math>\\nabla\\cdot \\epsilon\\mathbf{E} = 0</math>. \nfor a pair of <math>\\mathbf{E}</math> and <math>\\omega</math>.\n\nTypical applications are the computation of [[Optical cavity|cavity]] modes (e.g., for semiconductor lasers), [[plasmon]]ic modes and [[photonic crystal]] band-structures.\n\n=== Heat Conduction ===\n\nOhmic losses of the electromagnetic field can cause a heating, which distributes over the object and changes the [[refractive index]] of the structure. \nThe temperature distribution <math>T</math> within a body is governed by the [[heat equation]]\n:<math>\\partial_t\\left(c\\rho T\\right) = \\nabla\\cdot k\\nabla T + q</math>\nwhere <math>c</math> is the specific heat capacity, <math>\\rho</math> is the mass density, <math>k</math> is the heat conductivity, and <math>q</math> is a thermal source density. Given a thermal source density <math>q</math> JCMsuite computes the temperature distribution <math>T.</math> Heat convection or heat radiation within the body are not supported. \nThe temperature profile can be used as an input to optical computations to account for the temperature dependence of the refractive index up to linear order.\n\n=== Linear Elasticity ===\n\nA heating due to Ohmic losses may also induce mechanical stress via thermal expansion. This changes the [[birefringence]] of the optical element according to the [[Photoelasticity|photoelastic effect]] and hence may influence the optical behavior. JCMsuite can solve linear problems of [[continuum mechanics]]. The equations governing linear elasticity follow from the minimum principle for the elastic energy\n:<math>\\int_\\Omega \\epsilon_{ij} C_{ijkl}\\left(\\epsilon_{kl} - \\epsilon_{kl}^\\text{init}\\right) - u_i F_i \\rightarrow \\min,</math>\nsubject to fixed or free displacement boundary conditions. The quantities are the stiffness tensor <math>C_{ijkl}</math>, the linear strain <math>\\epsilon_{ij}</math>, the prescribed initial strain <math>\\epsilon_{ij}^\\text{init}</math>, the displacement <math>u_i</math> (due to thermal expansion), and the prescribed force <math>F_i</math>. The linear strain <math>\\epsilon_{ij}</math> relates to the displacement <math>u_i</math> by <math>\\epsilon_{i j} = \\frac{1}{2} \\left(\\partial_i u_j + \\partial_j u_i \\right)</math>. The computed strain can be used as an input to optical computations to account for the stress dependence of the refractive index. Stress and strain are related by [[Young's modulus]].\n\n== Numerical Method ==\n\nJCMsuite relies on the [[finite element analysis|finite element method]]. \nDetails of the numerical implementation have been published in various contributions, e.g.<ref name=Pomplun2007/>\nThe performance of the methods has been compared to alternative methods in various benchmarks, e.g.<ref name=Hoffmann2009/><ref name=Maes2013/>\nDue to the attainable high numerical accuracy JCMsuite has been used as reference for results obtained with analytical (approximative) methods, e.g.<ref name=Babicheva2013/><ref name=Shapiro2016/>\n\n== References ==\n{{reflist|refs=\n\n<ref name=Babicheva2013>\n{{cite journal | first = V. | last = Babicheva | display-authors=etal\n| date  = 2012\n| title      = Localized surface plasmon modes in a system of two interacting metallic cylinders\n| journal    = J. Opt. Soc. Am. B\n| volume     = 29\n| issue = 6 | pages      = 1263\n| doi = 10.1364/JOSAB.29.001263 | bibcode = 2012JOSAB..29.1263B | arxiv= 1204.5773}}</ref><ref name=Pomplun2007>\n{{cite journal | first = J. | last = Pomplun | display-authors=etal\n| date  = 2007\n| title      = Adaptive finite element method for simulation of optical nano structures\n| journal    = Physica Status Solidi B\n| volume     = 244\n| issue = 10 | pages      = 3419–3434\n| doi = 10.1002/pssb.200743192 | bibcode = 2007PSSBR.244.3419P | arxiv= 0711.2149}}</ref><ref name=Maes2013>\n{{cite journal | first = B. | last = Maes | display-authors=etal\n| date  = 2013\n| title      = Simulations of high-Q optical nanocavities with a gradual 1D bandgap\n| journal    = Opt. Express\n| volume     = 21\n| issue = 6 | pages      = 6794–806\n| doi = 10.1364/OE.21.006794 | pmid = 23546062 | bibcode = 2013OExpr..21.6794M }}</ref><ref name=Hoffmann2009>\n{{cite journal | first = J. | last = Hoffmann | display-authors=etal\n| date  = 2009\n| title      = Comparison of electromagnetic field solvers for the 3D analysis of plasmonic nano antennas\n| journal    = Proc. SPIE\n| volume     = 7390\n| pages      = 73900J\n| doi = 10.1117/12.828036 | series = Modeling Aspects in Optical Metrology II | bibcode = 2009SPIE.7390E..0JH | arxiv= 0907.3570}}</ref><ref name=Potzick2008>\n{{cite journal | first = J. | last = Potzick | display-authors=etal\n| date  = 2008\n| title      = International photomask linewidth comparison by NIST and PTB\n| journal    = Proc. SPIE\n| volume     = 7122\n| pages      = 71222P\n| doi = 10.1117/12.801435 | series = Photomask Technology 2008 | bibcode = 2008SPIE.7122E..2PP }}</ref><ref name=Marlowe2016>\n{{cite journal | first = H. | last = Marlowe | display-authors=etal\n| date    = 2016\n| title   = Modeling and empirical characterization of the polarization response of off-plane reflection gratings\n| journal = Appl. Opt.\n| volume  = 21\n| issue = 21 | pages   = 5548\n| doi = 10.1364/AO.55.005548 | pmid = 27463903 | bibcode = 2016ApOpt..55.5548M }}</ref><ref name=Tezuka2007 >\n{{cite journal | first = Y. | last = Tezuka  | display-authors=etal\n| date    = 2007\n| title   = EUV exposure experiment using programmed multilayer defects for refining printability simulation\n| journal = Proc. SPIE\n| volume  = 6517\n| pages   = 65172M\n| doi = 10.1117/12.711967  | series = Emerging Lithographic Technologies XI  | bibcode = 2007SPIE.6517E..2MT  }}</ref><ref name=Beravat2016 >\n{{cite journal | first = R. | last = Beravat  | display-authors=etal\n| date    = 2016\n| title   = Twist-induced guidance in coreless photonic crystal fiber: A helical channel for light\n| journal = Sci. Adv.\n| volume  = 2\n| issue = 11  | pages   = e1601421\n| doi = 10.1126/sciadv.1601421  | pmid = 28138531  | bibcode= 2016SciA....2E1421B}}</ref><ref name=Wong2012 >\n{{cite journal | first = G. K. L. | last = Wong  | display-authors=etal\n| date    = 2012\n| title   = Excitation of Orbital Angular Momentum Resonances in Helically Twisted Photonic Crystal Fiber\n| journal = Science\n| volume  = 337\n| issue = 6093  | pages   = 446–9\n| doi = 10.1126/science.1223824  | pmid = 22837523  | bibcode = 2012Sci...337..446W  }}</ref><ref name=Couny2007 >\n{{cite journal | first = F. | last = Couny  | display-authors=etal\n| date    = 2007\n| title   = Generation and Photonic Guidance of Multi-Octave Optical-Frequency Combs\n| journal = Science\n| volume  = 318\n| issue = 5853  | pages   = 1118–21\n| doi = 10.1126/science.1149091  | pmid = 18006741  | bibcode = 2007Sci...318.1118C  | url = http://orbit.dtu.dk/en/publications/generation-and-photonic-guidance-of-multioctave-opticalfrequency-combs(4a7fc774-69fd-4a49-a281-70ac14c36407).html  }}</ref><ref name=Shchukin2014 >\n{{cite journal | first = V. | last = Shchukin  | display-authors=etal\n| date    = 2014\n| title   = Single-Mode Vertical Cavity Surface Emitting Laser via Oxide-Aperture-Engineering of Leakage of High-Order Transverse Modes\n| journal = IEEE J. Quantum Electron.\n| volume  = 50\n| issue = 12  | pages   = 990–995\n| doi = 10.1109/JQE.2014.2364544  | bibcode = 2014IJQE...50..990S  }}</ref><ref name=Gschrey2015>\n{{cite journal | first = M. | last = Gschrey  | display-authors=etal\n| date    = 2015\n| title   = Highly indistinguishable photons from deterministic quantum-dot microlenses utilizing three-dimensional in situ electron-beam lithography\n| journal = Nat. Commun.\n| volume  = 6\n| pages   = 7662\n| doi = 10.1038/ncomms8662  | pmid = 26179766  | pmc = 4518279  | bibcode = 2015NatCo...6E7662G  }}</ref><ref name=Yin2016 >\n{{cite journal | first = G. | last = Yin  | display-authors=etal\n| date    = 2016\n| title   = Light absorption enhancement for ultra-thin Cu(In1−xGax)Se2 solar cells using closely packed 2-D SiO2 nanosphere arrays\n| journal = Solar Energy Materials and Solar Cells\n| volume  = 153\n| pages   = 124–130\n| doi = 10.1016/j.solmat.2016.04.012  }}</ref>\n<ref name=Shapiro2016 >\n{{cite journal | first = D. | last =  Shapiro | display-authors=etal\n| date    = 2016\n| title   = Optical field and attractive force at the subwavelength slit\n| journal = Opt. Express\n| volume  = 24\n| issue =  14 | pages   = 15972–7\n| doi =  10.1364/OE.24.015972 | pmid =  27410865 | bibcode =  2016OExpr..2415972S }}\n</ref>\n<ref name=Henn2016 >\n{{cite journal | first = M.-A. | last =  Henn | display-authors=etal\n| date    = 2016\n| title   = Optimizing the nanoscale quantitative optical imaging of subfield scattering targets\n| journal = Opt. Lett.\n| volume  = 41\n| issue =  21 | pages   = 4959\n| doi =  10.1364/OL.41.004959 | bibcode=2016OptL...41.4959H}}\n</ref>\n}}\n\n{{CAE software}}\n\n[[Category:Finite element software]]\n[[Category:Finite element software for Linux]]\n[[Category:Computer-aided engineering software]]\n[[Category:Optical software]]\n[[Category:Electromagnetic simulation software]]"
    },
    {
      "title": "JMAG",
      "url": "https://en.wikipedia.org/wiki/JMAG",
      "text": "{{distinguish|Triple J Magazine}}\n{{More footnotes|date=June 2019}}\n\n{{Infobox software\n| name = JMAG\n| logo = \n| screenshot = [[File:Jmag.png|250px]]\n| caption = JMAG-Designer\n| developer = [[JSOL| JSOL Corporation]]\n| latest_release_version = Version 18.1\n| latest_release_date = 2019-06\n| operating_system = [[Cross-platform]]\n| genre = [[Finite Element Analysis]] Simulator\n| website = [https://www.jmag-international.com jmag-international.com]\n}}\n[[File:Jmag gene.JPG|thumb|JMAG resources]]\n\n'''JMAG''' is simulation software for the development and design of electrical devices. JMAG was originally released in 1983 as a tool to support design for devices such as motors, actuators, circuit components, and antennas.\n\nJMAG incorporates simulation technology to accurately analyze a wide range of physical phenomenon that includes complicated geometry, various material properties, and the heat and structure at the center of electromagnetic fields. JMAG has an interface capable of linking to third-party software and a portion of the JMAG analysis functions can also be executed from many of the major CAD and CAE systems.\n\nJMAG is used actively to analyze designs at a system level that includes drive circuits by utilizing links to power electronic simulators. JMAG is also being used for the development of drive motors for [[electric vehicles]].\n\n==History==\n*1983 – JMAG Version 1 was developed as 3D static magnetic field analysis software.\n*1986 – JMAG DYN was developed as 3D transient magnetic field analysis software.\n*1994 – JMAG-Works was developed as integrated electromagnetic analysis software with thermal analysis solutions.\n*1998 – JMAG-Studio was developed as an integrated electromagnetic analysis software native to Windows.\n*2000 – Coupled analyses was implemented for control solutions.\n*2002 – JMAG-Designer was developed as an add-on for SolidWorks.\n*2004 – JMAG RT-Solutions was developed for model based development of motor drive systems.\n*2007 – JMAG Motor Template 2 was developed for creating motor templates by specifying basic parameters such as the geometry and the windings.\n*2009 – JMAG Motor Bench and JMAG Transformer Design and Evaluation tools were developed for improving the manufacturing of devices.\n*2018 – JMAG-Express Online was developed for designing and evaluating motor on web browser.\n\n==See also==\n*[[Computer-aided engineering]]\n*[[Finite element analysis]]\n*[[List of finite element software packages]]\n\n==External links==\n* [https://www.jmag-international.com/ jmag-international.com], official website\n\n==References==\n* [https://www.ele.auckland.ac.nz/archives/reports2005/pdfs/Power%20Systems/pro_135_weit001.pdf Serec Newsletter, Swiss Research & Engineering Centre, March 9, 2009]\n* [https://www.serec.ethz.ch/newsletter/Newsletter_9_MAR09.pdf Development of an Electromagnet Energy Storage System, Te-Chin Wei, Department of Electrical and Computer Engineering, University of Auckland]\n* [https://www.jmag-international.com/catalog/ JMAG Application Catalog]\n* [https://www.jmag-international.com/express/ JMAG-Express Online]\n\n{{CAE software}}\n\n[[Category:Simulation software]]\n[[Category:Finite element software]]\n[[Category:Finite element software for Linux]]\n[[Category:Sumitomo Mitsui Financial Group]]\n[[Category:1983 software]]"
    },
    {
      "title": "LS-DYNA",
      "url": "https://en.wikipedia.org/wiki/LS-DYNA",
      "text": "{{refimprove|date=April 2018}}\n{{Infobox software\n| name                   = LS-DYNA\n| title                  = LS-DYNA\n| logo                   = \n| screenshot             = LS DYNA geo metro.png\n| screenshot size        = 300px\n| caption                = Screenshot from [[LS-PrePost]] showing the results of an LS-DYNA simulation of a [[Geo Metro]] impacting a rigid wall at {{convert|120|km/h|mph}}\n| collapsible            =\n| author                 = \n| developer              = LSTC\n| released               = <!-- {{Start date|YYYY|MM|DD}} -->\n| discontinued           =\n| latest release version = R8.0\n| latest release date    = March 2015\n| latest preview version =\n| latest preview date    =\n| frequently updated     = <!-- DO NOT include this parameter unless you know what it does -->\n| programming language   =\n| operating system       = [[Microsoft Windows]], [[Linux]], [[Unix]]<ref>http://www.lstc.com/products/ls-dyna</ref>\n| size                   =\n| language               =\n| status                 =\n| genre                  = [[Computer-aided engineering]], [[Finite Element Analysis]]\n| license                = [[Proprietary software|Proprietary]] [[commercial software]] (1978 DYNA3D [[Public domain software]]<ref name=\"benson\"/>)\n| website                = [http://www.lstc.com/ http://www.lstc.com/]\n}}\n\n'''LS-DYNA''' is an advanced general-purpose multiphysics simulation software package developed by the Livermore Software Technology Corporation (LSTC). While the package continues to contain more and more possibilities for the calculation of many complex, real world problems, its origins and core-competency lie in highly nonlinear transient dynamic [[finite element analysis]] (FEA) using explicit time integration. LS-DYNA is used by the [[automobile]], [[aerospace]], [[construction]] and [[civil engineering]], [[military]], [[manufacturing]], and [[bioengineering]] industries.\n\n== History ==\n\nLS-DYNA originated from the 3D [[Finite element method|FEA]] program '''DYNA3D''', developed by Dr. John O. Hallquist at [[Lawrence Livermore National Laboratory]] (LLNL) in 1976.<ref name=LSTC>{{cite web | author = LSTC | title = LS-DYNA Keyword User's Manual, Volume 1 | publisher = Livermore Software Technology Corporation (LSTC) | url = http://lstc.com/pdf/ls-dyna_971_manual_k.pdf | accessdate = 2009-03-25}}</ref> DYNA3D was created in order to simulate the impact of the Full Fusing Option (FUFO) or \"[[Dial-a-yield]]\" nuclear bomb for low altitude release (impact velocity of ~ 40&nbsp;m/s). At the time, no 3D software was available for simulating impact, and 2D software was inadequate. Though the FUFO bomb was eventually canceled, development of DYNA3D continued.<ref name=benson>{{cite web | author = Dr. David J. Benson | title = The History of LS-DYNA | publisher = University Of California, San Diego | url = http://blog.d3view.com/wp-content/uploads/2007/06/benson.pdf | accessdate = 2009-03-25}}</ref> DYNA3D used explicit time integration to study nonlinear dynamic problems, with the original applications being mostly stress analysis of structures undergoing various types of impacts. The program was initially very simple largely due to the lack of adequate computational resources at the time. A two-dimensional version of the same software was developed concurrently.<ref name=\"LSTC\"/> In 1978 the DYNA3D [[source code]] was released into the [[public domain]] without restrictions after a request from France.<ref name=\"benson\"/>\n\nIn 1979 a new version of DYNA3D was released which was programmed for optimal performance on the [[Cray|CRAY-1]] supercomputers. This new release contained improved sliding interface treatment which was an order of magnitude faster than the previous contact treatment. This version also eliminated structural and higher order solid elements of the first version, while including element-wise integration of the integral difference method developed in 1974.<ref name=\"LSTC\"/>\n\nThe 1982 release included nine additional material models which allowed for new simulations, such as explosive-structure and soil-structure interactions. The release also permitted the analysis of structural response due to [[Penetration (weapons)|penetrating projectiles]]. Improvements in 1982 further boosted the execution speed by about 10 percent. Hallquist was the sole developer of DYNA3D until 1984, when he was joined by Dr. David J. Benson.<ref name=nimmala>{{cite web|author=Seshu Nimmala |title=A comparison of DYNA3D, NIKE3D and LS-DYNA |publisher=Oregon State University |url=http://people.oregonstate.edu/~nimmalas/research/compDNL/comparisonOfDNL.doc |accessdate=2014-01-15 |deadurl=yes |archiveurl=https://web.archive.org/web/20120415103614/http://people.oregonstate.edu/~nimmalas/research/compDNL/comparisonOfDNL.doc |archivedate=April 15, 2012 }}</ref> In 1986, many capabilities were added. The added features included beams, shells, rigid bodies, single surface contact, interface friction, discrete springs and dampers, optional hourglass treatments, optional exact volume integration, and [[VAX]]/[[OpenVMS|VMS]], [[IBM]], [[Unix|UNIX]], [[Cray Operating System|COS]] operating system compatibility. At this point, DYNA3D became the first code to have a general single surface contact algorithm.<ref name=\"LSTC\"/>\n\n[[Metalworking|Metal forming]] simulation and composite analysis capabilities were added to DYNA3D in 1987. This version included changes to the shell elements, and [[dynamic relaxation]]. The final release of DYNA3D in 1988 included several more elements and capabilities.<ref name=\"LSTC\"/>\n\nBy 1988 LLNL had sent approximately 600 [[Magnetic tape data storage|tapes]] containing simulation software. Hallquist had consulted for nearly 60 companies and organizations on the use of DYNA3D.<ref name=\"benson\"/> As a result, at the end of 1988 Livermore Software Technology Corporation (LSTC) was founded to continue the development of DYNA3D in a much more focused manner, resulting in LS-DYNA3D (later shortened to LS-DYNA). Releases and support for DYNA3D were thus halted. Since then, LSTC has greatly expanded the capabilities of LS-DYNA in an attempt to create a universal tool for most simulation needs.<ref name=\"LSTC\"/>\n\n== Typical uses ==\n\nNonlinear means at least one (and sometimes all) of the following complications:\n* Changing [[boundary condition]]s (such as contact between parts that changes over time)\n* Large deformations (for example the crumpling of [[sheet metal]] parts)\n* Nonlinear materials that do not exhibit ideally [[Elasticity (physics)|elastic]] behavior (for example [[thermoplastic]] [[polymers]])\n\nTransient dynamic means analyzing high speed, short duration events where [[inertia]]l [[force]]s are important. Typical uses include:\n* Automotive crash (deformation of [[chassis]], [[airbag]] inflation, [[seatbelt]] tensioning, ...)\n* Explosions (underwater [[Naval mine|mine]]s, [[shaped charge]]s, ...)\n* Manufacturing (sheet metal [[Stamping (metalworking)|stamping]], ...)\n\n== Characteristics ==\n\nLS-DYNA consists of a single executable file and is entirely command-line driven. Therefore, all that is required to run LS-DYNA is a command shell, the executable, an input file, and enough free disk space to run the calculation. All input files are in simple [[ASCII]] format and thus can be prepared using any [[text editor]]. Input files can also be prepared with the aid of a graphical [[preprocessor]]. There are many third-party software products available for preprocessing LS-DYNA input files. LSTC also develops its own preprocessor, [http://www.lstc.com/lspp '''LS-PrePost'''], which is freely distributed and runs without a license. Licensees of LS-DYNA automatically have access to all of the program's capabilities, from simple linear static mechanical analysis up to advanced thermal and flow solving methods. Furthermore, they have full use of LSTC's [http://www.lsoptsupport.com/ '''LS-OPT'''] software, a standalone design optimization and probabilistic analysis package with an interface to LS-DYNA.\n\n=== Capabilities ===\n\nLS-DYNA's potential applications are numerous and can be tailored to many fields. LS-DYNA is not limited to any particular type of simulation. In a given simulation, any of LS-DYNA's many features can be combined to model a wide variety of physical events. An example of a simulation that involves a unique combination of features is the [[NASA]] [[JPL]] [[Mars Pathfinder]] landing which simulated the space probe's use of airbags to aid in its landing.\n\nLS-DYNA's analysis capabilities:\n* Full 2D & 3D capabilities\n* Nonlinear dynamics\n* Rigid body dynamics\n* Quasi-static simulations\n* [[Normal modes]]\n* Linear statics\n* Thermal analysis\n* Fluid analysis\n** Eulerian capabilities\n** ALE (Arbitrary Lagrangian-Eulerian)\n** FSI (Fluid-Structure Interaction)\n** Navier-Stokes fluids\n** Compressible fluid solver, CESE (Conservation Element & Solution Element)\n* FEM-rigid multi-body dynamics coupling ([[MADYMO]], [[Cal3D]])\n* Underwater shock\n* [[Failure analysis]]\n* Crack propagation\n* Real-time [[acoustics]]\n* Implicit springback\n* Multi-physics coupling\n* Structural-thermal coupling\n* Adaptive remeshing\n* SPH ([[Smoothed particle hydrodynamics]])\n* DEM ([[Discrete element method]])\n* EFG ([[Meshfree methods|Element Free Galerkin]])\n* Radiation transport\n* EM ([[Electromagnetism]])\n\n=== Material Library ===\n\nLS-DYNA's comprehensive library of material models:\n\n* [[Metal]]s\n* [[Plastics]]\n* [[Glass]]\n* [[Foam]]s\n* [[Fabric]]s\n* [[Elastomer]]s\n* [[Honeycomb structure|Honeycomb]]s\n* [[Concrete]] & [[soil]]s\n* [[Viscous]] fluids\n* User-defined materials\n\n=== Element Library ===\n\nSome of the element types available in LS-DYNA:\n\n* [[Beam (structure)|Beams]] (standard, trusses, discrete, cables, and welds) (with over 10 beam element formulations)\n* Discrete Elements ([[Spring (device)|Springs]] and [[Shock absorber|Dampers]])\n* Lumped [[Inertia]]s\n* Lumped [[Mass]]es\n* [[Accelerometer]]s\n* [[Sensor]]s\n* [[Seat belt|Seat Belts]]\n** Pretensioners\n** Retractors\n** Sliprings\n* Shells (3, 4, 6, and 8-node including 3D shells, membranes, 2D [[plane stress]], [[plane strain]], and [[axisymmetric]] solids) (with over 25 shell element formulations)\n* Solids (4 and 10-node [[tetrahedron]]s, 6-node [[pentahedron]]s, and 8-node [[hexahedron]]s) (with over 20 solid element formulations)\n* [[Smoothed particle hydrodynamics|SPH]] Elements\n* Thick Shells (8-node)\n\n=== Contact Algorithms ===\n\nLS-DYNA's contact algorithms:\n\n* Flexible body contact\n* Flexible body to rigid body contact\n* Rigid body to rigid body contact\n* Edge-to-edge contact\n* Eroding contact\n* Tied surfaces\n* CAD surfaces\n* Rigid walls\n* Draw beads\n\n== Applications ==\n\n=== Automotive crashworthiness & occupant safety ===\n\nLS-DYNA is used by the automotive industry to analyze vehicle designs.<ref name=\"applications\"/><ref name=LSTC/> LS-DYNA accurately predicts a car's behavior in a collision and the effects of the collision upon the car's occupants. With LS-DYNA, automotive companies and their suppliers can test car designs without having to tool or experimentally test a prototype, thus saving time and expense.\n\nLS-DYNA's specialized automotive features:\n\n* [[Seatbelts]]\n* [[Slip ring]]s\n* [[Pretensioners]]\n* Retractors\n* [[Sensors]]\n* [[Accelerometers]]\n* [[Airbags]]\n* [[Crash test dummy#Hybrid III family|Hybrid III dummy models]]\n* [[Inflator models]]\n\n=== Sheetmetal forming with LS-DYNA ===\n\nOne of LS-DYNA's applications is sheetmetal forming.<ref name=\"applications\">{{cite\n  | title = LS-DYNA Applications\n  | author = LSTC\n  | url = http://www.lstc.com/applications\n  | access-date = February 2, 2017\n}}</ref><ref name=LSTC/> LS-DYNA accurately predicts the stresses and deformations experienced by the metal, and determines if the metal will fail. LS-DYNA supports adaptive remeshing and will refine the mesh during the analysis, as necessary, to increase accuracy and save time.\n\nMetal forming applications for LS-DYNA include:\n\n* Metal stamping\n* Hydroforming\n* Forging\n* Deep drawing\n* Multi-stage processes\n\n=== Aerospace industry applications ===\n\nLS-DYNA is used by the aerospace industry to simulate [[bird strike]],<ref name=\"applications\"/><ref name=LSTC/> jet engine blade containment, and structural failure.\n\nAerospace applications for LS-DYNA include:\n\n* Blade containment\n* Bird strike (windshield, and engine blade)\n* Failure analysis\n\n=== Other applications ===\n\nOther LS-DYNA applications include:\n\n* Drop testing\n* Can and shipping container design\n* Electronic component design\n* Glass forming\n* Plastics, mold, and blow forming\n* Biomedical (heart valves)\n* Metal cutting\n* [[Earthquake engineering]]\n* Failure analysis\n* Sports equipment (golf clubs, golf balls, baseball bats, helmets)\n* Civil engineering (offshore platforms, pavement design)\n\n==References==\n{{reflist|30em}}\n\n==External links==\n* [http://www.lstc.com/ LSTC Company Website]\n* [http://www.dynalook.com/ Papers from European and International LS-DYNA User Conferences]\n* [http://www.dynaexamples.com/ Examples and Class Notes for Download]\n* [http://www.lsdyna-online.com/ Training and Class Notes for Download]\n\n{{CAE software}}\n\n[[Category:Finite element software]]\n[[Category:Finite element software for Linux]]\n[[Category:Public-domain software with source code]]"
    },
    {
      "title": "LUSAS",
      "url": "https://en.wikipedia.org/wiki/LUSAS",
      "text": "{{Infobox Software\n| name = LUSAS\n| screenshot =\n| caption = caption\n| developer = LUSAS\n| latest_release_version = 16.0-1\n| latest_release_date = November 2017\n| operating_system = [[Microsoft Windows|Windows]]\n| genre = [[Finite Element Analysis]] Simulation\n| license = [[Proprietary software|Proprietary]]\n| website = {{URL|http://www.lusas.com}}\n}}\n\n'''LUSAS''' is a UK-based developer and supplier of [[Finite Element Analysis| Finite Element Analysis (FEA)]] application software products that bear the same name.\n\n== History ==\n\nLUSAS has its origins back in 1970 when a group of research workers at the [[University of London]] (now incorporated into [[Imperial College London]]) began work on the London University Stress Analysis System, \"LUSAS\". This team was led by Dr. Paul Lyons, who, in 1982, set up an independent company, Finite Element Analysis Ltd., to further develop, and subsequently market the software as a general purpose structural analysis system.<ref>{{cite web|url=http://www.lusas.com|publisher=LUSAS website|title=About Us}}</ref> In 1997, following the introduction of a range of specialist application software packages, the company, for awareness reasons, then started to trade under the LUSAS name.\n\n== Software ==\n\nLUSAS software consists of a Windows-based Modeller, used for model building and viewing of results, and a Solver for carrying out an analysis. Four commercial application products cater for the following industries:\n\n* Civil & Structural - for civil, structural, nuclear, seismic, geotechnical and offshore engineering.\n* Bridge - for bridge engineering analysis, design, and assessment.\n* Analyst - for automotive, aerospace, defence, manufacturing and general engineering analysis.\n* Composite - for engineers designing composite products or components.\n\nFor Universities, an Academic version which permits the running of any commercial LUSAS software product can be used for teaching and research use.\n\n== Example Applications ==\n\nCivil and structural engineering uses<ref>{{cite web|url=http://www.lusas.com/case/civil/index.html|publisher=LUSAS website|title=Civil and Structural engineering uses}}</ref> include [[Anthony Gormley]]'s [[Quantum Cloud]], built alongside the [[Millennium Dome]], (now the [[The O2 arena (London)|O2 Arena]]), as part of UK's [[Millennium Commission]] sponsored celebrations for the year 2000; [[Spinnaker Tower]], the tallest publicly accessible provincial structure in the UK; and [[Gwangmyeong Velodrome]], the largest domed structure built, so far, in South Korea.\n\n[[Bridge]]s designed with the aid of LUSAS<ref>{{cite web|url=http://www.lusas.com/case/bridge/index.html|publisher=LUSAS website|title=Bridge engineering uses}}</ref> include the [[Lune Millennium Bridge]], and the [[Gateshead Millennium Bridge]] both also built, coincidentally, as part of the UK's year 2000 celebrations, and the [[Vasco da Gama]] cable stayed bridge and associated viaduct structures in Portugal.\n\nGeneral [[mechanical engineering]] uses<ref>{{cite web|url=http://www.lusas.com/case/analyst/index.html|publisher=LUSAS website|title=General engineering uses}}</ref>  are extremely varied and include thermal analysis of [[marine loading arm]]s - used to transfer Liquid Natural Gas ([[LNG]]) from shore to ship and vice versa at a temperature of -163 degrees Celsius, nonlinear analysis of nylon polyamide [[cable tie]]s used to bundle cables together, and contact analysis of [[titanium]] and [[ceramic]] hip joint components as used in artificial [[hip replacement]]\n\nComposites engineering applications<ref>{{cite web|url=http://www.lusas.com/case/composite/index.html|publisher=LUSAS website|title=Composites engineering uses}}</ref>  involve the analysis of [[composite material]] layups for potential [[delamination]], material damage and fatigue modelling of many types of components in the automotive, aviation, and marine industries.\n\n== External links ==\n*[http://www.lusas.com/ LUSAS website]\n*[http://en.structurae.de/firms/data/index.cfm?id=f003734 Structurae database]\n\n==References==\n{{Reflist|2}}\n\n{{DEFAULTSORT:Lusas}}\n[[Category:Numerical software]]\n[[Category:Finite element software]]"
    },
    {
      "title": "MEDINA",
      "url": "https://en.wikipedia.org/wiki/MEDINA",
      "text": "{{about||the city in Saudi Arabia|Medina|other uses|Medina (disambiguation)}}\n{{Multiple issues|\n{{primary sources|date=April 2011}}\n{{peacock|date=November 2011}}\n{{advert|date=November 2011}}\n}}\n\n{{Infobox OS\n|name                = MEDINA\n|screenshot          = \n|caption             = Illustration of MEDINA\n|website             = http://servicenet.t-systems.com/medina\n|developer           = [[T-Systems]]\n|source_model        = [[Closed source]] \n|latest_release_version = 9.0.1.2\n|genre = [[CAE]] software\n|marketing_target    = Simulation tasks in Automotive, Aerospace & Defence, Energy, Manufacturing Industries \n|license             = [[Proprietary software|Proprietary]] [[commercial software]]\n}}\n\n'''MEDINA''' (short for '''Model EDitor Interactive for Numerical Simulation Analysis''') is a universal pre-/postprocessor for [[finite element analysis]].<ref>{{cite web|author = T-Systems |url = https://servicenet.t-systems.de/tsi/en/290134/Home/T-Systems-PLM-en/T-Systems-PLM-Applications/Analysis-Simulation/MEDINA-PrePost/Product-Information/Download\n|title = Official Product Information about MEDINA |publisher = T-Systems International GmbH\n|accessdate = 2011-02-17}}</ref>\n<ref>{{cite journal| author= M. Westhäußer | title= Wie kann der Berechnungs-Prozess für Gesamtfahrzeuge verbessert werden?| year=2003 | journal= FEM-, CFD-, und MKS Simulation }}</ref>\nThe development of MEDINA started in the early 1990s at [[Daimler-Benz AG]] and was  proceeded at  [[debis Systemhaus]].  Since 2001 the support and the development of MEDINA takes place by [[T-Systems]] International GmbH. The current release is MEDINA Rel. 9.0.1.2<ref>{{cite web|author = T-Systems |url = http://servicenet.t-systems.de/t-systems-plm-de/fem-pre-und-postprozessing-medina-/927008 |title = FEM Pre- und Postprozessing [MEDINA]|publisher = T-Systems International GmbH |accessdate = 2017-01-08}}</ref>\n\n== Architecture and interfaces ==\nMEDINA was designed as general purpose pre-/postprocessor for various areas of finite element analysis supporting most of the common [[Computer-aided design|CAD]]-formats, solvers and operating systems.\n\n=== CAD-formats supported ===\nCurrently, the following CAD-formats are supported by MEDINA:\n* [[CATIA]]\n* [[IGES]]\n* [[JT (visualization format)|JT]]\n* [[ACIS|SAT (ACIS)]]\n* [[ISO 10303|STEP]]\n* [[STL (file format)|STL]]\n* [[VDA-FS]]\n\nFurther CAD-formats can be supported using the solution for 3D data conversion of T-Systems called [[COM/FOX]].\n\n=== FEA interfaces supported ===\nIn the current release, particularly the following solvers are supported by MEDINA:\n* [[Abaqus]]\n* [[ANSYS]]\n* AutoSEA\n* [[LS-DYNA]]\n* [[MSC Marc|Marc]]\n* [[Nastran]]\n* [[PAM-CRASH]]\n* [[PATRAN]]\n* [[CD-adapco#STAR-CD|Star-CD]]\n* SYSTUS\n* [[Universal File Format|Universal]]\n* VECTIS\n* PERMAS\n\n=== OS and hardware supported ===\nIn the current release, MEDINA is running under the following operating systems and hardware architectures:\n* [[Linux]]\n* [[Microsoft Windows]]\n\n=== FE-analysis in MEDINA ===\nParticularly, MEDINA is being used for the following tasks of FE-analysis:\n* [[Crash test|Crash simulations]];\n* durability analysis (thermal and mechanical loading);\n* [[Noise, vibration, and harshness|NVH (Noise Vibration Harshness)]];\n* simulations about [[pedestrian safety]] and [[passenger protection]].\n\nMEDINA consists of two modules: \n* a [[FEM preprocessor]] (MEDINA.Pre) and\n* a [[FEM postprocessor]] (MEDINA.Post).\n\nIn the '''preprocessor''' all steps are taken '''before''' the computation can start, i.e.:\n* Import of geometry data from CAD system;\n* Import of associated meta data from the CAD-system or [[Product data management|PDM]]-system;\n* Import of FE-models;\n* Editing and repair of CAD geometry;\n* Meshing;\n* Model structuring;\n* Definition of material parameters;\n* Definition of boundary conditions;\n* Definition of load cases;\n* Generation of the solver specific input deck.\n\nIn the '''postprocessor''' all steps are taken '''after''' the computation of the primary data of the solver is finished, e.g.:\n* Determination of the derived secondary data;\n* Illustration of the results (graphics, animations);\n* Export functionalities;\n* Generation of reports.\n\n== Characteristics ==\nMEDINA was designed to support complex simulation tasks and huge FE models—found typically in automotive and aerospace industries—with high performance.<ref>{{cite journal| author= H. Kitagawa |author2=T.B. Negretti |author3=J.P. da Silva |author4=K.C. Malavazi | title= Product Development Cycle Time Reduction through Geometry Reconstruction from a Finite Element Mesh | year=2010|\nurl= http://papers.sae.org/2010-36-0320|\njournal=[[SAE International]] Technical Papers| doi=10.4271/2010-36-0320}}</ref>\n\nImportant design elements to achieve high performance are '''parts structures''' and '''connector elements'''.\n* Parts enable a 1:1 mapping of the product structure of the CAD-/PDM-system within the FE model.\n* Connector elements are used for the generic as well as solver and client specific modeling of assembling techniques like welding, bolting, bonding.<ref>{{cite journal| author= S. Zhang | title= Simplified Spot Weld Model for NVH Simulations | year=2005|\nurl= http://papers.sae.org/2005-01-0905|\njournal=[[SAE International]] Technical Papers| doi=10.4271/2005-01-0905}}</ref>\n\nWithin the process step of the so-called \"model assembly\" the single FE-components (parts structures and connector elements) are merged to the complex comprehensive FE-model representing complex products like vehicles, aircraft, etc.\n\nSingle process steps or complete process chains can be automated by '''protocol and script techniques'''. Dynamic commands enable to integrate client specific plug-ins within the standard functionality of MEDINA.\n\n== Target groups/user groups ==\nDue to the development roots of MEDINA and the included functionalities for the analysis of huge FE-models MEDINA is a widely used pre-/postprocessor for FE analysis especially in [[automotive industry|automotive industries]].\n\nFurthermore, MEDINA is used in [[Aerospace manufacturer|aerospace]], manufacturing industries, engineering service providers and universities.\n\n== References ==\n<references />\n\n== External links ==\n* http://servicenet.t-systems.com/medina - official MEDINA web site (in English)\n\n{{DEFAULTSORT:Medina}}\n[[Category:Finite element software]]"
    },
    {
      "title": "MoFEM JosePH",
      "url": "https://en.wikipedia.org/wiki/MoFEM_JosePH",
      "text": "{{Infobox software\n| name                   = MoFEM\n| title                  = \n| logo                   = \n| screenshot             = \n| caption                = MoFEM\n| collapsible            = \n| author                 = \n| developer              = [[University of Glasgow]]\n| released               = {{Start date|2008}}\n| discontinued           = \n| latest release version = 0.6.8\n| latest release date    = <!-- {{Start date and age|YYYY|MM|DD|df=yes/no}} -->\n| latest preview version = \n| latest preview date    = <!-- {{Start date and age|YYYY|MM|DD|df=yes/no}} -->\n| frequently updated     = <!-- DO NOT include this parameter unless you know what it does -->\n| programming language   = [[C++]]\n| operating system       = [[Unix]], [[Linux]], [[OS X]]\n| platform               = \n| size                   = \n| language               = \n| status                 = \n| genre                  = \n| license                = [[LGPL]] version 2.1 or later\n| website                = {{URL|http://mofem.eng.gla.ac.uk}}\n}}\n\n'''MoFEM''' (Mesh Orientated Finite Element Method) is an open source finite element analysis code developed and maintained at the [[University of Glasgow]]. MoFEM is tailored for the solution of multi-physics problems with arbitrary levels of approximation, different levels of mesh refinement and optimised for high-performance computing. MoFEM is the blend of the [[Boost (C++ libraries)]] MultiIndex containers, MOAB (Mesh Oriented Database) and [[PETSc]] (Portable, Extensible Toolkit for Scientific Computation). MoFEM is developed in [[C++]] and it is open-source software under the GNU Lesser General Public License ([[GPL]]).\n\n== Motivation ==\n\nBuilding a scientific simulation environment for finite element methods is a complicated task. The longest part of finite element code development is in dealing with technical problems related to software implementation, rather than resolving the underlying physics that the code is intended to tackle.\n\nThe demand for accurate solutions of increasingly complicated real-world problems means that the underlying data structures also become increasingly complicated. This is particularly evident with multi-physics, hp-adaptivity, and/or evolving geometries (e.g. crack propagation). Established commercial software is often limited in this respect, or can be relatively slow to adopt new innovations. Working around these problems has been the main motivation for the development of MoFEM, recognising that it is increasingly necessary for engineers, scientists and mathematicians to carry out calculations using several mesh refinements, different approximation orders, multiple degrees of freedom and/or different scales.\n\n== History ==\n\nMoFEM evolved from YAFEMS (2008), a general and open source finite element code developed at the [[University of Glasgow]].\n\nIn 2013 YAFEMS was re-written from scratch and named MoFEM. MoFEM was initiated by two projects. [[EPSRC]] founded a project for Providing Confidence in Durable Composites (DURACOMP) <ref>[http://gow.epsrc.ac.uk/NGBOViewGrant.aspx?GrantRef=EP/K026925/1 DURACOMP project (EP/K026925/1)]</ref> in a consortium of three institutions: [[University of Warwick]], [[University of Glasgow]], [[Newcastle University]] and several industrial partners. The second project was funded by IAA-EPSRC: Simulation of fracture in nuclear graphite: from academic setting to commercial application <ref>[http://gow.epsrc.ac.uk/NGBOViewGrant.aspx?GrantRef=EP/K503903/1 IAA (EP/K503903/1)]</ref> and [[EDF Energy]].\n\n== Main features ==\n* Solves various linear and nonlinear problems from structural, thermal and fluid mechanics\n* Efficient [[parallel computing|parallel]] processing support based on [[domain decomposition]] and message passing paradigms.\n* Direct as well as iterative solvers are available. Interfaces to [[PETSc]] third party linear, nonlinear at time dependent solvers.\n* Adaptive mesh refinement base on edge based refinement algorithm<ref>[http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.42.9474&rep=rep1&type=pdf D. Ruprecht and H. Müller \"A Scheme for Edge-based Adaptive Tetrahedron Subdivision\", Springer Berlin Heidelberg, 1998.]</ref>\n* Supports hierarchical approximation basis for L2, H1, H-div and H-curl spaces <ref>M. Ainsworth and J. Coyle ''Hierarchic finite element bases on unstructured tetrahedral meshes'', Int. J. Numer. Meth. Engng 2003; 58:2103–2130 (DOI: 10.1002/nme.847)</ref>\n* Calculate [[stress intensity factor]]s and crack propagation based on configurational mechanics<ref>Ł. Kaczmarczyk, M. Mousavi Nezhad and C. Pearce, ''Three-dimensional brittle fracture: configurational-force-driven crack propagation'', Int. J. Numer. Meth. Engng 2013; (DOI: 10.1002/nme.4603)</ref>\n* Arbitrary Lagrangian Formulation with Mesh Smoothing Algorithms based on Volume-Length quality tetrahedral element measure with barrier<ref>A. Kelly, Ł. Kaczmarczyk, C. Pearce Mesh ''Improvement Methodology for 3D Volumes with Non-planar Surfaces'', Proceedings of the 21st International Meshing Roundtable, 55-69, 2013.</ref>\n\n== License ==\nMoFEM is free, open source software, released under the [[GNU Lesser General Public License]] as published by the [[Free Software Foundation]].<ref>[https://bitbucket.org/likask/mofem-joseph/wiki/Home#markdown-header-legal-stuff  MoFEM License]</ref>\n\n==References==\n{{reflist}}\n\n==External links==\n* [https://bitbucket.org/likask/mofem-joseph/wiki/Home MoFEM Bitbucket Repository]\n* [http://sigma.mcs.anl.gov/moab-library MOAB]\n\n{{Numerical analysis software}}\n{{CAE software}}\n\n[[Category:Finite element software]]\n[[Category:Scientific simulation software]]\n[[Category:Free computer-aided design software]]\n[[Category:Free software programmed in C++]]\n[[Category:Computational physics]]\n[[Category:Free science software]]\n[[Category:Finite element software for Linux]]\n[[Category:University of Glasgow]]"
    },
    {
      "title": "MSC Marc",
      "url": "https://en.wikipedia.org/wiki/MSC_Marc",
      "text": "'''MSC Marc''' is a nonlinear [[Finite element method|finite elements analysis]] [[software]] used to [[Simulation|simulate]] behavior of complex materials and interaction under large [[Plasticity (physics)|deformations]] and [[Stress (mechanics)|strains]]. It can also simulate multi-[[physics]] scenarios across structural, thermal, [[Piezoelectricity|piezoelectric]], [[Electrostatics|electrostatic]], [[Magnetostatics|magnetostatic]], and [[Electromagnetism|electromagnetic]] behaviors. It uses automatic [[Two-dimensional space|two-dimensional]] and three-[[dimension]]al remeshing to analyze structures undergoing large distortions, and crack propagation.\n\n== History ==\n\nMarc was the first commercial nonlinear finite element software developed by Marc Analysis Research Corporation founded in 1971 by Dr. Pedro Marcel. It was acquired in 1999 by MSC Software Corporation. Mentat is the dedicated pre- and post-processor used to support Marc.<ref name=\"brochure\">[http://mscdrupal.mscsoftwarecorpo.netdna-cdn.com/cdn/farfuture/rEiRe0UGeTsQEILV5KZu-24sF84j5F3bDunRYecyxQo/mtime:1378941333/sites/default/files/br_marc_ltr_w_0.pdf Marc Brochure] {{webarchive|url=https://web.archive.org/web/20150119173616/http://mscdrupal.mscsoftwarecorpo.netdna-cdn.com/cdn/farfuture/rEiRe0UGeTsQEILV5KZu-24sF84j5F3bDunRYecyxQo/mtime%3A1378941333/sites/default/files/br_marc_ltr_w_0.pdf |date=2015-01-19 }}</ref>\n\n==Introduction==\nEngineering structures and systems often use nonlinear materials and experience complex interactions between various parts. For example, the stress-strain curve of an elastomer is highly nonlinear.<ref>[http://mscdrupal.mscsoftwarecorpo.netdna-cdn.com/cdn/farfuture/TGjBPbsxO5PZ4cIoljWYi4g8FMJTb1Ag6cGGDQyH0Jg/mtime:1404846593/sites/default/files/wp_elastomer_ltr_w_0.pdf Nonlinear Finite Element Analysis of Elastomers] {{webarchive|url=https://web.archive.org/web/20150119173747/http://mscdrupal.mscsoftwarecorpo.netdna-cdn.com/cdn/farfuture/TGjBPbsxO5PZ4cIoljWYi4g8FMJTb1Ag6cGGDQyH0Jg/mtime%3A1404846593/sites/default/files/wp_elastomer_ltr_w_0.pdf |date=2015-01-19 }}</ref>  During installation, elastomeric components could fold onto themselves and could undergo buckling. Their properties change with temperature and time. These nonlinearities are often grouped into three major categories, namely geometric, material and boundary condition nonlinearities.<ref>[http://mscdrupal.mscsoftwarecorpo.netdna-cdn.com/cdn/farfuture/7Pvf5E3DZmNw3vgHtbhw9uO43c7WSVYRH8HK8Lo2iQk/mtime:1404428801/sites/default/files/wp_f-not-equal-ku_ltr_w.pdf When f≠Ku, An introductory Guide to Nonlinear Analysis] {{webarchive|url=https://web.archive.org/web/20150119173734/http://mscdrupal.mscsoftwarecorpo.netdna-cdn.com/cdn/farfuture/7Pvf5E3DZmNw3vgHtbhw9uO43c7WSVYRH8HK8Lo2iQk/mtime%3A1404428801/sites/default/files/wp_f-not-equal-ku_ltr_w.pdf |date=2015-01-19 }}</ref> Marc is used to perform Finite Element Analysis of structures accounting for all these nonlinearities, in one, two and three dimensions.\n\n== Technology ==\nMarc can be used to run various types of mechanical simulations.<ref name=\"brochure\" />\n* Linear [[statics]]\n* Linear [[Dynamics (mechanics)|dynamics]]\n* Nonlinear statics\n* Nonlinear dynamics\n*[[Buckling]]\n* Heat transfer\n*[[Diffusion]]\n* Electromagnetics\n* Electrostatics\n* Magnetostatics\n\nMarc can also simulate coupled physical phenomena like:<ref name=\"brochure\" />\n* Themomechnical\n* Electrical-Thermal-Mechanical\n* Piezoelectric\n*[[Induction heating]]\n* Thermal-Electrical (Joule heating)\n* Magnetodynamic-Thermal\n* Magnetostatic-Structural\n* Magnetostatic-Thermal\n\nVarious constitutive formulations are used during simulations to represent the behavior of materials used in the designs. Marc can be used to model materials like:<ref name=\"brochure\" />\n*[[Metal]]s, below and above [[Yield (engineering)|yield point]]\n*[[Composite material]]s\n*[[Gasket]]s\n* Thermomechanical shape memory [[alloy]]s\n*[[Soil]]s\n*[[Powder]] metals\n*[[Concrete]]\n*[[Elastomer]]s\n*[[Plastic]]s\n\n== Applications ==\nMarc is used in several industries including automotive, aerospace, machinery, electronics, biomedical, oil and gas, consumer goods and packaging, manufacturing, civil engineering and mining to solve complex nonlinear problems that involve large deformations and strains, contact interaction, damage, fracture and failure.\n<ref>[http://www.mscsoftware.com/submitted-content/Documents/7_about_us/2013_SRMv3-2_Supplemental2013.pdf Simulating Nonlinearity  Supplemental issue Summer 2013]</ref>\n\n==See also==\n* [[MSC Software]]\n\n== References ==\n{{Reflist}}\n\n==External links==\n* {{Official website|http://www.mscsoftware.com/product/marc}}\n* [http://www.mscsoftware.com MSC Software]\n* [http://simulatemore.mscsoftware.com MSC Software's Blog]\n* [https://www.youtube.com/simulatemore MSC Software's YouTube Channel]\n* [https://twitter.com/MSCSoftware MSC Software on Twitter]\n\n[[Category:Finite element software]]\n[[Category:Finite element software for Linux]]\n[[Category:Computer-aided manufacturing software]]\n[[Category:Computer-aided engineering software]]"
    },
    {
      "title": "Nastran",
      "url": "https://en.wikipedia.org/wiki/Nastran",
      "text": "{{Infobox software\n| name = Nastran\n| logo =\n| screenshot =\n| caption =\n| developer = [[MSC Software|The MacNeal-Schwendler Corporation (MSC)]]\n| latest_release_version = {{Start date and age|2014}}\n| latest_release_date =\n| operating_system = [[Cross-platform]]\n| genre = [[Finite Element Analysis]] Simulator\n| license = [[Proprietary software|Proprietary]] [[EULA]]\n| website = {{URL|www.mscsoftware.com/product/msc-nastran}}\n}}\n'''NASTRAN''' is a [[finite element analysis]] (FEA) program that was originally developed for [[NASA]] in the late 1960s under United States government funding for the aerospace industry. [[MSC Software|The MacNeal-Schwendler Corporation (MSC)]] was one of the principal and original developers of the [[Source-available |publicly available]] NASTRAN code.<ref name=\"sourceavailable1\"/><ref name=\"sourceavailable2\"/> NASTRAN [[source code]] is integrated in a number of different software packages, which are distributed by a range of companies.\n\n== History ==\n\nThe 1964 annual review of [[NASA]]'s structural dynamics research program revealed that the research centers were separately developing [[structural analysis]] software that was specific to their own needs. The review recommended that a single generic software program should be used instead.<ref name=\"dryden story\">http://www.nasa.gov/centers/dryden/news/X-Press/stories/2008/10_08_technology.html \"NASA Press Release 2008\"</ref> In response, an ad hoc committee was formed. The committee determined that no existing software could meet their requirements. They suggested establishing a cooperative project to develop this software and created a specification that outlined the capabilities for the software.<ref>MacNeal, Richard H., page i., \"The NASTRAN Theoretical Manual\", December 1972</ref>\n\nA contract was awarded to [[Computer Sciences Corporation]] (CSC) to develop the software. The first name used for the program during its development in the 1960s was GPSA an acronym for General Purpose Structural Analysis.  The eventual formal name approved by NASA for the program, NASTRAN, is an acronym formed from '''NA'''SA '''STR'''ucture '''AN'''alysis. The NASTRAN system was released to NASA in 1968. In the late 1960s, the [[MSC Software|MacNeal-Schwendler Corporation]] (MSC) started to market and support its own version of NASTRAN, called MSC/NASTRAN (which eventually became MSC.Nastran). The original software architecture was developed by Joe Mule (NASA) and Gerald Sandler (NASA), and Stephen Burns (University of Rochester).\n\nNASTRAN software application was written to help design more efficient space vehicles such as the Space Shuttle. NASTRAN was released to the public in 1971 by NASA’s Office of Technology Utilization. The commercial use of NASTRAN has helped to analyze the behavior of elastic structures of any size, shape, or purpose. For example, the automotive industry uses the program to design front suspension systems and steering linkages. It is also used in designing railroad tracks and cars, bridges, power plants, skyscrapers, and aircraft. The program alone was estimated to have returned $701 million in cost savings from 1971 to 1984. NASTRAN was inducted into the U.S. Space Foundation’s [[Space Technology Hall of Fame]] in 1988, one of the first technologies to receive this prestigious honor.<ref>http://www.sti.nasa.gov/tto/spinoff2002/goddard.html \"NASA Spinoff Magazine 2002\"</ref>\n\nThe NASTRAN program has evolved over many versions. Each new version contains enhancements in analysis capability and numerical performance. Today, NASTRAN is widely used throughout the world in the aerospace, automotive and maritime industries. It has been claimed<ref name=\"dryden story\" /> that NASTRAN is the industry standard for basic types of analysis for aerospace structures, e.g. linear elastic static and dynamic analyses.\n\nIn 2001 the NASA released with the \"NASA Classics\" package also the NASTRAN [[source code]] to the public via [[Open Channel Software]] for fees.<ref name=\"sourceavailable1\">[https://web.archive.org/web/20011103023757/http://www.newsbytes.com/news/01/171514.html NASA Releases Classic Software To Public Domain] on newsbytes.com by Susan M (25 Oct 2001)</ref><ref>[https://developers.slashdot.org/story/01/10/26/1354241/nasa-releases-classic-software-to-public-domain nasa-releases-classic-software-to-public-domain] on [[slashdot.com]] (2001)</ref><ref name=\"sourceavailable2\">[http://www.openchannelsoftware.com/NASA_1.html NTTC, OSC Celebrate Space Agency's Birthday, Launch \"NASA CLASSICS\" Software Apps to Commercial Markets] {{webarchive|url=https://web.archive.org/web/20160516224353/http://www.openchannelsoftware.com/NASA_1.html |date=2016-05-16 }} on openchannelsoftware.com (2001)</ref>\n\nIn November 2002 [[MSC Software]] reached a final agreement with the [[Federal Trade Commission|FTC]] to resolve an antitrust case against the company in connection with two acquisitions of rival CAE vendors, Universal Analytics, Inc. (UAI) and Computerized Structural Analysis & Research Corp. (CSAR). The FTC had alleged the acquisitions represented anticompetitive activities. Under the terms of the settlement, MSC divested a clone copy of its current Nastran software. The divestiture was through royalty-free, perpetual, non-exclusive licenses to [[UGS Corporation]].  UGS Corporation was acquired by Siemens in 2007.<ref>[[UGS Corp]]</ref>\n\nCommercial versions of NASTRAN are currently available from [[MSC Software]] (MSC Nastran), [[NEi Software]] ([[NEi Nastran]]) and [[Siemens PLM Software]] (NX Nastran).<ref>http://www.deskeng.com/articles/aaaxdw.htm \"Review of Current Nastran Options</ref> Siemens AG purchased the former UGS Corporation from private equity concerns and their rights to the commercial version of NX NASTRAN in 2006. Autodesk purchased NEi Software in May 2014.\n\n== Software architecture ==\n\nNASTRAN is written primarily in [[FORTRAN]] and contains over one million lines of code. NASTRAN is compatible with a large variety of computers and [[operating systems]] ranging from small [[workstations]] to the largest [[supercomputers]].\n\nNASTRAN was designed from the beginning to consist of several modules. A module is a collection of FORTRAN subroutines designed to perform a specific task&mdash;processing model geometry, assembling matrices, applying constraints, solving matrix problems, calculating output quantities, conversing with the database, printing the solution, and so on. The modules are controlled by an internal language called the Direct Matrix Abstraction Program (DMAP).\n\nEach type of analysis available is called a solution sequence.\n\nSome of the most common solution sequence codes are:\n* 101 - Linear Static\n* 103 - Modal\n* 105 - Buckling\n* 106 - Non-Linear Static\n* 107 - Direct Complex Eigenvalue\n* 108 - Direct Frequency Response\n* 109 - Direct Transient Response\n* 110 - Modal Complex Eigenvalue\n* 111 - Modal Frequency Response\n* 112 - Modal Transient Response\n* 129 - Nonlinear Transient\n* 144 - Static Aeroelastic Analysis\n* 145 - Flutter / Aeroservoelastic analysis\n* 146 - Dynamic Aeroelastic Analysis\n* 153 - Non-Linear static coupled with heat transfer\n* 159 - Nonlinear Transient coupled with Heat transfer\n* 187 - Dynamic Design Analysis Method\n* 200 - Design Optimization and Sensitivity analysis\n* 400 - Non-Linear Static and Dynamic (implicit) (MSC.NASTRAN native, supersedes 106, 129, 153 and 159 - part of MSC.NASTRAN)\n* 600 - Non-Linear Static and Dynamic (implicit) (front end to MSC.Marc - part of MSC.NASTRAN)\n* 601 - Implicit Non-Linear ([[ADINA]] for NX Nastran)\n* 700 - Explicit Non-Linear (LS Dyna plus MSC.Dytran - part of MSC.NASTRAN)\n* 701 - Explicit Non-Linear ([[ADINA]] for NX Nastran)\n[[Image:Modelo-Nastran.jpg|thumb|Example of MSC.Nastran analysis model]]\n\n== Associated Software ==\n\nNASTRAN is primarily a solver for [[finite element analysis]].<ref>http://www.ftc.gov/opa/2001/10/msc.shtm \"FTC Press Release: ''FTC Challenges MSC.Software's Acquisitions of Its Two Nastran Competitors''. October 2001</ref> It does not have functionality that allows for graphically building a model or meshing. All input and output to the program is in the form of text files. However, multiple software vendors market pre- and post-processors designed to simplify building a finite element model and analyzing the results. These software tools include functionality to import and simplify [[Computer-aided design|CAD]] geometry, mesh with [[finite elements]], and apply loads and restraints. The tools allow the user to submit an analysis to NASTRAN, and import the results and show them graphically. In addition to pre- and post-processing capabilities, several Nastran vendors have integrated more advanced nonlinear capabilities into their Nastran products.\n\n== NASTRAN Options ==\n\nThe following software options, based on NASTRAN original source code are available:\n* MSC Nastran\n* NASTRAN-xMG (acquired by [[MSC Software]])\n* [[NEi Nastran]] (A PC/Linux-based version of the original NASTRAN source code)\n* NX Nastran (acquired by [[Siemens PLM Software]] re-branded to [[Siemens NX|Siemens NX (Unigraphics)]])\n* Nastran distributed by the Open Channel Foundation\n\n=== MSC Nastran ===\n\nMSC Nastran is the original commercial Nastran product started by Dr. Richard MacNeal in 1963. MSC Nastran is commonly utilized for performing structural analysis.  Although utilized in every industry, it maintains a strong following in aerospace and automotive industries for performing computational stress and strain analysis of component and system level models of structures.  Since 1963, MSC Nastran has continued to evolve and extend capabilities to dynamics, rotordynamics, nonlinear, thermal, high impact, NVH, fluid structural interactive and fatigue analysis.  Today it couples with [[MSC Marc]] and LS-Dyna to provide highly nonlinear coupled analysis solutions.\n\n=== NASTRAN-xMG ===\n\nBuilt from the same base code as the original NASTRAN software created by NASA that includes the original NASTRAN architecture and DMAP language, NASTRAN-xMG provides unlimited problem size, high-speed solver technology, and substructuring analysis options. The principal founder of the company is Dr. Richard H. MacNeal.<ref>http://www.macnealgroup.com/www/products/ \"tMG Nastran-xMG\"</ref>\n\n=== NEi Nastran ===\n\n[[NEi Nastran]] is a general purpose finite element analysis solver used to analyze linear and nonlinear stress, dynamics, and heat transfer characteristics of structures and mechanical components. It is available on a variety of platforms including 32/64-bit Windows and Linux.<ref>http://www.nenastran.com/nei-nastran.php \"NEi Software NEi Nastran\"</ref>\nThis software was acquired by [[Autodesk]] in May 2014.\n<ref>http://www.3dcadworld.com/autodesk-acquires-nei-nastran-solver/ \"AUTODESK ACQUIRES NEI NASTRAN SOLVER\"</ref>\n\n=== NX Nastran ===\nNX Nastran resulted from an FTC action against MSC Corporation for alleged antitrust activity. The antitrust settlement allowed the 2003 purchase of a royalty-free, perpetual license for the MSC.Nastran 2001 source code by [[UGS Corp.|UGS]]. UGS was previously the [[Unigraphics]] division of [[Electronic Data Systems|EDS]]. Nastran's [[Computer-aided engineering|CAE]] capabilities were added to [[Unigraphics|NX Unigraphics']] [[Computer-aided design|CAD]] and other components to form the ''EDS/UGS PLM Solutions'' [[product life-cycle management]] suite.  This product line was acquired by [[Siemens AG|SIEMENS]] in 2007 and became ''[[Siemens PLM Software|SIEMENS PLM Software]]''.\n\nThe purchase included a perpetual, worldwide, free of [[royalties]], nonexclusive license of the software program MSC.Nastran v2001, other assets related to the software, and all [[copyright]] and [[trademark]] rights acquired as a result of MSC's acquisitions of Universal Analytics Inc. and Computerized Structural Analysis & Research Corp. in 1999.<ref>http://www.ftc.gov/opa/2002/08/mscsoftware.shtm \"FTC Press Release: MSC''.Software Settles FTC Charges by Divesting Nastran Software''. August 2002\"</ref>\n\nNX Nastran is now part of Siemens PLM Software's Simcenter 3D product portfolio.\n\n=== OCF Nastran ===\nBoth source and binary copies of Nastran are available from the Open Channel Foundation for an annual license fee. This was part of the NASA COSMIC Collection distribution from the [https://web.archive.org/web/20100629121432/http://www.nttc.edu/ National Technology Transfer Center]. It was published in June 2015 on github.\n\n===Off-shoots===\nThe success of NASTRAN led to development of many other finite element software. One such software is ASTROS that extended NASTRAN type capability to include structural optimization. Currently ASTROS is maintained by Zona Technology, Inc.<ref>http://www.zonatech.com/Products.htm</ref>\n\n=== Competition ===\nCurrently there are numerous commercially available FEA products, some of them being able to read the NASTRAN input format although not bearing the name NASTRAN. Many of them are listed on the [[List of finite element software packages]], [[Computer-aided engineering|CAE]], and [[Finite element method|FEA]] pages (see categories below).\n\n== See also ==\n*[[MSC Software]]\n*[[NEi Nastran]]\n\n== References ==\n{{reflist|30em}}\n\n== External links ==\n* [http://www.mscsoftware.com/product/msc-nastran MSC Nastran] at MSC Software\n{{CAE software}}\n\n[[Category:Computer-aided design software]]\n[[Category:Finite element software]]\n[[Category:Finite element software for Linux]]"
    },
    {
      "title": "NEi Fusion",
      "url": "https://en.wikipedia.org/wiki/NEi_Fusion",
      "text": "{{Infobox software\n| name = NEi Fusion\n| screenshot = NEi Fusion image servo motor FEA and CAD 1000px.JPG\n| caption = Servo Motor with In-Flight Loading Modeled in NEi Fusion with NEi Nastran\n| developer = [[NEi Software]]\n| latest_release_version =\n| latest_release_date =\n| operating_system = [[Windows XP]], [[Windows Vista]]\n| genre = [[Computer aided engineering]]\n| license =\n| website = {{URL|www.NEiSoftware.com}}\n}}\n\n'''NEi Fusion''' is a [[finite element analysis]] program sold by [[NEi Software]] that is used by engineers to build and analyze [[3D models]] of parts and assemblies of various products. NEi Fusion digital-simulation software virtually applies forces, pressures, vibration, acceleration loads, or thermal conditions to 3D models of parts, structures, and assemblies. It obtains results of various engineering parameters, such as deformation, stresses, strains, temperature distributions, and modal shapes the design would experience if implemented.  The results, which range from tables of data to [[contour plot]]s and animations, provide engineering insight. For example, result visualizations like color-coded, contour plots can help deepen understanding of physical phenomena in complex geometry.  NEi Fusion consists of a 3D parametric CAD modeler powered by [[SolidWorks]] with [[NEi Nastran]] finite element analysis solvers.  NEi Fusion runs on [[Microsoft Windows]] and provides [[Computer-aided design|CAD]] modeling, import and meshing tools.\n\n==Applications==\n[[Finite element analysis]] software is typically used to improve the engineering design process by identifying potential problem areas, reducing development man-hours by eliminating portions of costly prototyping and testing. It can spur innovation by allowing a way to evaluate different designs and materials, and providing a tool for optimizing designs early in the development cycle.\n\n==Present day==\nNEi Fusion 2.1, was released in February 2010. It now includes the following enhancements: <ref>[http://www.nenastran.com/newnoran/neiFusion \"NEi Fusion\"], www.nenastran.com, May 2012.</ref>\n* Thermal stress\n* Nonlinear transient response\n* Variable loading\n* XY plot enhancements\n* Beam/Bar enhancements\n* Automated bolted joints\n* Failure theories\n* Tree simplification enhancement\n* Multi-surface contact surface selection.\n\n==References==\n{{Reflist}}\n; Sources\n*Dean, Al. (April 1, 2009), \"Review of Product Development Technology: NEi Fusion\", ''DEVELOP3D'' magazine, April 1, 2009.\n*''Design News'' Staff. \"Best Product Winners\", ''Design News'' magazine, September 24, 2007.\n*Cover image, ''NASA Tech Briefs'' magazine, February 2007.\n\n==External links==\n* [http://www.nenastran.com/engineeringsoftware/nei-fusion.php NEi Fusion] at NEnastran.com\n\n{{DEFAULTSORT:Nei Fusion}}\n[[Category:Finite element software]]"
    },
    {
      "title": "NEi Nastran",
      "url": "https://en.wikipedia.org/wiki/NEi_Nastran",
      "text": "{{Infobox Software\n|name = NEi Software Products\n|screenshot = Spaceshipone-motor-bulkhead.jpg\n|caption = SpaceShipOne motor bulkhead analyzed in NEi Nastran\n|developer = [[NEi Software]]\n|latest_release_version = V10.2\n|latest_release_date = 2013\n|operating_system = [[Microsoft Windows|Windows XP]], [[Linux]]\n|genre = [[Computer aided engineering|Computer Aided Engineering (CAE)]] software\n|license = \n|website = [http://www.nenastran.com/ www.NEiSoftware.com]\n}} \n[[Image:Noraneng.JPG|thumb|Example of NEi Nastran analysis result.]]\n\n'''NEi Nastran''' was an engineering analysis and simulation software product of [[NEi Software]] (formerly known as Noran Engineering, Inc.)  Based on [[NASA]]'s Structural Analysis program [[NASTRAN]], the software is a [[Finite element method|finite element analysis]] (FEA) solver used to generate solutions for linear and nonlinear stress, dynamics, and heat transfer characteristics of structures and mechanical components.  NEi Nastran  software is used with all major industry pre and post processors including [[Femap]], a product of Siemens PLM Software, in house brands [http://www.nenastran.com/engineeringsoftware/neinastran-incad.php NEi Nastran in-CAD], [[NEi Fusion]],  and NEi Works for [[SolidWorks]].<ref name=DesignWorld>{{citation\n | author = Design World Staff\n | title = Analysis and Simulation Create Virtual Product Testing\n | journal = Design World\n | date = March 11, 2008  \n | url = http://www.designworldonline.com/articles/1584/244/Analysis-and-Simulation-Create-Virtual-Product-Testing.aspx\n}}</ref>\nThis software was acquired by [[Autodesk]] in May 2014.\n<ref>http://www.3dcadworld.com/autodesk-acquires-nei-nastran-solver/ \"AUTODESK ACQUIRES NEI NASTRAN SOLVER\"</ref>\n\n==History==\n{{main|NASTRAN}}\nThe original [[NASTRAN]] program came out of NASA’s need to develop a common generic structural analysis program that would be used by all of the centers supporting the space program.<ref name=NASA>{{citation\n | title = NASA Technology\n | journal = Www.nasa.gov\n | date = October 21, 2008  \n | url = http://www.nasa.gov/centers/dryden/news/X-Press/stories/2008/10_08_technology.html\n}}</ref> A specification was written and a contract was awarded to Computer Sciences Corporation for development of NAsa STRuctural ANalysis (NASTRAN) software. NASTRAN was released to NASA in 1968.\n\n==Improvements==\n{{main|Finite element analysis }}\nIn the late 1960s, Finite Element Analysis software was confined to run on expensive mainframe computers and highly trained specialists were needed to apply the program. In this environment, the aerospace industry was the typical user because they had critical projects which could justify the resources FEA demanded. With improvements to the software and wider use of mainframes, FEA technology gradually spread to large corporations that could afford funding the huge investment in hardware, software, and a dedicated FEA staff.  Usage spread from primarily aerospace and military applications to the automobile and maritime industries.\n\nThe microprocessor revolution and the advent of Personal Computers (PCs) in the 1980s brought tremendous improvements in computing power, significant reductions in computing costs, and the steady development of numerical methods and algorithms. In the mid 1980s, Noran Engineering recognized the long term advantages and impact that the PC hardware revolution could have on the engineering analysis field and embarked on a project to significantly enhance and modernize the original NASTRAN code and port it to PCs.\n\nThe first commercial version of NEi Nastran for use on PCs was released in 1990. The new code had a number of changes in architecture and programming language compared to legacy Nastran written originally for mainframes. These differences were intended to take advantage of the dramatic changes in computer hardware taking place and provide the code with key strategic advantages for the new PC platform.<ref name=Livingstone>{{citation\n | author = Livingstone, Paul\n | title = Tying It All Together\n | journal = R&D Magazine\n | date = August 17, 2009\n | url = http://www.rdmag.com/Featured-Articles/2009/08/Tying-It-All-Together/\n}}</ref> For example, since the cost of memory was dramatically reduced it was feasible to perform many operations faster in memory that normally were only done on disk.\n\n==Present day==\n<!-- Deleted image removed: [[Image:Noran2.jpg|thumb|NEi Nastran Screenshot]] -->\n\nNEi Nastran V10.0 was released in May 2010. It incorporates over 85 customer driven enhancements including the following additions: nonlinear composite Progressive Ply Failure Analysis (PPFA), concrete material model, direct enforced motion, bolt preload, enhanced rigid element features, visualization support for various entities, automatic dynamic plots during nonlinear analysis, transparent max/min, and a new look and feel for its Editor tool.<ref name=Wong>{{citation\n | author = Wong, Kenneth\n | title = Looking Under the Hood of FEA Results with NEi Editor\n | journal = Desktop Engineering\n | date = June 24, 2010\n | url = http://www.deskeng.com/virtual_desktop/?p=1992\n}}</ref>\n\nSince August 2014, the NEi Nastran technology is included in \"Autodesk Nastran 2015\", \"Autodesk Nastran In-CAD 2015\" and \"Autodesk Simulation Mechanical 2015 R1\".\n\n== External links ==\n*[https://web.archive.org/web/20080913182909/http://www.nenastran.com/ NEi Software]\n*[http://www.eng-tips.com/threadminder.cfm?pid=825 NEi Nastran] on [[Eng-Tips forum]]\n*[http://www.nasa.gov/pdf/618006main_TechUp2011sprd.pdf NASA/ NEi Nastran]\n\n==References==\n{{reflist}}\n\n{{CAE software}}\n\n{{DEFAULTSORT:Nei Nastran}}\n[[Category:Finite element software]]\n[[Category:Simulation software]]\n[[Category:Finite element software for Linux]]"
    },
    {
      "title": "OOFEM",
      "url": "https://en.wikipedia.org/wiki/OOFEM",
      "text": "{{multiple issues|\n{{refimprove|date=August 2012}}\n{{Notability|Products|date=May 2012}}\n}}\n\n{{Infobox software\n|name                       = OOFEM\n|author                     = Bořek Patzák\n|latest release version     = 2.4\n|latest release date        = {{Start date|2016|02|15|}}\n|operating system           = [[Unix]], [[Windows]]\n|genre                      = [[Finite element analysis]]\n|license                    = [[GNU Lesser General Public Licence|LGPL]]\n|website                    = {{URL|oofem.org/}}\n}}\n\n'''OOFEM''' is a [[free and open-source]] multi-physics [[finite element analysis|finite element]] code with [[object oriented]] architecture.<ref>B. Patzák and Z. Bittnar: Design of object oriented finite element code, Advances in Engineering Software, 32(10-11), 759-767, 2001</ref> The aim of this project is to provide efficient and robust tool for FEM computations as well as to offer highly modular and extensible environment for development.<ref>OOFEM project website at [http://www.oofem.org www.oofem.org]</ref>\n\n== Main features ==\n* Solves various linear and nonlinear problems from structural, thermal and fluid mechanics.<ref>OOFEM Features, http://www.oofem.org/en/features/features.html</ref>\n* Particularly includes many material models for nonlinear fracture mechanics of quasibrittle materials, such as concrete.<ref>OOFEM Material Library Manual, http://www.oofem.org/en/documentation/manual.html</ref><ref>B. Patzák and M. Jirásek. Adaptive resolution of localized damage in quasibrittle materials. Journal of Engineering Mechanics Division ASCE, 130:720--732, 2004.</ref>\n* Efficient [[parallel computing|parallel]] processing support based on [[domain decomposition]] and message passing paradigms.<ref>B. Patzák and D. Rypl. Object-oriented, parallel finite element framework with dynamic load balancing. Advances in Engineering Software, 47(1):35 -- 50, 2012.</ref>\n* Direct as well as iterative solvers are available. Direct solvers include symmetric and unsymmetric skyline solver and sparse direct solver. Iterative solvers support many sparse storage formats and come with various preconditioners.<ref>OOFEM Input Manual, http://www.oofem.org/en/documentation/manual.html</ref> Interfaces to third party linear and eigen value solver libraries are available, including IML,<ref>Template library for numerical iterative methods, http://math.nist.gov/iml++/</ref> [[PETSc]], SLEPc,<ref>Scalable Library for Eigenvalue Problem Computations, http://www.grycap.upv.es/slepc/</ref> and SPOOLES.<ref>SParse Object Oriented Linear Equations Solver, http://www.netlib.org/linalg/spooles/spooles.2.2.html</ref>\n* Support for [[Extended finite element method|eXtented Finite Elements (XFEM)]]<ref>R. Chamrová and B. Patzák: Object-oriented programming and the extended finite-element method. Engineering and Computational Mechanics, 163(EM4):271--278, 2010.</ref> and [[isogeometric analysis|iso-geometric analysis (IGA)]].<ref>D. Rypl and B. Patzák: From the finite element analysis to the isogeometric analysis in an object oriented computing environment, Advances in Engineering Software, 44(1):116 -- 125, 2012. doi:10.1016/j.advengsoft.2011.05.032.</ref>\n\n== License ==\nOOFEM is free, open source software, released under the [[GNU Lesser General Public License]] version 2.1 on any later version<ref>[http://www.oofem.org/en/license/license.html OOFEM License]</ref>\n\n== See also ==\n* [[List of numerical analysis software]]\n* [[List of finite element software packages]]\n\n== References ==\n{{Reflist}}\n\n==External links==\n* [http://www.oofem.org Project website]\n\n==Community resources==\n\n* OOFEM [http://www.oofem.org/forum forum]\n* OOFEM [http://www.oofem.org/wiki wiki]\n\n[[Category:Finite element software]]\n[[Category:Scientific simulation software]]\n[[Category:Free computer-aided design software]]\n[[Category:Free software programmed in C++]]\n[[Category:Finite element software for Linux]]"
    },
    {
      "title": "Pam-Crash",
      "url": "https://en.wikipedia.org/wiki/Pam-Crash",
      "text": "'''Pam-Crash''' is a software package from [[ESI Group]] used for [[crash simulation]] and the design of occupant safety systems, primarily in the automotive industry. The software enables [[Automotive engineering|automotive engineers]] to simulate the performance of a proposed vehicle design and evaluate the potential for injury to occupants in multiple crash scenarios.\n\n==History==\n\nThe software originated in research aimed at simulating aerospace and nuclear applications.  At a meeting organized by VDI ([[Verein Deutscher Ingenieure]]) in Stuttgart on May 30, 1978,  [[ESI Group]] simulated the accidental crash of a military fighter plane into a nuclear power plant <ref>E. Haug. (1981) \"Engineering safety analysis via destructive numerical experiments\", EUROMECH 121, Polish Academy of Sciences, ''Engineering Transactions'' 29(1), 39–49.</ref>  German automobile manufacturers took note and tested the applicability of several emerging commercial crash simulation codes, including what would soon become Pam-Crash. This software's predecessor code simulated the frontal impact of a full passenger car structure in an overnight computer run. This was the first successful full-car crash simulation.<ref>E. Haug, T. Scharnhorst, P. Du Bois (1986) \"FEM-Crash, Berechnung eines Fahrzeugfrontalaufpralls\", ''VDI Berichte'' 613, 479–505.</ref>  \n\nBased on [[Finite element method]] (FEM), the software enables the modeling of complex geometry by offering different structural and continuum elements: beams, shells, membranes and solids. In a typical crash simulation, shells are used to model thin-walled metal,plastic and composite components. Beams and bars may also be used for stiffening frames, suspensions and special connections. The program offers a large range of linear and nonlinear materials including elastic and visco-plastic and including foam materials and multi-layers composites up to damage and failure models.<ref>Eric Mestreau, Rainald Lohner. “Airbag Simulation Using Fluid/Structure Coupling.” 34th Aerospace Sciences Meeting & Exhibit, Reno, NV, January 15–18, 1996.</ref> It was used in the first numerical simulation of a full vehicle rollover by [[BMW]] AG (Bayerische Motoren Werke AG). The program provided accurate determination of the structural deformations while the computationally economical rigid body simulation was used during the relatively unimportant deformation and free-flight phases of the simulation.<ref>A.K. Pickett, H.G. Hoeck, A. Poth and W. Sehrepfer, “Crashworthiness analysis of a full automotive rollover test using a mixed rigid body and explicit finite element approach.” ''VDI Berichte'' 816, p 167-179.</ref>  \n\nPAM-CRASH is used on High Performance Computers including massively parallel systems. One of the most time-critical aspects of parallel simulation is the contact handling. Results with a 128-processor computer demonstrated that a contact search algorithm leads to a better scalability.<ref>Jan Clinckemaillie, Hans-Georg Galbas, Otto Kolp, Clemens August Thole and Stefanos Vlachoutsis. “[http://www.springerlink.com/content/f1qaphdyrnc3q8yj/ High Scalability of Parallel PAM-CRASH with a New Contact Search Algorithm].” ''Lecture Notes in Computer Science''. 2010 Volume 1823.</ref> Engineers utilize crash simulation not only to determine the end result of the crash but also to view the step by step time history. Observing factors such as how the bumper is folded in the impact and what is the effect of rib thickness on body deformation in the initial stages of the simulation gives insights that improve crashworthiness of the design.<ref>L. Durrenberger, D. Even, A. Molinari1 and A. Rusinek. “Influence of the strain path on crash properties of a crash-box structure by experimental and numerical approaches.” ''J. Phys''. IV France 134 (2006) 1287-1293.</ref> \n\n''Desktop Engineering'' magazine, in its review of ESI Group’s Virtual Performance Solution, which includes this software, said: “You work across multiple analysis domains with a single core model—not different models for every load case. This streamlines your workflow, saving time and money by reducing the number of individual solvers you have to deploy and all that model re-creation business.”<ref>Anthony J. Lockwood, “Editor's Pick: ESI Releases Virtual Performance Solution 2010.” ''Desktop Engineering''. July 2010.</ref>\n\n==Applications==\n\nPam-Crash was used to design a steel floor pan structure to meet torsion and bending stiffness requirements  while reducing its weight by 50% and the number of parts by 70%.<ref>M. Carrera, J. Cuartero, A. Miravete, J. Jergeus, Kaj Fredin. “[http://www.inderscience.com/search/index.php?action=record&rec_id=13643 Crash behavior of a carbon fiber floor panel].” ''International Journal of Vehicle Design''. Volume 44, Number 3-4 / 2007, Pages: 268 – 281.</ref>\n\nIn a different application, the software was dynamically coupled to the occupant safety program [[MADYMO]]. The study investigated the interaction of a [[Hybrid III]] crash dummy and a passive restraint system of an airbag and  kneebolster in  a frontal impact situation. Good agreement with experimental data was obtained.<ref>Rainer Hoffman, Dirk Ulrich, Jean-Baptiste Protard, Harald Wester, Norbert Jaehn, Thomas Scharnhorst. „Finite Element Analysis of Occupant Restraint System Interaction with PAM-CRASH.” 34th Stapp Car Crash Conference, Orlando, Florida, November 4–7, 1990.</ref>   \n\nResearchers at the [[University of North Carolina]] and [[Mississippi State University]] simulated crash scenarios on a [[Chrysler Neon]] passenger vehicle using this program and [[LS-DYNA]], another crash simulation code. The test data and simulation results correlated very well with only minor discrepancies in terms of overall impact deformation, component failure modes and velocity and acceleration at various locations on the vehicle.<ref>K. Solanki, D.L. Oglesby, C.L. Burton, H. Fang, M.F. Horstemeyer. “[http://trid.trb.org/view.aspx?id=742820 Crashworthiness Simulations Comparing Pam-Crash and LS-DYNA in CAE Methods for Vehicle Crashworthiness and Occupant Safety and Safety-Critical Systems].” Society of Automotive Engineers. 2004.</ref>\n\nThe software was used to evaluate safety issues at the Beryl Bravo offshore platform in the North Sea operated by [[ExxonMobil]]. It was used to perform numerical simulations of the dynamic response of the structure subjected to explosion scenarios. The program's computational models agreed with experimental results and were used to guide the process of designing new blast walls.<ref>P.H.L. Groenenboom, P.J. van der Weijde, D.N. Gailbraith, P. Jay. “Virtual Predictive Testing and Virtual Prototyping in Safety Engineering.” 5th International Conference on Offshore Structures – Hazards & Integrity Management, London 1996.</ref> \n\nThe program is used by automobile manufacturers to improve their rankings in New Car Assessment Programs (NCAPs) used to assess the safety performance of competing automobile models. These programs include the Euro NCAP and Japan NCAP as well as a similar rating system provided by the [[National Highway Traffic Safety Administration]] (NHTSA).<ref>Philipp Spethmann, Cornelius Herstatt, Stefan H. Thomke. “Crash simulation evolution and its impact on R&D in the automotive applications.” ''International Journal of Product Development''. Volume 8,  Number 3 / 2009.</ref>\n\n== References ==\n<!--- See http://en.wikipedia.org/wiki/Wikipedia:Footnotes on how to create references using <ref></ref> tags which will then appear here automatically -->\n{{Reflist}}\n\n\n\n[[Category:Automotive safety]]\n[[Category:Finite element software]]"
    },
    {
      "title": "PLate OPtimizer",
      "url": "https://en.wikipedia.org/wiki/PLate_OPtimizer",
      "text": "{{about|the CAD program, PLOP|the computer language conference group, PLoP|Pattern Languages of Programs}}\n\n'''PLate OPtimizer''', or '''PLOP''' is a [[CAD program]] used by [[Amateur telescope making|amateur telescope makers]] to design [[primary mirror]] [[Mirror support cell|support cells]] for [[reflecting telescope]]s. It was developed by [[telescope]] maker David Lewis, first described in 1999,<ref>{{Cite journal| title = Cures for Unsupportive Mirror Cells| last = Lewis| first = David| journal = Sky & Telescope| volume = | issue = June| pages = 132–135| date = 1999 }}</ref> and used to simplify calculations needed in the design of mirror support cells.<ref>{{cite web| last = Holm| first = Mark| title = Mirror Cells for Amateur Telescope Makers| work = | publisher = | date = | url = http://www.atmsite.org/contrib/Holm/Plop_optimized_cells/index.html| doi = | accessdate = May 3, 2009 }}\n</ref>  It was based on Toshimi Taki's 1993 program PLATE,<ref>http://www.asahi-net.or.jp/~zs3t-tk/cell/cell.htm Taki's brief intro to cell design</ref> with a simplified user interface, thus giving it wide acceptance among makers of large [[Dobsonian]] style amateur telescopes, with good support of mirrors as thin as two inches for a diameter of thirty inches.<ref>{{cite web| last = Anderson-Lee\n  | first = Jeff| title = Best of 18 and Over - A collection of plop cell designs\n  | work = | publisher = | date = | url = http://www.cs.berkeley.edu/~jonah/18plus/| format =| doi = | accessdate = May 3, 2009}}</ref>\n\n==Comparisons and limitations==\nA basic mirror cell may be built using minimal calculation and simple materials such as wood and outdoor carpet, with a good example being [[John Dobson (astronomer)|Dobson's]] original telescopes. However, as amateurs sought to build larger and thinner mirrors, they found such designs inadequate.\n\nMany amateur telescope makers use cells which are designed via [[equal area rule]] calculation, using programs such as David Chandler's [[public domain]] program, ''Cell''.<ref>{{Cite web| last = Chandler| first = David| title = Floatation Mirror Cell Design| url = http://www.davidchandler.com/cell.htm| accessdate = 2009-06-21| deadurl = yes| archiveurl = https://web.archive.org/web/20090817122733/http://www.davidchandler.com/cell.htm| archivedate = 2009-08-17| df = }}</ref> However, such calculation does not account for mechanical stresses introduced in one part of a telescope mirror by another part, whereas [[finite element analysis]] can be used to reduce such [[Yield (engineering)|stress]]. Although general finite element analysis programs such as [[Nastran]] will work for mirror cells, an advantage of PLOP is that it can be set to ignore [[Deformation (engineering)|deformation]] that merely results in refocus of a mirror's [[parabola]].<ref>[http://www.atmsite.org/contrib/Holm/Plop_optimized_cells/cellfaq.html#old Atmsite PLOP FAQ]</ref> PLOP can be used to calculate floating support points for a mirror's [[Optical axis|axial]] (rear) support; however, additional tools are needed to calculate potential error from a mirror's lateral (edge) support.<ref>http://www.cruxis.com/scope/mirroredgecalculator.htm ''Cruxis'' site mirror edge support calculator tool</ref>\n\nMirror cell calculations, whether using PLOP or another program, do not overcome errors introduced by gluing the mirror to its cell, excessive tightening of edge supports, nor impingement of the cell structure onto the mirror as result of differential cooling shrinkage. The significantly more complex calculations arising from the support needs of large [[honeycomb mirror]]s and those using [[active optics]] systems are outside the design parameters of such programs.<ref>{{cite web |url=http://medusa.as.arizona.edu/lbto/tech/ua9502.htm |title=Archived copy |accessdate=2009-11-20 |deadurl=yes |archiveurl=https://web.archive.org/web/20100703082028/http://medusa.as.arizona.edu/lbto/tech/ua9502.htm |archivedate=2010-07-03 |df= }} Mirror Support System for Large Honeycomb Mirrors</ref>\n\n==See also==\n* [[Amateur astronomy]]\n* [[Amateur telescope making]]\n* [[List of telescope parts and construction]]\n* [[MATLAB]]\n* [[Nastran]]\n* [[Optical aberration]]\n* [[Optical telescope]]\n* [[Whiffletree]]\n\n==Notes==\n{{reflist|2}}\n\n==External resources==\n* [http://www.cs.berkeley.edu/~jonah/18plus/p18.html A Study of 18-point Mirror Cell Optimization Using Varying Forces] Jeff Anderson-Lee, January 2003\n* [http://www.davidlewistoronto.com/plop/ David Lewis, Automated Mirror Cell Optimization]\n* [http://www.cruxis.com/scope/scope1100_mirrorcell.htm Mechanical design of the 110 cm cruxis telescope]\n* [http://stellafane.org/misc/links.html Stellafane links page]\n\n{{DEFAULTSORT:Plate Optimizer}}\n[[Category:Computer-aided design software]]\n[[Category:Finite element software]]\n[[Category:Telescopes]]\n[[Category:Amateur astronomy|Telescope making]]"
    },
    {
      "title": "PZFlex",
      "url": "https://en.wikipedia.org/wiki/PZFlex",
      "text": "{{Infobox software\n| name                   = \n| title                  = \n| logo                   = <!-- Image name is enough -->\n| logo caption           = \n| logo_size              = \n| logo_alt               = \n| screenshot             = <!-- Image name is enough -->\n| caption                = \n| screenshot_size        = \n| screenshot_alt         = \n| collapsible            = \n| author                 = \n| developer              = [[Weidlinger Associates]]\n| released               = <!-- {{Start date and age|YYYY|MM|DD|df=yes/no}} -->\n| discontinued           = \n| latest release version = \n| latest release date    = <!-- {{Start date and age|YYYY|MM|DD|df=yes/no}} -->\n| latest preview version = \n| latest preview date    = <!-- {{Start date and age|YYYY|MM|DD|df=yes/no}} -->\n| status                 = \n| programming language   = \n| operating system       = [[Linux]] and Microsoft Windows\n| platform               = \n| size                   = \n| language               = \n| language count         = <!-- DO NOT include this parameter unless you know what it does -->\n| language footnote      = \n| genre                  = FEM software\n| license                = proprietary\n| website                = {{URL|www.pzflex.com}}\n}}\n\n'''PZFlex''' is a [[commercial software]] package for [[finite element analysis]] and [[virtual prototyping]], developed by [[Weidlinger Associates]] Inc, USA.  It was an outgrowth of the Flex family of codes developed for structural engineering.\n\nThe PZFlex code uses both [[Explicit and implicit methods]].<ref>{{cite conference |last=Wojcik |first=GL |last2=Vaughan |first2=DK |last3=Abboud |first3=N |last4=Mould |first4=JJr |title=Electromechanical Modeling Using Explicit Time-Domain Finite Elements |url=http://www.pzflex.com/images/Support/Publications/1_pzflexieee93.pdf |conference=IEEE Ultrasonics Symposium |pages=1107–1112 |date=1993 }}</ref> It is a time domain solver that specializes in large [[wave propagation]] problems, with emphasis on problems featuring electro-mechanical materials such as piezoelectric ceramics.<ref>{{cite conference |last=Abboud |first=N |last2=Wojcik |first2=GL |last3=Vaughan |first3=DK |last4=Mould |first4=J |last5=Powell |first5=DJ |last6=Nikodym |first6=L |title=Finite Element Modeling for Ultrasonic Transducers |url=http://www.pzflex.com/images/Support/Publications/9_pzflex-spie_mi98.pdf |conference=Medical Imaging 1998 |pages=19–42 |date=1998 }}</ref>\n\nThe explicit solver is designed to tackle both highly non-linear transient phenomena and quasi-static problems. The package is available for [[Microsoft Windows|Windows]] and [[Linux]] platforms, both 32 and 64-bit systems.\nIt was developed in the later 1980s to meet the demands of the medical [[ultrasound]] imaging device industry<ref>{{cite conference |last=Wojcik |first=GL |last2=Mould |first2=JJr |last3=Lizzi |first3=F |last4=Abboud |first4=N |last5=Ostomogilsky |first5=M |last6=Vaughan |first6=D |title=Nonlinear Modeling of Therapeutic Ultrasound |url=http://www.pzflex.com/images/Support/Publications/3_pzflexieee95.pdf |conference=IEEE Ultrasonics Symposium |pages=1617–1622 |date=1995 }}</ref> and has been adopted for use in the [[automotive]], [[aerospace]], [[sonar]],<ref>{{cite conference |last=Wojcik |first=GL |last2=Vaughan |first2=DK |last3=Murray |first3=V |last4=Mould |first4=JJr |title=Time-Domain Modeling of Composite Arrays for Underwater Imaging |url=http://www.pzflex.com/images/Support/Publications/2_pzflexieee94.pdf |conference=IEEE Ultrasonics Symposium |pages=1027–1032 |date=1994 }}</ref> [[MEMs]] and [[Non-destructive testing]]<ref>{{cite conference |last=Harvey |first=G |last2=Tweedie |first2=A |last3=Carpentier |first3=C |last4=Reynolds |first4=P |title=Finite element analysis of ultrasonic phased array inspections on anisotropic welds |url=https://www.researchgate.net/profile/Capucine_Carpentier/publication/252869547_Finite_Element_Analysis_of_Ultrasonic_Phased_Array_Inspections_on_Anisotropic_Welds/links/546088e50cf27487b450e8af.pdf |conference=American Institute of Physics |pages=827–834 |date=2011 }}</ref> industries.\n\nIt has also become popular with leading ultrasonic research groups in academia due to its flexibility and speed for solving large, complex problems.\n\nPZFlex stands for PiezoElectric Fast, Large and EXplicit.\n\n==Products==\n\n===PZFlex===\nThe main product is PZFlex which is available in two packages: PZFlex Standard and PZflex Professional.<ref name=pzflexweb>{{cite web |title=PZflex Packages |url=http://www.pzflex.com/pzflex/modules | website=pzflex.com |publisher=Weidlinger Associates Inc. |accessdate= 25 November 2015}}</ref> These packages are available as a perpetual or annual license for both\nWindows and Linux.\n\n====PZFlex Standard====\n*Explicit time-domain solver\n*Thermo-mechanical solver\n*Large deformation solver\n*GPU Extrapolation\n\n====PZFlex Professional====\n*Standard solvers\n*Piezoelectric solver\n*Electrostatic solver (CMUT)\n*PseudoSpectral solver\n\n===PZFlexCloud===\nPZFlexCloud extends the market reach and performance of PZFlex's award-winning engineering software by exploiting the power, elasticity, and ubiquity of the cloud.\n\n== Add-on Products==\nSeveral add-on products are available for PZFlex packages.<ref name=pzflexweb/>\n*MIDAS FX+ Pre-processor\n*MPI solver\n*Steady-State flow solver\n*Additional cores\n*Additional licenses\n*Training\n*Technical support and maintenance\n*Floating Network License (FNL)\n\n==References==\n{{Reflist}}\n\n==External links==\n*[http://www.pzflex.com PZFlex]\n*[http://pzflexcloud.com PZFlexCloud]\n*[http://www.wai.com Weidlinger Associates Inc]\n*Flex codes http://www.wai.com/softproducts.aspx\n\n<!--- Links to the same article in other languages go here after the categories if the articles already exist. See [[Help:Interlanguage links]]. -->\n[[Category:Finite element software]]\n[[Category:Finite element software for Linux]]\n[[Category:Simulation software]]"
    },
    {
      "title": "Quickfield",
      "url": "https://en.wikipedia.org/wiki/Quickfield",
      "text": "{{Infobox Software\n| name = Quickfield\n| logo =Quickfield logo 2017.png\n| screenshot =\n| caption = Screen shot of Quickfield\n| author = \n| developer = Tera Analysis Ltd.\n| released = 1991\n| latest release version = 6.3 SP1\n| latest release date = {{release date|2018|02|21}}\n| latest preview version = \n| latest preview date =\n| operating system = [[Microsoft Windows|Windows]]\n| language =\n| status = \n| genre = [[Finite element analysis]]\n| license = [[Proprietary software|Proprietary]] [[EULA]]\n| website = [http://www.quickfield.com/]\n}}\n\n'''QuickField''' is a [[finite element analysis]] software package running on [[Windows]] platforms. It is developed by the Danish company Tera Analysis Ltd. in cooperation with Russian firm Tor Ltd.  QuickField is available as a commercial program or as a free Student Edition with limited functionality. Main applications include [[computer simulations]] of [[electromagnetic field]]s  <ref>[http://www.quickfield.com/publications/ieee_pub.htm Quick and easy field analysis] by Kenneth R. Foster, IEEE Spectrum Magazine, December 1999.</ref> for scientific and industrial purposes <ref>[http://machinedesign.com/cad/how-software-assists-designing-motors-and-generators How software assists designing motors and generators] by M. Khanin. Machine Design, June 2005.</ref>, and use as a teaching aid in the college and university [[Electromagnetism|electromagnetic]] or [[physics]] courses. <ref>[http://www.jbpub.com/catalog/9781934015124/ Applied Electromagnetics Using QuickField & MATLAB] by James R. Claycomb. {{ISBN|978-1-934015-12-4}}</ref> .\n\n== Analysis types ==\n\n* AC, DC and transient [[electromagnetics]]\n* [[Electrostatics]], DC, AC and transient electric analysis\n* Steady-state and transient [[heat transfer]]\n* [[Stress analysis]]\n* Coupled [[multiphysics]]\n\n== References ==\n\n{{reflist}}\n \n== External links ==\n* [http://www.quickfield.com Main QuickField Support site]\n* [http://www.teraanalysis.com Tera Analysis Ltd. home page]\n* [https://www.amazon.com/QuickField-6-3-Users-Guide-electromagnetic/dp/1542615690/ref=sr_1_2?ie=UTF8&qid=1503071561&sr=8-2&keywords=quickfield QuickField User's Guide]\n* [http://www.quickfield.de German QuickField Support site]\n* [http://www.quickfield.fr French QuickField Support site]\n* [http://www.quickfield.es Spanish QuickField Support site]\n* [http://tor.ru/ Tor Ltd. home page]\n\n[[Category:Finite element software]]\n\n\n{{Windows-software-stub}}\n{{science-software-stub}}"
    },
    {
      "title": "Radioss",
      "url": "https://en.wikipedia.org/wiki/Radioss",
      "text": "{{Infobox software\n| name                   = \n| title                  = RADIOSS\n| logo                   = <!-- Image name is enough -->\n| logo caption           = \n| logo_size              = \n| logo_alt               = \n| screenshot             = <!-- Image name is enough -->\n| caption                = \n| screenshot_size        = \n| screenshot_alt         = \n| collapsible            = \n| author                 = \n| developer              = [[Altair Engineering]]\n| released               = <!-- {{Start date and age|YYYY|MM|DD|df=yes/no}} -->\n| discontinued           = \n| latest release version = \n| latest release date    = <!-- {{Start date and age|YYYY|MM|DD|df=yes/no}} -->\n| latest preview version = \n| latest preview date    = <!-- {{Start date and age|YYYY|MM|DD|df=yes/no}} -->\n| status                 = \n| programming language   = \n| operating system       = [[Mac OS]], [[Linux]] and [[Microsoft Windows]]\n| platform               = \n| size                   = \n| language               = \n| language count         = <!-- DO NOT include this parameter unless you know what it does -->\n| language footnote      = \n| genre                  = FEM software\n| license                = proprietary\n| website                = {{URL|http://www.altairhyperworks.com/Product,51,RADIOSS.aspx}}\n}}\nAltair '''RADIOSS''' is a multidisciplinary [[finite element]] solver developed by [[Altair Engineering]].<ref>{{cite web|url=http://www.prnewswire.com/news-releases/new-feature-in-altairs-radioss-solver-slashes-computation-time-for-eigenvalue-analysis-160673475.html |title=New Feature in Altair's RADIOSS Solver }}</ref> It can solve both [[linear]] and [[non-linear]] problems. It is a finite element solver using implicit and explicit integration schemes for the solution of engineering problems, from linear statics and linear dynamics to nonlinear transient dynamics and mechanical systems. This multidisciplinary solver enables designers to maximize performance related to durability, [[Noise, vibration, and harshness|NVH]], crash, safety, manufacturability, and fluid-structure interaction, in order to bring products to market faster.\n\nRADIOSS’ analysis capabilities for linear and non-linear finite element analysis, sheet metal stamping, and multi-body dynamics are accessible via two input formats.\n\n== Disciplines ==\n\n* Linear [[static analysis]]\n* Non-linear explicit [[dynamic analysis]]\n* Non-linear implicit [[quasi-static analysis]]\n* Normal modes analysis for real and complex eigenvalues\n* Linear [[buckling analysis]]\n* [[Frequency response]] analysis\n* Random [[response analysis]]\n* Linear transient response analysis\n* [[Linear coupled]] fluid-structure (acoustic) analysis\n* Linear steady-state heat transfer analysis coupled with static analysis\n* Explicit [[Arbitrary Eulerian-Lagrangian]] (ALE) formulation\n* Explicit Computational Fluid Dynamics (CFD)\n* [[Smoothed-particle hydrodynamics]] (SPH)\n* One-step (inverse) and incremental sheet metal stamping analysis\n\nConstraints like joints, gears, couplers, user-defined constraints, and high-pair joints can be defined.  High pair joints include point-to-curve, point-to-surface, curve-to-curve, curve-to-surface, and surface-to-surface constraints.  They can connect rigid bodies, flexible bodies, or rigid and flexible bodies.  For this multi-body dynamics solution, the power of Altair MotionSolve has been integrated with RADIOSS.\n\n==References==\n{{reflist}}\n\n== External links ==\n* [http://www.altairhyperworks.com/HWTemp1Product.aspx?product_id=51&top_nav_str=1 Altair Radioss webpage]\n\n{{DEFAULTSORT:RADIOSS}}\n[[Category:Finite element software]]\n[[Category:Simulation software]]\n[[Category:Finite element software for Linux]]"
    }
  ]
}