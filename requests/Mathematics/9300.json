{
  "pages": [
    {
      "title": "Runge–Kutta method (SDE)",
      "url": "https://en.wikipedia.org/wiki/Runge%E2%80%93Kutta_method_%28SDE%29",
      "text": "In [[mathematics]] of stochastic systems, the '''Runge–Kutta method''' is a technique for the approximate [[numerical analysis|numerical solution]] of a [[stochastic differential equation]]. It is a generalisation of the [[Runge–Kutta methods|Runge–Kutta method]] for [[ordinary differential equation]]s to stochastic differential equations (SDEs).  Importantly, the method does not involve knowing derivatives of the coefficient functions in the SDEs.\n\n==Most basic scheme==\n\nConsider the [[Itō diffusion]] <math>X</math> satisfying the following Itō stochastic differential equation\n\n:<math>{{d} X_{t}} = a(X_{t}) \\, {d} t + b(X_{t}) \\, {d} W_{t},</math>\n\nwith [[initial condition]] <math>X_0=x_0</math>, where <math>W_t</math> stands for the [[Wiener process]], and suppose that we wish to solve this SDE on some interval of time <math>[0,T]</math>. Then the basic '''Runge–Kutta approximation''' to the true solution <math>X</math> is the [[Markov chain]] <math>Y</math> defined as follows:<ref>P. E. Kloeden and E. Platen. ''Numerical solution of stochastic differential equations'', volume 23 of Applications of Mathematics. Springer--Verlag, 1992.</ref>\n\n* partition the interval <math>[0,T]</math> into <math>N</math>  subintervals of width <math>\\delta=T/N>0</math>:\n\n:<math>0 = \\tau_{0} < \\tau_{1} < \\dots < \\tau_{N} = T;</math>\n\n* set <math>Y_0:=x_0</math>;\n* recursively compute <math>Y_n</math> for <math>1\\leq n\\leq N</math> by\n\n:<math>Y_{n + 1} := Y_{n} + a(Y_{n}) \\delta + b(Y_{n}) \\Delta W_{n} + \\frac{1}{2} \\left( b(\\hat{\\Upsilon}_{n}) - b(Y_{n}) \\right) \\left( (\\Delta W_{n})^{2} - \\delta \\right) \\delta^{-1/2},</math>\n\nwhere <math>\\Delta W_{n} = W_{\\tau_{n + 1}} - W_{\\tau_{n}}</math>\nand <math>\\hat{\\Upsilon}_{n} = Y_{n} + a(Y_n) \\delta + b(Y_{n}) \\delta^{1/2}.</math>\nThe [[random variables]] <math>\\Delta W_{n}</math> are [[independent and identically distributed]] [[normal distribution|normal random variables]] with [[expected value]] zero and [[variance]] <math>\\delta</math>.\n\nThis scheme has strong order 1, meaning that the approximation error of the actual solution at a fixed time scales with the time step <math>\\delta</math>. It has also weak order 1, meaning that the error on the statistics of the solution scales with the time step <math>\\delta</math>. See the references for complete and exact statements.\n\nThe functions <math>a</math> and <math>b</math> can be time-varying without any complication. The method can be generalized to the case of several coupled equations; the principle is the same but the equations become longer.\n\n==Variation of the Improved Euler is flexible==\n\nA newer Runge—Kutta scheme also of strong order 1 straightforwardly reduces to the Improved Euler scheme for deterministic ODEs.\n<ref>A. J. Roberts. Modify the improved Euler scheme to integrate stochastic differential equations. [https://arxiv.org/abs/1210.0933], Oct 2012.</ref>  \nConsider the vector stochastic process <math>\\vec X(t)\\in \\mathbb R^n</math> that satisfies the general Ito SDE\n:<math>\nd\\vec X=\\vec a(t,\\vec X)\\,dt+\\vec b(t,\\vec X)\\,dW,\n</math>\nwhere drift <math>\\vec a</math> and volatility <math>\\vec b</math> are sufficiently smooth functions of their arguments.\nGiven time step <math>h</math>, and given the value <math>\\vec X(t_k)=\\vec X_k</math>, estimate <math>\\vec X(t_{k+1})</math> by <math>\\vec X_{k+1}</math> for time <math>t_{k+1}=t_k+h</math> via\n:<math>\n\\begin{array}{rl}\n&\\vec K_1=h\\vec a(t_k,\\vec X_k)+(\\Delta W_k-S_k\\sqrt h)\\vec b(t_k,\\vec X_k),\n\\\\&\\vec K_2=h\\vec a(t_{k+1},\\vec X_k+\\vec K_1)+(\\Delta W_k+S_k\\sqrt h)\\vec b(t_{k+1},\\vec X_k+\\vec K_1),\n\\\\&\\vec X_{k+1}=\\vec X_k+\\frac12(\\vec K_1+\\vec K_2),\n\\end{array}\n</math>\n* where <math>\\Delta W_k=\\sqrt hZ_k</math> for normal random <math>Z_k\\sim N(0,1)</math>; \n* and where <math>S_k=\\pm1</math>, each alternative chosen with probability <math>1/2</math>.\n\nThe above describes only one time step.\nRepeat this time step <math>(t_m-t_0)/h</math> times in order to integrate the SDE from time <math>t=t_0</math> to <math>t=t_m</math>.\n\nThe scheme integrates Stratonovich SDEs to <math>O(h)</math> provided one sets <math>S_k=0</math> throughout (instead of choosing <math>\\pm 1</math>).\n\n==Higher order Runge-Kutta schemes==\n\nHigher-order schemes also exist, but become increasingly complex.\nRößler developed many  schemes for Ito SDEs,<ref>{{Cite journal | doi = 10.1137/060673308| title = Second Order Runge–Kutta Methods for Itô Stochastic Differential Equations| journal = SIAM Journal on Numerical Analysis| volume = 47| issue = 3| pages = 1713–1738| year = 2009| last1 = Rößler | first1 = A. }}</ref><ref>{{Cite journal | doi = 10.1137/09076636X| title = Runge–Kutta Methods for the Strong Approximation of Solutions of Stochastic Differential Equations| journal = SIAM Journal on Numerical Analysis| volume = 48| issue = 3| pages = 922–952| year = 2010| last1 = Rößler | first1 = A. }}</ref>\nwhereas Komori developed schemes for Stratonovich SDEs.<ref>{{Cite journal | doi = 10.1016/j.apnum.2006.02.002| title = Multi-colored rooted tree analysis of the weak order conditions of a stochastic Runge–Kutta family| journal = Applied Numerical Mathematics| volume = 57| issue = 2| pages = 147–165| year = 2007| last1 = Komori | first1 = Y. }}</ref><ref>{{Cite journal | doi = 10.1016/j.cam.2006.03.010| title = Weak order stochastic Runge–Kutta methods for commutative stochastic differential equations| journal = Journal of Computational and Applied Mathematics| volume = 203| pages = 57–79| year = 2007| last1 = Komori | first1 = Y. }}</ref><ref>{{Cite journal | doi = 10.1016/j.cam.2006.06.006| title = Weak second-order stochastic Runge–Kutta methods for non-commutative stochastic differential equations| journal = Journal of Computational and Applied Mathematics| volume = 206| pages = 158–173| year = 2007| last1 = Komori | first1 = Y. }}</ref>\n\n==References==\n{{reflist}}\n\n{{DEFAULTSORT:Runge-Kutta Method (Sde)}}\n[[Category:Numerical differential equations]]\n[[Category:Stochastic differential equations]]"
    },
    {
      "title": "Semi-implicit Euler method",
      "url": "https://en.wikipedia.org/wiki/Semi-implicit_Euler_method",
      "text": "In mathematics, the '''semi-implicit Euler method''', also called '''symplectic Euler''', '''semi-explicit Euler''', '''Euler–Cromer''', and '''Newton–Størmer–Verlet (NSV)''', is a modification of the [[Euler integration|Euler method]] for solving [[Hamilton's equations]], a system of [[ordinary differential equation]]s that arises in [[classical mechanics]]. It is a [[symplectic integrator]] and hence it yields better results than the standard Euler method.\n\n== Setting ==\n\nThe semi-implicit Euler method can be applied to a pair of [[differential equation]]s of the form\n\n:<math> {dx \\over dt} = f(t,v) </math>\n\n:<math> {dv \\over dt} = g(t,x), </math>\n\nwhere ''f'' and ''g'' are given functions. Here, ''x'' and ''v'' may be either scalars or vectors. The equations of motion in [[Hamiltonian mechanics]] take this form if the Hamiltonian is of the form\n\n:<math> H = T(t,v) + V(t,x). \\, </math>\n\nThe differential equations are to be solved with the initial condition\n\n:<math> x(t_0) = x_0, \\qquad v(t_0) = v_0. </math>\n\n== The method ==\n\nThe semi-implicit Euler method produces an approximate [[Discrete mathematics|discrete]] solution by iterating\n:<math>\\begin{align}\n  v_{n+1} &= v_n + g(t_n, x_n) \\, \\Delta t\\\\[0.3em]\n  x_{n+1} &= x_n + f(t_n, v_{n+1}) \\, \\Delta t\n\\end{align}</math>\n\nwhere Δ''t'' is the time step and ''t<sub>n</sub>'' = ''t<sub>0</sub>'' + ''n''Δ''t'' is the time after ''n'' steps.\n\nThe difference with the standard Euler method is that the semi-implicit Euler method uses ''v''<sub>''n''+1</sub> in the equation for ''x''<sub>''n''+1</sub>, while the Euler method uses ''v<sub>n</sub>''.\n\nApplying the method with negative time step to the computation of <math>(x_n,v_n)</math> from <math>(x_{n+1},v_{n+1})</math> and rearranging leads to the second variant of the semi-implicit Euler method\n:<math>\\begin{align}\n  x_{n+1} &= x_n + f(t_n, v_n) \\, \\Delta t\\\\[0.3em]\n  v_{n+1} &= v_n + g(t_n, x_{n+1}) \\, \\Delta t\n\\end{align}</math>\nwhich has similar properties.\n\nThe semi-implicit Euler is a [[Numerical ordinary differential equations#Consistency and order|first-order integrator]], just as the standard Euler method. This means that it commits a global error of the order of &Delta;t. However, the semi-implicit Euler method is a [[symplectic integrator]], unlike the standard method. As a consequence, the semi-implicit Euler method almost conserves the energy (when the Hamiltonian is time-independent). Often, the [[energy drift|energy increases steadily]] when the standard Euler method is applied, making it far less accurate.\n\nAlternating between the two variants of the semi-implicit Euler method leads in one simplification to the Störmer-[[Verlet integration]] and in a slightly different simplification to the [[leapfrog integration]], increasing both the order of the error and the order of preservation of energy.<ref name=\"hairer2003\" />\n\nThe stability region of the semi-implicit method was presented by Niiranen<ref>[https://www.researchgate.net/publication/268034494_Fast_and_accurate_symmetric_Euler_algorithm_for_electromechanical_simulations_NOTE_The_method_became_later_known_as_Symplectic_Euler Niiranen, Jouko: Fast and accurate symmetric Euler algorithm for electromechanical simulations] Proceedings of the Electrimacs'99, Sept. 14-16, 1999 Lisboa, Portugal, Vol. 1, pages 71 - 78.</ref> although the semi-implicit Euler was misleadingly called symmetric Euler in his paper. The semi-implicit method models the simulated system correctly if the complex roots of the characteristic equation are within the circle shown below. For real roots the stability region extends outside the circle for which the criteria is <math>s > - 2/\\Delta t</math>\n\n[[Image:Symplectic Euler stability region.jpeg]]\n\nAs can be seen, the semi-implicit method can simulate correctly both stable systems that have their roots in the left half plane and unstable systems that have their roots in the right half plane. This is clear advantage over forward (standard) Euler and backward Euler. Forward Euler tends to have less damping than the real system when the negative real parts of the roots get near the imaginary axis and backward Euler may show the system be stable even when the roots are in the right half plane.\n\n== Example ==\n\nThe motion of a [[spring (device)|spring]] satisfying [[Hooke's law]] is given by\n\n:<math>\\begin{align}\n  \\frac{dx}{dt} &= v(t)\\\\[0.2em]\n  \\frac{dv}{dt} &= -\\frac{k}{m}\\,x=-\\omega^2\\,x.\n\\end{align}</math>\n\nThe semi-implicit Euler for this equation is\n\n:<math>\\begin{align}\n  v_{n+1} &= v_n - \\omega^2\\,x_n\\,\\Delta t \\\\[0.2em]\n  x_{n+1} &= x_n + v_{n+1} \\,\\Delta t.\n\\end{align}</math>\n\nThe iteration preserves the modified energy functional <math>E_h(x,v)=\\tfrac12\\left(v^2+\\omega^2\\,x^2-\\omega^2\\Delta t\\,vx\\right)</math> exactly, leading to stable periodic orbits (for sufficiently small step size) that deviate by <math>O(\\Delta t)</math> from the exact orbits. The exact circular frequency <math>\\omega</math> increases in the numerical approximation by a factor of <math>1+\\tfrac1{24}\\omega^2\\Delta t^2+O(\\Delta t^4)</math>.\n\n== References ==\n<references>\n<ref name=\"hairer2003\">{{cite journal\n| first=Ernst | last=Hairer \n| first2=Christian | last2=Lubich\n| first3=Gerhard | last3=Wanner\n| title=Geometric numerical integration illustrated by the Störmer/Verlet method\n| journal = Acta Numerica\n| year = 2003\n| volume = 12\n| pages = 399–450\n| url=http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.7.7106\n| doi=10.1017/S0962492902000144\n}}</ref>\n</references>\n* {{cite book |last= Giordano \n            |first= Nicholas J. \n            |author2=Hisao Nakanishi \n             |title= Computational Physics \n            |edition= 2nd\n            |publisher= Benjamin Cummings \n            |date=July 2005 \n            |isbn= 0-13-146990-8 }}\n* {{cite web\n  | last = MacDonald\n  | first = James\n  | title = The Euler-Cromer method\n  | publisher = [[University of Delaware]]\n  | url = http://www.physics.udel.edu/~jim/PHYS460_660_13S/Ordinary%20Differential%20Equations/Euler-Cromer%20Method.htm\n  | accessdate = 2013-04-11}}\n* {{cite book |last= Vesely \n            |first= Franz J. \n            |title= Computational Physics: An Introduction \n            |edition= 2nd\n            |publisher= Springer \n            |year= 2001 \n            |isbn= 978-0-306-46631-1\n            |pages=117}}\n\n{{Numerical integrators}}\n\n[[Category:Numerical differential equations]]"
    },
    {
      "title": "Shock-capturing method",
      "url": "https://en.wikipedia.org/wiki/Shock-capturing_method",
      "text": "In [[computational fluid dynamics]], '''shock-capturing methods''' are a class of techniques for computing [[inviscid flow]]s with [[shock wave]]s. The computation of flow containing shock waves is an extremely difficult task because such flows result in sharp, discontinuous changes in flow variables such as pressure, temperature, density, and velocity across the shock.\n\n==Method==\nIn shock-capturing methods, the governing equations of inviscid flows (i.e. [[Euler_equations_(fluid_dynamics)|Euler equations]]) are cast in conservation form and any shock waves or discontinuities are computed as part of the solution. Here, no special treatment is employed to take care of the shocks themselves, which is in contrast to the shock-fitting method, where shock waves are explicitly introduced in the solution using appropriate shock relations ([[Rankine–Hugoniot relation]]s). The shock waves predicted by shock-capturing methods are generally not sharp and may be smeared over several grid elements. Also, classical shock-capturing methods have the disadvantage that unphysical oscillations ([[Gibbs phenomenon]]) may develop near strong shocks.\n\n==Euler equations==\nThe [[Euler_equations_(fluid_dynamics)|Euler equations]] are the governing equations for inviscid flow. To implement shock-capturing methods, the conservation form of the Euler equations are used. For a flow without external heat transfer and work transfer (isoenergetic flow), the conservation form of the Euler equation in [[Cartesian coordinate system]] can be written as\n\n:<math>\n \\frac{\\partial {\\mathbf U}}{\\partial t} + \\frac{\\partial {\\mathbf F}}{\\partial x} + \\frac{\\partial {\\mathbf G}}{\\partial y} +\n \\frac{\\partial {\\mathbf H}}{\\partial z} = 0\n</math>\n\nwhere the vectors '''U''', '''F''', '''G''', and '''H''' are given by\n\n:<math> {\\mathbf U} = \\left[\n\\begin{array}{c}\n \\rho \\\\\n \\rho u \\\\\n \\rho v \\\\\n \\rho w \\\\\n \\rho e_t \\\\\n\\end{array} \\right] \\quad\n\n{\\mathbf F} = \\left[\n\\begin{array}{c}\n \\rho u\\\\\n \\rho u^2 + p \\\\\n \\rho uv \\\\\n \\rho uw \\\\\n (\\rho e_t + p)u \\\\\n\\end{array} \\right] \\quad\n\n{\\mathbf G} = \\left[\n\\begin{array}{c}\n \\rho v\\\\\n \\rho vu \\\\\n \\rho v^2 + p \\\\\n \\rho vw \\\\\n (\\rho e_t + p)v \\\\\n\\end{array} \\right] \\quad\n\n{\\mathbf H} = \\left[\n\\begin{array}{c}\n \\rho w\\\\\n \\rho wu \\\\\n \\rho wv \\\\\n \\rho w^2 + p \\\\\n (\\rho e_t + p)w \\\\\n\\end{array} \\right] \\qquad\n</math>\n\nwhere <math>e_t</math> is the total energy (internal energy + kinetic energy + potential energy) per unit mass. That is\n\n:<math>\n  e_t = e + \\frac{u^2 + v^2 + w^2}{2} + gz\n</math>\n\nThe Euler equations may be integrated with any of the shock-capturing methods available to obtain the solution.\n\n==Classical and modern shock capturing methods==\nFrom a historical point of view, shock-capturing methods can be classified into two general categories: '''classical methods''' and '''modern shock capturing methods''' (also called high-resolution schemes). Modern shock-capturing methods are generally [[upwind scheme|upwind biased]] in contrast to classical symmetric or central discretizations. Upwind-biased differencing schemes attempt to discretize hyperbolic partial differential equations by using differencing based on the direction of the flow. On the other hand, symmetric or central schemes do not consider any information about the direction of wave propagation.\n\nRegardless of the shock-capturing scheme used, a stable calculation in the presence of shock waves requires a certain amount of numerical dissipation, in order to avoid the formation of unphysical numerical oscillations. In the case of classical shock-capturing methods, numerical dissipation terms are usually linear and the same amount is uniformly applied at all grid points. Classical shock-capturing methods only exhibit accurate results in the case of smooth and weak shock solutions, but when strong shock waves are present in the solution, non-linear instabilities and oscillations may arise across discontinuities. Modern shock-capturing methods usually employ nonlinear numerical dissipation, where a feedback mechanism adjusts the amount of artificial dissipation added in accord with the features in the solution. Ideally, artificial numerical dissipation needs to be added only in the vicinity of shocks or other sharp features, and regions of smooth flow must be left unmodified. These schemes have proven to be stable and accurate even for problems containing strong shock waves.\n\nSome of the well-known classical shock-capturing methods include the [[MacCormack method]] (uses a discretization scheme for the numerical solution of hyperbolic partial differential equations), [[Lax–Wendroff method]] (based on finite differences, uses a numerical method for the solution of [[hyperbolic partial differential equation]]s), and [[Beam and Warming scheme|Beam–Warming method]]. Examples of modern shock-capturing schemes include higher-order [[total variation diminishing]] (TVD) schemes first proposed by [[Ami Harten|Harten]], [[flux-corrected transport]] scheme introduced by Boris and Book, [[MUSCL scheme|Monotonic Upstream-centered Schemes for Conservation Laws]] (MUSCL) based on [[Godunov's scheme|Godunov approach]] and introduced by [[Bram van Leer|van Leer]], various [[essentially non-oscillatory]] schemes (ENO) proposed by Harten et al., and the [[piecewise parabolic method]] (PPM) proposed by [[Phillip Colella|Colella]] and Woodward. Another important class of high-resolution schemes belongs to the approximate [[Riemann solver]]s proposed by [[Roe solver|Roe]] and by [[Stanley Osher|Osher]]. The schemes proposed by [[Antony Jameson|Jameson]] and Baker, where linear numerical dissipation terms depend on nonlinear switch functions, fall in between the classical and modern shock-capturing methods.\n\n==References==\n\n===Books===\n*[[John D. Anderson|Anderson, J. D.]], \"Modern Compressible Flow with Historical Perspective\", McGraw-Hill (2004).\n*Hirsch, C., \"Numerical Computation of Internal and External Flows\", Vol. II, 2nd ed., Butterworth-Heinemann (2007).\n*Laney, C. B., \"Computational Gasdynamics\", Cambridge Univ. Press  1998).\n*[[Randall J. LeVeque|LeVeque, R. J.]], \"Numerical Methods for Conservation Laws\", Birkhauser-Verlag (1992).\n*Tannehill, J. C., [[Dale A. Anderson|Anderson, D. A.]], and Pletcher, R. H., \"Computational Fluid Dynamics and Heat Transfer\", 2nd ed., Taylor & Francis (1997). \n*Toro, E. F., \"Riemann Solvers and Numerical Methods for Fluid Dynamics\", 2nd ed., Springer-Verlag (1999).\n\n===Technical papers===\n*Boris, J. P. and Book, D. L., \"Flux-Corrected Transport III. Minimal Error FCT Algorithms\", J. Comput. Phys., '''20''', 397–431 (1976).\n*[[Phillip Colella|Colella, P.]] and Woodward, P., \"The Piecewise parabolic Method (PPM) for Gasdynamical Simulations\", J. Comput. Phys., '''54''', 174–201 (1984).\n*[[Sergei K. Godunov|Godunov, S. K.]], \"A Difference Scheme for Numerical Computation of Discontinuous Solution of Hyperbolic Equations\", Math. Sbornik, '''47''', 271–306 (1959).\n*[[Ami Harten|Harten, A.]], \"High Resolution Schemes for Hyperbolic Conservation Laws\", J. Comput. Phys., '''49''', 357–293 (1983).\n*Harten, A., [[Björn Engquist|Engquist, B.]], [[Stanley Osher|Osher, S.]], and Chakravarthy, S. R., \"Uniformly High Order Accurate Essentially Non-Oscillatory Schemes III\", J. Comput. Phys., '''71''', 231–303 (1987).\n*[[Antony Jameson|Jameson, A.]] and Baker, T., \"Solution of the Euler Equations for Complex Configurations\", AIAA Paper, 83–1929 (1983).\n*MacCormack, R. W., \"The Effect of Viscosity in Hypervelocity Impact Cratering\", AIAA Paper, 69–354 (1969).\n*[[Philip L. Roe|Roe, P. L.]], \"[http://arrow.utias.utoronto.ca/~groth/aer1319/Handouts/Additional_Reading_Material/JCP-1981-roe.pdf Approximate Riemann Solvers, Parameter Vectors and Difference Schemes]\", J. Comput. Phys. '''43''', 357–372 (1981).\n*[[Chi-Wang Shu|Shu, C.-W.]], Osher, S., \"Efficient Implementation of Essentially Non-Oscillatory Shock Capturing Schemes\", J. Comput. Phys., '''77''', 439–471 (1988).\n*[[Bram van Leer|van Leer, B.]], \"Towards the Ultimate Conservative Difference Scheme V; A Second-order Sequel to Godunov's Sequel\", J. Comput. Phys., '''32''', 101–136, (1979).\n\n[[Category:Computational fluid dynamics]]\n[[Category:Numerical differential equations]]\n[[Category:Aerodynamics]]"
    },
    {
      "title": "Shooting method",
      "url": "https://en.wikipedia.org/wiki/Shooting_method",
      "text": "In [[numerical analysis]], the '''shooting method''' is a method for solving a [[boundary value problem]] by reducing it to the system of an [[initial value problem]]. Roughly speaking, we 'shoot' out trajectories in different directions until we find a trajectory that has the desired boundary value. The following exposition may be clarified by this [[#Example|illustration of the shooting method]].\n\nFor a boundary value problem of a second-order [[ordinary differential equation]], the method is stated as follows.\nLet\n\n:<math> y''(t) = f(t, y(t), y'(t)), \\quad y(t_0) = y_0, \\quad y(t_1) = y_1 </math>\n\nbe the boundary value problem.\nLet ''y''(''t''; ''a'') denote the solution of the initial value problem\n\n:<math> y''(t) = f(t, y(t), y'(t)), \\quad y(t_0) = y_0, \\quad y'(t_0) = a </math>\n\nDefine the function ''F''(''a'') as the difference between ''y''(''t''<sub>1</sub>; ''a'') and the specified boundary value ''y''<sub>1</sub>.\n\n:<math> F(a) = y(t_1; a) - y_1 \\,</math>\n\nIf ''F'' has a [[root of a function|root]] ''a'' then the solution ''y''(''t''; ''a'') of the corresponding initial value problem is also a solution of the boundary value problem.\nConversely, if the boundary value problem has a solution ''y''(''t''), then ''y''(''t'') is also the unique solution ''y''(''t''; ''a'') of the initial value problem where ''a = y''<nowiki>'</nowiki>(''t''<sub>0</sub>), thus ''a'' is a root of ''F''.\n\nThe usual methods for finding roots may be employed here,\nsuch as the [[bisection method]] or [[Newton's method]].\n\n== Linear shooting method ==\nThe boundary value problem is linear if ''f'' has the form\n:<math> f(t, y(t), y'(t))=p(t)y'(t)+q(t)y(t)+r(t). \\, </math>\nIn this case, the solution to the boundary value problem is usually given by:\n:<math>y(t) = y_{(1)}(t)+\\frac{y_{1}-y_{(1)}(t_1)}{y_{(2)}(t_1)}y_{(2)}(t)</math>\nwhere <math>y_{(1)}(t)</math> is the solution to the initial value problem:\n:<math>y_{(1)}''(t) = p(t)y_{(1)}'(t)+q(t)y_{(1)}(t)+r(t),\\quad y_{(1)}(t_0) = y_0, \\quad y_{(1)}'(t_0) = 0, </math>\nand <math>y_{(2)}(t)</math> is the solution to the initial value problem:\n:<math>y_{(2)}''(t) = p(t)y_{(2)}'(t)+q(t)y_{(2)}(t),\\quad y_{(2)}(t_0) = 0, \\quad y_{(2)}'(t_0) = 1. </math>\nSee [https://web.archive.org/web/20061209234620/http://math.fullerton.edu/mathews/n2003/shootingmethod/ShootingProof.pdf the proof] for the precise condition under which this result holds.\n\n== Example ==\n\nA [[boundary value problem]] is given as follows by Stoer and Burlisch<ref name = \"Stoer1980\">Stoer, J. and Burlisch, R. ''Introduction to Numerical Analysis''. New York: Springer-Verlag, 1980.</ref> (Section 7.3.1).\n\n:<math> w''(t) = \\frac{3}{2} w^2, \\quad w(0) = 4, \\quad w(1) = 1 </math>\n\nThe [[initial value problem]]\n\n:<math> w''(t) = \\frac{3}{2} w^2, \\quad w(0) = 4, \\quad w'(0) = s</math>\n\nwas solved for ''s'' = −1, −2, −3, ..., −100, and ''F''(''s'') = ''w''(1;''s'') − 1 plotted in the first figure.\nInspecting the plot of ''F'',\nwe see that there are roots near −8 and −36.\nSome trajectories of ''w''(''t'';''s'') are shown in the second figure.\n\nStoer and Burlisch<ref name = \"Stoer1980\"/> state that there are two solutions,\nwhich can be found by algebraic methods.\nThese correspond to the initial conditions ''w''′(0) = −8 and ''w''′(0) = −35.9 (approximately).\n\n[[Image:Shooting method error.svg|thumb|center|400px|The function ''F''(''s'') = ''w''(1;''s'') − 1.]]\n[[Image:Shooting method trajectories.svg|thumb|center|400px|Trajectories ''w''(''t'';''s'') for ''s'' = ''w''<nowiki>'</nowiki>(0) equal to −7, −8, −10, −36, and −40. The point (1,1) is marked with a circle.]]\n{{clear}}\n\n== See also ==\n* [[Direct multiple shooting method]]\n* [[Computation of radiowave attenuation in the atmosphere]]\n\n== Notes ==\n{{reflist}}\n\n== References ==\n\n*{{Cite book | last1=Press | first1=WH | last2=Teukolsky | first2=SA | last3=Vetterling | first3=WT | last4=Flannery | first4=BP | year=2007 | title=Numerical Recipes: The Art of Scientific Computing | edition=3rd | publisher=Cambridge University Press |  publication-place=New York | isbn=978-0-521-88068-8 | chapter=Section 18.1. The Shooting Method | chapter-url=http://apps.nrbook.com/empanel/index.html#pg=959}}\n\n== External links ==\n* [http://www.netlib.org/odepack/opks-sum Brief Description of ODEPACK] ''(at [[Netlib]]; contains LSODE)''\n* [http://numericalmethods.eng.usf.edu/topics/shooting_method.html Shooting method of solving boundary value problems – Notes, PPT, Maple, Mathcad, Matlab, Mathematica] at ''Holistic Numerical Methods Institute'' [http://numericalmethods.eng.usf.edu]\n\n[[Category:Numerical differential equations]]\n[[Category:Boundary value problems]]"
    },
    {
      "title": "Smoothed finite element method",
      "url": "https://en.wikipedia.org/wiki/Smoothed_finite_element_method",
      "text": "'''Smoothed finite element methods''' ('''S-FEM''')<ref>Liu, G.R., 2010 ''Smoothed Finite Element Methods'', CRC Press, {{ISBN|978-1-4398-2027-8}}.</ref> are a particular class of [[numerical analysis|numerical simulation algorithms]] for the simulation of physical phenomena. It was developed by combining [[meshfree methods]]<ref>Liu, G.R. 2nd edn: 2009 ''Mesh Free Methods'',  CRC Press.  978-1-4200-8209-9</ref> with the [[finite element method]]. S-FEM are applicable to [[solid mechanics]] as well as [[fluid dynamics]] problems, although so far they have mainly been applied to the former.\n\n==Description==\nThe essential idea in the S-FEM is to use a finite element mesh (in particular triangular mesh) to construct numerical models of good performance.  This is achieved by modifying the compatible strain field, or construct a strain field using only the displacements, hoping a Galerkin model using the modified/constructed strain field can deliver some good properties. Such a modification/construction can be performed within elements but more often beyond the elements (meshfree concepts): bring in the information from the neighboring elements. Naturally, the strain field has to satisfy certain conditions, and the standard Galerkin weak form needs to be modified accordingly to ensure the stability and convergence. A comprehensive review of S-FEM covering both methodology and applications can be found in<ref>W. Zeng, G.R. Liu. Smoothed finite element methods (S-FEM): An overview and recent developments. ''Archives of Computational Methods in Engineering'', 2016, doi: 10.1007/s11831-016-9202-3</ref> (\"Smoothed Finite Element Methods (S-FEM): An Overview and Recent Developments\", <https://link.springer.com/article/10.1007/s11831-016-9202-3/fulltext.html>).\n\n==History==\nThe development of S-FEM started from the works on meshfree methods, where the so-called weakened weak (W2) formulation based on the [[G space]] theory<ref>G.R. Liu. A G space theory and a weakened weak (W2) form for a unified formulation of compatible and incompatible methods: Part I theory and Part II applications to solid mechanics problems. ''International Journal for Numerical Methods in Engineering'', 81: 1093-1126, 2010</ref> were developed. The W2 formulation offers possibilities for formulate various (uniformly) \"soft\" models that works well with triangular meshes. Because triangular mesh can be generated automatically, it becomes much easier in re-meshing and hence automation in modeling and simulation. In addition, W2 models can be made soft enough (in uniform fashion) to produce upper bound solutions (for force-driving problems). Together with stiff models (such as the fully compatible FEM models), one can conveniently bound the solution from both sides.  This allows easy error estimation for generally complicated problems, as long as a triangular mesh can be generated. Typical W2 models are the Smoothed Point Interpolation Methods (or S-PIM).<ref>Liu, G.R. 2nd edn: 2009 ''Mesh Free Methods'', CRC Press.  978-1-4200-8209-9</ref> The S-PIM can be node-based (known as NS-PIM or LC-PIM),<ref>Liu GR, Zhang GY, Dai KY, Wang YY, Zhong ZH, Li GY and Han X, A linearly conforming point interpolation method (LC-PIM) for 2D solid mechanics problems, ''[[International Journal of Computational Methods]]'', 2(4): 645-665, 2005.</ref> edge-based (ES-PIM),<ref>G.R. Liu, G.R. Zhang. Edge-based Smoothed Point Interpolation Methods. ''International Journal of Computational Methods'', 5(4): 621-646, 2008</ref> and cell-based (CS-PIM).<ref>G.R. Liu, G.R. Zhang. A normed G space and weakened weak (W2) formulation of a cell-based Smoothed Point Interpolation Method. ''International Journal of Computational Methods'', 6(1): 147-179, 2009</ref> The NS-PIM was developed using the so-called SCNI technique.<ref>Chen, J. S., Wu, C. T., Yoon, S. and You, Y. (2001). A stabilized conforming nodal integration for Galerkin mesh-free methods. Int. J. Numer. Meth. Eng. 50: 435–466.</ref> It was then discovered that NS-PIM is capable of producing upper bound solution and volumetric locking free.<ref>G. R. Liu and G. Y. Zhang. Upper bound solution to elasticity problems: A unique property of the linearly conforming point interpolation method (LC-PIM). ''International Journal for Numerical Methods in Engineering'', 74: 1128-1161, 2008.</ref> The ES-PIM is found superior in accuracy, and CS-PIM behaves in between the NS-PIM and ES-PIM. Moreover, W2 formulations allow the use of polynomial and radial basis functions in the creation of shape functions (it accommodates the discontinuous displacement functions, as long as it is in G1 space), which opens further rooms for future developments.\n\nThe S-FEM is largely the linear version of S-PIM, but with most of the properties of the S-PIM and much simpler. It has also variations of NS-FEM, ES-FEM and CS-FEM. The major property of S-PIM can be found also in S-FEM.<ref>Zhang ZQ, Liu GR, Upper and lower bounds for natural frequencies: A property of the smoothed finite element methods, ''International Journal for Numerical Methods in Engineering''   Vol. 84   Issue: 2, 149-178, 2010</ref>\n\n==List of S-FEM models==\n\n* [[Node-based Smoothed FEM]] (NS-FEM)<ref>Liu GR, Nguyen-Thoi T, Nguyen-Xuan H, Lam KY (2009) A node-based smoothed finite element method (NS-FEM) for upper bound solutions to solid mechanics problems. Computers and Structures; 87: 14-26.</ref>\n* [[Edge-based Smoothed FEM]] (ES-FEM)<ref>Liu GR, Nguyen-Thoi T, Lam KY (2009) An edge-based smoothed finite element method (ES-FEM) for static, free and forced vibration analyses in solids. Journal of Sound and Vibration; 320: 1100-1130.</ref>  \n* [[Face-based Smoothed FEM]] (FS-FEM)<ref>Nguyen-Thoi T, Liu GR, Lam KY, GY Zhang (2009) A Face-based Smoothed Finite Element Method (FS-FEM) for 3D linear and nonlinear solid mechanics problems using 4-node tetrahedral elements. ''International Journal for Numerical Methods in Engineering''; 78: 324-353</ref>\n* [[Cell-based Smoothed FEM]] (CS-FEM)<ref>Liu GR, Dai KY, Nguyen-Thoi T (2007) A smoothed finite element method for mechanics problems. Computational Mechanics; 39: 859-877</ref><ref>Dai KY, Liu GR (2007) Free and forced vibration analysis using the smoothed finite element method (SFEM). Journal of Sound and Vibration; 301: 803-820.</ref><ref>Dai KY, Liu GR, Nguyen-Thoi T (2007) An n-sided polygonal smoothed finite element method (nSFEM) for solid mechanics. Finite Elements in Analysis and Design; 43: 847－860.</ref> \n* [[Node/Edge-based Smoothed FEM]] (NS/ES-FEM)<ref name=\"auto\">Li Y, Liu GR, Zhang GY, An adaptive NS/ES-FEM approach for 2D contact problems using triangular elements, ''Finite Elements in Analysis and Design''   Vol.47   Issue: 3, 256-275, 2011</ref><ref>Jiang C, Zhang ZQ, Liu GR, Han X, Zeng W, An edge-based/node-based selective smoothed finite element method using tetrahedrons for cardiovascular tissues, ''Engineering Analysis with Boundary Elements''   Vol.59, 62-77, 2015</ref> \n* [[Alpha FEM]] method (Alpha FEM)<ref>Liu GR, Nguyen-Thoi T, Lam KY (2009) A novel FEM by scaling the gradient of strains with factor α (αFEM). Computational Mechanics; 43: 369-391</ref><ref>Liu GR, Nguyen-Xuan H, Nguyen-Thoi T, Xu X (2009) A novel weak form and a superconvergent alpha finite element method (SαFEM) for mechanics problems using triangular meshes. Journal of Computational Physics; 228: 4055-4087</ref>\n* [[Beta FEM]] method (Beta FEM)<ref>Zeng W, Liu GR, Li D, Dong XW (2016) A smoothing technique based beta finite element method (βFEM) for crystal plasticity modeling. Computers and Structures; 162: 48-67</ref><ref>Zeng W, Liu GR, Jiang C, Nguyen-Thoi T, Jiang Y (2016) A generalized beta finite element method with coupled smoothing techniques for solid mechanics. Engineering Analysis with Boundary Elements; 73: 103-119</ref>\n\n==Applications==\n\nS-FEM has been applied to solve the following physical problems:\n\n#Mechanics for solid structures and piezoelectrics;<ref>Cui XY, Liu GR, Li GY, et al. A thin plate formulation without rotation DOFs based on the radial point interpolation method and triangular cells, ''International Journal for Numerical Methods in Engineering''   Vol.85   Issue: 8 , 958-986, 2011</ref><ref>Liu GR, Nguyen-Xuan H, Nguyen-Thoi T, A theoretical study on the smoothed FEM (S-FEM) models: Properties, accuracy and convergence rates, ''International Journal for Numerical Methods in Engineering''   Vol. 84   Issue: 10, 1222-1256, 2010</ref>\n#Fracture mechanics and crack propagation;<ref>Liu GR, Nourbakhshnia N, Zhang YW, A novel singular ES-FEM method for simulating singular stress fields near the crack tips for linear fracture problems, ''Engineering Fracture Mechanics''   Vol.78   Issue: 6   Pages: 863-876, 2011</ref><ref>Liu GR, Chen L, Nguyen-Thoi T, et al. A novel singular node-based smoothed finite element method (NS-FEM) for upper bound solutions of fracture problems, ''International Journal for Numerical Methods in Engineering''   Vol.83   Issue: 11, 1466-1497, 2010</ref><ref>Zeng W, Liu GR, Kitamura Y, Nguyen-Xuan H. \"A three-dimensional ES-FEM for fracture mechanics problems in elastic solids\", ''Engineering Fracture Mechanics''   Vol. 114, 127-150, 2013</ref><ref>Zeng W, Liu GR, Jiang C, Dong XW, Chen HD, Bao Y, Jiang Y. \"An effective fracture analysis method based on the virtual crack closure-integral technique implemented in CS-FEM\", ''Applied Mathematical Modelling''   Vol. 40,   Issue: 5-6, 3783-3800, 2016</ref>\n#Nonlinear and contact problems;<ref>Zhang ZQ, Liu GR, An edge-based smoothed finite element method (ES-FEM) using 3-node triangular elements for 3D non-linear analysis of spatial membrane structures, ''International Journal for Numerical Methods in Engineering'',  Vol. 86   Issue: 2    135-154, 2011</ref><ref>Jiang C, Liu GR, Han X, Zhang ZQ, Zeng W, A smoothed finite element method for analysis of anisotropic large deformation of passive rabbit ventricles in diastole, ''International Journal for Numerical Methods in Biomedical Engineering'',  Vol. 31   Issue: 1,1-25, 2015</ref>\n#Stochastic analysis;<ref>Liu GR, Zeng W, Nguyen-Xuan H. Generalized stochastic cell-based smoothed finite element method (GS_CS-FEM) for solid mechanics, ''Finite Elements in Analysis and Design''   Vol.63, 51-61, 2013</ref>\n#Heat transfer;<ref>Zhang ZB, Wu SC, Liu GR, et al. Nonlinear Transient Heat Transfer Problems using the Meshfree ES-PIM, ''International Journal of Nonlinear Sciences and Numerical Simulation''   Vol.11   Issue: 12, 1077-1091, 2010</ref><ref>Wu SC, Liu GR, Cui XY, et al. An edge-based smoothed point interpolation method (ES-PIM) for heat transfer analysis of rapid manufacturing system, ''International Journal of Heat and Mass Transfer'' Vol.53 Issue: 9-10, 1938-1950, 2010</ref>\n#Structural acoustics;<ref>He ZC, Cheng AG, Zhang GY, et al. Dispersion error reduction for acoustic problems using the edge-based smoothed finite element method (ES-FEM), ''International Journal for Numerical Methods in Engineering''   Vol. 86   Issue: 11   Pages: 1322-1338, 2011</ref><ref>He ZC, Liu GR, Zhong ZH, et al. A coupled ES-FEM/BEM method for fluid-structure interaction problems, Engineering Analysis with Boundary Elements   Vol. 35   Issue: 1, 140-147, 2011</ref><ref>Zhang ZQ, Liu GR, Upper and lower bounds for natural frequencies: A property of the smoothed finite element methods, ''International Journal for Numerical Methods in Engineering''   Vol.84   Issue: 2,149-178, 2010</ref>\n#Adaptive analysis;<ref>Nguyen-Thoi T, Liu GR, Nguyen-Xuan H, et al. Adaptive analysis using the node-based smoothed finite element method (NS-FEM), ''International Journal for Numerical Methods in Biomedical Engineering''   Vol. 27   Issue: 2, 198-218, 2011</ref><ref name=\"auto\"/>\n#Limited analysis;<ref>Tran TN, Liu GR, Nguyen-Xuan H, et al. An edge-based smoothed finite element method for primal-dual shakedown analysis of structures, ''International Journal for Numerical Methods in Engineering''   Vol.82   Issue: 7, 917-938, 2010</ref>\n#Crystal plasticity modeling.<ref>Zeng W, Larsen JM, Liu GR. Smoothing technique based crystal plasticity finite element modeling of crystalline materials, ''International Journal of Plasticity''   Vol.65, 250-268, 2015</ref>\n\n==See also==\n* [[Finite element method]]\n* [[Meshfree methods]]\n* [[Weakened weak form]]\n* [[Loubignac iteration]]\n==References==\n{{reflist}}\n\n==External links==\n* [https://link.springer.com/article/10.1007/s11831-016-9202-3/fulltext.html]\n\n{{Numerical PDE}}\n\n[[Category:Continuum mechanics]]\n[[Category:Finite element method]]\n[[Category:Numerical differential equations]]\n[[Category:Partial differential equations]]\n[[Category:Structural analysis]]"
    },
    {
      "title": "Smoothed-particle hydrodynamics",
      "url": "https://en.wikipedia.org/wiki/Smoothed-particle_hydrodynamics",
      "text": "{{Use American English|date = February 2019}}\n{{Short description|Method of hydrodynamics simulation}}\n[[Image:SPHInterpolationColorsVerbose.svg|thumb|Schematic view of a SPH convolution]]\n\n'''Smoothed-particle hydrodynamics''' ('''SPH''') is a computational method used for simulating the mechanics of continuum media, such as [[solid mechanics]] and [[Fluid dynamics|fluid]] flows. It was developed by Gingold and [[Joseph J. Monaghan|Monaghan]] <ref>\n{{ cite journal |\nlast= R.A. Gingold |\nlast2= J.J. Monaghan|\ntitle= Smoothed particle hydrodynamics: theory and application to non-spherical stars |\njournal= Mon. Not. R. Astron. Soc.|\nvolume= 181 |\nissue= 3|\npages = 375–89 |\nyear=1977\n|\ndoi= 10.1093/mnras/181.3.375|\nbibcode= 1977MNRAS.181..375G}}\n</ref> and Lucy<ref>\n{{ cite journal |\nlast= L.B. Lucy |\ntitle= A numerical approach to the testing of the fission hypothesis|\njournal= Astron. J.|\nvolume= 82 |\npages = 1013–1024 |\nyear=1977\n|\ndoi= 10.1086/112164|\nbibcode= 1977AJ.....82.1013L}}\n</ref> in 1977, initially for astrophysical problems.  It has been used in many fields of research, including [[astrophysics]], [[ballistics]], [[volcanology]], and [[oceanography]]. It is a [[Meshfree methods|meshfree]] [[Lagrangian and Eulerian specification of the flow field|Lagrangian method]] (where the co-ordinates move with the fluid), and the resolution of the method can easily be adjusted with respect to variables such as [[density]].\n\n== Method ==\n\n=== Advantages ===\n\n* By construction, SPH is a [[meshfree method]], which makes it ideally suited to simulate problems dominated by complex boundary dynamics, like free surface flows, or large boundary displacement.\n* On top of that, the lack of a mesh significantly simplifies the model implementation and its parallelization, even for [[many-core]] architectures.<ref name=\"harada2007smoothed\">{{cite conference\n  | title = Smoothed particle hydrodynamics on GPUs\n  | author1 = Takahiro Harada\n  | author2 = Seiichi Koshizuka\n  | author3 = Yoichiro Kawaguchi\n  | journal = Computer Graphics International\n  | year = 2007\n  | pages = 63–70\n}}</ref><ref name=\"crespo2011gpus\">{{cite journal\n  | title = GPUs, a new tool of acceleration in CFD: efficiency and reliability on smoothed particle hydrodynamics methods\n  | author1 = Alejandro Crespo\n  | author2 = Jose M. Dominguez\n  | author3 = Anxo Barreiro\n  | author4 = Moncho Gomez-Gesteira\n  | author5 = Benedict D. Rogers\n  | journal = PLOS ONE\n  | volume = 6\n | issue = 6\n | pages = e20685\n | year = 2011\n| bibcode = 2011PLoSO...620685C\n | doi = 10.1371/journal.pone.0020685\n | pmid = 21695185\n | pmc = 3113801\n }}</ref>\n\n* SPH can be easily extended to a wide variety of fields, and hybridized with some other models, as discussed in [[#Advanced techniques and applications|Advanced techniques and applications]].\n* As discussed in section on [[#Weakly compressible approach|weakly compressible SPH]], the method has great conservation features.\n* The computational cost of SPH simulations per number of particles is significantly less than the cost of grid-based simulations per number of cells when the metric of interest is related to fluid [[density]] (e.g., the [[probability density function]] of density fluctuations).<ref name=\"price-11\">{{cite journal|last=Price, D. J.|title=Smoothed Particle Hydrodynamics: Things I wish my mother taught me|journal=Advances in Computational Astrophysics: Methods|volume=453|pages=249|arxiv=1111.1259|year=2011|bibcode=2012ASPC..453..249P}}</ref>  This is the case because in SPH the resolution is put where the matter is.\n\n=== Limitations ===\n\n* Setting boundary conditions in SPH such as inlets and outlets <ref name=\"altair\">{{Cite web|title=The Smoothed Particle Hydrodynamics Method vs. Finite Volume Numerical Methods |url=https://blog.altair.com/the-smoothed-particle-hydrodynamics-method-vs-finite-volume-numerical-methods/|accessdate=2018-08-30|date=2018-03-21}}</ref> and walls <ref name=\"adami-12\">{{cite journal|last=Adami, S. and Hu, X. Y. and Adams, N. A..|title=A generalized wall boundary condition for smoothed particle hydrodynamics|journal=Journal of Computational Physics|volume=231|issue=21|pages=7057–7075|year=2012|doi=10.1016/j.jcp.2012.05.005|bibcode=2012JCoPh.231.7057A}}</ref> is more difficult than with grid-based methods.  In fact, it has been stated that \"the treatment of boundary conditions is certainly one of the most difficult technical points of the SPH method\".<ref name=\"shadloo-16\">{{cite journal|last=Shadloo, M. S. and Oger, G. and Touze, D. L..|title=Smoothed particle hydrodynamics method for fluid flows, towards industrial applications: Motivations, current state, and challenges|journal=Computers and Fluids|volume=136|pages=11–34|year=2016|doi=10.1016/j.compfluid.2016.05.029}}</ref>  This challenge is partly because in SPH the particles near the boundary change with time.<ref name=\"fraser-16\">{{cite journal|last=Fraser, K.and Kiss, L. I. and St-George, L.|title=A generalized wall boundary condition for smoothed particle hydrodynamics|journal=14th International LS-DYNA Conference|year=2016}}</ref>  Nonetheless, for instance, wall boundary conditions for SPH are available.<ref name=\"adami-12\" /><ref name=\"fraser-16\" />\n* The computational cost of SPH simulations per number of particles is significantly larger than the cost of grid-based simulations per number of cells when the metric of interest is not (directly) related to density (e.g., the kinetic-energy spectrum).<ref name=\"price-11\" />  Therefore, overlooking issues of parallel [[speedup]], the simulation of constant-density flows (e.g., external [[aerodynamics]]) is more efficient with grid-based methods than with SPH.\n\n== Examples ==\n\n=== Fluid dynamics ===\n\n[[Image:fluids sim.jpg|thumb|200px|right|Fig. SPH simulation of ocean waves using FLUIDS v.1 (Hoetzlein)]]\n\nSmoothed-particle hydrodynamics is being increasingly used to model [[fluid motion]] as well. This is due to several benefits over traditional grid-based techniques. First, SPH guarantees conservation of mass without extra computation since the particles themselves represent mass. Second, SPH computes pressure from weighted contributions of neighboring particles rather than by solving linear systems of equations. Finally, unlike grid-based techniques, which must track fluid boundaries, SPH creates a free surface for two-phase interacting fluids directly since the particles represent the denser fluid (usually water) and empty space represents the lighter fluid (usually air). For these reasons, it is possible to simulate fluid motion using SPH in real time. However, both grid-based and SPH techniques still require the generation of renderable free surface geometry using a polygonization technique such as [[metaballs]] and [[marching cubes]], [[Volume rendering#Splatting|point splatting]], or 'carpet' visualization. For gas dynamics it is more appropriate to use the kernel function itself to produce a rendering of gas column density (e.g., as done in the SPLASH visualisation package).\n\nOne drawback over grid-based techniques is the need for large numbers of particles to produce simulations of equivalent resolution. In the typical implementation of both [[structured grid|uniform grids]] and SPH particle techniques, many [[voxels]] or particles will be used to fill water volumes that are never rendered. However, accuracy can be significantly higher with sophisticated grid-based techniques, especially those coupled with particle methods (such as particle level sets), since it is easier to enforce the [[incompressible flow#Difference between incompressible flow and material|incompressibility condition]] in these systems. SPH for [[fluid simulation]] is being used increasingly in real-time animation and games where accuracy is not as critical as interactivity.\n\nRecent work in SPH for fluid simulation has increased performance, accuracy, and areas of application:\n\n* B. Solenthaler, 2009, develops Predictive-Corrective SPH (PCISPH) to allow for better incompressibility constraints<ref>\n{{cite journal|last=Solenthaler|title=Predictive-Corrective Incompressible SPH|year=2009}}</ref>\n* M. Ihmsen et al., 2010, introduce boundary handling and adaptive time-stepping for PCISPH for accurate rigid body interactions<ref>{{cite journal|last=Imhsen|title=Boundary handling and adaptive time-stepping for PCISPH|year=2010|journal=Workshop on Virtual Reality Interaction and Physical Simulation VRIPHYS}}</ref>\n* K. Bodin et al., 2011, replace the standard equation of state pressure with a density constraint and apply a variational time integrator<ref>{{cite journal|last=Bodin|title=Constraint Fluids| url=http://www.physics.umu.se/english/research/statistical-physics-and-networks/complex-mechanical-systems/fluids-and-solids/ |year=2011|journal=IEEE Transactions on Visualization and Computer Graphics}}</ref>\n* R. Hoetzlein, 2012, develops efficient GPU-based SPH for large scenes in Fluids v.3<ref>{{cite journal|last=Hoetzlein|title=Fluids v.3, A Large scale, Open Source Fluid Simulator. http://fluids3.com|year=2012}}</ref>\n* N. Akinci et al., 2012, introduce a versatile boundary handling and two-way SPH-rigid coupling technique that is completely based on hydrodynamic forces; the approach is applicable to different types of SPH solvers <ref>{{cite journal|last=Akinci|title=Versatile Rigid-Fluid Coupling for Incompressible SPH http://www.nadir.tk/research |year=2012|journal=ACM TOG, SIGGRAPH Proceedings|volume=31 |issue=4 |pages=1–8 |doi=10.1145/2185520.2185558 }}</ref>\n* M. Macklin et al., 2013 simulates incompressible flows inside the Position Based Dynamics framework, for bigger timesteps <ref>{{cite journal|last=Macklin|title=Position Based Fluids http://blog.mmacklin.com/publications |year=2013|journal=ACM TOG, SIGGRAPH Proceedings|volume=32 |issue=4 |pages=1 |doi=10.1145/2461912.2461984 }}</ref>\n* N. Akinci et al., 2013, introduce a versatile surface tension and two-way fluid-solid adhesion technique that allows simulating a variety of interesting physical effects that are observed in reality<ref>{{cite journal|last=Akinci|title=Versatile Surface Tension and Adhesion for SPH Fluids SPH http://www.nadir.tk/research |year=2013|journal=ACM TOG, SIGGRAPH Proceedings|volume=32 |issue=6 |pages=1–8 |doi=10.1145/2508363.2508395 |citeseerx=10.1.1.462.8293 }}</ref>\n* J. Kyle and E. Terrell, 2013, apply SPH to Full-Film Lubrication<ref>{{cite journal|last=Journal of Tribology|title=Application of Smoothed Particle Hydrodynamics to Full-Film Lubrication|year=2013}}</ref>\n* A. Mahdavi and N. Talebbeydokhti, 2015, propose a hybrid algorithm for implementation of solid boundary condition and simulate flow over a sharp crested weir<ref>{{cite journal|last=Mahdavi and Talebbeydokhti|journal=Scientia Iranica, Transaction A, Civil Engineering| volume= 22|number=4|pages= 1457–1469|title=A hybrid solid boundary treatment algorithm for smoothed particle hydrodynamics https://www.researchgate.net/publication/282870566_A_hybrid_solid_boundary_treatment_algorithm_for_smoothed_particle_hydrodynamics|year=2015}}</ref>\n* S. Tavakkol et al., 2016, develop curvSPH, which makes the horizontal and vertical size of particles independent and generates uniform mass distribution along curved boundaries<ref>{{cite journal|last=International Journal for Numerical Methods in Fluids|title=Curvilinear smoothed particle hydrodynamics|journal=International Journal for Numerical Methods in Fluids|volume=83|issue=2|pages=115–131|year=2016|bibcode=2017IJNMF..83..115T|doi=10.1002/fld.4261}}</ref>\n\n=== Astrophysics ===\n\nSmoothed-particle hydrodynamics's adaptive resolution, numerical conservation of physically conserved quantities, and ability to simulate phenomena covering many [[order of magnitude|orders of magnitude]] make it ideal for computations in [[theoretical astrophysics]].<ref>{{Cite journal |arxiv = 0903.5075|last1 = Price|first1 = Daniel J|title = Astrophysical Smooth Particle Hydrodynamics|journal = New Astron.rev|volume = 53|issue = 4–6|pages = 78–104|year = 2009|doi = 10.1016/j.newar.2009.08.007|bibcode = 2009NewAR..53...78R}}</ref>\n\nSimulations of [[galaxy formation]], [[star formation]], [[stellar collision]]s,<ref>{{cite journal |doi=10.1007/lrca-2015-1|title=SPH Methods in the Modelling of Compact Objects|journal=Living Rev Comput Astrophys|volume=1|issue=1|pages=1|year=2015|last1=Rosswog|first1=Stephan|bibcode=2015LRCA....1....1R|arxiv=1406.4224}}</ref> [[supernovae]]<ref>{{Cite journal |arxiv = astro-ph/0512532|last1 = Price|first1 = Daniel J|last2 = Rockefeller|first2 = Gabriel|last3 = Warren|first3 = Michael S|title = SNSPH: A Parallel 3-D Smoothed Particle Radiation Hydrodynamics Code|journal = Astrophys. J.|volume = 643|pages = 292–305|year = 2006|doi = 10.1086/501493}}</ref> and [[meteor]] impacts are some of the wide variety of astrophysical and cosmological uses of this method.\n\nSPH is used to model hydrodynamic flows, including possible effects of [[gravity]]. Incorporating other astrophysical processes which may be important, such as [[radiative transfer]] and [[Magnetohydrodynamics|magnetic fields]] is an active area of research in the astronomical community, and has had some limited success.<ref>{{Cite web | url=http://www.astro.ex.ac.uk/people/mbate/Cluster/clusterRT.html |title = Star Formation with Radiative Transfer}}</ref><ref>http://users.monash.edu.au/~dprice/pubs/spmhd/price-spmhd.pdf</ref>\n\n=== Solid mechanics ===\n\nLibersky and Petschek<ref name=\"libersky248\">\n{{Cite book|last1=Libersky|first1=L.D.|last2=Petschek|first2=A.G.|title=Smooth Particle Hydrodynamics with Strength of Materials, Advances in the Free Lagrange Method|journal=Lecture Notes in Physics|year=1990|volume=395|pages=248–257|doi=10.1007/3-540-54960-9_58|isbn=978-3-540-54960-4}}\n</ref><ref>\n{{cite journal|last=L.D. Libersky |author2=A.G. Petschek |author3=A.G. Carney |author4=T.C. Hipp |author5=J.R. Allahdadi |author6=F.A. High|title=Strain Lagrangian hydrodynamics: a three-dimensional SPH code for dynamic material response|journal=J. Comput. Phys.|year=1993|volume=109|issue=1 |pages=67–75|bibcode=1993JCoPh.109...67L|doi=10.1006/jcph.1993.1199}}\n</ref>\nextended SPH to Solid Mechanics. The main advantage of SPH in this application is the possibility of dealing with larger local distortion than grid-based methods.\nThis feature has been exploited in many applications in Solid Mechanics: metal forming, impact, crack growth, fracture, fragmentation, etc.\n\nAnother important advantage of meshfree methods in general, and of SPH in particular, is that mesh dependence problems are naturally avoided given the meshfree nature of the method. In particular, mesh alignment is related to problems involving cracks and it is avoided in SPH due to the isotropic support of the kernel functions. However, classical SPH formulations suffer from tensile instabilities<ref>\n{{cite journal|last=J.W. Swegle |author2=D.A. Hicks |author3=S.W. Attaway|title=Smooth particle hydrodynamics stability analysis|journal=J. Comput. Phys.|year=1995|volume=116|issue=1 |pages=123–134|doi=10.1006/jcph.1995.1010|bibcode = 1995JCoPh.116..123S }}\n</ref>\nand lack of consistency.<ref>\n{{cite journal|last=T. Belytschko |author2=Y. Krongauz |author3=J. Dolbow |author4=C. Gerlach|title=On the completeness of meshfree particle methods|journal=Int. J. Numer. Methods Eng.|year=1998|volume=43|issue=5 |pages=785–819|doi=10.1002/(sici)1097-0207(19981115)43:5<785::aid-nme420>3.0.co;2-9|bibcode = 1998IJNME..43..785B |citeseerx=10.1.1.28.491 }}\n</ref>\nOver the past years, different corrections have been introduced to improve the accuracy of the SPH solution, leading to the [[Reproducing kernel particle method|RKPM]] by Liu et al.<ref>{{cite journal|last=W.K. Liu |author2=S. Jun |author3=Y.F. Zhang|title=Reproducing kernel particle methods|journal=Int. J. Numer. Methods Eng.|year=1995|volume=20|issue=8–9|pages=1081–1106|doi=10.1002/fld.1650200824|bibcode = 1995IJNMF..20.1081L }}\n</ref>\nRandles and Libersky<ref name=\"autogenerated525\">{{cite journal|last=P.W. Randles|author2=L.D. Libersky |title=Recent improvements in SPH modelling of hypervelocity impact|journal=Int. J. Impact Eng.|year=1997|volume=20|issue=6–10 |pages=525–532|doi=10.1016/s0734-743x(97)87441-6}}\n</ref>\nand Johnson and Beissel<ref name=\"autogenerated2725\">{{cite journal|last=G.R. Johnson|author2=S.R. Beissel |title=Normalized smoothing functions for SPH impact computations|journal=Int. J. Numer. Methods Eng.|year=1996|volume=39|issue=16 |pages=2725–2741|doi=10.1002/(sici)1097-0207(19960830)39:16<2725::aid-nme973>3.0.co;2-9|bibcode = 1996IJNME..39.2725J }}\n</ref>\ntried to solve the consistency problem in their study of impact phenomena.\n\nDyka et al.<ref>\n{{cite journal|last=C.T. Dyka|author2=R.P. Ingel |title=An approach for tension instability in Smoothed Particle Hydrodynamics|journal=Comput. Struct.|year=1995|volume=57|issue=4 |pages=573–580|doi=10.1016/0045-7949(95)00059-p}}</ref><ref>\n{{cite journal|last=C.T. Dyka |author2=P.W. Randles |author3=R.P. Ingel|title=Stress points for tension instability in SPH|journal=Int. J. Numer. Methods Eng.|year=1997|volume=40|issue=13 |pages=2325–2341|doi=10.1002/(sici)1097-0207(19970715)40:13<2325::aid-nme161>3.0.co;2-8|bibcode = 1997IJNME..40.2325D }}</ref>\nand Randles and Libersky<ref>{{cite journal|last=P.W. Randles|author2=L.D. Libersky |title=Normalized SPH with stress points|journal=Int. J. Numer. Methods Eng.|year=2000|volume=48|issue=10 |pages=1445–1462|doi=10.1002/1097-0207(20000810)48:10<1445::aid-nme831>3.0.co;2-9|bibcode = 2000IJNME..48.1445R }}</ref>\nintroduced the stress-point integration into SPH and [[Ted Belytschko]] et al.<ref>{{cite journal|last=T. Belytschko |author2=Y. Guo |author3=W.K. Liu |author4=S.P. Xiao|title=A unified stability analysis of meshless particle methods|journal=Int. J. Numer. Methods Eng.|year=2000|volume=48|issue=9 |pages=1359–1400|doi=10.1002/1097-0207(20000730)48:9<1359::aid-nme829>3.0.co;2-u|bibcode = 2000IJNME..48.1359B }}</ref>\nshowed that the stress-point technique removes the instability due to spurious singular modes, while tensile instabilities can be avoided by using a Lagrangian kernel. Many other recent studies can be found in the literature devoted to improve the convergence of the SPH method.\n\nRecent improvements in understanding the convergence and stability of SPH have allowed for more widespread applications in Solid Mechanics. Other examples of applications and developments of the method include:\n\n* Metal forming simulations.<ref>{{cite journal|last=J. Bonet|author2=S. Kulasegaram |title=Correction and stabilization of smooth particle hydrodynamics methods with applications in metal forming simulations|journal=Int. J. Numer. Methods Eng.|year=2000|volume=47|issue=6 |pages=1189–1214|doi=10.1002/(sici)1097-0207(20000228)47:6<1189::aid-nme830>3.0.co;2-i|bibcode = 2000IJNME..47.1189B }}</ref>\n* SPH-based method SPAM (Smoothed Particle Applied Mechanics) for impact fracture in solids by [[William G. Hoover]].<ref>{{cite journal|last=W. G. Hoover|author2=C. G. Hoover |journal=Computing in Science and Engineering|title  = SPAM-based recipes for continuum simulations|  year=2001|volume=3|issue=2|pages=78–85|doi=10.1109/5992.909007 |bibcode=2001CSE.....3b..78H }}</ref>\n* Modified SPH (SPH/MLSPH) for fracture and fragmentation.<ref>{{cite journal|last=T. Rabczuk|author2=J. Eibl |author3=L. Stempniewski |title=Simulation of high velocity concrete fragmentation using SPH/MLSPH|journal=Int. J. Numer. Methods Eng.|year=2003|volume=56|issue=10 |pages=1421–1444|doi=10.1002/nme.617|bibcode = 2003IJNME..56.1421R }}</ref>\n* Taylor-SPH (TSPH) for shock wave propagation in solids.<ref>{{cite journal|last=M.I. Herreros|author2=M. Mabssout |title=A two-steps time discretization scheme using the SPH method for shock wave propagation|journal=Comput. Methods Appl. Mech. Engrg.|year=2011|volume=200|issue=21–22 |pages=1833–1845|doi=10.1016/j.cma.2011.02.006|bibcode = 2011CMAME.200.1833H }}</ref>\n\n== Numerical tools ==\n\n=== Interpolations ===\n\nThe smoothed-particle hydrodynamics (SPH) method works by dividing the fluid into a set of discrete moving elements <math> i,j </math>, referred to as particles. Their Lagrangian nature allows setting their position <math> \\mathbf{r}_i </math> by integration of their velocity <math> \\mathbf{v}_i </math> as:\n\n:<math>\n\\frac{\\mathrm{d}\\boldsymbol{r}_i}{\\mathrm{d}t}=\\boldsymbol{v}_i.\n</math>\n\nThese particles interact through a [[Kernel smoother|kernel function]] with characteristic radius known as the \"smoothing length\", typically represented in equations by <math> h </math>. This means that the physical quantity of any particle can be obtained by summing the relevant properties of all the particles that lie within the range of the kernel, the latter being used as a weighting function <math> W </math>. This can be understood in two steps. First an arbitrary field <math> A </math> is written as a convolution with <math> W </math>:\n\n:<math>\nA(\\boldsymbol{r}) = \\int A\\left(\\boldsymbol{r^{\\prime}}\\right) W(| \\boldsymbol{r}-\\boldsymbol{r^{\\prime}} |,h) \\mathrm{d}V\\left(\\boldsymbol{r^{\\prime}}\\right).\n</math>\n\nThe error in making the above approximation is order <math> h^2 </math>. Secondly, the integral is approximated using a Riemann summation over the particles:\n\n:<math>\nA(\\boldsymbol{r}) = \\sum_j V_j A_j W(| \\boldsymbol{r}-\\boldsymbol{r}_{j} |,h),\n</math>\n\nwhere the summation over <math> j </math> includes all particles in the simulation. <math> V_j </math> is the [[volume]] of particle <math> j </math>, <math> A_j </math> is the value of the quantity <math> A </math> for particle <math> j </math> and <math>\\boldsymbol{r}</math> denotes position. For example, the density <math> \\rho_i </math> of particle <math> i </math> can be expressed as:\n\n:<math>\n\\rho_i = \\rho(\\boldsymbol{r}_i) = \\sum_j m_j W_{ij},\n</math>\n\nwhere <math> m_j = \\rho_j V_j </math> denotes the particle mass and <math> \\rho_j </math> the particle density, while <math> W_{ij}=W_{ji} </math> is a short notation for <math> W(| \\boldsymbol{r}_i-\\boldsymbol{r}_j |,h) </math>. The error done in approximating the integral by a discrete sum depends on <math> h </math>, on the particle size (i.e. <math> V_j^{1/d} </math>, <math> d </math> being the space dimension), and on the particle arrangement in space. The latter effect is still poorly known.<ref>{{cite journal\n  | title = Truncation error in mesh-free particle methods\n  | author1 = N.J. Quinlan\n  | author2 = M. Basa \n  | author3 = M. Lastiwka\n  | journal = International Journal for Numerical Methods in Engineering\n  | volume = 66\n  | issue = 13\n  | pages = 2064–2085\n  | year = 2006\n  | doi = 10.1002/nme.1617\n  | hdl = 10379/1170\n  | bibcode = 2006IJNME..66.2064Q\n }}</ref>\n\nKernel functions commonly used include the [[Gaussian function]], the [[quintic spline]] and the Wendland <math> C^2 </math> kernel.<ref>{{cite journal\n  | title = Piecewise polynomial, positive definite and compactly supported radial functions of minimal degree\n  | author1 = H. Wendland\n  | journal = Advances in Computational Mathematics\n  | volume = 4\n  | issue = 4\n  | pages = 389–396\n  | year = 1995\n  | doi = 10.1007/BF02123482\n  }}</ref> The latter two kernels are compactly supported (unlike the Gaussian, where there is a small contribution at any finite distance away), with support proportional to <math> h </math>. This has the advantage of saving computational effort by not including the relatively minor contributions from distant particles.\n\nAlthough the size of the smoothing length can be fixed in both [[space]] and [[time]], this does not take advantage of the full power of SPH. By assigning each particle its own smoothing length and allowing it to vary with time, the resolution of a simulation can be made to automatically adapt itself depending on local conditions. For example, in a very dense region where many particles are close together, the smoothing length can be made relatively short, yielding high spatial resolution. Conversely, in low-density regions where individual particles are far apart and the resolution is low, the smoothing length can be increased, optimising the computation for the regions of interest.\n\n=== Operators ===\n\nFor particles of constant mass, differentiating the interpolated density <math> \\rho_i </math> with respect to time yields\n\n:<math>\n\\frac{d\\rho_i}{dt} = \\sum_j m_j \\left(\\boldsymbol{v}_i - \\boldsymbol{v}_j\\right) \\cdot \\nabla W_{ij},\n</math>\n\nwhere <math> \\nabla W_{ij}=-\\nabla W_{ji} </math> is the gradient of <math> W_{ij} </math> with respect to <math> \\boldsymbol{r}_i </math>. Comparing the above equation with the continuity equation in [[continuum mechanics]] shows that the right-hand side is an approximation of <math> -\\rho \\nabla \\cdot \\mathbf{v} </math>; hence one defines a discrete divergence operator as follows:\n\n:<math>\n\\operatorname{D}_i\\left\\{ \\boldsymbol{v}_j \\right\\} = -\\frac{1}{\\rho_i} \\sum_j m_j \\left(\\boldsymbol{v}_i - \\boldsymbol{v}_j\\right) \\cdot \\nabla W_{ij}.\n</math>\n\nThis operator gives an SPH approximation of <math> \\nabla \\cdot \\mathbf{v} </math> at the particle <math> i </math> for a given set of particles with given masses <math> m_j </math>, positions <math> \\left\\{ \\mathbf{r}_j \\right\\} </math> and velocities <math> \\left\\{ \\mathbf{v}_j \\right\\} </math>.\n\nSimilarly, one can define a discrete gradient operator to approximate the pressure gradient at the position of particle <math> i </math>:\n\n:<math>\n\\operatorname{\\mathbf{G}}_i\\left\\{ p_j \\right\\} = \\frac{1}{\\rho_i} \\sum_j m_j \\left(\\frac{p_i}{\\rho_i^2} + \\frac{p_j}{\\rho_j^2}\\right) \\nabla W_{ij},\n</math>\n\nwhere <math> \\left\\{ p_j \\right\\} </math> denote the set of particle pressures. There are several ways to define discrete operators in SPH; the above divergence and gradient formulae have the property to be skew-adjoint, leading to nice conservation properties.<ref>{{cite journal\n  | title = Investigation of wall bounded flows using SPH and the unified semi-analytical wall boundary conditions\n  | author1 = A. Mayrhofer\n  | author2 = B.D. Rogers\n  | author3 = D. Violeau\n  | author4 = M. Ferrand\n  | journal = Computer Physics Communications\n  | volume = 184\n  | issue = 11\n  | pages = 2515–2527\n  | year = 2013\n  | doi = 10.1016/j.cpc.2013.07.004\n  | citeseerx = 10.1.1.770.4985\n  | bibcode = 2013CoPhC.184.2515M\n | arxiv = 1304.3692\n }}</ref> On the other hand, while the divergence operator <math> \\operatorname{D} </math> is zero-order consistent, it can be seen that the approximate gradient <math> \\operatorname{\\mathbf{G}} </math> is not so. Several techniques have been proposed to circumvent this issue, leading to renormalised operators (see e.g.<ref>{{cite journal\n  | title = Variational and momentum preservation aspects of Smoothed Particle Hydrodynamics formulations\n  | author1 = J. Bonet\n  | author2 = T.S. Lok\n  | journal = Computers Methods in Applied Mechanical Engineering\n  | volume = 180\n  | issue = 1–2\n  | pages = 97–115\n  | year = 1999\n  | doi = 10.1016/S0045-7825(99)00051-1\n  | bibcode = 1999CMAME.180...97B\n }}</ref>).\n\n=== Governing equations ===\n\nThe SPH operators can be used to discretize numbers of partial differential equations. For a compressible inviscid fluid, the [[Euler equations (fluid dynamics)|Euler equations]] of mass conservation and momentum balance read:\n\n:<math>\n\\frac{d\\rho}{dt} = -\\rho\\nabla\\cdot\\boldsymbol{v}\n</math>\n:<math>\n\\frac{d\\boldsymbol{v}}{dt} = -\\frac{1}{\\rho}\\nabla p + \\boldsymbol{g}\n</math>\n\nAll kinds of SPH divergence and gradient operators can practically be used for discretization\npurposes. Nevertheless, some perform better regarding physical and numerical effects. A frequently used form of the balance equations is based on the symmetric divergence operator and antisymmetric gradient:\n\n:<math>\n\\frac{d\\rho_i}{dt} = -\\rho \\operatorname{D}_i \\left\\{ \\boldsymbol{v}_j \\right\\}\n</math>\n:<math>\n\\frac{d\\boldsymbol{v}_i}{dt} = -\\frac{1}{\\rho} \\operatorname{\\mathbf{G}}_i \\left\\{ p_j \\right\\} + \\boldsymbol{g}\n</math>\n\nAlthough there are several ways of discretizing the pressure gradient in the Euler equations, the above antisymmetric form is the most acknowledged one. It supports strict conservation of linear and angular momentum. This means that a force that is exerted on particle <math>i</math> by particle <math>j</math> equals the one that is exerted on particle <math>j</math> by particle <math>i</math> including the sign change of the effective direction, thanks to the antisymmetry property <math> \\nabla W_{ij}=-\\nabla W_{ji} </math>.\n\n=== Variational principle ===\n\nThe above SPH governing equations can be derived from a [[Least action principle]], starting from the [[Lagrangian mechanics|Lagrangian]] of a particle system:\n\n:<math>\n\\mathcal{L} = \\sum_j m_j \\left( \\tfrac{1}{2}\\boldsymbol{v}_j^2 -e_j +\\boldsymbol{g}\\cdot\\boldsymbol{r}_j \\right)\n</math>,\n\nwhere <math> e_j </math> is the particle specific [[internal energy]]. The [[Euler–Lagrange equation]] of variational mechanics reads, for each particle:\n\n:<math>\n\\frac{\\mathrm{d}}{\\mathrm{d}t} \\frac{\\partial\\mathcal{L}}{\\partial\\boldsymbol{v}_i} = \\frac{\\partial\\mathcal{L}}{\\partial\\boldsymbol{r}_i}.\n</math>\n\nWhen applied to the above Lagrangian, it gives the following momentum equation:\n\n:<math>\n\\frac{\\mathrm{d}\\boldsymbol{v}_i}{\\mathrm{d}t} = -\\sum_j m_j \\frac{p_j}{\\rho_j^2}\\frac{\\partial\\rho_j}{\\partial\\rho_i} + \\boldsymbol{g}\n</math>,\n\nwhere we used the thermodynamical property <math> \\mathrm{d}e = \\left(p/\\rho^2\\right)\\mathrm{d}\\rho </math>. Pluging the SPH density interpolation and differentiating explicitly <math> \\tfrac{\\partial\\rho_j}{\\partial\\rho_i} </math> leads to\n\n:<math>\n\\frac{\\mathrm{d}\\boldsymbol{v}_i}{\\mathrm{d}t} = -\\sum_j m_j \\left(\\frac{p_i}{\\rho_i^2} + \\frac{p_j}{\\rho_j^2}\\right) \\nabla W_{ij},\n</math>\n\nwhich is the SPH momentum equation already mentioned, where we recognize the <math> \\operatorname{\\mathbf{G}} </math> operator. This explains why linear momentum is conserved, and allows conservation of angular momentum and energy to be conserved as well.<ref>{{cite journal\n  | title = Smoothed particle hydrodynamics\n  | author1 = J.J. Monaghan \n  | journal = Reports on Progress in Physics\n  | volume = 68 \n  | issue = 8\n  | pages = 1703–1759 \n  | year = 2005\n  | doi = 10.1088/0034-4885/68/8/R01 \n  | bibcode = 2005RPPh...68.1703M \n }}</ref>\n\n=== Time integration ===\n\nFrom the work done in the 80's and 90's on numerical integration of point-like particles in large accelators, appropriate time integrators have been developed with accurate conservation properties on the long term; they are called [[symplectic integrator]]s. The most popular in the SPH literature is the [[Leapfrog integration|leapfrog]] scheme, which reads for each particle <math> i </math>:\n\n:<math>\n\\begin{align}\n  \\boldsymbol{v}_i^{n+1/2} &= \\boldsymbol{v}_i^n + \\boldsymbol{a}_i^n \\frac{\\Delta t}{2}, \\\\\n  \\boldsymbol{r}_i^{n+1} &= \\boldsymbol{r}_i^n + \\boldsymbol{v}_i^{i+1/2}\\Delta t,\\\\\n  \\boldsymbol{v}_i^{n+1} &= \\boldsymbol{v}_i^{n+1/2} + \\boldsymbol{a}_i^{i+1} \\frac{\\Delta t}{2},\n\\end{align}\n</math>\n\nwhere <math> \\Delta t </math> is the time step, superscripts stand for time iterations while <math> \\boldsymbol{a}_i </math> is the particle acceleration, given by the right-hand side of the momentum equation.\n\nOther symplectic integrators exist (see the reference textbook <ref>{{cite book\n  | title = Geometric Numerical Integration\n  | author1 = E. Hairer\n  | author2 = C. Lubich\n  | author3 = G. Wanner\n  | date = 2006\n  | publisher = Springer\n  | isbn = 978-3-540-30666-5\n  | url = https://www.springer.com/us/book/9783540306634\n  }}</ref>). It is recommended to use a symplectic (even low-order) scheme instead of a high order non-symplectic scheme, to avoid error accumulation after many iterations.\n\nIntegration of density has not been studied extensively (see [[#Weakly compressible approach|below]] for more details).\n\nSymplectic schemes are conservative but explicit, thus their numerical stability requires stability conditions, analogous to the Courant-Friedrichs-Lewy condition (see [[#Weakly compressible approach|below]]).\n\n=== Boundary techniques ===\n\n[[Image:SPHBoundaryConvolutionSplit.svg|thumb|SPH Convolution support split close to a boundary]]\n\nIn case the SPH convolution shall be practised close to a boundary, i.e. closer than {{math|''s'' · ''h''}}, then the integral support is truncated. Indeed, when the convolution is affected by a boundary, the convolution shall be split in 2 integrals,\n\n:<math>\nA(\\boldsymbol{r}) = \\int_{\\Omega(\\boldsymbol{r})} A\\left(\\boldsymbol{r^{\\prime}}\\right) W(| \\boldsymbol{r}-\\boldsymbol{r^{\\prime}} |,h) d\\boldsymbol{r^{\\prime}} + \\int_{B(\\boldsymbol{r}) - \\Omega(\\boldsymbol{r})} A\\left(\\boldsymbol{r^{\\prime}}\\right) W(| \\boldsymbol{r}-\\boldsymbol{r^{\\prime}} |,h) d\\boldsymbol{r^{\\prime}},\n</math>\n\nwhere {{math|B('''r''')}} is the compact support ball centered at {{math|'''r'''}}, with radius {{math|''s'' · ''h''}}, and {{math|Ω('''r''')}} denotes the part of the compact support inside the computational domain, {{math|Ω ∩ B('''r''')}}. Hence, imposing boundary conditions in SPH is completely based on approximating the second integral on the right hand side. The same can be of course applied to the differential operators computation,\n\n:<math>\n\\nabla A(\\boldsymbol{r}) = \\int_{\\Omega(\\boldsymbol{r})} A\\left(\\boldsymbol{r^{\\prime}}\\right) \\nabla W(\\boldsymbol{r}-\\boldsymbol{r^{\\prime}},h) d\\boldsymbol{r^{\\prime}} + \\int_{B(\\boldsymbol{r}) - \\Omega(\\boldsymbol{r})} A\\left(\\boldsymbol{r^{\\prime}}\\right) \\nabla W(\\boldsymbol{r}-\\boldsymbol{r^{\\prime}},h) d\\boldsymbol{r^{\\prime}}.\n</math>\n\nSeveral techniques has been introduced in the past to model boundaries in SPH.\n\n==== Integral neglect ====\n\n[[File:SPHBoundaryFreeSurface.svg|thumb|SPH free-surface model by means of integral neglect]]\n\nThe most straightforward boundary model is neglecting the integral,\n\n:<math>\n\\int_{B(\\boldsymbol{r}) - \\Omega(\\boldsymbol{r})} A\\left(\\boldsymbol{r^{\\prime}}\\right) \\nabla W(\\boldsymbol{r}-\\boldsymbol{r^{\\prime}},h) d\\boldsymbol{r^{\\prime}} \\simeq \\boldsymbol{0},\n</math>\n\nsuch that just the bulk interactions are taken into account,\n\n:<math>\n\\nabla A_i = \\sum_{j \\in \\Omega_i} V_j A_j \\nabla W_{ij}.\n</math>\n\nThis is a popular approach when free-surface is considered in monophase simulations.<ref name=\"colagrossi2009theoretical\">{{ cite journal |\nauthor1= Andrea Colagrossi |\nauthor2= Matteo Antuono |\nauthor3= David Le Touzè |\ntitle= Theoretical considerations on the free-surface role in the smoothed-particle-hydrodynamics model |\njournal= Physical Review E |\nvolume= 79 |\nissue= 5 |\npages= 056701 |\nyear=2009\n|\nbibcode= 2009PhRvE..79e6701C |\ndoi= 10.1103/PhysRevE.79.056701 |\npmid= 19518587 }}\n</ref>\n\nThe main benefit of this boundary condition is its obvious simplicity. However, several consistency issues shall be considered when this boundary technique is applied.<ref name=\"colagrossi2009theoretical\"/> That's in fact a heavy limitation on its potential applications.\n\n==== Fluid Extension ====\n\n[[File:SPHBoundaryFluidExtension.svg|thumb|SPH Fluid Extension Boundary technique]]\n\nProbably the most popular methodology, or at least the most traditional one, to impose boundary conditions in SPH, is Fluid Extension technique. Such technique is based on populating the compact support across the boundary with so-called ghost particles, conveniently imposing their field values.<ref name=\"bouscasse2013nonlinear\">{{ cite journal |\nauthor1= Bejamin Bouscasse |\nauthor2= Andrea Colagrossi |\nauthor3= Salvatore Marrone |\nauthor4= Matteo Antuono |\ntitle= Nonlinear water wave interaction with floating bodies in SPH |\njournal= Journal of Fluids and Structures |\nvolume= 42 |\npages= 112–129 |\nyear=2013\n|\ndoi= 10.1016/j.jfluidstructs.2013.05.010 |\nbibcode= 2013JFS....42..112B }}\n</ref>\n\nAlong this line, the [[#Integral neglect|integral neglect methodology]] can be considered as a particular case of fluid extensions, where the field, {{math|A}}, vanish outside the computational domain.\n\nThe main benefit of this methodology is the simplicity, provided that the boundary contribution is computed as part of the bulk interactions. Also, this methodology has been deeply analysed in the literature.<ref name=\"macia2011theoretical\">{{ cite journal |\nauthor1= Fabricio Macià |\nauthor2= Matteo Antuono |\nauthor3= Leo M González |\nauthor4= Andrea Colagrossi |\ntitle= Theoretical analysis of the no-slip boundary condition enforcement in SPH methods |\njournal= Progress of Theoretical Physics |\nvolume= 125 |\nissue= 6 |\npages= 1091–1121 |\nyear=2011\n|\ndoi= 10.1143/PTP.125.1091 |\nbibcode= 2011PThPh.125.1091M }}\n</ref><ref name=\"bouscasse2013nonlinear\"/><ref name=\"cercos2017sph\">{{ cite journal |\nauthor1= Jose Luis Cercos-Pita |\nauthor2= Matteo Antuono |\nauthor3= Andrea Colagrossi |\nauthor4= Antonio Souto |\ntitle= SPH energy conservation for fluid--solid interactions |\njournal= Computer Methods in Applied Mechanics and Engineering |\nvolume= 317 |\npages= 771–791 |\nyear=2017\n|\ndoi= 10.1016/j.cma.2016.12.037 |\nbibcode= 2017CMAME.317..771C }}\n</ref>\n\nOn the other hand, deploying ghost particles in the truncated domain is not a trivial task, such that modelling complex boundary shapes becomes cumbersome. The 2 most popular approaches to populate the empty domain with ghost particles are Mirrored-Particles <ref name=\"campbell2000contact\">{{ cite journal |\nauthor1= J. Campbell |\nauthor2= R. Vignjevic |\nauthor3= L. Libersky |\ntitle= A contact algorithm for smoothed particle hydrodynamics |\njournal= Computer Methods in Applied Mechanics and Engineering |\nvolume= 184 |\nissue= 1 |\npages= 49–65 |\nyear=2000\n|\ndoi= 10.1016/S0045-7825(99)00442-9 |\nbibcode= 2000CMAME.184...49C }}\n</ref> and Fixed-Particles.<ref name=\"bouscasse2013nonlinear\"/>\n\n==== Boundary Integral ====\n\n[[File:SPHBoundaryBoundaryIntegrals.svg|thumb|SPH Boundary Integral model]]\n\nThe newest Boundary technique is the Boundary Integral methodology.<ref name=\"ferrand2013\"/> In this methodology, the empty volume integral is replaced by a surface integral, and a renormalization:\n\n:<math>\n\\nabla A_i = \\frac{1}{\\gamma_i} \\left( \\sum_{j \\in \\Omega_i} V_j A_j \\nabla W_{ij} + \\sum_{j \\in \\partial \\Omega_i} S_j A_j \\boldsymbol{n}_j W_{ij} \\right),\n</math>\n:<math>\n\\gamma_i = \\sum_{j \\in \\Omega_i} V_j W_{ij},\n</math>\n\nwith {{math|'''n'''<sub>j</sub>}} the normal of the generic ''j<sup>th</sup>'' boundary element. The surface term can be also solved considering a semi-analytic expression.<ref name=\"ferrand2013\"/>\n\n== Modelling Physics ==\n\n=== Hydrodynamics ===\n==== Weakly compressible approach ====\n\nAnother way to determine the density is based on the SPH smoothing operator itself. Therefore, the density is estimated from the particle distribution utilizing the SPH  [[#Interpolations|interpolation]]. To overcome undesired errors at the free surface through kernel truncation, the density formulation can again be integrated in time.\n<ref name=\"ferrand2013\">{{cite journal\n| author = M. Ferrand, D.R. Laurence, B.D. Rogers, D. Violeau, C. Kassiotis \n| title = Unified semi-analytical wall boundary conditions for inviscid, laminar or turbulent flows in the meshless SPH method\n| journal = International Journal for Numerical Methods in Fluids\n| publisher = Int. J. Numer. Meth. Fluids\n| volume = 71\n| issue = 4\n| pages = 446–472\n| year = 2013| bibcode = 2013IJNMF..71..446F\n| doi = 10.1002/fld.3666\n| url = https://hal-enpc.archives-ouvertes.fr/hal-00691603/document\n}}</ref>\n\nThe weakly compressible SPH in fluid dynamics is based on the discretization of the [[Navier–Stokes equations]] or [[#Governing equations|Euler equations]] for compressible fluids. To close the system, an appropriate [[equation of state]] is utilized to link pressure <math>p</math> and density <math>\\rho</math>. Generally, the so-called [[Cole equation of state|Cole equation]]\n<ref>{{cite book \n| author = H. R. Cole \n| title = Underwater Explosions \n| publisher = Princeton University Press \n| place = Princeton, New Jersey \n| year = 1948\n}}</ref>\n(sometimes mistakenly referred to as the \"[[Tait equation of state|Tait equation]]\") is used in SPH. It reads\n:<math>\np = \\frac{\\rho_0c^2}{\\gamma}\\left(\\left(\\frac{\\rho}{\\rho_0}\\right)^{\\gamma}-1\\right) + p_0 ,\n</math>\n\nwhere <math>\\rho_0</math> is the reference density and <math>c</math> the [[speed of sound]]. For water, <math>\\gamma = 7</math> is commonly used.  \nThe background pressure <math>p_0</math> is added to avoid negative pressure values.\n\nReal nearly incompressible fluids such as water are characterised by very high speed of sounds of the order <math>10^3m/s</math>. Hence, pressure information travels fast compared to the actual bulk flow, which leads to very small Mach numbers <math>M</math>. The momentum equation leads to the following relation:\n:<math>\n\\frac{\\delta\\rho}{\\rho_0}\\approx\\frac{|\\boldsymbol{v}|}{c^2} = M^2\n</math>\nwhere <math>\\rho</math> is the density change and <math>u</math> the velocity vector.\nIn practice a value of c smaller than the real one is adopted to avoid time steps too small in the time integration scheme. \nGenerally a numerical speed of sound is adopted such that density variation smaller than 1% are allowed. This is the so-called weak-compressibility assumption.\nThis corresponds to a [[Mach number]] smaller than 0.1, which implies:\n:<math>\nc = 10v_{max}\n</math>\nwhere the maximum velocity vmax needs to be estimated, for e.g. by Torricelli's law or an educated guess. Since only small density variations occur, a linear equation of state can be adopted <ref name=\"molteni2009simple\">{{cite journal\n| author = D. Molteni, A. Colagrossi\n| title = A simple procedure to improve the pressure evaluation in hydrodynamic context using the SPH\n| journal=Computer Physics Communications\n| volume = 180\n| issue = 6\n| pages = 861–872\n| year = 2009| doi = 10.1016/j.cpc.2008.12.004\n| bibcode = 2009CoPhC.180..861M\n}}</ref>. :\n:<math>\np = c^2\\left(\\rho-\\rho_0\\right)\n</math>\n\nUsually the weakly-compressible schemes are affected by a high-frequency spurious noise on the pressure and density fields.\n<ref name=\"Colagrossi2003\">{{cite journal |last1=Colagrossi |first1=Andrea |last2=Landrini |first2=Maurizio |title=Numerical simulation of interfacial flows by smoothed particle hydrodynamics |journal=Journal of Computational Physics |date=2003 |volume=191 |issue=2 |pages=448–475 |doi=10.1016/S0021-9991(03)00324-3 |bibcode=2003JCoPh.191..448C }}</ref>\nThis phenomenon is caused by the nonlinear interaction of acoustic waves and by fact that the scheme is explicit in time and centred in space\n<ref name=\"leveque2007finite\">{{cite book \n| author = Randall J. LeVeque \n| title = Finite difference methods for ordinary and partial differential equations: steady-state and time-dependent problems\n| publisher = Siam\n| year = 2007\n}}</ref>.\n\nThrough the years, several techniques have been proposed to get rid of this problem. \nThey can be classified in three different groups: \n# the schemes that adopt density filters,\n# the models that add a diffusive term in the continuity equation,\n# the schemes that employ Riemann Solvers to model the particle interaction.\n\nThe schemes of the first group apply a filter directly on the density field to remove the spurious numerical noise. \nThe most used filters are the MLS (Moving Least Squares) and the Shepard filter <ref name=\"Colagrossi2003\" />\nwhich can be applied at each time step or every n time steps. \nThe more frequent is the use of the filtering procedure, the more regular density and pressure fields are obtained.\nOn the other hand, this leads to an increase of the computational costs. \nIn long time simulations, the use of the filtering procedure may lead to the disruption of the hydrostatic pressure component and \nto an inconsistency between the global volume of fluid and the density field.\nFurther, it does not ensure the enforcement of the dynamic free-surface boundary condition.\n\nA different way to smooth out the density and pressure field is to add a diffusive term inside the continuity equation (group 2) :\n:<math>\n{\\displaystyle {\\frac {d\\rho _{i}}{dt}}=\\sum _{j}m_{j}\\left({\\boldsymbol {v}}_{i}-{\\boldsymbol {v}}_{j}\\right)\\cdot \\nabla W_{ij} + \\mathcal{D}_i(\\rho),}\n</math>\n\nThe first schemes that adopted such an approach were described in \n<ref>{{cite article\n| title=A new 3D parallel SPH scheme for free surface flows\n| author=A. Ferrari, M. Dumbser, E. Toro, A. Armanini\n| journal=Computers & Fluids\n| volume=38\n| number=6\n| pages=1203–1217\n| year=2009\n| publisher=Elsevier\n}}</ref>\nand in <ref>molteni2009simple</ref>\nwhere the diffusive term was modelled as a Laplacian of the density field. A similar approach was also used in \n<ref>{{cite article\n| title= A remedy for numerical oscillations in weakly compressible smoothed particle hydrodynamics\n| author= Fatehi, R and Manzari, MT \n| journal= International Journal for Numerical Methods in Fluids\n| volume= 67\n| number= 9\n| pages= 1100–1114\n| year= 2011\n| publisher= Wiley Online Library \n}}</ref>\n.\n[[File:StandardSPH.png|thumb|SPH simulation: pressure fiels of a dam-break flow using standard SPH formulation]]\n[[File:DeltaSPH.png|thumb|SPH simulation: pressure fiels of a dam-break flow using standard δ-SPH formulation]]\nIn \n<ref>{{cite article\n| title= Free-surface flows solved by means of SPH schemes with numerical diffusive terms  \n| author= M. Antuono, A. Colagrossi, S. Marrone, D. Molteni\n| journal= Computer Physics Communications  \n| volume= 181  \n| number= 3  \n| pages= 532–549  \n| year= 2010  \n| publisher= Elsevier \n}}</ref>\na correction to the diffusive term of <ref>molteni2009simple</ref> was proposed to remove some inconsistencies close to the free-surface. \nIn this case the adopted diffusive term is equivalent to a high-order differential operator on the density field \n<ref name=\"antuono2012\">{{cite article\n| title= Numerical diffusive terms in weakly-compressible SPH schemes\n| author= M. Antuono, A. Colagrossi, S. Marrone\n| journal= Computer Physics Communications  \n| volume= 183  \n| number= 12  \n| pages= 2570–2580\n| year= 2012  \n| publisher= Elsevier \n}}</ref>.\nThe scheme is called δ-SPH and preserves all the conservations properties of the SPH without diffusion (e.g., linear and angular momenta, total energy,\nsee \n<ref>{{cite article\n| title= Energy balance in the $\\delta$-SPH scheme  \n| author= Antuono  Matteo and Marrone  S and Colagrossi  A and Bouscasse  B  \n| journal= Computer Methods in Applied Mechanics and Engineering  \n| volume= 289  \n| pages= 209–226  \n| year= 2015  \n| publisher= Elsevier \n}}</ref>\n) along with a smooth and regular representation of the density and pressure fields.\n\nIn the third group there are those SPH schemes which employ numerical fluxes obtained through Riemann solvers to model the particle interactions \n<ref>{{cite article\n| title= On particle weighted methods and smooth particle hydrodynamics  \n| author=JP.  Vila\n| journal= Mathematical Models and Methods in Applied Sciences  \n| volume= 9  \n| number= 02  \n| pages= 161–209  \n| year= 1999  \n| publisher= World Scientific \n}}</ref>\n<ref>{{cite article\n|  title= Free surface flows simulations in Pelton turbines using an hybrid SPH-ALE method  \n|  author= Marongiu  Jean-Christophe and Leboeuf  Francis and Caro  Jo \\\"E lle and Parkinson  Etienne  \n|  journal= Journal of Hydraulic Research  \n|  volume= 48  \n|  number= S1  \n|  pages= 40–49  \n|  year= 2010  \n|  publisher= Taylor & Francis\n}}</ref>\n<ref>{{cite book\n|  title=Modelisation d'écoulements visqueux par methode SPH en vue d'application à l'hydrodynamique navale\n|  author=De Leffe, Matthieu\n|  year=2011\n|  publisher= PhD Thesis, Ecole centrale de Nantes\n}}</ref>.\n\n==== Incompressible approach ====\n==== Viscosity modelling ====\nIn general, the description of hydrodynamic flows require a convenient treatment of diffusive processes to model the [[viscosity]] in the [[Navier–Stokes equations]]. It needs special consideration because it involves the [[laplacian]] differential operator. Since the direct computation does not provide satisfactory results, several approaches to model the diffusion have been proposed.\n \n* Artificial viscosity\nIntroduced by Monaghan and Gingold\n<ref>{{cite journal\n| last = J.J. Monaghan\n| last2 = R.A. Gingold \n| title = Shock Simulation by the Particle Method \n| journal = Journal of Computational Physics \n| year = 1983\n| volume = 52\n| issue = 2 \n| pages = 347–389\n| bibcode = 1983JCoPh..52..374M \n| doi = 10.1016/0021-9991(83)90036-0 \n}}</ref>\nthe artificial viscosity was used to deal with high [[Mach number]] fluid flows. It reads\n:<math>\n\\Pi _{ij} = \\begin{cases}\n              \\displaystyle\\frac{-\\alpha \\bar{c}_{ij} \\phi_{ij} + \\beta \\phi^2_{ij}}{\\bar{\\rho}_{ij}} & \\quad \\boldsymbol{v}_{ij} \\cdot \\boldsymbol{r}_{ij} < 0\\\\\n              0    & \\quad \\boldsymbol{v}_{ij} \\cdot \\boldsymbol{r}_{ij} \\geq 0\n            \\end{cases}\n</math>\nHere, <math> \\alpha</math> is controlling a volume viscosity while <math> \\beta </math> acts similar to the Neumann Richtmeyr artificial viscosity. The <math> \\phi_{ij} </math> is defined by \n:<math>\n    \\phi_{ij} = \\frac{h\\boldsymbol{v}_{ij}\\cdot \\boldsymbol{r}_{ij}}{\\Vert \\boldsymbol{r}_{ij} \\Vert^2 + \\eta_h^2}.\n</math>\nThe artificial viscosity also has shown to improve the overall stability of general flow simulations. Therefore, it is applied to inviscid problems in the following form \n:<math>\n    \\Pi_{ij} = \\alpha h c  \\frac{\\boldsymbol{v}_{ij} \\cdot \\boldsymbol{r}_{ij}}{\\Vert \\boldsymbol{r}_{ij} \\Vert^2 +\\eta_h^2 }.\n</math>\nIt is possible to not only stabilize inviscid simulations but also to model the physical viscosity by this approach. To do so \n:<math>\n    \\alpha h c = 2(n+2) \\frac{\\mu}{\\rho}\n</math>\nis substituted in the equation above, where <math> n </math> is the number of spartial dimensions of the model. This approach introduces the bulk viscosity <math> \\zeta = \\frac{5}{3} \\mu </math>.\n\n* Morris\nFor low [[Reynolds numbers]] the viscosity model by Morris\n<ref>{{cite journal\n| last  = J.P. Morris\n| last2 = P.J. Fox\n| last3 = Y. Zhu\n| title = Modeling Low Reynolds Number Incompressible Flows Using SPH\n| journal = Journal of Computational Physics\n| year = 1997\n| volume = 136\n| issue = 1\n| pages = 214–226\n| bibcode = 1997JCoPh.136..214M\n| doi = 10.1006/jcph.1997.5776\n}}</ref>\nwas proposed. \n:<math>\n    [\\nu \\Delta \\boldsymbol{v}]_{ij} = \\frac{2\\nu}{\\rho_j} \\,\\frac{\\boldsymbol{r}_{ij} \\cdot \\nabla w_{h,ij}}{\\Vert \\boldsymbol{r}_{ij} \\Vert ^2 +\\eta_h^2}  \\, \\boldsymbol{v}_{ij}.\n</math>\n\n* LoShao\n\n==== Additional physics ====\n* Surface Tension\n* Heat transfer\n* Turbulence\n\n==== Multiphase extensions ====\n\n=== Astrophysics ===\n\nOften in astrophysics, one wishes to model self-gravity in addition to pure hydrodynamics. The particle-based nature of SPH makes it ideal to combine with a particle-based gravity solver, for instance [[Barnes–Hut simulation|tree gravity code]],<ref>{{citation\n  |title = PKDGRAV The Parallel k-D Tree Gravity Code\n  | author1 = Marios D. Dikaiakos\n  | author2 = Joachim Stadel\n  | url = http://www-hpcc.astro.washington.edu/faculty/trq/brandon/pkdgrav.html\n  | access-date = February 1, 2017\n}}</ref> [[Particle Mesh|particle mesh]], or [[P3M|particle-particle particle-mesh]].\n\n=== Solid mechanics ===\n\n=== Others ===\nThe [[discrete element method]], used for simulating [[granular material]]s, is related to SPH.\n\n== Variants of the method ==\n\n{{Empty section|date=July 2018}}\n\n== References ==\n{{Reflist|30em}}\n\n== Further reading ==\n\n* Hoover, W. G. (2006). Smooth Particle Applied Mechanics: The State of the Art, World Scientific.\n* [http://adsabs.harvard.edu/abs/1994MmSAI..65.1117S Impact Modelling with SPH] Stellingwerf, R. F., Wingate, C. A., Memorie della Societa Astronomia Italiana, Vol. 65, p.&nbsp;1117 (1994).\n* Amada, T., Imura, M., Yasumuro, Y., Manabe, Y. and Chihara, K. (2004) Particle-based fluid simulation on GPU, in proceedings of ACM Workshop on General-purpose Computing on Graphics Processors (August, 2004, Los Angeles, California).\n* Desbrun, M. and Cani, M-P. (1996). Smoothed Particles: a new paradigm for animating highly deformable bodies.  In Proceedings of Eurographics Workshop on Computer Animation and Simulation (August 1996, Poitiers, France).\n* Hegeman, K., Carr, N.A. and Miller, G.S.P.  Particle-based fluid simulation on the GPU.  In Proceedings of International Conference on Computational Science (Reading, UK, May 2006).  Proceedings published as Lecture Notes in Computer Science v. 3994/2006 (Springer-Verlag).\n* M. Kelager. (2006) Lagrangian Fluid Dynamics Using Smoothed Particle Hydrodynamics, M. Kelagar (MS Thesis, Univ. Copenhagen).\n* Kolb, A. and Cuntz, N. (2005). Dynamic particle coupling for GPU-based fluid simulation. In Proceedings of the 18th Symposium on Simulation Techniques (2005) pp.&nbsp;722–727.\n* Liu, G.R. and Liu, M.B. Smoothed Particle Hydrodynamics: a meshfree particle method.  Singapore: World Scientific (2003).\n* Monaghan, J.J. (1992). Smoothed Particle Hydrodynamics.  Annu. Rev. Astron. Astrophys. (1992). 30 : 543-74.\n* Muller, M., Charypar, D. and Gross, M. Particle-based Fluid Simulation for Interactive Applications, In Proceedings of Eurographics/SIGGRAPH Symposium on Computer Animation (2003), eds. D. Breen and M. Lin.\n* Vesterlund, M. Simulation and Rendering of a Viscous Fluid Using Smoothed Particle Hydrodynamics, (MS Thesis, Umea University, Sweden).\n* Violeau, D., Fluid Mechanics and the SPH method. Oxford University Press (2012).\n\n== External links ==\n* [http://www.ukaff.ac.uk/starcluster First large simulation of star formation using SPH]\n* [http://spheric-sph.org/ SPHERIC (SPH rEsearch and engineeRing International Community)]\n* [http://ia2.oats.inaf.it/index.php?option=com_content&view=section&id=12&Itemid=71 ITVO] is the web-site of The Italian Theoretical Virtual Observatory created to query a database of numerical simulation archive.\n* [http://www.stellingwerf.com/rfs-bin/index.cgi?action=PageView&id=33 SPHC Image Gallery] depicts a wide variety of test cases, experimental validations, and commercial applications of the SPH code SPHC.\n* [http://alumnus.caltech.edu/~heirich/resources/SmoothedParticleHydrodynamics.pdf A derivation of the SPH model starting from Navier-Stokes equations]\n\n=== Software ===\n* [http://www.algodoo.com/ Algodoo is a 2D simulation framework for education using SPH]\n* [http://canal.etsin.upm.es/aquagpusph AQUAgpusph] is the free (GPLv3) SPH of the researchers, by the researchers, for the researchers\n* [https://dive-solutions.de dive solutions] is a commercial web-based SPH engineering software for CFD purposes\n* [http://www.dual.sphysics.org DualSPHysics] is a mostly open source SPH code based on SPHysics and using GPU computing. The open source components are available under the LGPL.\n* [http://www.rchoetzlein.com/eng/ FLUIDS v.1] is a simple, open source (Zlib), real-time 3D SPH implementation in C++ for liquids for CPU and GPU.\n* [https://www.fluidix.ca Fluidix] is a GPU-based particle simulation API available from OneZero Software\n* [[GADGET]] [http://www.mpa-garching.mpg.de/galform/gadget/] is a freely available ([[General Public License|GPL]]) code for cosmological N-body/SPH simulations\n* [http://www.gpusph.org GPUSPH] SPH simulator with viscosity (GPLv3)\n* [http://www.itm.uni-stuttgart.de/research/pasimodo/pasimodo_en.php Pasimodo] is a program package for particle-based simulation methods, e.g. SPH\n* [http://pal.sourceforge.net/ Physics Abstraction Layer] is an open source abstraction system that supports real time physics engines with SPH support\n* [http://sourceforge.net/projects/punto/ Punto] is a freely available visualisation tool for particle simulations\n* [https://github.com/pypr/pysph pysph] Open Source Framework for Smoothed Particle Hydrodynamics in Python (New BSD License)\n* [http://www.simpartix.com SimPARTIX] is a commercial simulation package for SPH and DEM simulations from Fraunhofer IWM\n* [http://www.sph-flow.com/ SPH-flow]\n* [https://github.com/AndreaAmicarelliRSE/SPHERA SPHERA]\n* [http://www.sphysics.org/ SPHysics] is an open source SPH implementation in Fortran\n* [https://web.archive.org/web/20071113233849/http://www.astro.ex.ac.uk/people/dprice/splash/ SPLASH] is an open source (GPL) visualisation tool for SPH simulations\n* [http://sympler.org SYMPLER]: A freeware SYMbolic ParticLE simulatoR from the University of Freiburg.\n\n{{Numerical PDE}}\n\n{{Authority control}}\n\n[[Category:Numerical differential equations]]\n[[Category:Computational fluid dynamics]]"
    },
    {
      "title": "Spectral element method",
      "url": "https://en.wikipedia.org/wiki/Spectral_element_method",
      "text": "In the numerical solution of [[partial differential equations]], a topic in [[mathematics]], the '''spectral element method''' (SEM) is a formulation of the [[finite element method]] (FEM) that uses high degree [[piecewise]] [[polynomial]]s as basis functions. The spectral element method was introduced in a 1984 paper<ref>A. T. Patera. A spectral element method for fluid dynamics - Laminar flow in a channel expansion. ''Journal of Computational Physics'', 54:468--488, 1984.</ref> by A. T. Patera.\n\n== Discussion ==\n\nThe [[spectral method]] expands the solution in [[Trigonometric polynomial|trigonometric]] series, a chief advantage being that the resulting method is of very high order. \nThis approach relies on the fact that [[Trigonometric polynomial|trigonometric polynomials]] are an [[orthonormal basis]] for <math>L^2(\\Omega)</math> <ref>{{cite journal |last1=Muradova |first1=Aliki D. |title=The spectral method and numerical continuation algorithm for the von Kármán problem with postbuckling behaviour of solutions |journal=Adv Comput Math |volume=29 |issue=2 |pages=179–206, 2008. |doi=10.1007/s10444-007-9050-7}} </ref>. \nThe spectral element method chooses instead a high degree piecewise polynomial basis functions, also achieving a very high order of accuracy. \nSuch polynomials are usually orthogonal [[Chebyshev polynomial]]s or very high order [[Legendre polynomial]]s over non-uniformly spaced nodes. \nIn SEM computational error decreases exponentially as the order of approximating polynomial, therefore a fast convergence of solution to the exact solution is realized with fewer degrees of freedom of the structure in comparison with FEM.\nIn [[structural health monitoring]], FEM can be used for detecting large flaws in a structure, but as the size of the flaw is reduced there is a need to use a high frequency wave with a small wavelength. Therefore, the FEM mesh must be much finer, resulting in increased computational time and an inexact solution. \nSEM, with fewer degrees of freedom per node, can be useful for detecting small flaws. \nNon-uniformity of nodes helps to make the mass matrix diagonal, which saves time and memory and is also useful for adopting a central difference method (CDM). \nThe disadvantages of SEM include difficulty in modeling complex geometry, compared to the flexibility of FEM.\n\n== A-priori error estimate ==\n\nThe classic analysis of [[Galerkin method]]s and [[Céa's lemma]] holds here and it can be shown that, if ''u'' is the solution of the weak equation, ''u<sub>N</sub>'' is the approximate solution and <math>u \\in H^{s+1}(\\Omega)</math>:\n\n:<math>\\|u-u_N\\|_{H^1(\\Omega)} \\leqq C_s N^{-s} \\| u \\|_{H^{s+1}(\\Omega)}</math>\n\nwhere ''C'' is independent from ''N'' and ''s'' is no larger than the degree of the piecewise polynomial basis. As we increase ''N'', we can also increase the degree of the basis functions. In this case, if ''u'' is an [[analytic function]]:\n\n:<math>\\|u-u_N\\|_{H^1(\\Omega)} \\leqq C \\exp( - \\gamma N )</math>\n\nwhere <math>\\gamma</math> depends only on <math>u</math>.\n\n== Related methods ==\n* G-NI or SEM-NI are the most used spectral methods. The Galerkin formulation of spectral methods or spectral element methods, for G-NI or SEM-NI respectively, is modified and [[Gaussian numerical integration]] is used instead of integrals in the definition of the [[bilinear form]] <math>a(\\cdot,\\cdot)</math> and in the functional <math>F</math>. These methods are a family of [[Petrov&ndash;Galerkin method]]s. Their convergence is a consequence of  [[Strang's lemma]].\n* The spectral element method uses a [[tensor product]] space spanned by nodal basis functions associated with [[Gaussian_quadrature#Gauss–Lobatto_rules|Gauss&ndash;Lobatto point]]s. In contrast, the [[hp-FEM|p-version finite element method]] spans a space of high order polynomials by nodeless basis functions, chosen approximately orthogonal for [[numerical stability]]. Since not all interior basis functions need to be present, the p-version finite element method can create a space that contains all polynomials up to a given degree with fewer degrees of freedom.<ref>Barna Szabó and [[Ivo Babuška]], Finite element analysis, John Wiley & Sons, Inc., New York, 1991. {{isbn|0-471-50273-1}}</ref>  However, some speedup techniques possible in spectral methods due to their tensor-product character are no longer available. The name ''p-version'' means that accuracy is increased by increasing the order of the approximating polynomials (thus, ''p'') rather than decreasing the mesh size, ''h''.\n* The ''hp'' finite element method ([[hp-FEM]]) combines the advantages of the ''h'' and ''p'' refinements to obtain exponential convergence rates.<ref>P. Šolín, K. Segeth, I. Doležel: Higher-order finite element methods, Chapman & Hall/CRC Press, 2003. {{isbn|1-58488-438-X}}</ref>\n\n==Notes==\n<references/>\n\n{{Numerical PDE}}\n\n{{DEFAULTSORT:Spectral Element Method}}\n[[Category:Numerical differential equations]]\n[[Category:Partial differential equations]]\n[[Category:Computational fluid dynamics]]\n[[Category:Finite element method]]"
    },
    {
      "title": "Split-step method",
      "url": "https://en.wikipedia.org/wiki/Split-step_method",
      "text": "In [[numerical analysis]], the '''split-step (Fourier) method''' is a [[Pseudo-spectral method|pseudo-spectral]] numerical method used to solve nonlinear [[partial differential equation]]s like the [[nonlinear Schrödinger equation]]. The name arises for two reasons. First, the method relies on computing the solution in small steps, and treating the linear and the nonlinear steps separately (see below). Second, it is necessary to [[Fourier transform]] back and forth because the linear step is made in the [[frequency domain]] while the nonlinear step is made in the [[time domain]].\n\nAn example of usage of this method is in the field of light pulse propagation in optical fibers, where the interaction of linear and nonlinear mechanisms makes it difficult to find general analytical solutions. However, the split-step method provides a numerical solution to the problem. Another application of the split-step method that has been gaining a lot of traction since the 2010s is the simulation of [[Kerr frequency comb]] dynamics in [[optical microresonators]].<ref>{{Cite journal|last=Erkintalo|first=Miro|last2=Sylvestre|first2=Thibaut|last3=Randle|first3=Hamish G.|last4=Coen|first4=Stéphane|date=2013-01-01|title=Modeling of octave-spanning Kerr frequency combs using a generalized mean-field Lugiato&#x2013;Lefever model|url=https://www.osapublishing.org/ol/abstract.cfm?uri=ol-38-1-37|journal=Optics Letters|language=EN|volume=38|issue=1|pages=37–39|doi=10.1364/OL.38.000037|issn=1539-4794|arxiv=1211.1697}}</ref><ref>{{Cite journal|last=Maleki|first=L.|last2=Seidel|first2=D.|last3=Ilchenko|first3=V. S.|last4=Liang|first4=W.|last5=Savchenkov|first5=A. A.|last6=Matsko|first6=A. B.|date=2011-08-01|title=Mode-locked Kerr frequency combs|url=https://www.osapublishing.org/ol/abstract.cfm?uri=ol-36-15-2845|journal=Optics Letters|language=EN|volume=36|issue=15|pages=2845–2847|doi=10.1364/OL.36.002845|issn=1539-4794}}</ref><ref>{{Cite journal|last=Hansson|first=Tobias|last2=Wabnitz|first2=Stefan|date=2016|title=Dynamics of microresonator frequency comb generation: models and stability|url=https://www.degruyter.com/view/j/nanoph.2016.5.issue-2/nanoph-2016-0012/nanoph-2016-0012.xml|journal=Nanophotonics|volume=5|issue=2|pages=231–243|doi=10.1515/nanoph-2016-0012|issn=2192-8606}}</ref> The relative ease of implementation of the [[Lugiato–Lefever equation]] with reasonable numerical cost, along with its success in reproducing experimental spectra as well as predicting [[soliton]] behavior in these microresonators has made the method very popular. \n\n==Description of the method==\nConsider, for example, the [[nonlinear Schrödinger equation]]<ref name=\"NonlinearAgrawal\">{{cite book |last=Agrawal |first=Govind P. |title=Nonlinear Fiber Optics |edition=3rd|year=2001 |publisher=Academic Press |location=San Diego, CA, USA|isbn=0-12-045143-3}}</ref>\n:<math>{\\partial A \\over \\partial z} = - {i\\beta_2 \\over 2} {\\partial^2 A \\over \\partial t^2} + i \\gamma | A |^2 A = [\\hat D + \\hat N]A, </math>\nwhere <math>A(t,z)</math> describes the pulse envelope in time <math>t</math> at the spatial position <math>z</math>. The equation can be split into a linear part,\n:<math>{\\partial A_D \\over \\partial z} = - {i\\beta_2 \\over 2} {\\partial^2 A \\over \\partial t^2} = \\hat D A, </math>\nand a nonlinear part,\n:<math>{\\partial A_N \\over \\partial z} = i \\gamma | A |^2 A = \\hat N A. </math>\nBoth the linear and the nonlinear parts have analytical solutions, but the [[nonlinear Schrödinger equation]] containing both parts does not have a general analytical solution.\n\nHowever, if only a 'small' step <math>h</math> is taken along <math>z</math>, then the two parts can be treated separately with only a 'small' numerical error. One can therefore first take a small nonlinear step,\n\n:<math>A_N(t, z+h) = \\exp\\left[i \\gamma |A|^2 h \\right] A(t, z), </math>\n\nusing the analytical solution.\n\nThe dispersion step has an analytical solution in the [[frequency domain]], so it is first necessary to Fourier transform <math>A_D</math> using\n:<math>\\tilde A_D(\\omega, z) = \\int_{-\\infty}^\\infty A_D(t,z) \\exp[i(\\omega-\\omega_0)t] dt </math>,\nwhere <math>\\omega_0</math> is the center frequency of the pulse.\nIt can be shown that using the above definition of the [[Fourier transform]], the analytical solution to the linear step, commuted with the frequency domain solution for the nonlinear step, is\n\n:<math>\\tilde{A}(\\omega, z+h) = \\exp\\left[{i \\beta_2 \\over 2} (\\omega-\\omega_0)^2 h \\right] \\tilde{A}_N(\\omega, z).</math>\n\nBy taking the [[inverse Fourier transform]] of <math>\\tilde{A}(\\omega, z+h)</math> one obtains <math>A\\left(t, z+h\\right)</math>; the pulse has thus been propagated a small step <math>h</math>. By repeating the above <math>N</math> times, the pulse can be propagated over a length of <math>N h</math>.\n\nThe above shows how to use the method to propagate a solution forward in space; however, many physics applications, such as studying the evolution of a wave packet describing a particle, require one to propagate the solution forward in time rather than in space. The non-linear Schrödinger equation, when used to govern the time evolution of a wave function, takes the form\n\n:<math>i \\hbar {\\partial \\psi \\over \\partial t} = - {{\\hbar}^2 \\over {2m}} {\\partial^2 \\psi \\over \\partial x^2} +  \\gamma | \\psi|^2 \\psi = [\\hat D + \\hat N]\\psi, </math>\nwhere <math>\\psi(x, t)</math> describes the wave function at position <math>x</math> and time <math>t</math>. Note that \n:<math>\\hat D=- {{\\hbar}^2 \\over {2m}} {\\partial^2 \\over \\partial x^2}</math> and <math> \\hat N =\\gamma | \\psi|^2 </math>, and that <math> m </math> is the mass of the particle and <math> \\hbar </math> is Planck's constant over <math>2\\pi</math>.\nThe formal solution to this equation is a complex exponential, so we have that\n:<math> \\psi(x, t)=e^{-it(\\hat D+\\hat N)}\\psi(x, 0)</math>.\nSince <math>\\hat{D}</math> and <math>\\hat{N}</math> are operators, they do not in general commute. However, the Baker-Hausdorff formula can be applied to show that the error from treating them as if they do will be of order <math>dt^2</math> if we are taking a small but finite time step <math>dt</math>. We therefore can write\n:<math> \\psi(x, t+dt) \\approx e^{-idt\\hat D}e^{-idt\\hat N}\\psi(x, t)</math>.\nThe part of this equation involving <math> \\hat N </math> can be computed directly using the wave function at time <math> t </math>, but to compute the exponential involving <math> \\hat D </math> we use the fact that in frequency space, the partial derivative operator can be converted into a number by substituting <math> ik </math> for <math> \\partial \\over \\partial x </math>, where <math> k</math> is the frequency (or more properly, wave number, as we are dealing with a spatial variable and thus transforming to a space of spatial frequencies—i.e. wave numbers) associated with the Fourier transform of whatever is being operated on. Thus, we take the Fourier transform of \n:<math>e^{-idt\\hat N}\\psi(x, t)</math>,\nrecover the associated wave number, compute the quantity\n:<math> e^{idtk^2}</math>,\nand use it to find the product of the complex exponentials involving <math> \\hat N</math> and <math> \\hat D </math> in frequency space as below:\n:<math> e^{idtk^2}F[e^{-idt\\hat N}\\psi(x, t)]</math>,\nwhere <math> F</math> denotes a Fourier transform. We then inverse Fourier transform this expression to find the final result in physical space, yielding the final expression\n:<math>\\psi(x, t+dt)=F^{-1}[e^{idtk^2}F[e^{-idt\\hat N}\\psi(x, t)]]</math>.\nA variation on this method is the symmetrized split-step Fourier method, which takes half a time step using one operator, then takes a full-time step with only the other, and then takes a second half time step again with only the first. This method is an improvement upon the generic split-step Fourier method because its error is of order <math>dt^3</math> for a time step <math>dt</math>.\nThe [[Fourier transform]]s of this [[algorithm]] can be computed relatively fast using the ''[[Fast Fourier transform|fast Fourier transform (FFT)]]''. The split-step Fourier method can therefore be much faster than typical [[finite difference method]]s.<ref name=\"Taha1984\">{{cite journal\n | author = T. R. Taha and M. J. Ablowitz\n | year = 1984\n | month = \n | title = Analytical and numerical aspects of certain nonlinear evolution equations. II. Numerical, nonlinear Schrödinger equation\n | journal = J. Comput. Phys.\n | volume = 55\n | issue = 2\n | pages = 203–230\n | doi =10.1016/0021-9991(84)90003-2\n | id = \n | url = \n | format = \n | accessdate = \n |bibcode = 1984JCoPh..55..203T }}</ref>\n\n{{Numerical PDE}}\n\n==References==\n{{reflist}}\n\n==External references==\n* Thomas E. Murphy, Software, http://www.photonics.umd.edu/software/ssprop/\n* Andrés A. Rieznik, Software, http://www.freeopticsproject.org\n* Prof. G. Agrawal, Software, http://www.optics.rochester.edu/workgroups/agrawal/grouphomepage.php?pageid=software\n* Thomas Schreiber, Software, http://www.fiberdesk.com\n* Edward J. Grace, Software, http://www.mathworks.com/matlabcentral/fileexchange/24016\n\n[[Category:Numerical differential equations]]\n[[Category:Fiber optics]]"
    },
    {
      "title": "Stencil (numerical analysis)",
      "url": "https://en.wikipedia.org/wiki/Stencil_%28numerical_analysis%29",
      "text": "[[Image:Crank-Nicolson-stencil.svg|thumb|200px|right|The [[Crank–Nicolson method|Crank–Nicolson]] stencil for a 1D problem.]]\nIn [[mathematics]], especially the areas of [[numerical analysis]] concentrating on the [[numerical partial differential equations|numerical solution of partial differential equations]], a '''stencil''' is a geometric arrangement of a nodal group that relate to the point of interest by using a numerical approximation routine. Stencils are the basis for many algorithms to numerically solve [[partial differential equation]]s (PDE). Two examples of stencils are the [[five-point stencil]] and the [[Crank–Nicolson method]] stencil.\n\nStencils are classified into two categories: [[Compact stencil|compact]] and [[Non-compact stencil|non-compact]], the difference being the layers from the point of interest that are also used for calculation.\n\nIn the notation used for one-dimensional stencils n-1, n, n+1 indicate the time steps where timestep n and n-1 have known solutions and time step n+1 is to be calculated. The spatial location of finite volumes used in the calculation are indicated by j-1, j and j+1.\n\n== Etymology ==\n\nGraphical representations of node arrangements and their coefficients arose early in the study of PDEs. Authors continue to use varying terms for these such as \"relaxation patterns\", \"operating instructions\", \"logenzes\", or \"point patterns\".<ref>{{cite journal|last1=Emmons|first1=Howard W.|title=The numerical solution of partial differential equations|journal=Quarterly of Applied Mathematics|date=1 October 1944|volume=2|issue=3|pages=173–195|doi=10.1090/qam/10680|url=http://www.ams.org/journals/qam/1944-02-03/S0033-569X-1944-10680-3/S0033-569X-1944-10680-3.pdf|accessdate=17 April 2017}}</ref><ref name=Milne>{{cite book|last1=Milne|first1=William Edmund|title=Numerical solution of differential equations.|date=1953|publisher=Wiley|pages=128–131|edition=1st|url=http://www.worldcat.org/title/numerical-solution-of-differential-equations/oclc/527661|accessdate=17 April 2017|language=English}}</ref> The term \"stencil\" was coined for such patterns to reflect the concept of laying out a [[stencil]] in the usual sense over a computational grid to reveal just the numbers needed at a particular step.<ref name=Milne/>\n\n== Calculation of coefficients ==\n\nThe [[finite difference coefficient]]s for a given stencil are fixed by the choice of node points. The coefficients may be calculated by taking the derivative of the [[Lagrange polynomial]] interpolating between the node points,<ref name=\"RBF\"/> by computing the [[Taylor expansion]] around each node point and solving a linear system,<ref>{{cite web|last1=Taylor|first1=Cameron|title=Finite Difference Coefficients Calculator|url=http://web.media.mit.edu/~crtaylor/calculator.html|website=web.media.mit.edu|accessdate=9 April 2017|language=en}}</ref> or by enforcing that the stencil is exact for [[monomial]]s up to the degree of the stencil.<ref name=\"RBF\">{{cite book|last1=Fornberg|first1=Bengt|last2=Flyer|first2=Natasha|author2-link=Natasha Flyer|title=A Primer on Radial Basis Functions with Applications to the Geosciences|date=2015|publisher=Society for Industrial and Applied Mathematics|isbn=9781611974027|url=http://epubs.siam.org/doi/book/10.1137/1.9781611974041|doi=10.1137/1.9781611974041.ch1|accessdate=9 April 2017|chapter=Brief Summary of Finite Difference Methods}}</ref> For equi-spaced nodes, they may be calculated efficiently as the [[Padé approximant]] of <math>x^s \\cdot (\\log x)^m</math>, where <math>m</math> is the order of the stencil and <math>s</math> is the ratio of the distance between the leftmost derivative and the left function entries divided by the grid spacing.<ref>{{cite journal|last1=Fornberg|first1=Bengt|title=Classroom Note: Calculation of Weights in Finite Difference Formulas|journal=SIAM Review|date=January 1998|volume=40|issue=3|pages=685–691|doi=10.1137/S0036144596322507}}</ref>\n\n==See also==\n*[[Compact stencil]]\n*[[Non-compact stencil]]\n*[[Five-point stencil]]\n\n== References ==\n<references/>\n* W. F. Spotz. [https://www.researchgate.net/profile/William_Spotz/publication/2591103_High-Order_Compact_Finite_Difference_Schemes_for_Computational_Mechanics/links/00463524456e49822a000000/High-Order-Compact-Finite-Difference-Schemes-for-Computational-Mechanics.pdf High-Order Compact Finite Difference Schemes for Computational Mechanics]. PhD thesis, University of Texas at Austin, Austin, TX, 1995.\n* Communications in Numerical Methods in Engineering, Copyright © 2008 John Wiley & Sons, Ltd.\n\n[[Category:Numerical differential equations]]"
    },
    {
      "title": "Stiff equation",
      "url": "https://en.wikipedia.org/wiki/Stiff_equation",
      "text": "{{Short description|Differential equation exhibiting unusual instability}}\nIn [[mathematics]], a '''stiff equation''' is a [[differential equation]] for which certain [[numerical ordinary differential equations|numerical methods]] for solving the equation are [[numerical stability|numerically unstable]], unless the step size is taken to be extremely small. It has proven difficult to formulate a precise definition of stiffness, but the main idea is that the equation includes some terms that can lead to rapid variation in the solution.\n\nWhen integrating a differential equation numerically, one would expect the requisite step size to be relatively small in a region where the [[solution curve]] displays much variation and to be relatively large where the solution curve straightens out to approach a line with slope nearly zero.  For some problems this is not the case.  Sometimes the step size is forced down to an unacceptably small level in a region where the solution curve is very smooth.  The phenomenon being exhibited here is known as '''stiffness'''.  In some cases we may have two different problems with the same solution, yet problem one is ''not'' stiff and problem two ''is'' stiff.  Clearly the phenomenon cannot be a property of the exact solution, since this is the same for both problems, and must  be a property of the differential system itself.  It is thus appropriate to speak of ''stiff systems''.\n\n== Motivating example ==\n[[Image:StiffEquationNumericalSolvers.svg|thumb|500px|right|Explicit numerical methods exhibiting instability when integrating a stiff ordinary differential equation]]\n\nConsider the [[initial value problem]]\n:{{NumBlk|:|<math>\\,y'(t)=-15y(t),\\quad t \\ge 0, y(0)=1. </math>|{{EquationRef|1}}}}\nThe exact solution (shown in cyan) is\n:{{NumBlk|:|<math>y(t)=e^{-15t}\\,</math> with <math>y(t) \\to 0</math> as <math>t\\to\\infty .</math>|{{EquationRef|2}}}}\n\nWe seek a [[numerical solution]] that exhibits the same behavior.\n\nThe figure (right) illustrates the numerical issues for various numerical integrators applied on the equation.\n\n{{ordered list\n|1= [[Euler's method]] with a step size of ''h'' = 1/4 oscillates wildly and quickly exits the range of the graph (shown in red).\n|2= Euler's method with half the step size, ''h'' = 1/8, produces a solution within the graph boundaries, but oscillates about zero (shown in green).\n|3= The [[trapezoidal rule (differential equations)|trapezoidal method]] (that is, the two-stage [[linear multistep method|Adams–Moulton method]]) is given by\n:{{NumBlk|:|<math>y_{n+1}=y_n+\\frac{1}{2}h\\left(f(t_n,y_n)+f(t_{n+1},y_{n+1})\\right), </math>|{{EquationRef|3}}}}\nwhere <math>\\textstyle y'=f(t,y)</math>. Applying this method instead of Euler's method gives a much better result (blue). The numerical results decrease monotonically to zero, just as the exact solution does.\n}}\n\nOne of the most prominent examples of the stiff [[Ordinary differential equation|ODE]]s is a system that describes the [[chemical reaction]] of Robertson:\n:{{NumBlk|:|\n<math> \\dot x = -0.04 x + 10^4 y \\cdot z</math><br>\n<math> \\dot y = 0.04 x - 10^4 y \\cdot z - 3\\cdot 10^7 y^2 </math><br>\n<math> \\dot z = 3\\cdot 10^7 y^2</math>\n|{{EquationRef|4}}}}\nIf one treats this system on a short interval, for example, <math>t \\in [0, 40]</math> there is no problem in numerical integration. However, if the interval is very large (10<sup>11</sup> say), then many standard codes fail to integrate it correctly.\n\nAdditional examples are the sets of ODEs resulting from the temporal integration of large chemical reaction mechanisms. Here, the stiffness arises from the coexistence of very slow and very fast reactions. To solve them, the software packages [[Kinetic PreProcessor|KPP]] and [[Autochem]] can be used.\n\n== Stiffness ratio ==\nConsider the [[ordinary differential equation#Reduction of order|linear constant coefficient inhomogeneous system]]\n\n:{{NumBlk|:|<math> \\mathbf y' = \\mathbf A \\mathbf y + \\mathbf f(x), </math>|{{EquationRef|5}}}}\n\nwhere <math> \\mathbf y, \\mathbf f \\in \\mathbb{R}^n </math> and <math> \\mathbf A </math> is a constant, diagonalizable, <math> n \\times n </math> matrix with eigenvalues <math> \\lambda_t \\in \\mathbb{C}, t = 1, 2, \\ldots , n </math> (assumed distinct) and corresponding eigenvectors <math> \\mathbf c_t \\in \\mathbb{C}^n, t = 1, 2, \\ldots , n </math>.  The general solution of ({{EquationNote|5}}) takes the form\n\n:{{NumBlk|:|<math> \\mathbf y(x) = \\sum_{t=1}^{n} \\kappa_t \\exp ( \\lambda_t x ) \\mathbf c_t\n\t    + \\mathbf g(x), </math>|{{EquationRef|6}}}}\n\nwhere the κ<sub>t</sub> are arbitrary constants and <math> \\mathbf g(x) </math> is a particular integral.  Now let us suppose that\n\n:{{NumBlk|:|<math> Re(\\lambda_t) < 0, \\qquad\n\t    t = 1, 2, \\ldots , n, </math>|{{EquationRef|7}}}}\n\nwhich implies that each of the terms\n\t<math> \\exp ( \\lambda_t x ) \\mathbf c_t \\rightarrow 0 </math>\n\tas <math> x \\rightarrow \\infty </math>, so that the solution <math> \\mathbf y(x) </math>\n\tapproaches <math> \\mathbf g(x) </math> asymptotically as <math> x \\rightarrow \\infty </math>;\n\tthe term <math> \\exp ( \\lambda_t x ) \\mathbf c_t </math> will decay monotonically if λ<sub>t</sub> is real and sinusoidally if λ<sub>t</sub> is complex.\nInterpreting ''x'' to be time (as it often is in physical problems)\nit is appropriate to call\n<math> \\Sigma_{t=1}^n \\kappa_t \\exp ( \\lambda_t x ) \\mathbf c_t </math> the\n'''transient solution''' and <math> \\mathbf g(x) </math> the '''steady-state solution'''.\nIf <math> |Re(\\lambda_t)| </math> is large, then the corresponding\nterm <math> \\kappa_t \\exp ( \\lambda_t x ) \\mathbf c_t </math> will decay quickly as\n''x'' increases and is thus called a '''fast transient'''; if\n<math> | Re(\\lambda_t) | </math> is small, the corresponding term\n<math> \\kappa_t \\exp ( \\lambda_t x ) \\mathbf c_t </math> decays slowly and is\ncalled a '''slow transient'''.  Let <math> \\overline{\\lambda}, \\underline{\\lambda}\n\\in \\{ \\lambda_t, t = 1, 2, \\ldots , n \\} </math> be defined by\n\n:{{NumBlk|:|<math> \n| Re( \\overline{\\lambda} ) | \\geq\n| Re( \\lambda_t ) | \\geq\n| Re( \\underline{\\lambda} ) |, \\qquad\nt = 1, 2, \\ldots , n </math>|{{EquationRef|8}}}}\n\nso that <math> \\kappa_t \\exp ( \\overline{\\lambda} x ) \\mathbf c_t </math> is the fastest\ntransient and <math> \\kappa_t \\exp ( \\underline{\\lambda} x ) \\mathbf c_t </math> the\nslowest.  We now define the '''stiffness ratio''' as\n\n:{{NumBlk|:|<math> \\frac{ | Re( \\overline{\\lambda} ) | }\n{ | Re( \\underline{\\lambda} ) | }. </math><ref>{{harvtxt|Lambert|1992|pp=216–217}}</ref>|{{EquationRef|9}}}}\n\n== Characterization of stiffness ==\nIn this section we consider various aspects of the phenomenon of stiffness.  \"Phenomenon\" is probably a more appropriate word than \"property\", since the latter rather implies that stiffness can be defined in precise mathematical terms; it turns out not to be possible to do this in a satisfactory manner, even for the restricted class of linear constant coefficient systems.  We shall also see several qualitative statements that can be (and mostly have been) made in an attempt to encapsulate the notion of stiffness, and state what is probably the most satisfactory of these as a \"definition\" of stiffness.\n\nJ. D. Lambert defines '''stiffness''' as follows:\n\n<blockquote> If a [[numerical analysis|numerical method]] with a finite region of absolute [[numerical stability|stability]], applied to a system with any [[initial value problem|initial conditions]], is forced to use in a certain interval of integration a steplength which is excessively small in relation to the smoothness of the exact solution in that interval, then the system is said to be '''stiff''' in that interval. </blockquote>\n\nThere are other characteristics which are exhibited by many examples of stiff problems, but for each there are counterexamples, so these characteristics do not make good definitions of stiffness.  Nonetheless, definitions based upon  these characteristics are in common use by some authors and are good clues as to the presence of stiffness.  Lambert refers to these as \"statements\" rather than definitions, for the aforementioned reasons.  A few of these are:\n#  A linear constant coefficient system is stiff if all of its [[eigenvalue]]s have negative real part and the stiffness ratio is large.\n#  Stiffness occurs when stability requirements, rather than those of accuracy, constrain the steplength.\n#  Stiffness occurs when some components of the solution decay much more rapidly than others.<ref>{{harvtxt|Lambert|1992|pp=217–220}}</ref>\n\n== Etymology ==\nThe origin of the term \"stiffness\" seems to be somewhat of a mystery.  According to [[Joseph Oakland Hirschfelder]], the term \"stiff\" is used because such systems correspond to tight coupling between the driver and [[driven oscillations|driven]] in [[servomechanism]]s.<ref>{{harvtxt|Hirshfelder|1963}}</ref>\nAccording to Richard. L. Burden and J. Douglas Faires,\n\n<blockquote> Significant difficulties can occur when standard [[numerical analysis|numerical techniques]] are applied to approximate the solution of a [[differential equation]] when the exact solution contains terms of the form ''e''<sup>λt</sup>, where λ is a complex number with negative real part.\n...\nProblems involving rapidly decaying transient solutions occur naturally in a wide variety of applications, including the study of spring and damping systems, the analysis of [[control system]]s, and problems in [[chemical kinetics]].  These are all examples of a class of problems called '''stiff''' (mathematical stiffness) '''systems''' of differential equations, due to their application in analyzing the motion of spring and mass [[harmonic oscillator|systems]] having large [[hooke's law|spring constants]] (physical [[stiffness]]).<ref>{{harvtxt|Burden|Faires|1993|p=314}}</ref> </blockquote>\nFor example, the [[initial value problem]]\n:{{NumBlk|:|<math> m \\ddot x + c \\dot x + k x = 0,\n\\qquad x(0) = x_0,\n\\qquad \\dot x(0) = 0, </math>|{{EquationRef|10}}}}\nwith ''m'' = 1, ''c'' = 1001, ''k'' = 1000, can be written in the form ({{EquationNote|5}}) with ''n'' = 2 and\n:{{NumBlk|:|<math> \\mathbf A = \\left( \\begin{array}{rr}\n0 &     1 \\\\\n-1000 & -1001\n\\end{array} \\right), </math>|{{EquationRef|11}}}}\n:{{NumBlk|:|<math> \\mathbf f(t) = \\left( \\begin{array}{c}\n0 \\\\\n0\n\\end{array} \\right), </math>|{{EquationRef|12}}}}\n:{{NumBlk|:|<math> \\mathbf x(0) = \\left( \\begin{array}{c}\nx_0 \\\\\n0\n\\end{array} \\right), </math>|{{EquationRef|13}}}}\nand has eigenvalues\n<math> \\overline{\\lambda} = -1000, \\underline{\\lambda} = -1 </math>.  Both eigenvalues have negative real part and the stiffness ratio is\n:{{NumBlk|:|<math> \\frac{ | -1000 | }{ | -1 | } = 1000, </math>|{{EquationRef|14}}}}\nwhich is fairly large.  System ({{EquationNote|10}}) then certainly satisfies statements 1 and 3.  Here the spring constant ''k'' is large and the damping constant ''c'' is even larger.<ref>{{harvtxt|Kreyszig|1972|pp=62–68}}</ref>  (Note that \"large\" is a vague, subjective term, but the larger the above quantities are, the more pronounced will be the effect of stiffness.)\nThe exact solution to ({{EquationNote|10}}) is\n:{{NumBlk|:|<math> x(t) = x_0 \\left( - \\frac{1}{999} e^{-1000 t}\n+ \\frac{1000}{999} e^{-t} \\right)\n\\approx x_0 e^{-t}. </math>|{{EquationRef|15}}}}\nNote that ({{EquationNote|15}}) behaves quite nearly as a simple exponential ''x''<sub>0</sub>''e''<sup>−''t''</sup>, but the presence of the ''e''<sup>−1000''t''</sup> term, even with a small coefficient is enough to make the numerical computation very sensitive to step size.  Stable integration of ({{EquationNote|10}}) requires a very small step size until well into the smooth part of the solution curve, resulting in an error much smaller than required for accuracy.  Thus the system also satisfies statement 2 and Lambert's definition.\n\n== A-stability ==\n\nThe behaviour of numerical methods on stiff problems can be analyzed by applying these methods to the test equation {{math|{{var|y'}} {{=}} {{var|ky}}}} subject to the initial condition {{math|{{var|y}}(0) {{=}} 1}} with <math>k \\in \\mathbb{C}</math>. The solution of this equation is {{math |{{var|y}} ({{var|t}}) {{=}} {{var|e}}<sup>{{var|kt}}</sup>}}. This solution approaches zero as <math>t\\to\\infty</math> when <math>\\mathrm{Re} \\, (k) < 0.</math> If the numerical method also exhibits this behaviour (for a fixed step size), then the method is said to be A-stable.<ref>This definition is due to {{harvtxt|Dahlquist|1963}}.</ref> (Note that a numerical method that is L-stable (see below) has the stronger property that the solution approaches zero in a single step as the step size goes to infinity.)  A-stable methods do not exhibit the instability problems as described in the motivating example.\n\n== Runge–Kutta methods ==\n[[Runge–Kutta method]]s applied to the test equation <math>y' = k\\cdot y</math> take the form <math>y_{n+1} = \\phi(hk)\\cdot y_n</math>, and, by induction, <math>y_n = \\left(\\phi(hk)\\right)^n\\cdot y_0</math>. The function <math>\\phi</math> is called the ''stability function''. Thus, the condition that <math>y_n \\to 0</math> as <math>n \\to \\infty</math> is equivalent to <math>|\\phi(hk)| < 1</math>. This motivates the definition of the ''region of absolute stability'' (sometimes referred to simply as ''stability region''), which is the set <math>\\{z \\in \\mathbb{C} |\\,|\\phi(z)|< 1 \\}</math>. The method is A-stable if the region of absolute stability contains the set <math>\\{ z \\in \\Complex | \\mathrm{Re}(z) < 0 \\}</math>, that is, the left half plane.\n\n=== Example: The Euler methods ===\n[[Image:Stability region for Euler method.svg|thumb|The pink disk shows the stability region for the Euler method.]]\nConsider the Euler methods above. The explicit [[Euler method]] applied to the test equation <math>y' = k\\cdot y</math> is\n: <math>y_{n+1} = y_n + h\\cdot f(t_n, y_n) = y_n + h\\cdot(ky_n) = y_n + h\\cdot k\\cdot y_n = (1+h\\cdot k)y_n. </math>\nHence, <math>y_n = (1 + hk)^n\\cdot y_0</math> with <math>\\phi(z) = 1 + z</math>. The region of absolute stability for this method is thus <math>\\{ z \\in \\mathbb{C} | |1+z| < 1 \\}</math> which is the disk depicted on the right. The Euler method is not A-stable.\n\nThe motivating example had <math>k = -15</math>. The value of ''z'' when taking step size <math>h = 1/4</math> is <math>z = -15*1/4 = -3.75</math>, which is outside the stability region. Indeed, the numerical results do not converge to zero. However, with step size <math>h = 1/8</math>, we have <math>z = -1.875</math> which is just inside the stability region and the numerical results converge to zero, albeit rather slowly.\n\n=== Example: Trapezoidal method ===\n[[Image:Stability region for trapezoidal method.svg|thumb|The pink region is the stability region for the trapezoidal method.]]\nConsider the trapezoidal method\n:<math> y_{n+1} = y_n + \\tfrac{1}{2}h\\cdot \\left(f(t_n,y_n)+f(t_{n+1},y_{n+1})\\right),</math>\nwhen applied to the test equation <math>y' = k\\cdot y</math>, is\n:<math> y_{n+1} = y_n + \\tfrac{1}{2}h\\cdot \\left(ky_n+ky_{n+1}\\right).</math>\nSolving for <math>y_{n+1}</math> yields\n:<math>y_{n+1}=\\frac{1+\\frac{1}{2}hk}{1-\\frac{1}{2}hk}\\cdot y_n.</math>\nThus, the stability function is\n:<math>\\phi(z)={1+{1\\over 2}z \\over 1-{1\\over 2}z}</math>\nand the region of absolute stability is\n:<math>\\left\\{ z \\in \\mathbb{C} \\left|\\ \\left| {1+{1\\over 2}z \\over 1-{1\\over 2}z} \\right| < 1 \\right.\\right\\}.</math>\nThis region contains the left-half plane, so the trapezoidal method is A-stable. In fact, the stability region is identical to the left-half plane, and thus the numerical solution of <math>y' = k\\cdot y</math> converges to zero if ''and only if'' the exact solution does. Nevertheless, the trapezoidal method does not have perfect behavior: it does damp all decaying components, but rapidly decaying components are damped only very mildly, because <math> \\phi(z) \\to 1 </math> as <math> z \\to -\\infty </math>. This led to the concept of [[L-stability]]: a method is L-stable if it is A-stable and <math> |\\phi(z)| \\to 0 </math> as <math> z \\to \\infty </math>. The trapezoidal method is A-stable but not L-stable. The [[implicit Euler method]] is an example of an L-stable method.<ref>The definition of L-stability is due to {{harvtxt|Ehle|1969}}.</ref>\n\n=== General theory ===\nThe stability function of a [[Runge–Kutta method]] with coefficients <math>A</math> and <math>b</math> is given by\n:<math> \\phi(z) = \\frac{\\det(I-zA+zeb^T)}{\\det(I-zA)}, </math>\nwhere <math>e</math> denotes the vector with ones. This is a [[rational function]] (one [[polynomial]] divided by another).\n\nExplicit Runge–Kutta methods have a [[triangular matrix|strictly lower triangular]] coefficient matrix <math>A</math> and thus, their stability function is a polynomial. It follows that explicit Runge–Kutta methods cannot be A-stable.\n\nThe stability function of implicit Runge–Kutta methods is often analyzed using [[order star]]s. The order star for a method with stability function <math>\\phi</math> is defined to be the set <math>\\{ z \\in \\Complex | |\\phi(z)| > |\\mathrm{e}^z| \\}</math>. A method is A-stable if and only if its stability function has no poles in the left-hand plane and its order star contains no purely imaginary numbers.<ref>The definition is due to {{harvtxt|Wanner|Hairer|Nørsett|1978}}; see also {{harvtxt|Iserles|Nørsett|1991}}.</ref>\n\n== Multistep methods ==\n[[Linear multistep method]]s have the form\n:<math>y_{n+1}=\\sum_{i=0}^s a_i y_{n-i}+h\\sum_{j=-1}^s b_j f(t_{n-j},y_{n-j}).</math>\nApplied to the test equation, they become\n:<math>y_{n+1}=\\sum_{i=0}^s a_i y_{n-i}+hk\\sum_{j=-1}^s b_jy_{n-j},</math>\nwhich can be simplified to\n:<math>(1-b_{-1}z)y_{n+1}-\\sum_{j=0}^s (a_j+b_jz)y_{n-j}=0</math>\nwhere ''z'' = ''hk''. This is a linear [[recurrence relation]]. The method is A-stable if all solutions {''y''<sub>''n''</sub>} of the recurrence relation converge to zero when Re ''z'' < 0. The characteristic polynomial is\n:<math>\\Phi(z, w) = w^{s+1}-\\sum_{i=0}^s a_iw^{s-i} - z\\sum_{j=-1}^s b_jw^{s-j}.</math>\nAll solutions converge to zero for a given value of ''z'' if all solutions ''w'' of Φ(''z'',''w'') = 0 lie in the unit circle.\n\nThe region of absolute stability for a multistep method of the above form is then the set of all <math>z \\in \\mathbb{C}</math> for which all ''w'' such that Φ(''z'',''w'') = 0 satisfy |''w''| < 1. Again, if this set contains the left-half plane, the multi-step method is said to be A-stable.\n\n=== Example: The second-order Adams–Bashforth method ===\n[[Image:Stability region for AB2 method.svg|thumb|The pink region is the stability region for the second-order Adams–Bashforth method.]]\nLet us determine the region of absolute stability for the two-step Adams–Bashforth method\n: <math>y_{n+1} = y_n + h \\left( \\tfrac32 f(t_n, y_n) - \\tfrac12 f(t_{n-1}, y_{n-1}) \\right) .</math>\nThe characteristic polynomial is\n: <math>\\Phi(w,z) = w^2 - (1+\\tfrac32z)w + \\tfrac12 z = 0</math>\nwhich has roots\n: <math>w = \\tfrac12 \\Big(1 + \\tfrac32 z \\pm\\sqrt{1 + z + \\tfrac94 z^2}\\Big), </math>\nthus the region of absolute stability is\n: <math> \\left\\{ z \\in \\mathbb{C} \\left| \\ \\left| \\tfrac12 \\Big(1 + \\tfrac32 z \\pm\\sqrt{1 + z + \\tfrac94 z^2}\\Big) \\right| < 1 \\right.\\right\\}.</math>\nThis region is shown on the right. It does not include all the left half-plane (in fact it only includes the real axis between ''z'' = −1 and ''z'' = 0) so the Adams–Bashforth method is not A-stable.\n\n=== General theory ===\nExplicit multistep methods can never be A-stable, just like explicit Runge–Kutta methods. Implicit multistep methods can only be A-stable if their order is at most 2. The latter result is known as the second [[Germund Dahlquist|Dahlquist]] barrier; it restricts the usefulness of linear multistep methods for stiff equations. An example of a second-order A-stable method is the trapezoidal rule mentioned above, which can also be considered as a linear multistep method.<ref>See {{harvtxt|Dahlquist|1963}}.</ref>\n\n==See also==\n* [[Condition number]]\n* [[Differential inclusion]], an extension of the notion of differential equation that allows discontinuities, in part as way to sidestep some stiffness issues\n* [[Explicit and implicit methods]]\n\n== Notes ==\n<references/>\n\n== References ==\n* {{citation | first1 = Richard L. | last1 = Burden | first2 = J. Douglas | last2 = Faires | year = 1993 | isbn = 0-534-93219-3 | title = Numerical Analysis | edition = 5th | publisher = [[Prindle, Weber and Schmidt]] | location = Boston }}.\n* {{citation | first1 = Germund | last1 = Dahlquist | author1-link = Germund Dahlquist | year = 1963 | title = A special stability problem for linear multistep methods | journal = BIT | volume = 3 | issue = 1 | pages = 27–43 | doi = 10.1007/BF01963532 }}.\n* {{citation | first1 = David | last1 = Eberly| year = 2008 | title = Stability analysis for systems of differential equations | url =http://www.geometrictools.com/Documentation/StabilityAnalysis.pdf }}.\n* {{citation | first1 = B. L. | last1 = Ehle | year = 1969 | title = On Padé approximations to the exponential function and A-stable methods for the numerical solution of initial value problems | publisher = [[University of Waterloo]] | url=https://cs.uwaterloo.ca/research/tr/1969/CS-RR-2010.pdf }}.\n* {{citation | first1 = C. W. | last1 = Gear | year = 1971 | title = Numerical Initial-Value Problems in Ordinary Differential Equations | publisher = [[Prentice Hall]] | location = Englewood Cliffs }}.\n* {{citation | first1 = C. W. | last1 = Gear | year = 1981 | title = Numerical solution of ordinary differential equations: Is there anything left to do? | journal = [[Society for Industrial and Applied Mathematics|SIAM Review]] | volume = 23 | issue = 1 | pages = 10–24 }}.\n* {{citation | first1 = Ernst | last1 = Hairer | first2 = Gerhard | last2 = Wanner | year = 1996 | title = Solving ordinary differential equations II: Stiff and differential-algebraic problems | edition = second | publisher = [[Springer-Verlag]] | location = Berlin | isbn = 978-3-540-60452-5 }}.\n* {{citation | first1 = J. O. | last1 = Hirshfelder | year = 1963 | title = Applied Mathematics as used in Theoretical Chemistry | journal = [[American Mathematical Society|American Mathematical Society Symposium]] | pages = 367–376 }}.\n* {{citation | first1 = Arieh | last1 = Iserles | first2 = Syvert | last2 = Nørsett | year = 1991 | title = Order Stars | publisher = [[Chapman & Hall]] | isbn = 978-0-412-35260-7 }}.\n* {{citation | first1 = Erwin | last1 = Kreyszig | year = 1972 | isbn = 0-471-50728-8 | title = Advanced Engineering Mathematics | edition = 3rd | publisher = [[John Wiley & Sons|Wiley]] | location = New York }}.\n* {{citation | first1 = J. D. | last1 = Lambert | year = 1977 | title = The initial value problem for ordinary differential equations | journal = The State of the Art in Numerical Analysis | editor = D. Jacobs | publisher = [[Academic Press]] | location = New York | pages = 451–501 }}.\n* {{citation | first1 = J. D. | last1 = Lambert | year = 1992 | isbn = 978-0-471-92990-1 | title = Numerical Methods for Ordinary Differential Systems | publisher = [[John Wiley & Sons|Wiley]] | location = New York }}.\n*{{citation | first1 = John  | last1 = Mathews |first2= Kurtis|last2= Fink| year = 1992 | title = Numerical methods using MATLAB}}.\n*{{Cite book | last1=Press | first1=WH | last2=Teukolsky | first2=SA | last3=Vetterling | first3=WT | last4=Flannery | first4=BP | year=2007 | title=Numerical Recipes: The Art of Scientific Computing | edition=3rd | publisher=Cambridge University Press |  publication-place=New York | isbn=978-0-521-88068-8 | chapter=Section 17.5. Stiff Sets of Equations | chapter-url=http://apps.nrbook.com/empanel/index.html#pg=931}}\n* {{citation | first1 = L. F. | last1 = Shampine | first2 = C. W. | last2 = Gear | year = 1979 | title = A user's view of solving stiff ordinary differential equations | journal = [[Society for Industrial and Applied Mathematics|SIAM Review]] | volume = 21 | issue = 1 | pages = 1–17 }}.\n* {{citation | first1 = Gerhard | last1 = Wanner | first2 = Ernst | last2 = Hairer | first3 = Syvert | last3 = Nørsett | year = 1978 | title = Order stars and stability theory | journal = BIT | volume = 18 | issue = 4 | pages = 475–489 | doi = 10.1007/BF01932026 }}.\n*Stability of Runge-Kutta Methods [http://homepages.cwi.nl/~jason/Classes/numwisk/ch10.pdf ]\n\n== External links ==\n* [http://www.cs.cmu.edu/~baraff/pbm/energons.pdf An Introduction to Physically Based Modeling: Energy Functions and Stiffness]\n* [http://www.scholarpedia.org/article/Stiff_systems Stiff systems] [[Lawrence F. Shampine]] and [[Skip Thompson]] [[ Scholarpedia]], 2(3):2855.\t[[doi:10.4249/scholarpedia.2855]]\n\n\n{{DEFAULTSORT:Stiff Equation}}\n[[Category:Numerical differential equations]]"
    },
    {
      "title": "Stochastic Eulerian Lagrangian method",
      "url": "https://en.wikipedia.org/wiki/Stochastic_Eulerian_Lagrangian_method",
      "text": "In [[computational fluid dynamics]], the '''Stochastic Eulerian Lagrangian Method (SELM)'''<ref>\n{{cite journal\n  | last =Atzberger\n  | first =Paul\n  | title = Stochastic Eulerian Lagrangian Methods for Fluid Structure Interactions with Thermal Fluctuations\n  | journal = Journal of Computational Physics\n  | volume = 230\n  | issue =8\n  | pages = 2821–2837\n  | date = 2011\n  | doi = 10.1016/j.jcp.2010.12.028\n| arxiv = 1009.5648\n  | bibcode = 2011JCoPh.230.2821A\n  }}</ref> is an approach to capture essential features of fluid-structure interactions subject to [[thermal fluctuation]]s while introducing approximations which facilitate analysis and the development of tractable numerical methods.  SELM is a hybrid approach utilizing an [[Continuum mechanics#Eulerian description|Eulerian description]] for the continuum hydrodynamic fields and a [[Continuum mechanics#Lagrangian description|Lagrangian description]] for elastic structures.  Thermal fluctuations are introduced through stochastic driving fields. \n\nThe SELM fluid-structure equations typically used are  \n\n:<math>\n\\rho\n\\frac{d{u}}{d{t}}\n= \\mu \\, \\Delta u - \\nabla p + \\Lambda[\\Upsilon(V - \\Gamma{u})] + \\lambda + f_\\mathrm{thm}(x,t)\n</math>\n\n:<math>\nm\\frac{d{V}}{d{t}} = -\\Upsilon(V - \\Gamma{u}) - \\nabla \\Phi[X] + \\xi + F_\\mathrm{thm}\n</math>\n\n:<math>\n\\frac{d{X}}{d{t}} = V.\n</math>\n\nThe pressure ''p'' is determined by the incompressibility condition for the fluid \n\n:<math>\n\\nabla \\cdot u = 0. \\,\n</math>\n\nThe <math>\\Gamma, \\Lambda</math> operators couple the Eulerian and Lagrangian degrees of freedom.  The <math> X, V </math> denote the composite vectors of the full set of Lagrangian coordinates for the structures.  The <math> \\Phi </math> is the potential energy for a configuration of the structures.  The <math>f_\\mathrm{thm}, F_\\mathrm{thm}</math> are stochastic driving fields accounting for thermal fluctuations.  The <math>\\lambda, \\xi</math> are [[Lagrange multiplier]]s imposing constraints, such as local rigid body [[deformation (mechanics)|deformation]]s.  To ensure that dissipation occurs only through the <math>\\Upsilon</math> coupling and not as a consequence of the interconversion by the operators <math>\\Gamma,\\Lambda</math> the following adjoint conditions are imposed\n\n:<math>\n\\Gamma = \\Lambda^T.\n</math>\n\nThermal fluctuations are introduced through Gaussian random fields with mean zero and the covariance structure \n\n:<math>\n\\langle f_\\mathrm{thm}(s)f^T_\\mathrm{thm}(t) \\rangle = -\\left(2k_B{T}\\right)\\left(\\mu \\Delta - \\Lambda \\Upsilon\\Gamma\\right)\\delta(t - s).\n</math>\n\n:<math>\n\\langle F_\\mathrm{thm}(s)F^T_\\mathrm{thm}(t) \\rangle = 2k_B{T}\\Upsilon\\delta(t - s).\n</math>\n\n:<math>\n\\langle f_\\mathrm{thm}(s)F^T_\\mathrm{thm}(t) \\rangle = -2k_B{T}\\Lambda\\Upsilon\\delta(t - s).\n</math>\n\nTo obtain simplified descriptions and efficient numerical methods, approximations in various limiting physical regimes have been considered to remove dynamics on small time-scales or inertial degrees of freedom. In different limiting regimes, the SELM framework can be related to the [[immersed boundary method]], [[accelerated Stokesian dynamics]], and [[arbitrary Lagrangian Eulerian method]].  The SELM approach has been shown to yield stochastic fluid-structure dynamics that are consistent with statistical mechanics.  In particular, the SELM dynamics have been shown to satisfy [[detailed-balance]] for the [[Gibbs–Boltzmann ensemble]].  Different types of coupling operators have also been introduced allowing for descriptions of  structures involving generalized coordinates and additional translational or rotational degrees of freedom.\n\n== See also ==\n*[[Immersed boundary method]]\n*[[Stokesian dynamics]]\n*[[Volume of fluid method]]\n*[[Level-set method]]\n*[[Marker-and-cell method]]\n\n==References==\n{{reflist}}\n#P. J. Atzberger, P. R. Kramer, and C. S. Peskin, A Stochastic Immersed Boundary Method for Fluid-Structure Dynamics at Microscopic Length Scales, Journal of Computational Physics, vol. 224, Issue 2, 2007. [https://dx.doi.org/10.1016/j.jcp.2006.11.015 &#91;DOI&#93; ].\n#C. S. Peskin, The immersed boundary method, Acta Numerica, 11, pp.&nbsp;1–39, 2002.\n\n== Software : Numerical Codes ==\n* [http://www.atzberger.org/mango-selm/ MANGO-SELM]\n\n[[Category:Fluid mechanics]]\n[[Category:Computational fluid dynamics]]\n[[Category:Numerical differential equations]]"
    },
    {
      "title": "Strang splitting",
      "url": "https://en.wikipedia.org/wiki/Strang_splitting",
      "text": "'''Strang splitting''' is a numerical method for solving [[differential equation]]s that are decomposable into a sum of differential operators. It is named after [[Gilbert Strang]]. It is used to speed up calculation for problems involving operators on very different time scales, for example, chemical reactions in fluid dynamics, and to solve multidimensional [[partial differential equation]]s by reducing them to a sum of one-dimensional problems.\n\n== Fractional step methods ==\nAs a precursor to Strang splitting, consider a differential equation of the form\n\n: <math> \\frac{d{y}}{dt} = L_1 ({y}) + L_2 ({y}) </math>\n\nwhere <math>L_1</math>, <math>L_2</math> are [[differential operator]]s. If <math>L_1</math> and <math>L_2</math> were constant coefficient matrices, then the exact solution to the associated initial value problem would be\n\n: <math> y(t) = e^{(L_1 + L_2) t} y_0</math>.\n\nIf <math>L_1</math> and <math>L_2</math> commute, then by the exponential laws this is equivalent to\n\n: <math> y(t) = e^{L_1 t} e^{L_2 t} y_0</math>.\n\nIf they do not, then by the [[Baker–Campbell–Hausdorff formula]] it is still possible to replace the exponential of the sum by a product of exponentials at the cost of a first order error:\n\n: <math> e^{(L_1 + L_2) t} y_0 = e^{L_1 t} e^{L_2 t} y_0 + \\mathcal{O}(t)</math>.\n\nThis gives rise to a numerical scheme where one, instead of solving the original initial problem, solves both subproblems alternating:\n\n: <math> \\tilde y_1 = e^{L_1 \\Delta t} y_0</math>\n: <math> y_1 = e^{L_2 \\Delta t} \\tilde y_1 </math>\n: <math> \\tilde y_2 = e^{L_1 \\Delta t} y_1</math>\n: <math> y_2 = e^{L_2 \\Delta t} \\tilde y_2 </math>\n: etc.\n\nIn this context, <math>e^{L_1 \\Delta t}</math> is a numerical scheme solving the subproblem\n\n: <math>\\frac{d{y}}{dt} = L_1 ({y})</math>\n\nto first order. The approach is not restricted to linear problems, that is, <math>L_1</math> can be any differential operator.\n\n== Strang splitting ==\nStrang splitting extends this approach to second order by choosing another order of operations. Instead of taking full time steps with each operator, instead, one performs time steps as follows:\n\n: <math> \\tilde y_1 = e^{L_1 \\frac{\\Delta t}{2}} y_0</math>\n: <math> \\bar y_1 = e^{L_2 \\Delta t} \\tilde y_1 </math>\n: <math> y_1 = e^{L_1 \\frac{\\Delta t}{2}} \\bar y_1 </math>\n: <math> \\tilde y_2 = e^{L_1 \\frac{\\Delta t}{2}} y_1</math>\n: <math> \\bar y_2 = e^{L_2 \\Delta t} \\tilde y_2 </math>\n: <math> y_2 = e^{L_1 \\frac{\\Delta t}{2}} \\bar y_2 </math>\n: etc.\n\nOne can prove that Strang splitting is second order by using either the Baker-Campbell-Hausdorff formula, Rooted tree analysis or a direct comparison of the error terms using Taylor expansion. For the scheme to be second order accurate, <math>e^{\\cdots}</math> must be a second order approximation to the solution operator as well.\n\n==See also==\n*[[List of operator splitting topics]]\n*[[Matrix splitting]]\n\n== References ==\n* Strang, Gilbert. ''On the construction and comparison of difference schemes''. SIAM Journal on Numerical Analysis 5.3 (1968): 506-517.\n* McLachlan, Robert I., and G. Reinout W. Quispel. ''Splitting methods.'' Acta Numerica 11 (2002): 341-434.\n* LeVeque, Randall J., ''Finite volume methods for hyperbolic problems''. Vol. 31. Cambridge university press, 2002.\n\n[[Category:Numerical differential equations]]"
    },
    {
      "title": "Symplectic integrator",
      "url": "https://en.wikipedia.org/wiki/Symplectic_integrator",
      "text": "In [[mathematics]], a '''symplectic integrator (SI)''' is a [[Numerical ordinary differential equations|numerical integration scheme]] for [[Hamiltonian system]]s. Symplectic integrators form the subclass of [[geometric integrator]]s which, by definition, are [[canonical transformation]]s. They are widely used in [[nonlinear dynamics]], [[molecular dynamics]], [[discrete element method]]s, [[particle accelerator|accelerator physics]], [[plasma physics]], [[quantum physics]], and [[celestial mechanics]].\n\n== Introduction ==\n\nSymplectic integrators are designed for the numerical solution of [[Hamilton's equations]], which read\n:<math>\\dot p = -\\frac{\\partial H}{\\partial q} \\quad\\mbox{and}\\quad \\dot q = \\frac{\\partial H}{\\partial p},</math>\nwhere <math>q</math> denotes the position coordinates, <math>p</math> the momentum coordinates, and <math>H</math> is the Hamiltonian. \nThe set of position and momentum coordinates <math>(q,p)</math> are called [[canonical coordinates]].\n(See [[Hamiltonian mechanics]] for more background.)\n\nThe time evolution of [[Hamilton's equations]] is a [[symplectomorphism]], meaning that it conserves the symplectic [[two-form]] <math>dp \\wedge dq</math>. A numerical scheme is a symplectic integrator if it also conserves this two-form.\n\nSymplectic integrators possess, as a conserved quantity, a Hamiltonian which is slightly [[perturbation theory|perturbed]] from the original one. By virtue of these advantages, the SI scheme has been widely applied to the calculations of long-term evolution of chaotic Hamiltonian systems ranging from the [[Kepler problem]] to the classical and semi-classical simulations in [[molecular dynamics]].\n\nMost of the usual numerical methods, like the primitive [[Euler integration|Euler scheme]] and the classical [[Runge–Kutta methods|Runge–Kutta scheme]], are not symplectic integrators.\n\n== Methods for constructing symplectic algorithms ==\n=== Splitting methods for separable Hamiltonians ===\n\nA widely used class of symplectic integrators is formed by the splitting methods.\n\nAssume that the Hamiltonian is separable, meaning that it can be written in the form\n\n:<math>\nH(p,q) = T(p) + V(q). \\qquad\\qquad (1)\n</math>\n\nThis happens frequently in Hamiltonian mechanics, with ''T'' being the [[kinetic energy]] and ''V'' the [[potential energy]].\n\nFor the notational simplicity, let us introduce the symbol <math>z=(q,p)</math> to denote the canonical coordinates \nincluding both the position and momentum coordinates. Then, the set of the Hamilton's equations given in the introduction can be expressed in a single expression as\n\n:<math>\n\\dot{z}=\\{z,H(z)\\}, \\qquad\\qquad (2)\n</math>\n\nwhere <math>\\{\\cdot, \\cdot\\}</math> is a [[Poisson bracket]]. Furthermore, by introducing an operator <math>D_H \\cdot = \\{\\cdot, H\\}</math>, which returns a [[Poisson bracket]] of the operand with the [[Hamiltonian mechanics#Mathematical formalism|Hamiltonian]], the expression of the Hamilton's equation can be further simplified to\n\n:<math>\n\\dot{z}=D_H z.\n</math>\n\nThe formal solution of this set of equations is given as a [[matrix exponential]]:\n\n:<math>\nz(\\tau)=\\exp(\\tau D_H)z(0). \\qquad\\qquad (3) \n</math>\nNote the  positivity of <math> \\tau D_H </math> in the matrix exponential.\n\nWhen the Hamiltonian has the form of eq. (1), the solution (3) is equivalent to\n\n:<math>\nz(\\tau) = \\exp[\\tau (D_T + D_V)]z(0). \\qquad\\qquad (4)\n</math>\n\nThe SI scheme approximates the time-evolution operator <math>\\exp[\\tau (D_T + D_V)]</math> in the formal solution (4) by a product of operators as\n\n:<math>\n\\begin{align}\n\\exp[\\tau (D_T + D_V)] & = \\prod_{i=1}^k \\exp(c_i \\tau D_T)\\exp(d_i \\tau D_V) + O(\\tau^{k+1}) \\\\\n&= \\exp(c_1 \\tau D_T)\\exp(d_1 \\tau D_V)\\dots\\exp(c_k \\tau D_T)\\exp(d_k \\tau D_V) + O(\\tau^{k+1}),\n\\end{align} \\qquad\\qquad (5)\n</math>\n\nwhere <math>c_i</math> and <math>d_i</math> are real numbers, <math>k</math> is an integer, which is called the order of the integrator, and where <math>\\sum_{i=1}^k c_i = \\sum_{i=1}^k d_i = 1</math>. Note that each of the operators <math>\\exp(c_i \\tau D_T)</math> and <math>\\exp(d_i \\tau D_V)</math> provides a [[symplectic map]], so their product appearing in the right-hand side of (5) also constitutes a symplectic map.\n\nSince <math>D_T^2 z = \\{\\{z,T\\},T\\} = \\{(\\dot{q}, 0),T\\} = (0,0)</math> for all <math>z</math>, we can conclude that\n\n:<math>\nD_T^2 = 0. \\qquad\\qquad (6)\n</math>\n\nBy using a Taylor series, <math>\\exp(a D_T)</math> can be expressed as\n\n:<math>\n\\exp(a D_T) = \\sum_{n=0}^\\infty \\frac{(a D_T)^n}{n!}, \\qquad\\qquad (7)\n</math>\n\nwhere <math>a</math> is an arbitrary real number. Combining (6) and (7), and by using the same reasoning for <math>D_V</math> as we have used for <math>D_T</math>, we get\n\n:<math>\\left\\{\\begin{align}\n \\exp(a D_T) &= 1 + a D_T, \\\\\n \\exp(a D_V) &= 1 + a D_V.\n\\end{align}\\right. \\qquad\\qquad (8)\n</math>\n\nIn concrete terms, <math>\\exp(c_i \\tau D_T)</math> gives the mapping\n\n:<math>\n\\begin{pmatrix}\n q \\\\ p\n\\end{pmatrix}\n\\mapsto\n\\begin{pmatrix}\n q + \\tau c_i \\frac{\\partial T}{\\partial p}(p)\\\\\n p\n\\end{pmatrix},\n</math>\n\nand <math>\\exp(d_i \\tau D_V)</math> gives\n\n:<math>\n\\begin{pmatrix}\n q \\\\ p\n\\end{pmatrix}\n\\mapsto\n\\begin{pmatrix}\n q \\\\\n p - \\tau d_i \\frac{\\partial V}{\\partial q}(q)\\\\\n\\end{pmatrix}.\n</math>\n\nNote that both of these maps are practically computable.\n\n==== Examples ====\nThe simplified form of the equations are:\n\n:<math>p_{i+1} = p_{i} + d_{i} F(q_{i}) * t</math>\n:<math>q_{i+1} = q_{i} + c_{i} p_{i+1} * t</math>\n\nAfter converting into Lagrangian coordinates:\n\n:<math>v_{i+1} = v_{i} + d_{i} \\tfrac{F(x_{i})}{m} * t</math>\n:<math>x_{i+1} = x_{i} + c_{i} v_{i+1} * t</math>\n\nWhere <math>F(x)</math> is the force vector at <math>x</math>, and <math>m</math> is the scalar quantity of mass.\n\nSeveral symplectic integrators are given below. An illustrative way to use them is to consider \na particle with position <math>q</math> and velocity <math>p</math>.\n\nTo apply a timestep with values <math>c_{1,2,3}, d_{1,2,3}</math> to the particle, carry out the following steps:<!-- Someone should verify that the details here are correct. -->\n\nRecursively:\n* Update the position <math>i</math> of the particle by adding to it its (previously updated) velocity <math>i</math> multiplied by <math>c_i</math>\n* Update the velocity <math>i</math> of the particle by adding to it its acceleration (at updated position) multiplied by <math>d_i</math>\n\n==== A first-order example ====\nThe [[symplectic Euler method]] is the first-order integrator with <math>k=1</math> and coefficients\n:<math>\nc_1 = d_1 = 1. \\ \\ \n</math>\n\nNote that the algorithm above does not work if time-reversibility is needed.\nThe algorithm has to be implemented in two parts, one for positive time steps, one for negative time steps.\n\n==== A second-order example ====\nThe [[Verlet integration|Verlet method]] is the second-order integrator with <math>k=2</math> and coefficients\n:<math>\nc_1 = 0, \\qquad c_2 = 1, \\qquad d_1 = d_2 = \\tfrac12.\n</math>\n\nSince <math>c_1 = 0</math>, the algorithm above is symmetric in time. There are 3 steps to the algorithm, and step 1 and 3 are exactly the same, so the positive time version can be used for negative time.\n\n==== A third-order example ====\n\nA third-order symplectic integrator (with <math>k=3</math>) was discovered by Ronald Ruth in 1983.<ref>\n{{cite journal\n|last = Ruth\n|first = Ronald D.\n|title=A Canonical Integration Technique\n|journal=IEEE Transactions on Nuclear Science\n|date=August 1983\n|volume=NS-30\n|pages=2669–2671\n|doi=10.1109/TNS.1983.4332919|bibcode = 1983ITNS...30.2669R\n|issue = 4 }}\n</ref>\nOne of the many solutions is given by\n:<math>\n\\begin{align}\n c_1 &= 1, & c_2 &= -\\tfrac{2}{3}, & c_3 &= \\tfrac{2}{3}, \\\\\n d_1 &=-\\tfrac{1}{24}, & d_2 &= \\tfrac{3}{4}, & d_3 &= \\tfrac{7}{24}.\n\\end{align}\n</math>\n\n==== A fourth-order example ====\nA fourth-order integrator (with <math>k=4</math>) was also discovered by Ruth in 1983 and distributed privately to the particle-accelerator community at that time.  This was described in a lively review article by Forest.<ref>\n{{cite journal\n|last = Forest\n|first = Etienne\n|title=Geometric Integration for Particle Accelerators\n|journal=J. Phys. A: Math. Gen.\n|year=2006\n|volume=39\n|pages=5321–5377\n|doi=10.1088/0305-4470/39/19/S03|bibcode = 2006JPhA...39.5321F\n|issue = 19 }}\n</ref>\nThis fourth-order integrator was published in 1990 by Forest and Ruth and also \nindependently discovered by two other groups around that same time.<ref>\n{{cite journal\n|last = Forest\n|first = E.\n\n|title=Fourth-order symplectic integration\n|journal=Physica D\n|year=1990\n|volume=43\n|pages=105\n|doi=10.1016/0167-2789(90)90019-L|bibcode = 1990PhyD...43..105F\n|last2 = Ruth\n|first2 = Ronald D. }}\n</ref><ref>\n{{cite journal\n|last = Yoshida\n|first = H.\n|title = Construction of higher order symplectic integrators\n|journal=Phys. Lett. A\n|year=1990\n|volume=150\n|pages=262\n|doi = 10.1016/0375-9601(90)90092-3|bibcode = 1990PhLA..150..262Y\n|issue = 5–7 }}\n</ref><ref>\n{{cite journal\n|last=Candy\n|first=J.\n|title=A Symplectic Integration Algorithm for Separable Hamiltonian Functions\n|journal=J. Comput. Phys.\n|year=1991\n|volume=92\n|pages=230\n|doi=10.1016/0021-9991(91)90299-Z|bibcode = 1991JCoPh..92..230C\n|last2=Rozmus\n|first2=W }}\n</ref>\n:<math>\n\\begin{align}\n c_1 &= c_4 = \\frac{1}{2(2-2^{1/3})}, & c_2 &= c_3 = \\frac{1-2^{1/3}}{2(2-2^{1/3})}, \\\\\n d_1 &= d_3 = \\frac{1}{2-2^{1/3}}, & d_2 &= -\\frac{2^{1/3}}{2-2^{1/3}}, \\quad d_4 = 0.\n\\end{align}\n</math>\nTo determine these coefficients, the [[Baker–Campbell–Hausdorff formula]] can be used. Yoshida, in particular, gives an elegant derivation of coefficients for higher-order integrators. Later on, Blanes and Moan<ref>{{cite journal|last=Blanes|first=S.|author2=Moan, P. C. |title=Practical symplectic partitioned Runge–Kutta and Runge–Kutta–Nyström methods|journal=Journal of Computational and Applied Mathematics|date=May 2002|volume=142|issue=2|pages=313–330|doi=10.1016/S0377-0427(01)00492-7|bibcode = 2002JCoAM.142..313B }}</ref> further developed partitioned [[Runge–Kutta methods]] for the integration of systems with separable Hamiltonians with very small error constants.\n\n=== Splitting methods for general nonseparable Hamiltonians ===\nGeneral nonseparable Hamiltonians can also be explicitly and symplectically integrated.\n\nTo do so, Tao introduced a restraint that binds two copies of phase space together to enable an explicit splitting of such systems.<ref>{{cite journal\n|last = Tao\n|first = Molei\n|title=Explicit symplectic approximation of nonseparable Hamiltonians: Algorithm and long time performance\n|journal=Phys. Rev. E\n|year=2016\n|volume=94\n|pages=043303\n|doi=10.1103/PhysRevE.94.043303\n|arxiv=1609.02212\n|bibcode=2016PhRvE..94d3303T\n}}\n</ref>\nThe idea is, instead of <math>H(Q,P)</math>, one simulates <math>\\bar{H}(q,p,x,y)=H(q,y)+H(x,p)+\\omega \\left(\\|q-x\\|_2^2/2+\\|p-y\\|_2^2/2\\right)</math>, whose solution agrees with that of <math>H(Q,P)</math> in the sense that <math>q(t)=x(t)=Q(t),p(t)=y(t)=P(t)</math>.\n\nThe new Hamiltonian is advantageous for explicit symplectic integration, because it can be split into the sum of three sub-Hamiltonians, <math>H_A=H(q,y)</math>, <math>H_B=H(x,p)</math>, and <math>H_C=\\omega \\left(\\|q-x\\|_2^2/2+\\|p-y\\|_2^2/2\\right)</math>. Exact solutions of all three sub-Hamiltonians can be explicitly obtained: both <math>H_A, H_B</math> solutions correspond to shifts of mismatched position and momentum, and <math>H_C</math> corresponds to a linear transformation. To symplectically simulate the system, one simply composes these solution maps.\n\n== Applications ==\n=== In Plasma Physics ===\nIn the recent decade symplectic integrator in plasma physics has become an active research topic,<ref>{{cite journal|last=Qin|first=H.|author2=Guan,X.|journal=Physical Review Letters|date=2008|volume=100|page=035006|title=A Variational Symplectic Integrator for the Guiding Center Motion of Charged Particles for Long Time Simulations in General Magnetic Fields|doi=10.1103/PhysRevLett.100.035006}}</ref> because straightforward applications of the standard symplectic methods do not suit the need of large-scale plasma simulations enabled by the peta- to exa-scale computing hardware. Special symplectic algorithms need to be customarily designed, tapping into the special structures of physics problem under investigation. One such example is the charged particle dynamics in an electromagnetic field. With the canonical symplectic structure, the Hamiltonian of the dynamics is <math display=\"block\">H(\\boldsymbol{p},\\boldsymbol{x})=\\frac{1}{2}\\left(\\boldsymbol{p}-\\boldsymbol{A}\\right)^{2}+\\phi,</math> whose <math display=\"inline\">\\boldsymbol{p}</math>-dependence and <math display=\"inline\">\\boldsymbol{x}</math>-dependence are not separable, and standard explicit symplectic methods do not apply. For large-scale simulations on massively parallel clusters, however, explicit methods are preferred. \nTo overcome this difficulty, we can explore the specific way that the <math display=\"inline\">\\boldsymbol{p}</math>-dependence and <math display=\"inline\">\\boldsymbol{x}</math>-dependence are entangled in this Hamiltonian, and try to design a symplectic algorithm just for this or this type of problem. First, we note that the <math display=\"inline\">\\boldsymbol{p}</math>-dependence is quadratic, therefore the first order symplectic Euler method implicit in <math display=\"inline\">\\boldsymbol{p}</math> is actually explicit. This is what is used in the canonical symplectic [[particle-in-cell]] (PIC) algorithm.<ref>{{cite journal|last=Qin|first=H.|author2=Liu, J.|author3=Xiao,J.|journal=Nuclear Fusion|date=2016|volume=56|page=014001|title=Canonical symplectic particle-in-cell method for long-term large-scale simulations of the Vlasov–Maxwell equations|doi=10.1088/0029-5515/56/1/014001|arxiv=1503.08334}}</ref> To build high order explicit methods, we further note that the <math display=\"inline\">\\boldsymbol{p}</math>-dependence and <math display=\"inline\">\\boldsymbol{x}</math>-dependence in this <math display=\"inline\">H(\\boldsymbol{p},\\boldsymbol{x})</math> are product-separable, and 2nd and 3rd order explicit symplectic algorithms can be constructed using generating functions.<ref>{{cite journal|last=Zhang|first=R.|author2=Qin, H.|author3=Tang, Y.|journal=Physical Review E|date=2016|volume=94|title=Explicit symplectic algorithms based on generating functions for charged particle dynamics|page=013205|doi=10.1103/PhysRevE.94.013205|arxiv=1604.02787}}</ref>\n\nA more elegant and versatile alternative is to look at the following non-canonical symplectic structure of the problem, <math display=\"block\">i_{(\\dot{\\boldsymbol{x}},\\dot{\\boldsymbol{v}})}\\Omega=-dH,\\ \\ \\ \\Omega=d(\\boldsymbol{v}+\\boldsymbol{A})\\wedge d\\boldsymbol{x},\\ \\ \\ H=\\frac{1}{2}\\boldsymbol{v}^{2}+\\phi.</math> Here <math display=\"inline\">\\Omega</math> is a non-constant non-canonical symplectic form. General symplectic integrator for non-constant non-canonical symplectic structure, explicit or implicit, is not known to exist. However, for this specific problem, a family of high-order explicit non-canonical symplectic integrators can be constructed using the He splitting method.<ref>{{cite journal|last=He|first=Y.|author2=Qin, H.|author3=Sun, Y.|journal=Physics of Plasmas|date=2015|volume=22|title=Hamiltonian integration methods for Vlasov-Maxwell equations|page=124503|doi=10.1063/1.4938034 |arxiv=1505.06076 }}</ref> Splitting <math display=\"inline\">H</math> into 4 parts, <math display=\"block\">\\begin{aligned}\nH & =H_{x}+H_{y}+H_{z}+H_{\\phi},\\\\\nH_{x} & =\\frac{1}{2}v_{x}^{2},\\ \\ H_{y}=\\frac{1}{2}v_{y}^{2},\\ \\ H_{z}=\\frac{1}{2}v_{z}^{2},\\ \\ H_{\\phi}=\\phi,\\end{aligned}</math> we find serendipitously that for each subsystem, e.g., <math display=\"block\">i_{(\\dot{\\boldsymbol{x}},\\dot{\\boldsymbol{v}})}\\Omega=-dH_{x}</math> and <math display=\"block\">i_{(\\dot{\\boldsymbol{x}},\\dot{\\boldsymbol{v}})}\\Omega=-dH_{\\phi},</math> the solution map can be written down explicitly and calculated exactly. Then explicit high-order non-canonical symplectic algorithms can be constructed using different compositions. Let <math display=\"inline\">\\Theta_{x},\\Theta_{y},\\Theta_{z}</math> and <math display=\"inline\">\\Theta_{\\phi}</math> denote the exact solution maps for the 4 subsystems. A 1st-order symplectic scheme is <math display=\"block\">\\begin{aligned}\n\\Theta_{1}\\left(\\Delta\\tau\\right)=\\Theta_{x}\\left(\\Delta\\tau\\right)\\Theta_{y}\\left(\\Delta\\tau\\right)\\Theta_{z}\\left(\\Delta\\tau\\right)\\Theta_{\\phi}\\left(\\Delta\\tau\\right)~.\\end{aligned}</math> A symmetric 2nd-order symplectic scheme is, <math display=\"block\">\\begin{aligned}\n\\Theta_{2}\\left(\\Delta\\tau\\right) & =\\Theta_{x}\\left(\\Delta\\tau/2\\right)\\Theta_{y}\\left(\\Delta\\tau/2\\right)\\Theta_{z}\\left(\\Delta\\tau/2\\right)\\Theta_{\\phi}\\left(\\Delta\\tau\\right)\\\\\n & \\Theta_{z}\\left(\\Delta t/2\\right)\\Theta_{y}\\left(\\Delta t/2\\right)\\Theta_{x}\\left(\\Delta t/2\\right)\\!,\\end{aligned}</math> which is a customarily modified Strang splitting. A <math display=\"inline\">2(l+1)</math>-th order scheme can be constructed from a <math display=\"inline\">2l</math>-th order scheme using the method of triple jump, <math display=\"block\">\\begin{aligned}\n\\Theta_{2(l+1)}(\\Delta\\tau) & =\\Theta_{2l}(\\alpha_{l}\\Delta\\tau)\\Theta_{2l}(\\beta_{l}\\Delta\\tau)\\Theta_{2l}(\\alpha_{l}\\Delta\\tau)~,\\\\\n\\alpha_{l} & =1/(2-2^{1/(2l+1)})~,\\\\\n\\beta_{l} & =1-2\\alpha_{l}~.\\end{aligned}</math> The He splitting method is one of key techniques used in the structure-preserving geometric [[particle-in-cell]] (PIC) algorithms <ref>{{cite journal|last=Xiao|first=J.|author2=Qin, H.|author3=Liu, J.|journal=Physics of Plasmas|date=2015|volume=22|title=Explicit high-order non-canonical symplectic particle-in-cell algorithms for Vlasov-Maxwell systems|page=112504|doi=10.1063/1.4935904|arxiv=1510.06972 }}</ref>\n<ref>{{cite journal|last=Kraus|first=M|author2=Kormann, K|author3=Morrison, P.|author4=Sonnendrucker, E|journal=Journal of Plasma Physics |date=2017|volume=83|title=GEMPIC: geometric electromagnetic particle-in-cell methods|page=905830401|doi=10.1017/S002237781700040X|arxiv=1609.03053}}</ref>\n<ref>{{cite journal|last=Xiao|first=J.|author2=Qin, H.|author3=Liu, J.|journal=Plasma Science and Technology |date=2018|volume=20|title=Structure-preserving geometric particle-in-cell methods for Vlasov-Maxwell systems|page=110501|doi=10.1088/2058-6272/aac3d1|arxiv=1804.08823}}</ref>\n.\n\n== See also ==\n* [[Energy drift]]\n* [[Multisymplectic integrator]]\n* [[Variational integrator]]\n* [[Verlet integration]]\n\n== References ==\n<div class=\"references\">\n{{Reflist}}\n</div>\n\n* {{cite book \n  | last1 = Leimkuhler\n  | first1 = Ben \n  | first2 = Sebastian|last2= Reich\n  | title = Simulating Hamiltonian Dynamics \n  | publisher = Cambridge University Press\n  | year = 2005 \n  | isbn = 0-521-77290-7}}\n* {{cite book\n  | last1 = Hairer\n  | first1 = Ernst\n  | first2 = Christian|last2= Lubich|first3= Gerhard |last3=Wanner\n  | title = Geometric Numerical Integration: Structure-Preserving Algorithms for Ordinary Differential Equations\n  | publisher = Springer\n  | year = 2006\n  | isbn = 978-3-540-30663-4\n  | edition = 2}}\n\n[[Category:Numerical differential equations]]\n[[Category:Hamiltonian mechanics]]"
    },
    {
      "title": "Total variation diminishing",
      "url": "https://en.wikipedia.org/wiki/Total_variation_diminishing",
      "text": "In [[numerical method]]s, '''total variation diminishing (TVD)''' is a property of certain [[discretization]] schemes used to solve [[hyperbolic partial differential equation]]s. The most notable application of this method is in [[computational fluid dynamics]]. The concept of TVD was introduced by [[Ami Harten]].<ref>{{Citation \n | surname = Harten\n | given = Ami\n | title = High resolution schemes for hyperbolic conservation laws \n | journal = J. Comput. Phys.\n | volume = 49 \n | issue = 2\n | year = 1983\n | pages = 357–393 \n | id = \n | doi=10.1006/jcph.1997.5713\n|bibcode = 1997JCoPh.135..260H | hdl = 2060/19830002586\n }}</ref>\n\n==Model equation==\nIn systems described by [[partial differential equation]]s, such as the following hyperbolic [[advection equation]],\n\n:<math>\\frac{\\partial u}{\\partial t} + a\\frac{\\partial u}{\\partial x} = 0, </math>\n\nthe [[total variation]] (TV) is given by,\n\n:<math>TV = \\int \\left| \\frac{\\partial u}{\\partial x} \\right| \\mathrm{d}x ,</math>\n\nand the [[total variation]] for the discrete case is,\n\n:<math>TV = \\sum_j \\left| u_{j+1} - u_j \\right| .</math>\n\nA numerical method is said to be '''total variation diminishing''' (TVD) if,\n\n:<math>TV \\left( u^{n+1}\\right) \\leq TV \\left( u^{n}\\right) .</math>\n\n==Characteristics==\n\nA numerical scheme is said to be monotonicity preserving if the following properties are maintained:\n\n*If <math>u^{n}</math> is monotonically increasing (or decreasing) in space, then so is <math>u^{n+1}</math>.\n\n{{Harvnb|Harten|1983}} proved the following properties for a numerical scheme,\n\n*A [[monotone scheme]] is TVD, and\n*A TVD scheme is [[Monotonic function|monotonicity]] preserving.\n\n==Application in CFD==\nIn [[Computational Fluid Dynamics]], TVD scheme is employed to capture sharper shock predictions without any misleading oscillations when variation of field variable “Ø” is discontinuous.\nTo capture the variation fine grids (∆x = very small) are needed and the computation becomes heavy and therefore uneconomic. The use of coarse grids with  [[finite difference|central difference scheme]], [[upwind scheme]], [[Hybrid Difference Scheme|hybrid difference scheme]], and [[power law scheme]] gives false shock predictions. TVD scheme enables sharper shock predictions on coarse grids saving computation time and as the scheme preserves monotonicity there are no spurious oscillations in the solution.\n\n==Discretisation==\nConsider the steady state one-dimensional convection diffusion equation,\n\n:<math>\\nabla \\cdot (\\rho \\mathbf{u} \\phi)\\,= \\nabla \\cdot (\\Gamma \\nabla \\phi)+S_{\\phi}\\; </math>,\n\nwhere <math> \\rho </math> is the density, <math> \\mathbf{u} </math> is the velocity vector, <math> \\phi </math> is the property being transported, <math> \\Gamma </math> is the coefficient of diffusion and <math> S_{\\phi} </math> is the source term responsible for generation of the property <math> \\phi </math>.\n\nMaking the flux balance of this property about a control volume we get,\n\n:<math>\\int_A \\mathbf {n} \\cdot (\\rho\\mathbf{u}\\phi) \\, \\mathrm{d}A = \\int_A \\mathbf{n} \\cdot (\\Gamma \\nabla \\phi) \\, \\mathrm{d}A+ \\int_CV S_\\phi \\, \\mathrm{d}V</math>  <math>\\;</math>\n\nHere <math> \\mathbf {n} </math> is the normal to the surface of control volume.\n\nIgnoring the source term, the equation further reduces to:\n\n:<math>(\\rho \\mathbf {u} \\phi A)_r - (\\rho \\mathbf {u} \\phi A)_l = \\left(\\Gamma A \\frac{\\partial \\phi}{\\partial x}\\right)_r-\\left(\\Gamma A \\frac{\\partial \\phi}{\\partial x}\\right)_l</math>\n\n[[File:Disrcretisation for TVD scheme.jpg|thumb|right|400px|A picture showing the control volume with velocities at the faces,nodes and the distance between them, where 'P' is the node at the center.]]\n \nAssuming\n\n:<math> \\frac{\\partial \\phi}{\\partial x}= \\frac{\\delta \\phi}{\\delta x}</math> and\n\n:<math>A_r = A_l ; \\, </math>\n\nThe equation reduces to\n\n:<math>(\\rho \\mathbf {u} \\phi)_r - (\\rho \\mathbf {u} \\phi)_l \\,= \\left( \\frac{\\Gamma}{\\delta x} \\delta \\phi\\right)_r - \\left( \\frac{\\Gamma}{\\delta x} \\delta \\phi\\right)_l.</math>\n\nSay,\n\n:<math> F_r=(\\rho \\mathbf{u})_r ;\\text{ and }F_l=(\\rho \\mathbf{u})_l;</math>\n:<math> D_l = \\left(\\frac {\\Gamma}{\\delta x}\\right)_l ;\\qquad D_r =\\left(\\frac {\\Gamma}{\\delta x}\\right)_r;</math>\n\nFrom the figure:\n\n:<math> \\delta \\phi _r = \\phi_R -\\phi_P ;\\text{ and }\\delta x_r = x_{PR}; </math>\n:<math> \\delta \\phi _l = \\phi_P -\\phi_L ;\\text{ and }\\delta x_l = x_{LP}; </math>\n\nThe equation becomes, <math>F_r \\phi_r - F_l \\phi_l = D_r (\\phi _R -\\phi _P)-D_l(\\phi _P - \\phi _L);</math>\n\nAlso the continuity equation has to be satisfied,\n:<math>(\\rho \\mathbf {u})_r -(\\rho \\mathbf {u})_l\\,=0;  (OR)  F_r-F_l=0;  (OR)  F_r=F_l=F;</math>\n\nAssuming diffusivity is a homogeneous property and equal grid spacing we can say\n\n:<math> \\Gamma _l=\\Gamma _r; \\qquad \\delta x_{LP}=\\delta x_{PR} = \\delta x</math>\n\nwe get <math> D_l=D_r=D</math>\nThe equation further reduces to <math>F(\\phi_r-\\phi_l)=D(\\phi_R-2\\phi_P+\\phi_L)</math>\nThis can be written as <math>P(\\phi_r-\\phi_l)=(\\phi_R-2\\phi_P+\\phi_L) </math>, where ''P'' is the [[Péclet number]].\n\n:<math>P=\\frac{F}{D}=\\frac{\\rho \\mathbf{u} \\delta x}{\\Gamma}.</math>\n\n==TVD scheme==\nTotal variation diminishing scheme<ref>{{cite book|last=Versteeg|first=H.K.|title=An introduction to computational fluid dynamics : the finite volume method|year=2007|publisher=Prentice Hall|location=Harlow|isbn=9780131274983|edition=2nd |author2=Malalasekera, W. }}</ref><ref>{{cite book|last=Blazek|first=Jiri|title=Computational fluid dynamics : Principles and Applications|year=2001|publisher=Elsevier|location=London|isbn=9780080430096|edition=1st}}</ref> makes an assumption for the values of <math>\\phi_r</math> and <math>\\phi_l</math> to be substituted in the discretized equation as follows:\n\n: <math>P \\phi_r=\\frac{1}{2}(P+|P|)[f_r^+\\phi_R+(1-f_r^+)\\phi_L]+\\frac{1}{2}(P-|P|)[f_r^-\\phi_P+(1-f_r^-)\\phi_{RR}]</math>\n: <math>P \\phi_l=\\frac{1}{2}(P+|P|)[f_l^+\\phi_P+(1-f_l^+)\\phi_{LL}]+\\frac{1}{2}(P-|P|)[f_l^-\\phi_L+(1-f_l^-)\\phi_R]</math>\n\nWhere <math>P</math> is the Peclet number and <math>f</math> is the weighing function to be determined from,\n\n:<math>f=f(\\epsilon)=f\\frac{\\phi_U-\\phi_{UU}}{\\phi_D-\\phi_{UU}}</math>\n\nwhere U refers to upstream, UU refers to upstream of U and D refers to downstream.\n\nNote that <math>f^+</math> is the weighing function when the flow is in positive direction i.e., from left to right and <math>f^-</math> is the weighing  function when the flow is in the negative direction from right to left.\nSo,\n\n:<math>\n\\begin{align}\n& f_r^+\\text{ is a function of }\\dfrac{\\phi_P-\\phi_L}{\\phi_R-\\phi_L}. \\\\[10pt]\n& f_r^-\\text{ is a function of }\\dfrac{\\phi_R-\\phi_{RR}}{\\phi_P-\\phi_{RR}}, \\\\[10pt]\n& f_l^+\\text{ is a function of }\\dfrac{\\phi_L-\\phi_{LL}}{\\phi_P-\\phi_{LL}},\\text{ and} \\\\[10pt]\n& f_l^-\\text{ is a function of }\\dfrac{\\phi_P-\\phi_R}{\\phi_L-\\phi_R}\n\\end{align}\n</math>\n\nIf the flow is in positive direction then, peclet number <math>P</math> is positive and the term <math>(P-|P|)= 0</math>, so the function <math>f^-</math> won’t play any role in the assumption of Ør and Øl. Likewise when the flow is in negative direction, <math>P</math> is negative and the term <math>(P+|P|)= 0</math>, so the function <math>f^+</math> won’t play any role in the assumption of <math>\\phi_r</math> and <math>\\phi_r</math>.\n\nIt therefore takes into account the values of property depending on the direction of flow and using the weighted functions tries to achieve monotonicity in the solution thereby producing results with no spurious shocks.\n\n==Limitations==\nMonotone schemes are attractive for solving engineering and scientific problems because they do not produce non-physical solutions. [[Godunov's theorem]] proves that linear schemes which preserve monotonicity are, at most, only first order accurate. Higher order linear schemes, although more accurate for smooth solutions, are not TVD and tend to introduce spurious oscillations (wiggles) where discontinuities or shocks arise. To overcome these drawbacks, various [[high-resolution scheme|high-resolution]], [[non-linear]] techniques have been developed, often using [[flux limiter|flux/slope limiter]]s.\n\n==See also==\n* [[Flux limiters]]\n* [[Godunov's theorem]]\n* [[High-resolution scheme]]\n* [[MUSCL scheme]]\n* [[Sergei K. Godunov]]\n* [[Total variation]]\n\n==References==\n{{reflist}}\n\n==Further reading==\n\n*Hirsch, C. (1990), ''Numerical Computation of Internal and External Flows'', Vol 2, Wiley.\n*Laney, C. B. (1998), ''Computational Gas Dynamics'', Cambridge University Press.\n*Toro, E. F. (1999), ''Riemann Solvers and Numerical Methods for Fluid Dynamics'', Springer-Verlag.\n*Tannehill, J. C., [[Dale A. Anderson|Anderson, D. A.]], and Pletcher, R. H. (1997), ''Computational Fluid Mechanics and Heat Transfer'', 2nd Ed., Taylor & Francis.\n*Wesseling, P. (2001), ''Principles of Computational Fluid Dynamics'', Springer-Verlag.\n*Anil W. Date ''Introduction to Computational Fluid Dynamics'', Cambridge University Press.\n\n[[Category:Numerical differential equations]]\n[[Category:Computational fluid dynamics]]"
    },
    {
      "title": "Transmission-line matrix method",
      "url": "https://en.wikipedia.org/wiki/Transmission-line_matrix_method",
      "text": "The '''transmission-line matrix (TLM) method''' is a space and time discretising method for computation of [[electromagnetic fields]]. It is based on the [[analogy]] between the electromagnetic field and a mesh of [[transmission line]]s. The TLM method allows the computation of complex three-dimensional electromagnetic structures and has proven to be one of the most powerful time-domain methods along with the finite difference time domain ([[FDTD]]) method.\n\n== Basic principle ==\n\n[[File:SingleNode2DTLM.png|thumb|500px|right|2D TLM example: an incident voltage pulse in two consecutive scattering events.]] The TLM method is based on [[Huygens Principle|Huygens' model of wave propagation]] and scattering and the analogy between field propagation and transmission lines. Therefore, it considers the computational domain as a mesh of transmission lines, interconnected at nodes. In the figure on the right is considered a simple example of a 2D TLM mesh with a voltage pulse of amplitude 1 V incident on the central node. This pulse will be partially reflected and transmitted according to the transmission-line theory. If we assume that each line has a characteristic impedance <math>Z</math>, then the incident pulse sees effectively three transmission lines in parallel with a total impedance of <math>Z/3</math>. The reflection coefficient and the transmission coefficient are given by\n\n: <math>R = \\frac{Z/3-Z}{Z/3+Z} = -0.5</math>\n\n: <math>T = \\frac{2(Z/3)}{Z/3+Z} = 0.5</math>\n\nThe energy injected into the node by the incident pulse and the total energy of the scattered pulses are correspondingly\n\n: <math>E_I = vi\\,\\Delta t = 1 \\left(1/Z\\right)\\Delta t = \\Delta t/Z</math>\n\n: <math>E_S = \\left[0.5^2+0.5^2+0.5^2+(-0.5)^2\\right](\\Delta t/Z) = \\Delta t/Z</math>\n\nTherefore, the [[energy conservation law]] is fulfilled by the model.\n\nThe next scattering event excites the neighbouring nodes according to the principle described above. It can be seen that every node turns into a secondary source of spherical wave. These waves combine to form the overall waveform. This is in accordance with Huygens principle of light propagation.\n\nIn order to show the TLM schema we will use time and space discretisation. The time-step will be denoted with <math>\\Delta t</math> and the space discretisation intervals with <math>\\Delta x</math>, <math>\\Delta y</math> and <math>\\Delta z</math>. The absolute time and space will therefore be <math>t = k\\,\\Delta t</math>, <math>x = l\\,\\Delta x</math>,  <math>y = m\\,\\Delta y</math>, <math>z = n\\,\\Delta z</math>, where <math>k=0,1,2,\\ldots</math> is the time instant and <math>m,n,l</math> are the cell coordinates. In case <math>\\Delta x = \\Delta y = \\Delta z</math> the value <math>\\Delta l</math> will be used, which is the [[lattice constant]]. In this case the following holds:\n\n: <math>\\Delta t=\\frac{\\Delta l}{c_0},</math>\n\nwhere <math>c_0</math> is the free space speed of light.\n\n== The 2D TLM node ==\n\n=== The scattering matrix of an 2D TLM node ===\n\n[[File:SeriesTlmNode.png|thumb|400px|right|A 2D series TLM node]]\nIf we consider an electromagnetic field distribution in which the only non-zero components are <math>E_x</math>, <math>E_y</math> and <math>H_z</math> (i.e. a TE-mode distribution), then Maxwell's equations in [[Cartesian coordinates]] reduce to\n\n: <math>\\frac{\\partial{H_z}}{\\partial{y}} = \\varepsilon\\frac{\\partial{E_x}}{\\partial{t}}</math>\n\n: <math>-\\frac{\\partial{H_z}}{\\partial{x}} = \\varepsilon\\frac{\\partial{E_y}}{\\partial{t}}</math>\n\n: <math>\\frac{\\partial{E_y}}{\\partial{x}}-\\frac{\\partial{E_x}}{\\partial{y}} = -\\mu\\frac{\\partial{H_z}}{\\partial{t}}</math>\n\nWe can combine these equations to obtain\n\n: <math>\\frac{\\partial^2H_z}{\\partial{x}^2}+\\frac{\\partial^2{H_z}}{\\partial{y}^2} = \\mu\\varepsilon\\frac{\\partial^2{H_z}}{\\partial{t}^2}</math>\n\nThe figure on the right presents a structure referred to as a ''series node''. It describes a block of space dimensions <math>\\Delta x</math>, <math>\\Delta y</math> and <math>\\Delta z</math> that consists of four ports. <math>L'</math> and <math>C'</math> are the distributed inductance and capacitance of the transmission lines. It is possible to show that a series node is equivalent to a TE-wave, more precisely the mesh current ''I'', the ''x''-direction voltages (ports 1 and 3) and the ''y''-direction voltages (ports 2 and 4) may be related to the field components <math>H_z</math>, <math>E_x</math> and <math>E_y</math>. If the voltages on the ports are considered, <math>L_x = L_y</math>, and the polarity from the above figure holds, then the following is valid\n\n: <math>-V_1+V_2+V_3-V_4 = 2L'\\,\\Delta l\\frac{\\partial{I}}{\\partial{t}}</math>\n\nwhere <math>\\Delta x = \\Delta y = \\Delta l</math>.\n\n: <math>\\left(V_3 - V_1\\right)-\\left(V_4-V_2\\right) = 2L'\\,\\Delta l\\frac{\\partial I}{\\partial t}</math>\n\n: <math>\\left[E_x(y+\\Delta y)-E_x(y)\\right]\\,\\Delta x-[E_y(x+\\Delta x)-E_y(x)]\\Delta y = 2L'\\,\\Delta l\\frac{\\partial{I}}{\\partial{t}}</math>\n\nand dividing both sides by <math>\\Delta x \\Delta y</math>\n\n: <math>\\frac{E_x(y+\\Delta y)-E_x(y)}{\\Delta y}-\\frac{E_y(x+\\Delta x)-E_y(x)}{\\Delta x} = 2L'\\,\\Delta l\\frac{\\partial{I}}{\\partial{t}}\\frac{1}{\\Delta x \\, \\Delta y}</math>\n\nSince <math>\\Delta x = \\Delta y = \\Delta z = \\Delta l</math> and substituting <math>I = H_z \\,\\Delta z</math> gives\n\n: <math>\\frac{\\Delta E_x}{\\Delta y} - \\frac{\\Delta E_y}{\\Delta x} = 2L'\\frac{\\partial H_z}{\\partial t}</math>\n\nThis reduces to Maxwell's equations when <math>\\Delta l \\rightarrow 0</math>.\n\nSimilarly, using the conditions across the capacitors on ports 1 and 4, it can be shown that the corresponding two other Maxwell equations are the following:\n\n: <math>\\frac{\\partial{H_z}}{\\partial{y}} = C'\\frac{\\partial{E_x}}{\\partial{t}}</math>\n\n: <math>-\\frac{\\partial{H_z}}{\\partial{x}} = C'\\frac{\\partial{E_y}}{\\partial{t}}</math>\n\nHaving these results, it is possible to compute the scattering matrix of a shunt node. The incident voltage pulse on port 1 at time-step ''k'' is denoted as <math>_kV^i_1</math>. Replacing the four line segments from the above figure with their [[Thevenin equivalent]] it is possible to show that the following equation for the reflected voltage pulse holds:\n\n: <math>_kV^r_1 = 0.5\\left(_kV^i_1 + _kV^i_2 + _kV^i_3 - _kV^i_4\\right)</math>\n\nIf all incident waves as well as all reflected waves are collected in one vector, then this equation may be written down for all ports in matrix form:\n\n: <math>_k\\mathbf{V}^r=\\mathbf{S}_k\\mathbf{V}^i</math>\n\nwhere <math>_k\\mathbf{V}^i</math> and <math>_k\\mathbf{V}^r</math> are the incident and the reflected pulse amplitude vectors.\n\nFor a series node the scattering matrix '''S''' has the following form\n\n: <math>\n\\mathbf{S}=\\frac12\\left[\n\\begin{array}{cccc}\n1& 1& 1& -1\\\\\n1& 1& -1& 1\\\\\n1& -1& 1& 1\\\\\n-1& 1& 1& 1\n\\end{array}\n\\right]\n</math>\n\n=== Connection between TLM nodes ===\n\n[[File:2DTLMmes.png|272px|thumb|right|A 2D series TLM node]]\nIn order to describe the connection between adjacent nodes by a mesh of series nodes, look at the figure on the right. As the incident pulse in timestep ''k+1'' on a node is the scattered pulse from an adjacent node in timestep ''k'', the following connection equations are derived:\n\n: <math>_{k+1}V^i_1(x,y)=_{k+1}V^r_3(x,y-1)</math>\n\n: <math>_{k+1}V^i_2(x,y)=_{k+1}V^r_4(x-1,y)</math>\n\n: <math>_{k+1}V^i_3(x,y)=_{k+1}V^r_1(x,y+1)</math>\n\n: <math>_{k+1}V^i_4(x,y)=_{k+1}V^r_2(x+1,y)</math>\n\nBy modifying the scattering matrix <math>\\textbf{S}</math> inhomogeneous and lossy materials can be modelled. By adjusting the connection equations it is possible to simulate different boundaries.\n\n=== The shunt TLM node ===\n\nApart from the series node, described above there is also the ''shunt TLM node'', which represents a TM-mode field distribution. The only non-zero components of such wave are <math>H_x</math>, <math>H_y</math>, and <math>E_z</math>. With similar considerations as for the series node the scattering matrix of the shunt node can be derived.\n\n== 3D TLM models ==\n\n[[File:SymmetricCondensedNode.png|thumb|320px|right|A 3D symmetric condensed node]]\nMost problems in electromagnetics require a three-dimensional grid. As we now have structures that describe TE and TM-field distributions, intuitively it seems possible to define a combination of shunt and series nodes providing a full description of the electromagnetic field. Such attempts have been made, but because of the complexity of the resulting structures they proved to be not very useful. Using the analogy that was presented above leads to calculation of the different field components at physically separated points. This causes difficulties in providing simple and efficient boundary definitions. A solution to these problems was provided by Johns in 1987, when he proposed the structure known as the '''symmetrical condensed node''' (SCN), presented in the figure on the right. It consists of 12 ports because two field polarisations are to be assigned to each of the 6 sides of a mesh cell.\n\nThe topology of the SCN cannot be analysed using Thevenin equivalent circuits. More general energy and charge conservation principles are to be used.\n\nThe electric and the magnetic fields on the sides of the SCN node number ''(l,m,n)'' at time instant ''k'' may be summarised in 12-dimensional vectors\n\n: <math>_k\\mathbf{E}_{l,m,n}=_k\\left[E_1,E_2,\\ldots,E_{11},E_{12}\\right]^T_{l,m,n}</math>\n\n: <math>_k\\mathbf{H}_{l,m,n}=_k\\left[H_1,H_2,\\ldots,H_{11},H_{12}\\right]^T_{l,m,n}</math>\n\nThey can be linked with the incident and scattered amplitude vectors via\n\n: <math>_k\\mathbf{a}_{l,m,n} = \\frac{1}{2\\sqrt{Z_F}}{_k\\mathbf{E}}_{l,m,n}+\\frac{\\sqrt{Z_F}}{2}{_k\\mathbf{H}}_{l,m,n}</math>\n\n: <math>_k\\mathbf{b}_{l,m,n}=\\frac{1}{2\\sqrt{Z_F}}{_k\\mathbf{E}}_{l,m,n}-\\frac{\\sqrt{Z_F}}{2}{_k\\mathbf{H}}_{l,m,n}</math>\n\nwhere <math>Z_F = \\sqrt{\\frac{\\mu}{\\varepsilon}}</math> is the field impedance, <math>_k\\mathbf{a}_{l,m,n}</math> is the vector of the amplitudes of the incident waves to the node, and <math>_k\\mathbf{b}_{l,m,n}</math> is the vector of the scattered amplitudes. The relation between the incident and scattered waves is given by the matrix equation\n\n: <math>_k\\mathbf{b}_{l,m,n} = \\mathbf{S}_k\\mathbf{a}_{l,m,n}</math>\n\nThe scattering matrix '''S''' can be calculated. For the symmetrical condensed node with ports defined as in the figure the following result is obtained\n\n: <math>\\mathbf{S} = \\left[\n\\begin{array}{ccc}\n0& \\mathbf{S}_0& \\mathbf{S}^T_0\\\\\n\\mathbf{S}^T_0& 0& \\mathbf{S}_0\\\\\n\\mathbf{S}_0& \\mathbf{S}^T_0& 0\n\\end{array}\\right]</math>\n\nwhere the following matrix was used\n\n: <math>\\mathbf{S}_0 = \\frac{1}{2}\\left[\n\\begin{array}{cccc}\n0& 0& 1& -1\\\\\n0& 0& -1& 1\\\\\n1& 1& 0& 0\\\\\n1& 1& 0& 0\n\\end{array}\\right]</math>\n\nThe connection between different SCNs is done in the same manner as for the 2D nodes.\n\n== Open-sourced code implementation of 3D-TLM ==\nThe [[George Green (mathematician)|George Green]] Institute for Electromagnetics Research (GGIEMR) has open-sourced an efficient implementation of 3D-TLM, capable of [[Parallel computing|parallel computation]] by means of [[Message Passing Interface|MPI]] named GGITLM and available online. <ref>{{cite web|title=George Green Institute for Electromagnetics Research - TLM time domain simulation code|url=https://www.nottingham.ac.uk/research/groups/ggiemr/research/projects/ggitlm.aspx|website=University of Nottingham - George Green Institute for Electromagnetics Research|publisher=University of Nottingham|accessdate=23 March 2017}}</ref>  \n\n\n== References ==\n<references/>\n* C. Christopoulos, ''The Transmission Line Modeling Method: TLM'', Piscataway, NY, IEEE Press, 1995. {{ISBN|978-0-19-856533-8}}\n* Russer, P., Electromagnetics, Microwave Circuit and Antenna Design for Communications Engineering, Second edition, Artec House, Boston, 2006, {{ISBN|978-1-58053-907-4}}\n* P. B. Johns and M.O'Brien. \"Use of the transmission line modelling (t.l.m) method to solve nonlinear lumped networks\", The Radio Electron and Engineer. 1980.\n* J. L. Herring, Developments in the Transmission-Line Modelling Method for Electromagnetic Compatibility Studies, [http://www.nottingham.ac.uk/ggiemr/publications/JLH_thesis.htm PhD thesis], University of Nottingham, 1993.\n* Mansour Ahmadian, Transmission Line Matrix (TLM) modelling of medical ultrasound [https://www.era.lib.ed.ac.uk/handle/1842/427 PhD thesis], University of Edinburgh 2001\n\n[[Category:Numerical differential equations]]\n[[Category:Computational science]]\n[[Category:Computational physics]]\n[[Category:Electromagnetism]]\n[[Category:Electrodynamics]]"
    },
    {
      "title": "Trefftz method",
      "url": "https://en.wikipedia.org/wiki/Trefftz_method",
      "text": "In [[mathematics]], the '''Trefftz method''' is a method for the [[numerical analysis|numerical solution]] of [[partial differential equation]]s  named after the [[Germans|German]] mathematician [[Erich Trefftz]]<sup>([[:de:Erich Trefftz|de]])</sup> (1888–1937). It falls within the class of [[finite element method]]s.\n\n== Introduction ==\n\nThe hybrid Trefftz finite-element method has been considerably advanced since its introduction about 30 years ago.<ref name=Qin2000>{{harvtxt|Qin|2000}}</ref> The conventional method of finite element analysis involves converting the [[differential equation]] that governs the problem into a [[calculus of variations|variational]] [[Functional (mathematics)|functional]] from which element nodal properties – known as field variables – can be found. This can be solved by substituting in approximate solutions to the differential equation and generating the finite element [[stiffness matrix]] which is combined with all the elements in the [[continuum mechanics|continuum]] to obtain the global stiffness matrix.<ref name=ConnorBrebbia1976>{{harvtxt|Connor|Brebbia|1976}}</ref> Application of the relevant [[boundary condition]]s to this global matrix, and the subsequent solution of the [[field (physics)|field]] variables rounds off the mathematical process, following which numerical computations can be used to solve real life engineering problems.<ref name=Qin2000/><ref name=Qin2004>{{harvtxt|Qin|2004}}</ref>\n\nAn important aspect of solving the functional requires us to find solutions which satisfy the given boundary conditions and satisfy inter-element [[Continuous function|continuity]] since we define independently the properties over each element [[Domain (mathematics)|domain]].<ref name=Qin2000/>\n\nThe hybrid Trefftz method differs from the conventional finite element method in the assumed [[displacement field (mechanics)|displacement field]]s and the formulation of the variational functional. In contrast to the conventional method (based on the Rayleigh-Ritz mathematical technique) the Trefftz method (based on the Trefftz mathematical technique) assumes the displacement field is composed of two independent components; the intra-element displacement field which satisfies the governing differential equation and is used to approximate the variation of potential within the element domain, and the conforming frame field which specifically satisfies the inter-element continuity condition, defined on the boundary of the element. The frame field here is the same as that used in the conventional finite element method but defined strictly on the boundary of the element – hence the use of the term “hybrid” in the method’s nomenclature. The variational functional must thus include additional terms to account for boundary conditions, since the assumed solution field only satisfies the governing differential equation.<ref name=Qin2000/><ref name=Qin2004/>\n\n== Advantages over conventional finite element method ==\n\nThe main advantages of the hybrid Trefftz method over the conventional method are:\n# the formulation calls for [[Integral|integration]] along the element boundaries only which allows for curve-sided or [[polynomial]] shapes to be used for the element boundary, \n# presents expansion bases for elements that do not satisfy inter-element continuity through the variational functional, and \n# this method allows for the development of crack singular or perforated elements through the use of localized solution functions as the [[Ansatz|trial functions]].<ref name=Qin2000/><ref name=Qin2004/>\n\n== Applications ==\n\nSince its mainstream introduction some 30 years ago, this modified finite element method has become increasingly popular to applications such as [[Elasticity (physics)|elasticity]], Kirchhoff plates, thick plates, general three-dimensional solid mechanics, antisymmetric solid mechanics, [[potential flow|potential problems]], shells, elastodynamic problems, geometrically nonlinear plate bending, and transient heat conduction analysis among various others.<ref name=Qin2000/><ref name=Qin2004/> It is currently being applied to steady, non-turbulent, incompressible, [[Newtonian fluid]] flow applications through ongoing research at the Faculty of Engineering and Information Technology (FEIT) at the [[Australian National University]] (ANU) in Canberra, Australia. The hybrid Trefftz method is also being applied to some fields, e.g. computational modeling of hydrated soft tissues or water-saturated porous media, through ongoing research project at the [[Technical University of Lisbon]], [[Instituto Superior Técnico]] in Portugal.\n\n== Notes ==\n{{reflist}}\n\n== References ==\n* {{citation |last=Qin |first=Q.H. |year=2000 |title=The Trefftz Finite and Boundary Element Method |publisher=WIT Press |location=Southampton, England |pages=1–55 }}\n* {{citation |last1=Connor |first1=J.J. |last2=Brebbia |first2=C.A. |year=1976 |title=Finite Element Techniques for Fluid Flow |edition=3rd |publisher=Newnes-Butterworths |location=Bristol, England }}\n* {{citation |last=Qin |first=Q.H. |year=2004 |title=Formulation of hybrid Trefftz finite element method for elastoplasticity |journal=Applied Mathematical Modelling |volume=29 |issue=2 |pages=235–252 |doi=10.1016/j.apm.2004.09.004}}\n\n==External links==\n* {{springer|title=Trefftz method|id=p/t094070}}\n* [http://www.civil.ist.utl.pt/HybridTrefftz/ Hybrid-Trefftz research project at Instituto Superior Técnico in Lisbon, Portugal]\n\n[[Category:Numerical differential equations]]"
    },
    {
      "title": "Uniform theory of diffraction",
      "url": "https://en.wikipedia.org/wiki/Uniform_theory_of_diffraction",
      "text": "In [[numerical analysis]], the '''uniform geometrical theory of diffraction''' ('''UTD''') is a [[high frequency|high-frequency]] method for solving [[Electromagnetic radiation|electromagnetic]] [[scattering]] problems from electrically small discontinuities or discontinuities in more than one dimension at the same point. <ref> R. G. Kouyoumjian and P. H. Pathak, \"A uniform geometrical theory of diffraction for an edge in a perfectly conducting surface,\" ''Proc. IEEE'', vol. 62, pp. 1448–1461, November 1974. </ref> UTD is an extension of [[Joseph Keller]]'s ''geometrical theory of diffraction'' (GTD). <ref> J. B. Keller, [http://www.opticsinfobase.org/abstract.cfm?URI=josa-52-2-116 \"Geometrical theory of diffraction\"], ''J. Opt. Soc. Am.'', vol. 52, no. 2, pp. 116–130, 1962. </ref>\n\nThe uniform theory of diffraction approximates [[Near-field optics|near field]] electromagnetic fields as [[quasi optical]] and uses [[ray diffraction]] to determine diffraction coefficients for each diffracting object-source combination. These coefficients are then used to calculate the field strength and [[phase (waves)|phase]] for each direction away from the diffracting point.\n\nThese fields are then added to the incident fields and reflected fields to obtain a total solution.\n\n==See also==\n* [[Electromagnetic modeling]]\n* [[Biot–Tolstoy–Medwin diffraction model]]\n\n==References==\n{{reflist}}\n\n==External links==\n*[http://www.cvel.clemson.edu/modeling/tutorials/techniques/gtd-utd/gtd-utd.html Overview of Asymptotic Expansion Methods in Electromagnetics]\n\n[[Category:Numerical differential equations]]\n[[Category:Computational electromagnetics]]"
    },
    {
      "title": "Upwind differencing scheme for convection",
      "url": "https://en.wikipedia.org/wiki/Upwind_differencing_scheme_for_convection",
      "text": "{{single source|date=December 2013}}\nThe '''upwind differencing scheme''' is a method used in numerical methods in [[computational fluid dynamics]] for [[convection]]–[[diffusion]] problems. This scheme is specific for [[Peclet number]] greater than 2 or less than&nbsp;&minus;2\n\n==Description==\nBy taking into account the direction of the [[Fluid dynamics|flow]], the upwind differencing scheme overcomes that inability of the [[central differencing scheme]]. This scheme is developed for strong convective flows with suppressed diffusion effects. Also known as ‘Donor Cell’ Differencing Scheme, the convected value of property <math>\\phi</math> at the cell face is adopted from the upstream node.\n\nIt can be described by Steady convection-diffusion partial Differential Equation:<ref>H.K Versteeg & W. Malalasekera (1995). An introduction to Computational Fluid Dynamics.Chapter:5, Page103.</ref><ref>[[Central differencing scheme#Steady-state convection diffusion equation]]</ref>\n\n: <math>\\frac{\\partial}{\\partial t}(\\rho\\phi)+\\nabla \\cdot (\\rho \\mathbf{u} \\phi)\\,= \\nabla \\cdot (\\Gamma\\operatorname{grad} \\phi)+S_{\\phi} </math>\n\n[[Continuity equation]]: <math>\\left(\\rho u A \\right)_{e} - \\left(\\rho u A \\right)_w = 0 \\, </math><ref>H. K. Versteeg & W. Malalasekera (1995). ''An introduction to Computational Fluid Dynamics''. Chapter 5, page 104.</ref><ref>[[Central differencing scheme#Formulation of Steady state convection diffusion equation]]</ref>\n\nwhere \n<math>\\rho</math> is density, \n<math>\\Gamma</math> is diffusion coefficient,\n<math>\\mathbf{u}</math> is the velocity vector, \n<math>\\phi</math> is the property to be computed,\n<math>S_\\phi</math> is the source term,\nand the subscripts <math>e</math> and <math>w</math> refer to the \"east\" and \"west\" faces of the cell\n(see Fig. 1 below).\n\nAfter [[discretization]], applying continuity equation, and taking source term equals to zero we get<ref>[[Central differencing scheme#Formulation of Steady state convection diffusion equation]]</ref>\n\n'''Central difference discretized equation'''\n: <math> F_{e} \\phi_{e}-F_{w} \\phi_{w}\\,= D_{e}(\\phi_{E}-\\phi_{P})-D_{w}(\\phi_{P}-\\phi_{W})</math> <math>\\;</math>.<ref>H.K Versteeg & W. Malalasekera. An introduction to Computational Fluid Dynamics.Chapter:5. Page 105.</ref>.....(1)\n\n:<math> F_{e}-F_{w}\\,=0</math> <math>\\;</math><ref>H.K Versteeg & W. Malalasekera . An introduction to Computational Fluid Dynamics.Chapter:5. Page 105.</ref>.....(2)\nLower case denotes the face and upper case denotes node;\n<math>E</math>, <math>W</math>, and <math>P</math> refer to the \"East,\" \"West,\" and \"Central\" cell.\n(again, see Fig. 1 below).\n\nDefining variable F as '''convection mass [[flux]]''' and variable D as '''[[diffusion]] [[Fluid conductance|conductance]]'''\n:<math>F\\,= \\rho u A</math><math>\\;</math> and <math>\\;</math><math>D\\,= \\frac{\\Gamma A}{\\delta x}</math>  <math>\\;</math>\n\n[[Peclet number]] (Pe) is a [[dimensionless number|non-dimensional]] [[parameter]] determining the comparative strengths of convection and diffusion\n\nPeclet number: \n\n: <math> Pe \\,= \\frac{F}{D} \\,= \\frac{\\rho u}{\\Gamma / \\delta x}</math> <math>\\;</math>\n\nFor a Peclet number of lower value (|Pe|&nbsp;<&nbsp;2, diffusion is dominant and for this we use the central difference scheme.  For other values of and upwind scheme is used for convection-dominated flows with Peclet number (|Pe|&nbsp;>&nbsp;2).\n\n'''For positive flow direction'''\n\n[[File:Upwind scheme for positive flow direction.jpg|thumb|500px|Fig 1:Upwind scheme for positive flow direction]]\n:<math> u_{w} > 0 </math>\n:<math> u_{e} > 0 </math>\nCorresponding upwind scheme equation:\n:<math> F_{e} \\phi_{P}-F_{w} \\phi_{W}\\,= D_{e}(\\phi_{E}-\\phi_{P})-D_{w}(\\phi_{P}-\\phi_{W})</math><ref>H.K Versteeg & W. Malalasekera . An introduction to Computational Fluid Dynamics.Chapter:5.Page 115.</ref>.....(3)\n\nDue to strong convection and suppressed diffusion\n\n:<math>\\phi_{e} \\,= \\phi_{P}</math><ref>H. K. Versteeg & W. Malalasekera ). ''An Introduction to Computational Fluid Dynamics, Chapter 5, page 115.</ref>\n:<math>\\phi_{w} \\,= \\phi_{W} </math>\n\nRearranging equation (3) gives\n\n:<math>[(D_{w}+F_{w})+ D_{e}+ (F_{e}-F_{w})]\\phi_{P}\\, =(D_{w}+F_{w})\\phi_{W}+D_{e}\\phi_{E})</math><math>\\;</math> \n\nIdentifying coefficients,\n:<math>a_{P}\\,=   [(D_{w} + F_{w}) + D_{e} + (F_{e} - F_{w})]</math> <math>\\;</math>\n:<math>a_{W}\\,=(D_{w} + F_{w})</math>\n:<math>a_{E}\\,=  D_{e}</math>\n\n'''For negative flow direction'''\n\n:<math>u_{w} < 0</math>\n:<math>u_{e} < 0</math>\n[[File:Upwind scheme for negative flow direction.jpg|thumb|500px|Fig 2: Upwind scheme for negative flow direction]]\n\nCorresponding upwind scheme equation:\n:<math> F_{e} \\phi_{E}-F_{w} \\phi_{P}\\,= D_{e}(\\phi_{E}-\\phi_{P})-D_{w}(\\phi_{P}-\\phi_{W})</math><ref>H.K Versteeg & W. Malalasekera. An introduction to Computational Fluid Dynamics.Chapter:5. Page115.</ref>.....(4)\n\n:<math>\\phi_{w}\\,= \\phi_{P}</math>\n:<math>\\phi_{e}\\,= \\phi_{E}</math>\n\nRearranging equation(4) gives\n:<math> [( D_e - F_e ) + D_w + ( F_e - F_w )] \\phi_{P} = D_w \\phi_{W} + ( D_e - F_e ) \\phi_{E} </math>\n\nIdentifying coefficients,\n:<math>a_{W}\\,= D_{w} </math>\n:<math>a_{E}\\,= D_{e} - F_{e} </math>\n\nWe can '''generalize''' coefficients as<ref>H. K. Versteeg & W. Malalasekera. ''An Introduction to Computational Fluid Dynamics'', Chapter 5, page 116.</ref> –\n\n:<math>a_{W}=D_{w} + \\max(F_{w},0)</math>\t\n:<math>a_{E}=D_{e} + \\max(0,-F_{e})</math>\n\n[[File:Comparison of central differencing scheme with upwind differencing scheme for peclet no. greater than 2 \"OR\" less than -2.jpg|thumb|450px|Fig 3: Upwind difference versus central difference]]\n\n==Use==\n\nSolution in the central difference scheme fails to [[convergence (mathematics)|converge]] for Peclet number greater than 2 which can be overcome by using an upwind scheme to give a reasonable result.<ref>H.K Versteeg & W. Malalasekera . An introduction to Computational Fluid Dynamics.Chapter:5. Figure 5.5.</ref><ref>H.K Versteeg & W. Malalasekera . An introduction to Computational Fluid Dynamics.Chapter:5. Figure 5.13.</ref> \nTherefore the upwind differencing scheme is applicable for Pe&nbsp;>&nbsp;2 for positive flow and Pe&nbsp;<&nbsp;&minus;2 for negative flow. For other values of Pe, this scheme doesn’t give effective solution.\n\n==Assessment==\n\n'''Conservativeness'''<ref>H.K Versteeg & W. Malalasekera . An introduction to Computational Fluid Dynamics.Chapter:5.Page 118(5.6.1.1).</ref>\n\nThe upwind differencing scheme formulation is conservative.\n\n'''Boundedness'''<ref>H.K Versteeg & W. Malalasekera . An introduction to Computational Fluid Dynamics.Chapter:5.Page 118 (5.6.1.2).</ref>\n\nAs the coefficients of the discretised equation are always positive hence satisfying the requirements for boundedness and also the coefficient matrix is diagonally dominant therefore no irregularities occur in the solution.\n\n[[File:Accuracy and False Deviation variation with the grid size.jpg|thumb|300px|Fig 4: Accuracy and false deviation variation with the grid size]]\n\n'''Transportiveness'''<ref>H. K. Versteeg & W. Malalasekera (1995). ''An Introduction to Computational Fluid Dynamics'', Chapter 5, page 118. (5.6.1.3)</ref>\n\nTransportiveness is built into the formulation as the scheme already accounts for the flow direction.\n\n'''Accuracy'''\n\nBased on the backward differencing formula, the accuracy is only first order on the basis of the [[Taylor series]] truncation error. It gives error when flow is not aligned with grid lines. Distribution of transported properties become marked giving diffusion-like appearance, called as the [[false diffusion]]. Refinement of grid serves in overcoming the issue of false diffusion. With decrease in the grid size, false diffusion decrease thus increasing the accuracy.\n\n==References==\n{{reflist|33em}}\n\n==See also==\n* [[Central differencing scheme]]\n* [[Finite difference]]\n* [[Upwind scheme]]\n\n[[Category:Computational fluid dynamics]]\n[[Category:Numerical differential equations]]"
    },
    {
      "title": "Upwind scheme",
      "url": "https://en.wikipedia.org/wiki/Upwind_scheme",
      "text": "In [[computational physics]], '''upwind schemes''' denote a class of numerical [[discretization]] methods for solving [[hyperbolic partial differential equation]]s. Upwind schemes use an adaptive or solution-sensitive [[finite difference]] stencil to numerically simulate the direction of propagation of information in a flow field. The upwind schemes attempt to discretize hyperbolic partial differential equations by using differencing biased in the direction determined by the sign of the characteristic speeds. Historically, the origin of upwind methods can be traced back to the work of [[Richard Courant|Courant]], Isaacson, and Rees who proposed the CIR method.<ref>{{cite journal|last1=Courant|first1=Richard|last2=Isaacson|first2=E|last3=Rees|first3=M.|\ntitle=On the Solution of Nonlinear Hyperbolic Differential Equations by Finite Differences|\njournal=Comm. Pure Appl. Math.|date=1952|volume=5|issue=3|page=243..255|doi=10.1002/cpa.3160050303}}</ref>\n\n==Model equation==\nTo illustrate the method, consider the following one-dimensional linear [[advection equation]]\n:<math>\n  \\qquad \\frac{\\partial u}{\\partial t} + a \\frac{\\partial u}{\\partial x} = 0\n</math>\nwhich describes a wave propagating along the <math>x</math>-axis with a velocity <math>a</math>. This equation\nis also a mathematical model for one-dimensional linear [[advection]]. Consider a typical grid point <math>i</math> in the\ndomain. In a one-dimensional domain, there are only two directions associated with point <math>i</math> – left (towards negative infinity) and\nright (towards positive infinity). If <math>a</math> is positive, the travelling wave solution of the equation above propagates towards the right, the left side of <math>i</math> is called ''upwind'' side and the right side is the ''downwind'' side. Similarly, if <math>a</math> is negative the travelling wave solution  propagates towards the left, the left side is called ''downwind'' side and right side is the ''upwind'' side. If the finite difference scheme for the spatial derivative, <math>\\partial u / \\partial x</math> contains more\npoints in the upwind side, the scheme is called an '''upwind-biased''' or simply an '''upwind scheme'''.\n\n== First-order upwind scheme ==\n[[File:GaussianUpwind1D.gif|thumb|300px|A simulation of a first-order upwind scheme in which ''a'' = sin(''t'').]]\nThe simplest upwind scheme possible is the first-order upwind scheme. It is given by<ref>{{cite book |last=Patankar |first=S. V. |authorlink=Suhas Patankar |title=Numerical Heat Transfer and Fluid Flow |publisher=[[Taylor & Francis]] |year=1980 |isbn=978-0-89116-522-4}}\n</ref>\n:<math>\n  \\quad (1) \\qquad \\frac{u_i^{n+1} - u_i^{n}}{\\Delta t} + a \\frac{u_i^n - u_{i-1}^n}{\\Delta x} = 0 \\quad \\text{for} \\quad a > 0\n</math>\n:<math>\n  \\quad (2) \\qquad \\frac{u_i^{n+1} - u_i^n}{\\Delta t} + a \\frac{u_{i+1}^n - u_i^n}{\\Delta x} = 0 \\quad \\text{for} \\quad a < 0\n</math>\n\n=== Compact form ===\nDefining\n:<math>\n  \\qquad \\qquad a^+ = \\text{max}(a,0)\\,, \\qquad a^- = \\text{min}(a,0)\n</math>\nand\n:<math>\n  \\qquad \\qquad u_x^- = \\frac{u_i^{n} - u_{i-1}^{n}}{\\Delta x}\\,, \\qquad u_x^+ = \\frac{u_{i+1}^{n} - u_{i}^{n}}{\\Delta x}\n</math>\nthe two conditional equations (1) and (2) can be combined and written in a compact form as\n:<math>\n  \\quad (3) \\qquad u_i^{n+1} = u_i^n - \\Delta t \\left[ a^+ u_x^- + a^- u_x^+ \\right]\n</math>\nEquation (3) is a general way of writing any upwind-type schemes.\n\n=== Stability ===\nThe upwind scheme is [[numerical stability|stable]] if the following [[Courant–Friedrichs–Lewy condition]] (CFL)  is satisfied.<ref>{{cite book |last=Hirsch |first=C.|title=Numerical Computation of Internal and External Flows|year=1990|publisher=[[John Wiley & Sons]] |isbn=978-0-471-92452-4}}\n</ref>\n:<math>\n  \\qquad \\qquad c = \\left| \\frac{a\\Delta t}{\\Delta x} \\right| \\le 1 .\n</math>\n\nA [[Taylor series]] analysis of the upwind scheme discussed above will show that it is first-order accurate in space and time. Modified wavenumber analysis shows that the first-order upwind scheme introduces severe [[numerical diffusion]]/dissipation in the solution where large gradients exist due to necessity of high wavenumbers to represent sharp gradients).\n\n==Second-order upwind scheme==\nThe spatial accuracy of the first-order upwind scheme can be improved by including 3 data points instead of just 2, which offers a more accurate finite difference stencil for the approximation of spatial derivative. For the second-order upwind scheme, <math>u_x^-</math> becomes the 3-point backward difference in equation (3) and is defined as \n:<math>\n  \\qquad \\qquad u_x^- = \\frac{3u_i^n - 4u_{i-1}^n + u_{i-2}^n}{2\\Delta x}\n</math>\nand <math>u_x^+</math> is the 3-point forward difference, defined as \n:<math>\n  \\qquad \\qquad u_x^+ = \\frac{-u_{i+2}^n + 4u_{i+1}^n - 3u_i^n}{2\\Delta x}\n</math>\nThis scheme is less diffusive compared to the first-order accurate scheme and is called linear upwind differencing (LUD) scheme.\n\n==Third-order upwind scheme==\nFor the third-order upwind scheme, <math>u_x^-</math> in equation (3) is defined as\n:<math>\n  \\qquad \\qquad u_x^- = \\frac{2u_{i+1}^n + 3u_i^n - 6u_{i-1}^n + u_{i-2}^n}{6\\Delta x}\n</math>\nand <math>u_x^+</math> is defined as \n:<math>\n  \\qquad \\qquad u_x^+ = \\frac{-u_{i+2}^n + 6u_{i+1}^n - 3u_i^n - 2u_{i-1}^n}{6\\Delta x}\n</math>\nThis scheme is less diffusive compared to the second-order accurate scheme. However, it is known to introduce slight dispersive errors in the region where the gradient is high.\n\n==See also==\n* [[Finite difference method]]\n* [[Upwind differencing scheme for convection]]\n* [[Godunov's scheme]]\n\n==References==\n{{reflist}}\n\n{{Numerical PDE}}\n\n{{DEFAULTSORT:Upwind Scheme}}\n[[Category:Computational fluid dynamics]]\n[[Category:Numerical differential equations]]"
    },
    {
      "title": "Variational integrator",
      "url": "https://en.wikipedia.org/wiki/Variational_integrator",
      "text": "'''Variational integrators''' are [[Numerical ordinary differential equation|numerical integrators]] for [[Hamiltonian system]]s derived from the [[Euler–Lagrange equations]] of a discretized [[Hamilton's principle]]. Variational integrators are momentum-preserving and [[Symplectic integrator|symplectic]].\n\n==Derivation of a simple variational integrator==\n\nConsider a mechanical system with a single particle degree of freedom described by the Lagrangian\n\n: <math>L(t,q,v) = \\frac 1 2 m v^2 - V(q),</math>\n\nwhere <math>m</math> is the mass of the particle, and <math>V</math> is a potential.  To construct a variational integrator for this system, we begin by forming the '''discrete Lagrangian'''.  The discrete Lagrangian approximates the action for the system over a short time interval:\n\n: <math>\n\\begin{align}\nL_d(t_0, t_1, q_0, q_1) & = \\frac{t_1 - t_0}{2} \\left[ L\\left(t_0, q_0, \\frac{q_1-q_0}{t_1-t_0}\\right) + L\\left(t_1, q_1, \\frac{q_1-q_0}{t_1-t_0}\\right) \\right] \\\\\n& \\approx \\int_{t_0}^{t_1} \\, dt\\, L(t, q(t), v(t)).\n\\end{align}\n</math>\n\nHere we have chosen to approximate the time integral using the trapezoid method, and we use a linear approximation to the trajectory,\n\n: <math>q(t) \\approx \\frac{q_1 - q_0}{t_1-t_0}(t - t_0) + q_0</math>\n\nbetween <math>t_0</math> and <math>t_1</math>, resulting in a constant velocity <math>v \\approx \\left(q_1 - q_0 \\right)/\\left(t_1 - t_0 \\right)</math>.  Different choices for the approximation to the trajectory and the time integral give different variational integrators.  The order of accuracy of the integrator is controlled by the accuracy of our approximation to the action; since\n\n: <math>S_d(t_0, t_1, q_0, q_1) = \\int_{t_0}^{t_1} \\, dt\\, L(t,q(t),v(t)) + \\mathcal{O}(t_1 - t_0)^2,</math>\n\nour integrator will be second-order accurate.\n\nEvolution equations for the discrete system can be derived from a stationary-action principle.  The discrete action over an extended time interval is a sum of discrete Lagrangians over many sub-intervals:\n\n: <math>S_d = L_d(t_0, t_1, q_0, q_1) + L_d( t_1, t_2, q_1, q_2) + \\cdots.</math>\n\nThe principle of stationary action states that the action is stationary with respect to variations of coordinates that leave the endpoints of the trajectory fixed.  So, varying the coordinate <math>q_1</math>, we have\n\n: <math>\\frac{\\partial S_d}{\\partial q_1} = 0 = \\frac{\\partial}{\\partial q_1} L_d\\left(t_0, t_1, q_0, q_1 \\right) + \\frac{\\partial}{\\partial q_1} L_d\\left( t_1, t_2, q_1, q_2 \\right).</math>\n\nGiven an initial condition <math>(q_0, q_1)</math>, and a sequence of times <math>(t_0,t_1,t_2)</math> this provides a relation that can be solved for <math>q_2</math>.  The solution is\n\n: <math>q_2 = q_1 + \\frac{t_2 - t_1}{t_1 - t_0}(q_1 - q_0) - \\frac{(t_2 - t_0) (t_2 - t_1)}{2m} \\frac{d}{dq_1} V(q_1).</math>\n\nWe can write this in a simpler form if we define the discrete momenta,\n\n: <math>p_0 \\equiv -\\frac{\\partial}{\\partial q_0} L_d(t_0, t_1, q_0, q_1)</math>\n\nand\n\n: <math>p_1 \\equiv \\frac{\\partial}{\\partial q_1} L_d(t_0, t_1, q_0, q_1).</math>\n\nGiven an initial condition <math>(q_0,p_0)</math>, the stationary action condition is equivalent to solving the first of these equations for <math>q_1</math>, and then determining <math>p_1</math> using the second equation.  This evolution scheme gives\n\n: <math>q_1 = q_0 + \\frac{t_1 - t_0}{m} p_0 - \\frac{(t_1 - t_0)^2}{2m} \\frac{d}{dq_0} V(q_0)</math>\n\nand\n\n: <math>p_1 = m \\frac{q_1 - q_0}{t_1 - t_0} - \\frac{t_1 - t_0} 2 \\frac{d}{dq_1} V(q_1).</math>\n\nThis is a [[leapfrog integration]] scheme for the system; two steps of this evolution are equivalent to the formula above for <math>q_2</math>\n\n== See also ==\n* [[Lie group integrator]]\n\n==References==\n* E. Hairer, C. Lubich, and G. Wanner. ''Geometric Numerical Integration''. Springer, 2002.\n* J. Marsden and M. West. ''Discrete mechanics and variational integrators''. Acta Numerica, 2001, pp.&nbsp;357–514.\n\n[[Category:Numerical differential equations]]"
    },
    {
      "title": "Verlet integration",
      "url": "https://en.wikipedia.org/wiki/Verlet_integration",
      "text": "'''Verlet integration''' ({{IPA-fr|vɛʁˈlɛ}}) is a numerical method used to [[Time integration method|integrate]] [[Isaac Newton|Newton's]] [[equations of motion]].<ref name=\"Verlet1967\" /> It is frequently used to calculate [[Trajectory|trajectories]] of particles in [[molecular dynamics]] simulations and [[computer graphics]]. The algorithm was first used in 1791 by [[Jean Baptiste Joseph Delambre|Delambre]] and has been rediscovered many times since then, most recently by [[Loup Verlet]] in the 1960s for use in molecular dynamics. It was also used by [[Philip Herbert Cowell|Cowell]] and [[Andrew Claude de la Cherois Crommelin|Crommelin]] in 1909 to compute the orbit of [[Halley's Comet]], and by [[Carl Størmer]] in 1907 to study the trajectories of electrical particles in a [[magnetic field]] (hence it is also called '''Störmer's method''').<ref>{{Cite book | last1=Press | first1=W. H. | last2=Teukolsky | first2=S. A. | last3=Vetterling | first3=W. T. | last4=Flannery | first4=B. P. | year=2007 | title=Numerical Recipes: The Art of Scientific Computing | edition=3rd | publisher=Cambridge University Press |  publication-place=New York | isbn=978-0-521-88068-8 | chapter=Section 17.4. Second-Order Conservative Equations | chapter-url=http://apps.nrbook.com/empanel/index.html#pg=928}}\n</ref>\nThe Verlet integrator provides good [[numerical stability]], as well as other properties that are important in [[physical system]]s such as [[time reversibility]] and [[Symplectic integrator|preservation of the symplectic form on phase space]], at no significant additional computational cost over the simple [[Euler method]].\n\n==Basic Störmer–Verlet==\n\nFor a [[second-order differential equation]] of the type <math>\\ddot{\\vec x}(t) = \\vec A\\big(\\vec x(t)\\big)</math> with initial conditions <math>\\vec x(t_0) = \\vec x_0</math> and <math>\\dot{\\vec x}(t_0) = \\vec v_0</math>, an approximate numerical solution <math>\\vec x_n \\approx \\vec x(t_n)</math> at the times <math>t_n = t_0 + n\\,\\Delta t</math> with step size <math>\\Delta t > 0</math> can be obtained by the following method:\n* set <math>\\vec x_1 = \\vec x_0 + \\vec v_0\\,\\Delta t + \\frac12 \\vec A(\\vec x_0)\\,\\Delta t^2</math>,\n* for ''n'' = 1, 2, ... iterate\n*:<math>\n\\vec x_{n+1} = 2 \\vec x_n - \\vec x_{n-1} + \\vec A(\\vec x_n)\\,\\Delta t^2.\n</math>\n\n===Equations of motion===\nNewton's equation of motion for conservative physical systems is\n:<math>M \\ddot{\\vec x}(t) = F\\big(\\vec x(t)\\big) = -\\nabla V\\big(\\vec x(t)\\big),</math>\nor individually\n:<math>m_k \\ddot{\\vec x}_k(t) = F_k\\big(\\vec x(t)\\big) = -\\nabla_{\\vec x_k} V\\big(\\vec x(t)\\big),</math>\nwhere\n: ''t'' is the time,\n: <math>\\vec x(t) = \\big(\\vec x_1(t), \\ldots, \\vec x_N(t)\\big)</math> is the ensemble of the position vector of ''N'' objects,\n: ''V'' is the scalar potential function,\n: ''F'' is the negative [[Potential gradient|gradient of the potential]], giving the ensemble of forces on the particles,\n: ''M'' is the [[mass matrix]], typically diagonal with blocks with mass <math>m_k</math> for every particle.\n\nThis equation, for various choices of the potential function ''V'', can be used to describe the evolution of diverse physical systems, from the motion of [[molecular dynamics|interacting molecules]] to the [[N-body problem|orbit of the planets]].\n\nAfter a transformation to bring the mass to the right side and forgetting the structure of multiple particles, the equation may be simplified to\n:<math>\\ddot{\\vec x}(t) = A\\big(\\vec x(t)\\big)</math>\nwith some suitable vector-valued function ''A'' representing the position-dependent acceleration. Typically, an initial position <math>\\vec x(0) = \\vec x_0</math> and an initial velocity <math>\\vec v(0) = \\dot{\\vec x}(0) = \\vec v_0</math> are also given.\n\n===Verlet integration (without velocities)===\nTo discretize and numerically solve this [[initial value problem]], a time step <math>\\Delta t > 0</math> is chosen, and the sampling-point sequence <math>t_n = n\\,\\Delta t</math> considered. The task is to construct a sequence of points <math>\\vec x_n</math> that closely follow the points <math>\\vec x(t_n)</math> on the trajectory of the exact solution.\n\nWhere [[Euler's method]] uses the [[forward difference]] approximation to the first derivative in differential equations of order one, Verlet integration can be seen as using the [[central difference]] approximation to the second derivative:\n:<math>\n\\frac{\\Delta^2\\vec x_n}{\\Delta t^2}\n= \\frac{\\frac{\\vec x_{n+1} - \\vec x_n}{\\Delta t} - \\frac{\\vec x_n - \\vec x_{n-1}}{\\Delta t}}{\\Delta t}\n= \\frac{\\vec x_{n+1} - 2 \\vec x_n + \\vec x_{n-1}}{\\Delta t^2} = \\vec a_n = \\vec A(\\vec x_n).\n</math>\n\n''Verlet integration'' in the form used as the ''Störmer method''<ref>[http://www.fisica.uniud.it/~ercolessi/md/md/node21.html webpage] {{Webarchive|url=https://web.archive.org/web/20040803212552/http://www.fisica.uniud.it/~ercolessi/md/md/node21.html |date=2004-08-03 }} with a description of the Störmer method.</ref> uses this equation to obtain the next position vector from the previous two without using the velocity as\n:<math>\n\\vec x_{n+1} = 2 \\vec x_n - \\vec x_{n-1} + \\vec a_n\\,\\Delta t^2,\n\\qquad \\vec a_n = \\vec A(\\vec x_n).\n</math>\n\n===Discretization error===\nThe time symmetry inherent in the method reduces the level of local errors introduced into the integration by the discretization by removing all odd-degree terms, here the terms in <math>\\Delta t</math> of degree three. The local error is quantified by inserting the exact values <math>\\vec x(t_{n-1}), \\vec x(t_n), \\vec x(t_{n+1})</math> into the iteration and computing the [[Taylor expansion]]s at time <math>t = t_n</math> of the position vector <math>\\vec{x}(t \\pm \\Delta t)</math> in different time directions:\n:<math>\\begin{align}\n\\vec{x}(t + \\Delta t)\n&= \\vec{x}(t) + \\vec{v}(t)\\Delta t + \\frac{\\vec{a}(t) \\Delta t^2}{2}\n+ \\frac{\\vec{b}(t) \\Delta t^3}{6} + \\mathcal{O}(\\Delta t^4)\\\\\n\\vec{x}(t - \\Delta t)\n&= \\vec{x}(t) - \\vec{v}(t)\\Delta t + \\frac{\\vec{a}(t) \\Delta t^2}{2}\n- \\frac{\\vec{b}(t) \\Delta t^3}{6} + \\mathcal{O}(\\Delta t^4),\n\\end{align}</math>\nwhere <math>\\vec{x}</math> is the position, <math>\\vec{v} = \\dot{\\vec x}</math> the velocity, <math>\\vec{a} = \\ddot{\\vec x}</math> the acceleration, and <math>\\vec{b}</math> the [[Jerk (physics)|jerk]] (third derivative of the position with respect to the time).\n\nAdding these two expansions gives\n:<math>\\vec{x}(t + \\Delta t) = 2\\vec{x}(t) - \\vec{x}(t - \\Delta t) + \\vec{a}(t) \\Delta t^2 + \\mathcal{O}(\\Delta t^4).</math>\nWe can see that the first- and third-order terms from the Taylor expansion cancel out, thus making the Verlet integrator an order more accurate than integration by simple Taylor expansion alone.\n\nCaution should be applied to the fact that the acceleration here is computed from the exact solution, <math>\\vec a(t) = A\\big(\\vec x(t)\\big)</math>, whereas in the iteration it is computed at the central iteration point, <math>\\vec a_n = A(\\vec x_n)</math>. In computing the global error, that is the distance between exact solution and approximation sequence, those two terms do not cancel exactly, influencing the order of the global error.\n\n===A simple example===\n\nTo gain insight into the relation of local and global errors, it is helpful to examine simple examples where the exact, as well as the approximative, solution can be expressed in explicit formulas. The standard example for this task is the [[exponential function]].\n\nConsider the linear differential equation <math>\\ddot x(t) = w^2 x(t)</math> with a constant ''w''. Its exact basis solutions are <math>e^{wt}</math> and <math>e^{-wt}</math>.\n\nThe Störmer method applied to this differential equation leads to a linear [[recurrence relation]]\n:<math>x_{n+1} - 2x_n + x_{n-1} = h^2 w^2 x_n,</math>\nor\n:<math>x_{n+1} - 2\\left(1 + \\tfrac12(wh)^2\\right) x_n + x_{n-1} = 0.</math>\nIt can be solved by finding the roots of its characteristic polynomial\n<math>q^2 - 2\\left(1 + \\tfrac12(wh)^2\\right)q + 1 = 0</math>. These are\n:<math>q_\\pm = 1 + \\tfrac12(wh)^2 \\pm wh \\sqrt{1 + \\tfrac14(wh)^2}.</math>\nThe basis solutions of the linear recurrence are <math>x_n = q_+^n</math> and <math>x_n = q_-^n</math>. To compare them with the exact solutions, Taylor expansions are computed:\n:<math>\\begin{align}\nq_+ &= 1 + \\tfrac12(wh)^2 + wh\\left(1 + \\tfrac18(wh)^2 - \\tfrac{3}{128}(wh)^4 + \\mathcal O(h^6)\\right)\\\\\n    &= 1 + (wh) + \\tfrac12(wh)^2 + \\tfrac18(wh)^3 - \\tfrac{3}{128}(wh)^5 + \\mathcal O(h^7).\n\\end{align}</math>\nThe quotient of this series with the one of the exponential <math>e^{wh}</math> starts with <math>1 - \\tfrac1{24}(wh)^3 + \\mathcal O(h^5)</math>, so\n:<math>\\begin{align}\nq_+ &= \\left(1 - \\tfrac1{24}(wh)^3 + \\mathcal O(h^5)\\right)e^{wh}\\\\\n    &= e^{-\\frac{1}{24}(wh)^3 + \\mathcal O(h^5)}\\,e^{wh}.\n\\end{align}</math>\nFrom there it follows that for the first basis solution the error can be computed as\n:<math>\\begin{align}\nx_n = q_+^{\\;n}\n &= e^{-\\frac{1}{24}(wh)^2\\,wt_n + \\mathcal O(h^4)}\\,e^{wt_n}\\\\\n &= e^{wt_n}\\left(1 - \\tfrac{1}{24}(wh)^2\\,wt_n + \\mathcal O(h^4)\\right)\\\\\n &= e^{wt_n} + \\mathcal O(h^2 t_n e^{wt_n}).\n\\end{align}</math>\nThat is, although the local discretization error is of order 4, due to the second order of the differential equation the global error is of order 2, with a constant that grows exponentially in time.\n\n===Starting the iteration===\nNote that at the start of the Verlet iteration at step <math>n = 1</math>, time <math>t = t_1 = \\Delta t</math>, computing <math>\\vec x_2</math>, one already needs the position vector <math>\\vec x_1</math> at time <math>t = t_1</math>. At first sight, this could give problems, because the initial conditions are known only at the initial time <math>t_0 = 0</math>. However, from these the acceleration <math>\\vec a_0 = \\vec A(\\vec x_0)</math> is known, and a suitable approximation for the position at the first time step can be obtained using the [[Taylor polynomial]] of degree two:\n:<math>\n\\vec x_1 = \\vec{x}_0 + \\vec{v}_0 \\Delta t + \\tfrac12 \\vec a_0 \\Delta t^2\n\\approx \\vec{x}(\\Delta t) + \\mathcal{O}(\\Delta t^3).\n</math>\n\nThe error on the first time step then is of order <math>\\mathcal O(\\Delta t^3)</math>. This is not considered a problem because on a simulation over a large number of time steps, the error on the first time step is only a negligibly small amount of the total error, which at time <math>t_n</math> is of the order <math>\\mathcal O(e^{Lt_n} \\Delta t^2)</math>, both for the distance of the position vectors <math>\\vec x_n</math> to <math>\\vec x(t_n)</math> as for the distance of the divided differences <math>\\tfrac{\\vec x_{n+1} - \\vec x_n}{\\Delta t}</math> to <math>\\tfrac{\\vec x(t_{n+1}) - \\vec x(t_n)}{\\Delta t}</math>. Moreover, to obtain this second-order global error, the initial error needs to be of at least third order.\n\n===Non-constant time differences===\nA disadvantage of the Störmer–Verlet method is that if the time step (<math>\\Delta t</math>) changes, the method does not approximate the solution to the differential equation. This can be corrected using the formula<ref>{{cite web|last=Dummer|first=Jonathan|title=A Simple Time-Corrected Verlet Integration Method|url=http://lonesock.net/article/verlet.html}}</ref>\n:<math>\n\\vec x_{i+1}\n= \\vec x_i\n+ (\\vec x_i - \\vec x_{i-1}) (\\Delta t_i / \\Delta t_{i-1})\n+ \\vec a \\Delta t_i^2.\n</math>\n\nA more exact derivation uses the Taylor series (to second order) at <math>t_i</math> for times <math>t_{i+1} = t_i + \\Delta t_i</math> and <math>t_{i-1} = t_i - \\Delta t_{i-1}</math> to obtain after elimination of <math>\\vec v_i</math>\n:<math>\n\\frac{\\vec x_{i+1} - \\vec x_i}{\\Delta t_i}\n+ \\frac{\\vec x_{i-1} - \\vec x_i}{\\Delta t_{i-1}}\n= \\vec a_i\\,\\frac{\\Delta t_{i} + \\Delta t_{i-1}}2,\n</math>\nso that the iteration formula becomes\n:<math>\n\\vec x_{i+1}\n= \\vec x_i\n+ (\\vec x_i - \\vec x_{i-1}) \\frac{\\Delta t_i}{\\Delta t_{i-1}}\n+ \\vec a_i\\,\\frac{\\Delta t_{i} + \\Delta t_{i-1}}2\\,\\Delta t_i.\n</math>\n\n===Computing velocities – Störmer–Verlet method===\nThe velocities are not explicitly given in the basic Störmer equation, but often they are necessary for the calculation of certain physical quantities like the kinetic energy. This can create technical challenges in [[molecular dynamics]] simulations, because kinetic energy and instantaneous temperatures at time <math>t</math> cannot be calculated for a system until the positions are known at time <math>t + \\Delta t</math>. This deficiency can either be dealt with using the [[#Velocity Verlet|velocity Verlet]] algorithm or by estimating the velocity using the position terms and the [[mean value theorem]]:\n:<math>\n\\vec{v}(t)\n=\n\\frac{\\vec{x}(t + \\Delta t) - \\vec{x}(t - \\Delta t)}{2\\Delta t}\n+ \\mathcal{O}(\\Delta t^2).\n</math>\n\nNote that this velocity term is a step behind the position term, since this is for the velocity at time <math>t</math>, not <math>t + \\Delta t</math>, meaning that <math>\\vec v_n = \\tfrac{\\vec x_{n+1} - \\vec x_{n-1}}{2\\Delta t}</math> is a second-order approximation to <math>\\vec{v}(t_n)</math>. With the same argument, but halving the time step, <math>\\vec v_{n+1/2} = \\tfrac{\\vec x_{n+1} - \\vec x_n}{\\Delta t}</math> is a second-order approximation to <math>\\vec{v}(t_{n+1/2})</math>, with <math>t_{n+1/2} = t_n + \\tfrac12 \\Delta t</math>.\n\nOne can shorten the interval to approximate the velocity at time <math>t + \\Delta t</math> at the cost of accuracy:\n:<math>\\vec{v}(t + \\Delta t) = \\frac{\\vec{x}(t + \\Delta t) - \\vec{x}(t)}{\\Delta t} + \\mathcal{O}(\\Delta t).</math>\n\n== Velocity Verlet ==\nA related, and more commonly used, algorithm is the '''velocity Verlet''' algorithm,<ref>{{cite journal|last=Swope|first=William C. |author2=H. C. Andersen |author3=P. H. Berens |author4=K. R. Wilson|title=A computer simulation method for the calculation of equilibrium constants for the formation of physical clusters of molecules: Application to small water clusters|journal=The Journal of Chemical Physics|date=1 January 1982|volume=76|issue=1|pages=648 (Appendix)|doi=10.1063/1.442716}}</ref> similar to the [[leapfrog method]], except that the velocity and position are calculated at the same value of the time variable (leapfrog does not, as the name suggests). This uses a similar approach, but explicitly incorporates velocity, solving the problem of the first time step in the basic Verlet algorithm:\n\n:<math>\\vec{x}(t + \\Delta t) = \\vec{x}(t) + \\vec{v}(t)\\, \\Delta t + \\frac{1}{2} \\,\\vec{a}(t) \\Delta t^2,</math>\n:<math>\\vec{v}(t + \\Delta t) = \\vec{v}(t) + \\frac{\\vec{a}(t) + \\vec{a}(t + \\Delta t)}{2} \\Delta t.</math>\n\nIt can be shown that the error in the velocity Verlet is of the same order as in the basic Verlet. Note that the velocity algorithm is not necessarily more memory-consuming, because it's not necessary to keep track of the velocity at every time step during the simulation. The standard implementation scheme of this algorithm is:\n# Calculate <math>\\vec{v}\\left(t + \\tfrac12\\,\\Delta t\\right) = \\vec{v}(t) + \\tfrac12\\,\\vec{a}(t)\\,\\Delta t</math>.\n# Calculate <math>\\vec{x}(t + \\Delta t) = \\vec{x}(t) + \\vec{v}\\left(t + \\tfrac12\\,\\Delta t\\right)\\, \\Delta t</math>.\n# Derive <math>\\vec{a}(t + \\Delta t)</math> from the interaction potential using <math>\\vec{x}(t + \\Delta t)</math>.\n# Calculate <math>\\vec{v}(t + \\Delta t) = \\vec{v}\\left(t + \\tfrac12\\,\\Delta t\\right) + \\tfrac12\\,\\vec{a}(t + \\Delta t)\\Delta t</math>.\n\nEliminating the half-step velocity, this algorithm may be shortened to\n# Calculate <math>\\vec{x}(t + \\Delta t) = \\vec{x}(t) + \\vec{v}(t)\\,\\Delta t + \\tfrac12 \\,\\vec{a}(t)\\,\\Delta t^2</math>.\n# Derive <math>\\vec{a}(t + \\Delta t)</math> from the interaction potential using <math>\\vec{x}(t + \\Delta t)</math>.\n# Calculate <math>\\vec{v}(t + \\Delta t) = \\vec{v}(t) + \\tfrac12\\,\\big(\\vec{a}(t) + \\vec{a}(t + \\Delta t)\\big)\\Delta t</math>.\n\nNote, however, that this algorithm assumes that acceleration <math>\\vec{a}(t + \\Delta t)</math> only depends on position <math>\\vec{x}(t + \\Delta t)</math> and does not depend on velocity <math>\\vec{v}(t + \\Delta t)</math>.\n\nOne might note that the long-term results of velocity Verlet, and similarly of leapfrog are one order better than the [[semi-implicit Euler method]]. The algorithms are almost identical up to a shifted by half of a time step in the velocity.  This is easily proven by rotating the above loop to start at step 3 and then noticing that the acceleration term in step 1 could be eliminated by combining steps 2 and 4.  The only difference is that the midpoint velocity in velocity Verlet is considered the final velocity in semi-implicit Euler method.\n\nThe global error of all Euler methods is of order one, whereas the global error of this method is, similar to the [[midpoint method]], of order two. Additionally, if the acceleration indeed results from the forces in a conservative mechanical or [[Hamiltonian system]], the energy of the approximation essentially oscillates around the constant energy of the exactly solved system, with a global error bound again of order one for semi-explicit Euler and order two for Verlet-leapfrog. The same goes for all other conservered quantities of the system like linear or angular momentum, that are always preserved or nearly preserved in a [[symplectic integrator]].<ref name=\"Hairer2003\" />\n\nThe velocity Verlet method is a special case of the [[Newmark-beta method]] with <math>\\beta = 0</math> and <math>\\gamma = 1/2</math>.\n\n=== Algorithmic representation ===\nSince '''velocity Verlet''' is a generally useful algorithm in 3D applications, a general solution written in C++ could look like below. A simplified drag force is used to demonstrate change in acceleration, however it is only needed if acceleration is not constant.<syntaxhighlight lang=\"c++\" line=\"1\">\nstruct Body\n{\n    Vec3d pos { 0.0, 0.0, 0.0 };\n    Vec3d vel { 2.0, 0.0, 0.0 }; // 2m/s along x-axis\n    Vec3d acc { 0.0, 0.0, 0.0 }; // no acceleration at first\n    double mass = 1.0; // 1kg\n    double drag = 0.1; // rho*C*Area - simplified drag for this example\n\n    /**\n     * Update pos and vel using \"Velocity Verlet\" integration\n     * @param dt DeltaTime / time step [eg: 0.01]\n     */\n    void update(double dt)\n    {\n        Vec3d new_pos = pos + vel*dt + acc*(dt*dt*0.5);\n        Vec3d new_acc = apply_forces(); // only needed if acceleration is not constant\n        Vec3d new_vel = vel + (acc+new_acc)*(dt*0.5);\n        pos = new_pos;\n        vel = new_vel;\n        acc = new_acc;\n    }\n\n    Vec3d apply_forces() const\n    {\n        Vec3d grav_acc = Vec3d{0.0, 0.0, -9.81 }; // 9.81m/s^2 down in the Z-axis\n        Vec3d drag_force = 0.5 * drag * (vel * abs(vel)); // D = 0.5 * (rho * C * Area * vel^2)\n        Vec3d drag_acc = drag_force / mass; // a = F/m\n        return grav_acc - drag_acc;\n    }\n};\n</syntaxhighlight>\n\n==Error terms==\n\nThe local error in position of the Verlet integrator is <math>O(\\Delta t^4)</math> as described above, and the local error in velocity is <math>O(\\Delta t^2)</math>.\n\nThe global error in position, in contrast, is <math>O(\\Delta t^2)</math>, and the global error in velocity is <math>O(\\Delta t^2)</math>. These can be derived by noting the following:\n\n:<math>\\mathrm{error}\\bigl(x(t_0 + \\Delta t)\\bigr) = O(\\Delta t^4)</math>\n\nand\n\n:<math>x(t_0 + 2\\Delta t) = 2x(t_0 + \\Delta t) - x(t_0) + \\Delta t^2 x''(t_0 + \\Delta t) + O(\\Delta t^4).</math>\n\nTherefore\n\n:<math>\\mathrm{error}\\bigl(x(t_0 + 2\\Delta t)\\bigr) = 2\\mathrm{error}\\bigl(x(t_0 + \\Delta t)\\bigr) + O(\\Delta t^4) = 3\\,O(\\Delta t^4).</math>\n\nSimilarly:\n\n:<math>\\mathrm{error}\\bigl(x(t_0 + 3\\Delta t)\\bigl) = 6\\,O(\\Delta t^4),</math>\n:<math>\\mathrm{error}\\bigl(x(t_0 + 4\\Delta t)\\bigl) = 10\\,O(\\Delta t^4),</math>\n:<math>\\mathrm{error}\\bigl(x(t_0 + 5\\Delta t)\\bigl) = 15\\,O(\\Delta t^4),</math>\n\nwhich can be generalized to (it can be shown by induction, but it is given here without proof):\n\n:<math>\\mathrm{error}\\bigl(x(t_0 + n\\Delta t)\\bigr) = \\frac{n(n+1)}{2}\\,O(\\Delta t^4).</math>\n\nIf we consider the global error in position between <math>x(t)</math> and <math>x(t + T)</math>, where <math>T = n\\Delta t</math>, it is clear that\n\n:<math>\\mathrm{error}\\bigl(x(t_0 + T)\\bigr) = \\left(\\frac{T^2}{2\\Delta t^2} + \\frac{T}{2\\Delta t}\\right) O(\\Delta t^4),</math>\n\n{{Citation needed|reason=Where is this proof taken from? It is not trivial.|date=July 2018}}\n\nand therefore, the global (cumulative) error over a constant interval of time is given by\n\n:<math>\\mathrm{error}\\bigr(x(t_0 + T)\\bigl) = O(\\Delta t^2).</math>\n\n\nBecause the velocity is determined in a non-cumulative way from the positions in the Verlet integrator, the global error in velocity is also <math>O(\\Delta t^2)</math>.\n\nIn molecular dynamics simulations, the global error is typically far more important than the local error, and the Verlet integrator is therefore known as a second-order integrator.\n\n==Constraints==\n{{Main article|Constraint algorithm}}\nSystems of multiple particles with constraints are simpler to solve with Verlet integration than with Euler methods.  Constraints between points may be, for example, potentials constraining them to a specific distance or attractive forces.  They may be modeled as [[spring (device)|springs]] connecting the particles.  Using springs of infinite stiffness, the model may then be solved with a Verlet algorithm.\n\nIn one dimension, the relationship between the unconstrained positions <math>\\tilde{x}_i^{(t)}</math> and the actual positions <math>x_i^{(t)}</math> of points ''i'' at time ''t'' can be found with the algorithm\n\n:<math>d_1 = x_2^{(t)} - x_1^{(t)},</math>\n\n:<math>d_2 = \\|d_1\\|,</math>\n\n:<math>d_3 = \\frac{d_2 - r}{d_2},</math>\n\n:<math>x_1^{(t + \\Delta t)} = \\tilde{x}_1^{(t + \\Delta t)} + \\frac{1}{2} d_1 d_3,</math>\n\n:<math>x_2^{(t + \\Delta t)} = \\tilde{x}_2^{(t + \\Delta t)} - \\frac{1}{2} d_1 d_3.</math>\n\nVerlet integration is useful because it directly relates the force to the position, rather than solving the problem using velocities.\n\nProblems, however, arise when multiple constraining forces act on each particle. One way to solve this is to loop through every point in a simulation, so that at every point the constraint relaxation of the last is already used to speed up the spread of the information. In a simulation this may be implemented by using small time steps for the simulation, using a fixed number of constraint-solving steps per time step, or solving constraints until they are met by a specific deviation.\n\nWhen approximating the constraints locally to first order, this is the same as the [[Gauss–Seidel method]]. For small [[Matrix (mathematics)|matrices]] it is known that [[LU decomposition]] is faster. Large systems can be divided into clusters (for example, each [[ragdoll physics|ragdoll]]&nbsp;=&nbsp;cluster). Inside clusters the LU method is used, between clusters the [[Gauss–Seidel method]] is used. The matrix code can be reused: The dependency of the forces on the positions can be approximated locally to first order, and the Verlet integration can be made more implicit.\n\nSophisticated software, such as SuperLU<ref>[http://crd.lbl.gov/~xiaoye/SuperLU/superlu_ug.pdf SuperLU User's Guide].</ref> exists to solve complex problems using sparse matrices.  Specific techniques, such as using (clusters of) matrices, may be used to address the specific problem, such as that of force propagating through a sheet of cloth without forming a [[sound wave]].<ref>{{cite journal|last1=Baraff|first1=D.|last2=Witkin|first2=A.|title=Large Steps in Cloth Simulation|journal=Computer Graphics Proceedings|date=1998|volume=Annual Conference Series|pages=43–54|url=http://www.cs.cmu.edu/~baraff/papers/sig98.pdf}}</ref>\n\nAnother way to solve [[holonomic constraints]] is to use [[constraint algorithm]]s.\n\n==Collision reactions==\nOne way of reacting to collisions is to use a penalty-based system, which basically applies a set force to a point upon contact.  The problem with this is that it is very difficult to choose the force imparted.  Use too strong a force, and objects will become unstable, too weak, and the objects will penetrate each other.  Another way is to use projection collision reactions, which takes the offending point and attempts to move it the shortest distance possible to move it out of the other object.\n\nThe Verlet integration would automatically handle the velocity imparted by the collision in the latter case; however, note that this is not guaranteed to do so in a way that is consistent with [[collision|collision physics]] (that is, changes in momentum are not guaranteed to be realistic).  Instead of implicitly changing the velocity term, one would need to explicitly control the final velocities of the objects colliding (by changing the recorded position from the previous time step).\n\nThe two simplest methods for deciding on a new velocity are perfectly [[elastic collision|elastic]] and [[inelastic collision]]s.  A slightly more complicated strategy that offers more control would involve using the [[coefficient of restitution]].\n\n== See also ==\n*[[Courant–Friedrichs–Lewy condition]]\n*[[Energy drift]]\n*[[Symplectic integrator]]\n*[[Leapfrog integration]]\n*[[Beeman's algorithm]]\n\n== Literature ==\n<references>\n<ref name=\"Hairer2003\">{{cite journal\n| first=Ernst | last=Hairer \n| first2=Christian | last2=Lubich\n| first3=Gerhard | last3=Wanner\n| title=Geometric numerical integration illustrated by the Störmer/Verlet method\n| journal = Acta Numerica\n| year = 2003\n| volume = 12\n| pages = 399–450\n| url=http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.7.7106\n| doi=10.1017/S0962492902000144\n}}</ref>\n<ref name=\"Verlet1967\">{{cite journal\n| first=Loup | last=Verlet\n| title=Computer \"Experiments\" on Classical Fluids. I. Thermodynamical Properties of Lennard−Jones Molecules\n| journal = Physical Review\n| year = 1967\n| volume = 159\n| pages = 98–103\n| url=http://link.aps.org/doi/10.1103/PhysRev.159.98\n| doi=10.1103/PhysRev.159.98\n}}</ref>\n</references>\n\n==External links==\n*[https://bitbucket.org/craigmit/verlet Verlet Integration Demo and Code as a Java Applet]\n*[http://www.gamasutra.com/resource_guide/20030121/jacobson_pfv.htm Advanced Character Physics by Thomas Jakobsen]\n*[http://www.ch.embnet.org/MD_tutorial/pages/MD.Part1.html Theory of Molecular Dynamics Simulations] – bottom of page\n\n{{Numerical integrators}}\n\n{{DEFAULTSORT:Verlet Integration}}\n[[Category:Numerical differential equations]]\n[[Category:Articles with example C++ code]]"
    },
    {
      "title": "Virtual Cell",
      "url": "https://en.wikipedia.org/wiki/Virtual_Cell",
      "text": "{{Infobox software\n| name = Virtual Cell\n| logo = <!-- [[File: ]] -->\n| screenshot = <!-- [[File: ]] -->\n| caption = \n| collapsible = \n| author = \n| developer = \n| released = {{Start date and age|1999|10|11}}\n| latest release version = 7.1\n| latest release date = {{Start date and age|2018|11}}\n| repo = {{URL|github.com/virtualcell/vcell}}\n| programming language = [[Java (programming language)|Java]], [[C++]], [[Perl]]\n| operating system = [[Windows]], [[macOS]], [[Linux]]\n| platform = [[IA-32]], [[x64]]\n| size = \n| language = \n| genre = \n| license = [[MIT license]]\n| website = {{URL|vcell.org}}\n}}\n\n'''Virtual Cell''' (VCell)<ref>{{cite journal | vauthors = Schaff J, Fink CC, Slepchenko B, Carson JH, Loew LM | title = A general computational framework for modeling cellular structure and function | journal = Biophysical Journal | volume = 73 | issue = 3 | pages = 1135–46 | date = September 1997 | pmid = 9284281 | pmc = 1181013 | doi = 10.1016/S0006-3495(97)78146-3 | bibcode = 1997BpJ....73.1135S }}</ref><ref>{{cite news|url=http://articles.courant.com/1999-02-23/features/9902230746_1_human-cell-cell-biology-human-genome|title=Mapping The Mechanisms At The Basis Of Life|publisher=Hartford Courant|access-date=19 March 2012|date=23 February 1999}}</ref><ref>{{cite journal | vauthors = Loew LM, Schaff JC | title = The Virtual Cell: a software environment for computational cell biology | journal = Trends in Biotechnology | volume = 19 | issue = 10 | pages = 401–6 | date = October 2001 | pmid = 11587765 | doi = 10.1016/S0167-7799(01)01740-1 }}</ref><ref>{{cite journal | vauthors = Cowan AE, Moraru II, Schaff JC, Slepchenko BM, Loew LM | title = Spatial modeling of cell signaling networks | journal = Methods in Cell Biology | volume = 110 | pages = 195–221 | date = 2012 | pmid = 22482950 | pmc = 3519356 | doi = 10.1016/b978-0-12-388403-9.00008-4 | publisher = Elsevier | isbn = 9780123884039 }}</ref> is an [[Open-source software|open-source]] software platform for modeling and simulation of [[living organisms]], primarily [[Cell (biology)|cells]]. It has been designed to be a tool for a wide range of scientists, from experimental [[Cell biology|cell biologists]] to theoretical [[Biophysics|biophysicists]].<ref>{{cite journal | vauthors = Moraru II, Schaff JC, Slepchenko BM, Blinov ML, Morgan F, Lakshminarayana A, Gao F, Li Y, Loew LM | title = Virtual Cell modelling and simulation software environment | journal = IET Systems Biology | volume = 2 | issue = 5 | pages = 352–62 | date = September 2008 | pmid = 19045830 | pmc = 2711391 | doi = 10.1049/iet-syb:20080102 }}</ref>\n\n== Concept ==\nVCell models have a hierarchical tree structure. The trunk level is the \"'''Physiology'''\" consisting of compartments, species and chemical reactions, and reaction rates that are functions of concentrations. Given initial concentrations of species, VCell can calculate how these concentrations change over time. How these numerical simulations are performed, is determined through a number of \"'''Applications'''\", which specify whether simulations will be deterministic or stochastic, and spatial or compartmental; multiple \"Applications\" can also specify initial concentrations, diffusion coefficients, flow rates and a variety of modeling assumptions. Thus \"'''Applications'''\" can be viewed as  computational experiments to test ideas about the physiological system. Each \"'''Application'''\" corresponds to a mathematical description, which is automatically translated into the VCell Math Description Language. Multiple \"'''Simulations'''\", including parameter scans and changes in solver specifications, can be run within each \"'''Application'''\". \n\nModels can range from the simple to the highly complex, and can represent a mixture of experimental data and purely theoretical assumptions.\n\nThe Virtual Cell can be used as a [[distributed application]] over the Internet or as a standalone application. The graphical user interface allows construction of complex models in biologically relevant terms: compartment dimensions and shape, molecular characteristics, and interaction parameters. VCell converts the biological description into an equivalent mathematical system of differential equations. Users can switch back-and-forth between the schematic biological view and the mathematical view in the common graphical interface. Indeed, if users desire, they can manipulate the mathematical description directly, bypassing the schematic view. VCell allows users a choice of numerical solvers to translate the mathematical description into software code which is executed to perform the simulations. The results can be displayed on-line, or they can be downloaded to the user's computer in a wide variety of export formats. The Virtual Cell license allows free access to all members of the scientific community.<ref name=VCellHome>{{cite web|title=VCell - The Virtual Cell|url=http://vcell.org/|publisher=UConn Health Center|access-date=22 March 2012}}</ref>\n\nUsers may save their models in the VCell DataBase, which is maintained on servers at U. Connecticut. The VCell Database uses an access control system with permissions to allow users to maintain their models private, share them with select collaborators or make them public. The VCell website maintains a [http://vcell.org/vcell-published-models searchable list of models] that are public and associated with research publications.\n[[File:VCell Model Specification and Simulation Methods.gif|alt=|thumb|VCell Models can be formulated as reaction networks or based on reaction rules. A model can be simulated using many physical assumptions: deterministic, stochastic or hybrid deterministic/stochastic; non-spatial compartmental, simulating only reaction kinetics, or with explicit spatial geometries accounting also for diffusion and flow. A new experimental feature allows for reaction-diffusion models in changing geometries (top).]]\n\n== Features ==\nVCell supports the following features:\n\n* Within the \"'''Physiology'''\", models can be specified as reaction networks or reaction rules.<ref>{{cite journal | vauthors = Blinov ML, Schaff JC, Vasilescu D, Moraru II, Bloom JE, Loew LM | title = Compartmental and Spatial Rule-Based Modeling with Virtual Cell | journal = Biophysical Journal | volume = 113 | issue = 7 | pages = 1365–1372 | date = October 2017 | pmid = 28978431 | pmc = 5627391 | doi = 10.1016/j.bpj.2017.08.022 }}</ref>\n*Simulations can be chosen to either resolve variations of concentrations over space ('''spatial simulations''') or assume concentrations constant across compartments ('''compartmental simulations''').\n* For spatial simulations, geometries can be specified by [[analytic geometry]] equations, [[Constructive Solid Geometry|derived from combination of simple shapes]] or derived from imported images, such as 3D confocal microscope stacks. Utilities for 3D segmentation of image data into regions such as nucleus, mitochondria, cytosol and extracellular are provided.\n* Simulations can be based on either integration of differential equations without use of random numbers ('''deterministic simulations''') or be based on random events ('''stochastic simulations''').\n* Simulations can be run using a variety of solvers including: 6 [[ordinary differential equation]] (ODE) solvers, 2 [[partial differential equation]] (PDE) solvers, 4 non-spatial [[stochastic]] solvers and [[Smoldyn]]<ref name=Smoldyn>{{cite web|title=Smoldyn: a spatial stochastic simulator for chemical reaction networks|url=http://www.smoldyn.org/|access-date=23 March 2012}}</ref>  for stochastic spatial simulations. VCell also offers a hybrid deterministic/stochastic spatial solver for situations where some species are present in low copy number and others are present in high copy number. Most recently, a network free solver, [http://michaelsneddon.net/nfsim/ NFSim], was made available for stochastic simulation of large combinatorially complex rule-based models. Most solvers can be run locally, all solvers can be run remotely on VCell servers.\n* For compartmental deterministic models, the best parameter values to fit experimental data can be estimated using algorithms developed by the [[COPASI]] software system. These tools are available in VCell.\n* Models and simulation setups (so-called '''Applications''') can be stored in local files as Virtual Cell Markup Language (VCML)<ref name=VCMLSpec>{{cite web|title=VCell Software Architecture - VCML Specification |url=http://www.nrcam.uchc.edu/technology/VcmlSpec.html |access-date=23 March 2012}}</ref>  or stored remotely in the VCell database.\n* Models can be imported and exported as [[SBML|Systems Biology Markup Language (SBML)]]<ref name=SBML>{{cite web|title=Systems Biology Markup Language (SBML)|url=http://sbml.org/Main_Page |access-date=23 March 2012}}</ref>\n* [[Biological pathway]]s can be imported as [[BioPAX|Biological Pathway Exchange (BioPAX)]]<ref name=BioPAX>{{cite web|title=BioPAX - Biological Pathway Exchange |url=http://www.biopax.org/|access-date=23 March 2012}}</ref> to build and annotate models. \n\n== Biological and related data sources ==\nVCell allows users integrated access to a variety of sources to help build and annotate models: \n\n* Models stored in the VCell database can be made accessible by their authors to some users ('''shared''') or all users ('''public''').\n* VCell can import models from the [[BioModels Database]].<ref name=BioModels>{{cite web |title=BioModels Database - A Database of Annotated Published Models|url=http://www.ebi.ac.uk/biomodels-main/ |access-date=23 March 2012}}</ref>\n* [[Biological pathway]]s can be imported from [https://www.pathwaycommons.org/ Pathway Commons].<ref name=PathwayCommons>{{cite web |title=Pathway Commons|url=http://www.pathwaycommons.org/pc/ |access-date=23 March 2012}}</ref>\n* Model elements can be annotated with IDs from Pubmed [[UniProt]] ([[protein]]s)<ref name=UniProt>{{cite web|title=UniProt |url=https://www.uniprot.org/ |access-date=23 March 2012}}</ref> KEGG (reactions and species) GeneOntology (reactions and species), Reactome (reactions and species) and [[ChEBI]] (mostly small molecules).<ref name=ChEBI>{{cite web|title=Chemical Entities of Biological Interest (ChEBI)|url=http://www.ebi.ac.uk/chebi/|access-date=23 March 2012}}</ref>\n\n== Development ==\nThe Virtual Cell is being developed at the [https://health.uconn.edu/cell-analysis-modeling/ R. D Berlin Center for Cell Analysis and Modeling] at the [[University of Connecticut Health Center]].<ref name=CCAM>{{cite web|title=The Richard D. Berlin Center for Cell Analysis and Modeling (CCAM)|url=http://www.cbit.uchc.edu/|access-date=23 March 2012}}</ref>  The team is primarily funded through research grants through the [[National Institutes of Health]].\n\n== References ==\n{{Reflist|2}}\n\n== External links ==\n* [http://vcell.org VCell home page]\n*[http://vcell.org/run-vcell-software VCell Download]\n* [http://groups.google.com/group/vcell-discuss VCell user forum]\n*[http://vcell.org/vcell-published-models VCell Models in publications]\n*[https://www.youtube.com/channel/UC5nfrfm2shaAiC1HnOPc1NA Tutorial about using VCell] on [[YouTube]].\n* [https://github.com/virtualcell/vcell Source code] on [[Github]]\n\n[[Category:Mathematical and theoretical biology]]\n[[Category:Systems biology]]\n[[Category:Numerical software]]\n[[Category:Numerical differential equations]]\n[[Category:Free science software]]"
    },
    {
      "title": "Volume of fluid method",
      "url": "https://en.wikipedia.org/wiki/Volume_of_fluid_method",
      "text": "{{short description|Free-surface modelling technique}}\n{{More footnotes|date=March 2015}}\n[[Image:Drifter drop.png|thumb|right|400px|An illustration of fluid simulation using VOF method.]]\n\nIn [[computational fluid dynamics]], the '''volume of fluid (VOF) method''' is a [[free-surface modelling]] technique, i.e. a [[numerical method|numerical technique]] for tracking and locating the [[free surface]] (or [[Fluid interface|fluid–fluid interface]]). It belongs to the class of Eulerian methods which are characterized by a [[Polygon mesh|mesh]] that is either stationary or is moving in a certain prescribed manner to accommodate the evolving shape of the interface. As such, VOF is an advection scheme—a numerical recipe that allows the programmer to track the shape and position of the interface, but it is not a standalone flow solving algorithm. The [[Navier–Stokes equations]] describing the motion of the flow have to be solved separately. The same applies for all other advection algorithms.\n\n==History==\nThe volume of fluid method is based on earlier [[Marker-and-cell method|Marker-and-cell]] (MAC) methods. First accounts of what is now known as VOF have been given by Noh & Woodward in 1976,<ref name=Noh76>{{cite journal|first1 = W.F.| last1=Noh | first2 = P.| last2 = Woodward  | title = SLIC (Simple Line Interface Calculation). In proceedings of 5th International Conference of Fluid Dynamics, edited by A. I. van de Vooren & P.J. Zandbergen | journal = Lecture Notes in Physics | year = 1976 | volume = 59 | pages = 330–340 | doi=10.1007/3-540-08004-x_336}}</ref> where fraction function <math>C</math> (see below) appeared, although the first publication in a Journal was by Hirt and Nichols in 1981.<ref>{{cite journal | first1 = C.W.  | last1 = Hirt | first2 = B.D.  | last2 = Nichols | title = Volume of fluid (VOF) method for the dynamics of free boundaries | journal = Journal of Computational Physics | year = 1981 | volume = 39 | issue = 1 | doi = 10.1016/0021-9991(81)90145-5 | pages = 201–225|bibcode = 1981JCoPh..39..201H }}</ref> Since VOF method surpassed MAC by lowering computer storage requirements, it quickly became popular. Early applications include  Torrey et al. from [[Los Alamos National Laboratory|Los Alamos]], who created VOF codes for NASA (1985,1987).<ref>{{cite journal | first1 = M. | last1 = Torrey | first2 = L.  | last2 = Cloutman | title = NASA-VOF2D: a computer program for incompressible flows with free surfaces (unpublished) | journal = LANL Technical Report LA-10612-MS | year = 1985}}</ref> First implementations of VOF suffered from imperfect interface description, which was later remedied by introducing a Piecewise-Linear Interface Calculation (PLIC) scheme. Using VOF with PLIC is a contemporary standard, used in number of computer codes, such as [[Flow Science, Inc.|FLOW-3D]], [[Gerris (software)]], [[Fluent, Inc.|ANSYS Fluent]], [[CD-adapco|STAR-CCM]] and [[CONVERGENT SCIENCE.|CONVERGE]].\n\n==Overview==\nThe method is based on the idea of a so-called fraction function <math>C</math>. It is a scalar function, defined as the [[integral]] of a fluid's [[Indicator function|characteristic function]] in the [[control volume]], namely the volume of a computational [[Regular grid|grid]] cell. The volume fraction of each fluid is tracked through every cell in the computational grid, while all fluids share a single set of momentum equations. When a cell is empty with no traced fluid inside, the value of <math>C</math> is zero; when the cell is full,  <math>C=1</math>; and when there is a fluid interface in the cell, <math> 0 < C < 1</math>. <math>C</math> is a discontinuous function, its value jumps from 0 to 1 when the argument moves into interior of traced phase. The normal direction of the fluid interface is found where the value of <math>C</math> changes most rapidly. With this method, the free-surface is not defined sharply, instead it is distributed over the height of a cell. Thus, in order to attain accurate results, local grid refinements have to be done. The refinement criterion is simple, cells with <math> 0<C<1 </math> have to be refined. A method for this, known as the marker and micro-cell method, has been developed by Raad and his colleagues in 1997.<ref>{{cite journal | first1 = S. | last1 = Chen | first2 = D.B.  | last2 = Raad | title =  The surface marker and micro-cell method | journal = International Journal for Numerical Methods in Fluids | year = 1997 | volume = 25 | issue = 7 | pages = 749–778|bibcode = 1997IJNMF..25..749C |doi = 10.1002/(SICI)1097-0363(19971015)25:7<749::AID-FLD584>3.3.CO;2-F }}</ref>\n\nThe evolution of the <math>m</math>-th fluid in a system on <math>n</math> fluids is governed by the transport equation (actually the same equation that has to be fulfilled by the [[level-set method]] distance function <math>\\phi</math>):\n\n: <math> \\frac{\\partial C_{m}}{\\partial t} + \\mathbf{v}\\cdot \\nabla C_{m} =0,</math>\n\nwith the following constraint\n\n: <math> \\sum_{m=1}^{n} C_{m} = 1 </math>,\n\ni.e., the volume of the fluids is constant. For each cell, properties such as density <math> \\rho </math> are calculated by a volume fraction average of all fluids in the cell\n\n: <math> \\rho=\\sum_{m=1}^{n} \\rho_{m} C_{m}.</math>\n\nThese properties are then used to solve a single momentum equation through the domain, and the attained velocity field is shared among the fluids.\n\nThe VOF method is computationally friendly, as it introduces only one additional equation and thus requires minimal storage. The method is also characterized by its capability of dealing with highly non-linear problems in which the free-surface experiences sharp topological changes. By using the VOF method, one also evades the use of complicated mesh deformation algorithms used by surface-tracking methods. The major difficulty associated with the method is the smearing of the free-surface. This problem originates from excessive diffusion of the transport equation.\n\n==Discretization==\n\nTo avoid smearing of the free-surface, the transport equation has to be solved without excessive diffusion. Thus, the success of a VOF method depends heavily on the scheme used for the [[advection]] of the <math>C</math> field. Whereas a first order upwind scheme smears the interface, a downwind scheme of the same order will cause a false distribution problem which will cause erratic behavior in case of the flow is not oriented along a grid line. As these lower-order schemes are inaccurate, and higher-order schemes are unstable and induce oscillations, it has been necessary to develop schemes which keep the free-surface sharp while also producing monotonic profiles for <math>C</math>.<ref>{{cite journal | first1 = M.  | last1 = Darwish | first2 = F.  | last2 = Moukalled | title =  Convective Schemes for Capturing Interfaces of Free-Surface Flows on Unstructured Grids | journal =Numerical Heat Transfer Part B | year = 2006 | volume = 49 | issue = 1 | pages = 19–42| bibcode = 2006NHTB...49...19D | doi = 10.1080/10407790500272137 }}</ref> Over the years, a multitude of different methods for treating the [[advection]] have been developed. In the original VOF-article by Hirt, a [[donor-acceptor scheme]] was employed. This scheme formed a basis for the compressive differencing schemes.\n\nThe different methods for treating VOF can be roughly divided into three categories, namely the donor-acceptor formulation, higher order differencing schemes and line techniques. The donor-acceptor scheme is based on two fundamental criteria, namely the boundedness criterion and the availability criterion. The first one states that the value of <math>C</math> has to be bounded between zero and one. The latter criterion ensures that the amount of fluid convected over a face during a time step is less than or equal to the amount available in the donor cell, i.e., the cell from which the fluid is flowing to the acceptor cell. In his original work, Hirt treated this with a blended scheme consisting of controlled downwinding and upwind differencing.\n\nIn the higher order differencing schemes, as the name suggests, the convective transport equation is discretized with higher order or blended differencing schemes. Such methods include the Compressive Interface Capturing Scheme for Arbitrary Meshes (CICSAM) <ref>{{cite journal | first1 = O.  | last1 = Ubbink | first2 = R.I.  | last2 = Issa | title =   Method for Capturing Sharp Fluid Interfaces on ArbitraryMeshes | journal =J. Comput. Phys. | year = 1999 | volume = 153 | issue = 1 | pages = 26–50| bibcode = 1999JCoPh.153...26U| doi = 10.1006/jcph.1999.6276}}</ref> and High Resolution Interface Capturing (HRIC)  <ref>{{cite journal | first1 = S.  | last1 = Muzaferija | first2 = M.  | last2 = Peric | first3 = P  | last3 = Sames | first4 = T.  | last4 = Schelin | title =  A two-fluid Navier-Stokes solver to simulate water entry | journal =Twenty-Second Symposium on Naval Hydrodynamics| year = 1998}}</ref> scheme, which are both based on the Normalized Variable Diagram (NVD) by Leonard.<ref>{{cite journal | first1 = B.P.  | last1 = Leonard | title = The ULTIMATE conservative difference scheme applied to unsteady one-dimensional advection | journal = Computer Methods in Applied Mechanics and Engineering| year = 1991 | volume = 88 | issue = 1 | pages = 17–74| bibcode = 1991CMAME..88...17L | doi = 10.1016/0045-7825(91)90232-U }}</ref>\n\nLine techniques circumvent the problems associated with the discretization of the transport equation by not tracking the interface in a cell explicitly. Instead, the fluid distribution in a cell an interface is obtained by using the volume fraction distribution of neighbouring cells. The Simple Line Interface Calculation (SLIC) by Noh and Woodward from 1976<ref name=Noh76 /> uses a simple geometry to reconstruct the interface. In each cell the interface is approximated as a line parallel to one of the coordinate axes and assumes different fluid configurations for the horizontal and vertical movements respectively. A widely used technique today is the Piecewise Linear Interface Calculation by Youngs.<ref>{{cite journal | first1 = D.L.  | last1 = Youngs | title = Time-dependent multi-material flow with large fluid distortion | journal = Numerical Methods for Fluid Dynamics | year = 1982  | pages = 273–285}}</ref> PLIC is based on the idea that the interface can be represented as a line in {{math|'''R'''<sup>2</sup>}} or a [[plane (geometry)|plane]] in {{math|'''R'''<sup>3</sup>}}; in the latter case we may describe the interface by:\n\n: <math>\\mathbf{n}_x+\\mathbf{n}_y+\\mathbf{n}_z=\\alpha,</math>\n\nwhere <math>\\mathbf{n}</math> is a vector normal to the interface. Components of the normal are found e.g. by using the [[finite difference method]] or its combination with [[least squares]] optimization. The free term <math>\\alpha</math> is then found (analytically or by approximation) by enforcing mass conservation within computational cell. Once the description of the interface is established, the advection equation of <math>C</math> is solved using geometrical techniques such as finding the [[flux]] of <math>C</math> between grid cells, or advecting the endpoints of interface using discrete values of fluid velocity.\n\n==See also==\n* [[Immersed boundary method]]\n* [[Stochastic Eulerian Lagrangian method]]\n* [[Level-set method]]\n* [[sloshing]]\n\n==References==\n{{Reflist}}\n\n* {{citation\n | first1 =J.E.\n | last1 = Pilliod\n | title = An analysis of Piecewise Linear Interface Reconstruction Algorithms for Volume of Fluid Methods. Technical Report.\n | journal = Technical Report, U.C. Davis\n | year = 1992\n}}\n\n[[Category:Computational fluid dynamics]]\n[[Category:Numerical differential equations]]"
    },
    {
      "title": "Vorticity confinement",
      "url": "https://en.wikipedia.org/wiki/Vorticity_confinement",
      "text": "'''Vorticity confinement (VC)''', a physics-based [[computational fluid dynamics]] model analogous to [[shock capturing methods]], was invented by Dr. [[John Steinhoff]], professor at the University of Tennessee Space Institute, in the late 1980s<ref>{{Cite book|chapter-url=http://www.alibris.com/search/books/isbn/9780471953340|title=Frontiers of Computational Fluid Dynamics|author=John Steinhoff|publisher=John Wiley & Sons|year=1994|isbn=978-0-471-95334-0|location=|pages=|chapter=Vorticity Confinement: A New Technique for Computing Vortex Dominated Flows}}</ref> to solve [[vortex]] dominated flows.  It was first formulated to capture concentrated vortices shed from the wings, and later became popular in a wide range of research areas.<ref>{{Cite journal|date=2006-08-01|title=The computation of massively separated flows using compressible vorticity confinement methods|journal=Computers & Fluids|language=en|volume=35|issue=7|pages=781–789|doi=10.1016/j.compfluid.2006.03.001|issn=0045-7930|last1=Hu|first1=Guangchu|last2=Grossman|first2=Bernard}}</ref> During the 1990s and 2000s, it became widely used in the field of engineering.<ref>{{Cite journal|last=Wenren|first=Y.|last2=Fan|first2=M.|last3=Dietz|first3=W.|last4=Hu|first4=G.|last5=Braun|first5=C.|last6=Steinhoff|first6=J.|last7=Grossman|first7=B.|date=2001-01-08|title=Efficient Eulerian computation of realistic rotorcraft flows using Vorticity Confinement - A survey of recent results|journal=39th Aerospace Sciences Meeting and Exhibit|language=en-US|doi=10.2514/6.2001-996}}</ref><ref>{{Cite journal|last=Murayama|first=Mitsuhiro|last2=Nakahashi|first2=Kazuhiro|last3=Obayashi|first3=Shigeru|date=2001-01-08|title=Numerical simulation of vortical flows using vorticity confinement coupled with unstructured grid|journal=39th Aerospace Sciences Meeting and Exhibit|language=en-US|doi=10.2514/6.2001-606}}</ref>\n\n==The method==\nVC has a basic familiarity to [[soliton|solitary wave]] approach which is extensively used in many [[condensed matter physics]] applications.<ref>{{Cite journal|last=Bishop|first=A.R.|last2=Krumhansl|first2=J.A.|last3=Trullinger|first3=S.E.|date=1980|title=Solitons in condensed matter: A paradigm|journal=Physica D: Nonlinear Phenomena|volume=1|issue=1|pages=1–44|doi=10.1016/0167-2789(80)90003-2|issn=0167-2789}}</ref> The effect of VC is to capture the small scale features over as few as 2 grid cells as they convect through the flow. The basic idea is similar to that of compression [[discontinuity (mathematics)|discontinuity]] in Eulerian [[shock capturing methods]]. The internal structure is maintained thin and so the details of the internal structure may not be important.\n\n==Example==\n<!-- Deleted image removed: [[File:rotor flow.jpeg|thumb|right|Simulation of vortex sheets shed from helicopter rotor blades. {{Deletable image-caption|date=May 2012}}]] -->Consider 2D [[Euler equations]], modified using the confinement term, F:\n:<math>\n\\frac{\\partial \\mathbf u}{\\partial t} + \\mathbf u \\cdot \\nabla \\mathbf u + \\nabla\\frac{P}{\\rho}=F_D (\\mathbf u) -F_C (\\mathbf u)\n</math>\n\nThe discretized Euler equations with the extra term can be solved on fairly coarse grids, with simple low order accurate numerical methods, but still yield concentrated vortices which convect without spreading. VC has different forms, one of which is VC1. It involves an added dissipation,<math> F_D </math>,to the [[partial differential equation]], which when balanced with inward convection, <math> F_C </math>, produce stable solutions. Another form is termed as VC2 in which [[dissipation]] is balanced with nonlinear anti-diffusion to produce stable [[soliton|solitary wave]]-like solutions. \n:<math>\nF_D </math>  : Dissipation \n:<math>\nF_C</math>  : Inward convection for VC1 and nonlinear anti-diffusion for VC2\nThe main difference between VC1 and VC2 is that in the latter the centroid of the [[vortex]] follows the local velocity [[moment (physics)|moment]] weighted by vorticity. This should provide greater accuracy than VC1 in cases where the convecting field is weak compared to the self-induced [[velocity]] of the vortex. One drawback is that VC2 is not as robust as VC1 because while VC1 involves convection like inward propagation of vorticity balanced by an outward second order diffusion, VC2 involves a second order inward propagation of [[vorticity]] balanced by 4th order outward [[dissipation]]. This approach has been further extended to solve [[wave equation]] and is called [[Wave confinement]] (WC).\n\n==Immersed boundary==\n\n<!-- Deleted image removed: [[File:with VC.jpeg|thumb|right|Simulation of Jet plume with VC. {{Deletable image-caption|date=May 2012}}]]  --><!-- Deleted image removed: [[File:without VC.jpeg|thumb|right|Simulation of Jet plume without VC. {{Deletable image-caption|date=May 2012}}]] -->To enforce no-slip boundary conditions on immersed surfaces, first, the surface is represented implicitly by a smooth “level set” function, “f”, defined at each grid point. This is the (signed) distance from each grid point to the nearest point on the surface of an object – positive outside, negative inside. Then, at each time step during the solution, velocities in the interior are set to zero. In a computation using VC, this results in a thin vortical region along the surface, which is smooth in the tangential direction, with no “staircase” effects.<ref>{{Cite journal|last=Wenren|first=Y.|last2=Fan|first2=M.|last3=Wang|first3=L.|last4=Xiao|first4=M.|last5=Steinhoff|first5=J.|date=2003|title=Application of Vorticity Confinement to Prediction of the Flow over Complex Bodies|journal=AIAA Journal|language=en-US|volume=41|issue=5|pages=809–816|doi=10.2514/2.2042|issn=0001-1452}}</ref> The important point is that no special logic is required in the “cut” cells, unlike many conventional schemes: only the same VC equations are applied, as in the rest of the grid, but with a different form for F. Also, unlike many conventional immersed surface schemes, which are inviscid because of cell size constraints, there is effectively a no-slip boundary condition, which results in a boundary layer with well-defined total vorticity and which, because of VC, remains thin, even after separation. The method is especially effective for complex configurations with separation from sharp corners. Also, even with constant coefficients, it can approximately treat separation from smooth surfaces. General blunt bodies, which typically shed turbulent vorticity that induces a velocity around an upstream body. It is inconsistent to use body fitted grids as the vorticity convects through a non fitted grid.\n\n==Applications==\nVC is used in many applications including rotor wake computations, computation of wing tip vortices, drag computations for vehicles, flow around urban layouts, smoke/contaminant propagation and special effects.  Also, it is used in wave computations for communication purposes.\n\n==References==\n{{reflist}}\n\n{{Numerical PDE}}\n\n[[Category:Numerical differential equations]]\n[[Category:Computational fluid dynamics]]"
    },
    {
      "title": "Walk-on-spheres method",
      "url": "https://en.wikipedia.org/wiki/Walk-on-spheres_method",
      "text": "In [[mathematics]], the '''walk-on-spheres method (WoS)''' is a numerical probabilistic [[algorithm]], or [[Monte-Carlo method]], used mainly in order to approximate the solutions of some specific [[boundary value problem]] for [[partial differential equations]] (PDEs).<ref name=\"muller\">{{cite journal|last1=Muller|first1=Mervin E.|authorlink1=Mervin E. Muller|title=Some continuous Monte-Carlo Methods for the Dirichlet Problem|journal=The Annals of Mathematical Statistics|date=Sep 1956|volume=27|issue=3|pages=569–589|jstor=2237369|doi=10.1214/aoms/1177728169}}</ref><ref name=\"sabelfeld\">{{cite book|last1=Sabelfeld|first1=Karl K.|title=Monte Carlo methods in boundary value problems|date=1991|publisher=Springer-Verlag|location=Berlin [etc.]|isbn=978-3540530015}}</ref> The WoS method was first introduced by [[Mervin E. Muller]] in 1956 to solve [[Laplace's equation]],<ref name=\"muller\"/> and was since then generalized to other problems.\n\nIt relies on probabilistic interpretations of PDEs, and simulates paths of [[Brownian motion]] (or for some more general variants, [[diffusion processes]]), \nby sampling only the exit-points out of successive spheres, rather than simulating in detail the path of the process. This often makes it less costly than \"grid-based\" algorithms, and it is today one of the most widely used \"grid-free\" algorithms for generating Brownian paths.\n\n==Informal description==\n\nLet <math>\\Omega</math> be a bounded [[Domain (mathematical analysis)|domain]] in <math>\\mathbb{R}^d</math> with a sufficiently regular boundary <math>\\Gamma</math>, let ''h'' be a function on <math>\\Gamma</math>, and let <math>x</math> be a point inside <math>\\Omega</math>.\n\nConsider the [[Dirichlet problem]]:\n\n:<math>\\begin{cases} \\Delta u (x) =0  & \\mbox{if }x \\in \\Omega \\\\\n u(x) = h(x) & \\mbox{if }x \\in  \\Gamma. \\end{cases}</math>\n\nIt can be easily shown{{efn| The link was first established by Kakutani for the 2-dimensional Brownian motion,<ref>{{cite journal|last1=Kakutani|first1=Shizuo|title=Two-dimensional Brownian motion and harmonic functions|journal=Proceedings of the Imperial Academy|date=1944|volume=20|issue=10|pages=706–714|doi=10.3792/pia/1195572706}}</ref> it can now be seen as a trivial case of the Feynman−Kac formula.}} that when the solution <math>u</math> exists, for <math>x \\in \\Omega</math>:\n\n:<math>u(x) = \\mathbb{E}_x[ h(W_{\\tau}) ]</math>\n\nwhere {{math|''W''}} is a {{math|''d''}}-dimensional [[Wiener process]], the expected value is taken conditionally on {{math|&#123;''W''<SUB>0</SUB> &#61; ''x''&#125;}}, and {{math|<VAR>&tau;</VAR>}} is the first-exit time out of {{math|&Omega;}}.\n\nTo compute a solution using this formula, we only have to simulate the first exit point of independent Brownian paths since with the [[law of large numbers]]:\n\n:<math> \\mathbb{E}_x[ h(W_\\tau) ] \\sim \\frac{1}{n} \\sum_{i=1}^n h(W^i_\\tau) </math>\n\nThe WoS method provides an efficient way of sampling the first exit point of a Brownian motion from the domain, by remarking that for any {{math|(''d''&nbsp;−&nbsp;1)}}-sphere centred on {{math|''x''}}, the first point of exit of {{math|''W''}} out of the sphere has a uniform distribution over its surface. Thus, it starts with {{math|''x''<SUP>(''0'')</SUP>}} equal to {{math|''x''}}, and draws the largest sphere <math>\\mathcal{S}_0</math> centered on {{math|''x''<SUP>(''0'')</SUP>}} and contained inside the domain. The first point of exit {{math|''x''<SUP>(''1'')</SUP>}} from <math>\\mathcal{S}_0</math> is uniformly distributed on its surface. By repeating this step inductively, the WoS provides a sequence {{math|(''x''<SUP>(''n'')</SUP>)}} of positions of the Brownian motion.\n\nAccording to intuition, the process will converge to the first exit point of the domain. However, this algorithm takes almost surely an infinite number of steps to end. For computational implementation, the process is usually stopped when it gets sufficiently close to the border, and returns the projection of the process on the border. This procedure is sometimes called introducing an <math>\\varepsilon</math>-shell, or <math>\\varepsilon</math>-layer.<ref name=\"mascagniEpsilonShell\"/>\n\n== Formulation of the method ==\n\n[[File:Walk on Spheres illustration.jpg|thumb|right|380px|Illustration of a run of the Walk-on-spheres algorithm on an arbitrary domain <math>\\Omega</math> with an <math>\\varepsilon</math>-shell]]\n\nChoose <math>\\varepsilon > 0</math>. Using the same notations as above, the Walk-on-spheres algorithm is described as follows:\n\n# Initialize : <math>x^{(0)} = x</math>\n# While <math>d(x^{(n)}, \\Gamma) > \\varepsilon</math>:\n##Set <math>r_n = d(x^{(n)}, \\Gamma)</math>.\n##Sample <math>\\gamma_n</math> a vector uniformly distributed over the unit sphere, independently from the preceding ones.\n##Set <math> x^{(n+1)} := x^{(n)} + r_n \\gamma_n</math>\n#When <math>d(x^{(n)}, \\Gamma) \\le \\varepsilon</math>:\n#<math>x_f := p_{\\Gamma}(x^{(n)})</math>, the orthogonal projection of <math>x^{(n)}</math> on <math>\\Gamma</math>\n#Return <math>x_f</math>\n\nThe result <math> x_f </math> is an estimator of the first exit point from <math>\\Omega</math> of a Wiener process starting from <math>x</math>, in the sense that they have close probability distributions (see below for comments on the error).\n\n== Comments and practical considerations ==\n\n=== Radius of the spheres ===\n\nIn some cases the distance to the border might be difficult to compute, and it is then preferable to replace the radius of the sphere by a lower bound of this distance. One must then ensure that the radius of the spheres stays large enough so that the process reaches the border.<ref name=\"muller\"/>\n\n=== Bias in the method and GFFP ===\n\n[[File:Improved WoS method illustration.png|thumb|left|360px|The Walk-on-spheres method is used until the process gets <math>\\delta</math>-close to the border. Then the sphere is replaced by its \"intersection\" with the boundary of the domain.]]\nAs it is a Monte-Carlo method, the error of the estimator can be decomposed into the sum of a [[Bias of an estimator|bias]], and a [[Errors and residuals in statistics|statistical error]]. The statistical error is reduced by increasing the number of paths sampled, or by using [[variance reduction]] methods.\n\nThe WoS theoretically provides exact (or unbiased) simulations of the paths of the Brownian motion. However, as it is formulated here, the <math>\\varepsilon</math>-shell introduced to ensure that the algorithm terminates also adds an error, usually of order <math>\\mathcal{O}(\\varepsilon)</math>.<ref name=\"mascagniEpsilonShell\">{{cite journal|last1=Mascagni|first1=Michael|last2=Hwang|first2=Chi-Ok|title=ϵ-Shell error analysis for \"Walk On Spheres\" algorithms|journal=Mathematics and Computers in Simulation|date=June 2003|volume=63|issue=2|pages=93–104|doi=10.1016/S0378-4754(03)00038-7}}</ref> This error has been studied, and can be avoided in some geometries by using [[Green's function|Green's Functions]] First Passage method:<ref>{{cite journal|last1=Given|first1=James A.|last2=Hubbard|first2=Joseph B.|last3=Douglas|first3=Jack F.|title=A first-passage algorithm for the hydrodynamic friction and diffusion-limited reaction rate of macromolecules|journal=The Journal of Chemical Physics|date=1997|volume=106|issue=9|pages=3761|doi=10.1063/1.473428|bibcode=1997JChPh.106.3761G}}</ref> one can change the geometry of the \"spheres\" when close enough to the border, so that the probability of reaching the border in one step becomes positive. This requires the knowledge of Green's functions for the specific domains. (see also [[Harmonic measure]])\n\nWhen it is possible to use it, the GFFP method is usually preferred, as it is both faster and more accurate than the classical WoS.<ref name=\"mascagniEpsilonShell\"/>\n\n=== Complexity ===\n\nIt can be shown that the number of steps taken for the WoS process to reach the <math>\\varepsilon</math>-shell is of order <math> \\mathcal{O} (  | \\log(\\varepsilon) |) </math>.<ref name=\"sabelfeld\"/> Therefore, one can increase the precision to a certain extent without making the number of steps grow notably.\n\nAs it is commonly the case for Monte-Carlo methods, this algorithm performs particularly well when the dimension is higher than <math>3</math>, and one only needs a small set of values. Indeed, the computational cost increases linearly with the dimension, whereas the cost of grid dependant methods increase exponentially with the dimension.<ref name=\"sabelfeld\"/>\n\n== Variants, extensions ==\n\nThis method has been largely studied, generalized and improved. For example, it is now extensively used for the computation of physical properties of materials (such as [[capacitance]], electrostatic internal energy of molecules, etc.). Some notable extensions include:\n\n=== Elliptic equations ===\n\nThe WoS method can be modified to solve more general problems. In particular, the method has been generalized to solve Dirichlet problems for equations of the form <math>\\Delta u = cu + f </math> <ref>{{cite journal|last1=Elepov|first1=B.S.|last2=Mikhailov|first2=G.A.|title=Solution of the dirichlet problem for the equation Δ''u''&nbsp;−&nbsp;''cu''&nbsp;=&nbsp;−''q'' by a model of \"walks on spheres\"|journal=USSR Computational Mathematics and Mathematical Physics|date=January 1969|volume=9|issue=3|pages=194–204|doi=10.1016/0041-5553(69)90070-6}}</ref> (which include the [[Poisson equation|Poisson]] and linearized [[Poisson–Boltzmann equation|Poisson−Boltzmann]] equations) or for any [[elliptic equation]] with constant coefficients.<ref>{{cite journal|last1=Booth|first1=Thomas E|title=Exact Monte Carlo solution of elliptic partial differential equations|journal=Journal of Computational Physics|date=February 1981|volume=39|issue=2|pages=396–404|doi=10.1016/0021-9991(81)90159-5|bibcode=1981JCoPh..39..396B}}</ref>\n\nMore efficient ways of solving the linearized Poisson–Boltzmann equation have also been developed, relying on [[Feynman−Kac]] representations of the solutions.<ref>{{cite journal|last1=Hwang|first1=Chi-Ok|last2=Mascagni|first2=Michael|last3=Given|first3=James A.|title=A Feynman–Kac path-integral implementation for Poisson's equation using an ''h''-conditioned Green's function|journal=Mathematics and Computers in Simulation|date=March 2003|volume=62|issue=3–6|pages=347–355|doi=10.1016/S0378-4754(02)00224-0|citeseerx=10.1.1.123.3156}}</ref>\n\n=== Time dependency ===\n\nAgain, within a regular enough border, it possible to use the WoS method to solve the following problem :\n\n:<math>\\begin{cases} \\partial_t u(x,t) + \\frac{1}{2}\\Delta_x u (x, t) =0  & \\mbox{if }x \\in \\Omega \\mbox{and } t < T\\\\\nu(x, T) = h(x, T) & \\mbox{if } x \\in \\bar{\\Omega}\\\\\n u(x, t) = h(x, t) & \\mbox{if } x \\in  \\Gamma. \\end{cases}</math>\n\nof which the solution can be represented as:<ref>{{cite book|last1=Gobet|first1=Emmanuel|title=Méthodes de Monte-Carlo et processus stochastiques du linéaire au non-linéaire|date=2013|publisher=Editions de l'Ecole polytechnique|location=Palaiseau|isbn=978-2-7302-1616-6}}</ref>\n\n:<math>u(x,t) = \\mathbb{E}_{t,x} (h(X_{T \\wedge \\tau}, T \\wedge \\tau)) </math>,\n\nwhere the expectation is taken conditionally on <math>X_t = x</math>\n\nTo use the WoS through this formula, one needs to sample the exit-time from each sphere drawn, which is an independent variable <math>\\tau_0</math> with Laplace transform (for a sphere of radius <math>R</math>):<ref>{{cite book|last1=Salminen|first1=Andrei N. Borodin; Paavo|title=Handbook of Brownian motion : facts and formulae|date=2002|publisher=Birkhäuser|location=Basel [u.a.]|isbn=978-3-7643-6705-3|edition=2.}}</ref>\n\n:<math> \\mathbb{E}(\\exp(- s \\tau_0))) = \\frac{R \\sqrt{2s}}{\\sinh(R \\sqrt{2s})} </math>\n\nThe total time of exit from the domain <math>\\tau</math> can be computed as the sum of the exit-times from the spheres. The process also has to be stopped when it has not exited the domain at time <math>T</math>.\n\n=== Other extensions ===\nThe WoS method has been generalized to estimate the solution to elliptic partial differential equations everywhere in a domain, rather than at a single point.<ref>{{cite journal|last1=Booth|first1=Thomas|title=Regional Monte Carlo solution of elliptic partial differential equations|journal=Journal of Computational Physics|date=August 1982|volume= 47|issue=2|pages=281–290|doi=10.1016/0021-9991(82)90079-1|ref=13|bibcode=1982JCoPh..47..281B}}</ref>\n\nThe WoS method has also been generalized in order to compute hitting times for processes other than Brownian motions. For example, hitting times of [[Bessel processes]] can be computed via an algorithm called \"Walk on moving spheres\".<ref>{{cite journal|last1=Deaconu|first1=Madalina|last2=Herrmann|first2=Samuel|title=Hitting time for Bessel processes—walk on moving spheres algorithm (WoMS)|journal=The Annals of Applied Probability|date=December 2013|volume=23|issue=6|pages=2259–2289|doi=10.1214/12-AAP900|arxiv=1111.3736}}</ref> This problem has applications in mathematical finance.\n\nFinally, the WoS can be adapted to solve the Poisson and Poisson–Boltzmann equation with flux conditions on the boundary.<ref>{{cite book|last1=Simonov|first1=Nikolai A.|title=Random Walks for Solving Boundary-Value Problems with Flux Conditions|journal=Numerical Methods and Applications|date=2007|volume=4310|pages=181–188|doi=10.1007/978-3-540-70942-8_21|series=Lecture Notes in Computer Science|isbn=978-3-540-70940-4|citeseerx=10.1.1.63.3780}}</ref>\n\n== See also ==\n* [[Feynman–Kac formula]]\n* [[Stochastic processes and boundary value problems]]\n* [[Euler–Maruyama method]] to sample the paths of general diffusion processes\n\n==Notes==\n{{notelist}}\n\n==References==\n{{Reflist}}\n\n== Further reading ==\n*{{cite book|last1=Sabelfeld|first1=Karl K.|title=Monte Carlo methods in boundary value problems|date=1991|publisher=Springer-Verlag|location=Berlin [etc.]|isbn=9783540530015}}\n\n== External links ==\n* [http://www.cs.fsu.edu/~mascagni/Muller_1956_Annals_Mathematical_Statistics.pdf Some continuous Monte-Carlo methods for the Dirichlet problem] The paper in which Marvin Edgar Muller introduced the method.\n* [http://people.bath.ac.uk/maspm/book.pdf Brownian Motion] by Peter Mörters and Yuval Peres. See Chapter 3.3 on harmonic measure, Green's functions and exit-points.\n\n[[Category:Variants of random walks]]\n[[Category:Numerical differential equations]]\n[[Category:Boundary value problems]]\n[[Category:Partial differential equations]]"
    },
    {
      "title": "Weak formulation",
      "url": "https://en.wikipedia.org/wiki/Weak_formulation",
      "text": "'''Weak formulations''' are important tools for the analysis of mathematical [[equation]]s that permit the transfer of [[concept]]s of [[linear algebra]] to solve problems in other fields such as [[partial differential equation]]s. In a weak formulation, an equation is no longer required to hold absolutely (and this is not even well defined) and has instead '''[[weak solution]]s''' only with respect to certain \"test vectors\" or \"[[test function]]s\".  This is equivalent to formulating the problem to require a solution in the sense of a [[Distribution (mathematics)|distribution]].{{citation-needed|date=February 2017}}\n\nWe introduce weak formulations by a few examples and present the main theorem for the solution, the '''Lax–Milgram theorem'''.  The theorem is named after [[Peter Lax]] and [[Arthur Milgram]], who proved it in 1954.\n\n==General concept==\nLet <math>V</math> be a [[Banach space]]. We want to find the solution <math>u \\in V</math> of the equation\n\n:<math>Au = f</math>,\n\nwhere <math>A\\colon V\\to V'</math> and <math>f\\in V'</math>, with <math>V'</math> being the [[Dual space|dual]] of <math>V</math>.\n\nThis is equivalent to finding <math>u\\in V</math> such that\nfor all <math>v\\in V</math> holds:\n\n:<math>[Au](v) = f(v)</math>.\n\nHere, we call <math>v</math> a test vector or test function.\n\nWe bring this into the generic form of a weak formulation, namely, find <math>u\\in V</math> such that\n\n:<math> a(u,v) = f(v) \\quad \\forall v\\in V,</math>\n\nby defining the [[bilinear form]]\n\n:<math>a(u,v) := [Au](v).</math>\n\nSince this is very abstract, let us follow this by some examples.\n\n==Example 1: linear system of equations==\nNow, let <math>V = \\mathbb R^n</math> and <math>A:V\\to V</math> be a linear mapping. Then, the weak formulation of the equation\n\n:<math>Au = f</math>\n\ninvolves finding <math>u\\in V</math> such that for all <math>v\\in V</math> the following equation holds:\n\n:<math> \\langle Au,v \\rangle = \\langle f,v \\rangle, </math>\n\nwhere <math>\\langle \\cdot,\\cdot \\rangle</math> denotes an inner product.\n\nSince <math>A</math> is a linear mapping, it is sufficient to test with basis vectors, and we get\n\n:<math> \\langle Au,e_i\\rangle = \\langle f,e_i\\rangle \\quad i=1,\\ldots,n. </math>\n\nActually, expanding <math>u=\\sum_{j=1}^n u_je_j</math>, we obtain the matrix form of the equation\n\n:<math>\\mathbf A \\mathbf u = \\mathbf f,</math>\n\nwhere <math>a_{ij} = \\langle Ae_j, e_i\\rangle </math> and <math>f_i = \\langle f,e_i \\rangle </math>.\n\nThe bilinear form associated to this weak formulation is\n\n:<math> a(u,v) = \\mathbf v^T\\mathbf A \\mathbf u.</math>\n\n==Example 2: Poisson's equation==\nOur aim is to solve [[Poisson's equation]] \n\n:<math>-\\nabla^2 u = f, </math>\n\non a domain <math>\\Omega\\subset \\mathbb R^d</math> with <math>u=0</math> on its boundary,\nand we want to specify the solution space <math>V</math> later. We will use the <math>L^2</math>-scalar product\n\n:<math>\\langle u,v\\rangle = \\int_\\Omega uv\\,dx</math>\n\nto derive our weak formulation. Then, testing with differentiable functions <math>v</math>, we get\n\n:<math> - \\int_\\Omega ( \\nabla^2 u ) v \\,dx = \\int_\\Omega fv \\,dx. </math>\n\nWe can make the left side of this equation more symmetric by [[integration by parts]] using [[Green's identities|Green's identity]] and assuming that <math>v=0</math> on <math>\\partial\\Omega</math>:\n\n:<math> \\int_\\Omega \\nabla u \\cdot \\nabla v \\,dx = \\int_\\Omega f v \\,dx.</math>\n\nThis is what is usually called the weak formulation of [[Poisson's equation]]; what's missing is the space <math>V</math>, which is beyond the scope of this article. The space must allow us to write down this equation. Therefore, we should require that the derivatives of functions in this space are square integrable. Now, there is actually the [[Sobolev space]] <math>H^1_0(\\Omega)</math> of functions with [[weak derivative]]s in <math>L^2(\\Omega)</math> and with zero boundary conditions, which fulfills this purpose.\n\nWe obtain the generic form by assigning\n\n:<math> a(u,v) = \\int_\\Omega \\nabla u \\cdot \\nabla v \\,dx </math>\n\nand\n\n:<math> f(v) = \\int_\\Omega f v \\,dx. </math>\n\n==The Lax–Milgram theorem==\nThis is a formulation of the '''Lax–Milgram theorem''' which relies on properties of the symmetric part of the [[bilinear form]]. It is not the most general form.\n\nLet <math>V</math> be a [[Hilbert space]] and <math> a( \\cdot ,\\cdot )</math> a [[bilinear form]] on <math>V</math>, which is\n# [[Bilinear form#On normed vector spaces|bounded]]: <math>|a(u,v)| \\le C \\|u\\| \\|v\\|</math> and\n# [[Coercive function#Coercive operators and forms|coercive]]: <math> a(u,u) \\ge c \\|u\\|^2.</math>\n\nThen, for any <math>f\\in V'</math>, there is a unique solution <math>u\\in V</math> to the equation\n\n:<math>a(u,v) = f(v)</math>\n\nand it holds\n\n:<math> \\|u\\| \\le \\frac1c \\|f\\|_{V'}.</math>\n\n===Application to example 1===\nHere, application of the Lax–Milgram theorem is definitely a stronger result than is needed, but we still can use it and give this problem the same structure as the others have.\n\n*Boundedness: all bilinear forms on <math>\\mathbb R^n</math> are bounded. In particular, we have\n*:<math> |a(u,v)| \\le \\|A\\|\\,\\|u\\|\\,\\|v\\| </math>\n*Coercivity: this actually means that the real parts of the eigenvalues of <math>A</math> are not smaller than <math>c</math>. Since this implies in particular that no eigenvalue is zero, the system is solvable.\n\nAdditionally, we get the estimate\n\n:<math> \\|u\\| \\le \\frac1c \\|f\\|, </math>\n\nwhere <math>c</math> is the minimal real part of an eigenvalue of <math>A</math>.\n\n===Application to example 2===\nHere, as we mentioned above, we choose <math>V = H^1_0(\\Omega)</math> with the norm\n:<math>\\|v\\|_V := \\|\\nabla v\\|,</math>\n\nwhere the norm on the right is the <math>L^2</math>-norm on <math>\\Omega</math> (this provides a true norm on <math> V </math> by the [[Poincaré inequality]]).\nBut, we see that <math>|a(u,u)| = \\|\\nabla u\\|^2</math> and by the [[Cauchy–Schwarz inequality]], <math>|a(u,v)| \\le \\|\\nabla u\\|\\,\\|\\nabla v\\|</math>.\n\nTherefore, for any <math>f\\in [H^1_0(\\Omega)]'</math>, there is a unique solution <math>u\\in V</math> of [[Poisson's equation]] and we have the estimate\n\n:<math>\\|\\nabla u\\| \\le \\|f\\|_{[H^1_0(\\Omega)]'}.</math>\n\n==See also==\n* [[Babuška–Lax–Milgram theorem]]\n* [[Lions–Lax–Milgram theorem]]\n\n==References==\n*{{citation\n|last = Lax\n|first = Peter D.\n|author-link = Peter Lax\n|last2 = Milgram\n|first2 = Arthur N.\n|author2-link = Arthur Milgram\n|chapter = Parabolic equations\n|title = Contributions to the theory of partial differential equations\n|series = Annals of Mathematics Studies\n|volume= 33\n|pages = 167–190\n|chapter-url=https://www.degruyter.com/view/books/9781400882182/9781400882182-010/9781400882182-010.xml\n|url=https://www.degruyter.com/viewbooktoc/product/474533\n|publisher = [[Princeton University Press]]\n|place = [[Princeton, N. J.]]\n|year = 1954\n|mr=0067317\n|zbl=0058.08703\n|via = [[De Gruyter]]\n|subscription=yes}}\n\n==External links==\n*[http://mathworld.wolfram.com/Lax-MilgramTheorem.html MathWorld page on Lax–Milgram theorem]\n\n[[Category:Partial differential equations]]\n[[Category:Numerical differential equations]]"
    },
    {
      "title": "WENO methods",
      "url": "https://en.wikipedia.org/wiki/WENO_methods",
      "text": "{{short description|Scheme used in the numerical solution of hyperbolic partial differential equations}}\nIn numerical solution of differential equations, '''WENO (weighted essentially non-oscillatory) methods''' are classes of [[high-resolution scheme]]s. WENO are used in the numerical solution of hyperbolic partial differential equations. These methods were developed from [[ENO methods]] (essentially non-oscillatory). The first WENO scheme is developed by Liu, Chan and [[Stanley Osher|Osher]] in 1994.<ref>{{cite journal |doi=10.1006/jcph.1994.1187 |title=Weighted Essentially Non-oscillatory Schemes |journal=Journal of Computational Physics |volume=115 |pages=200–212 |year=1994 |last1=Liu |first1=Xu-Dong |last2=Osher |first2=Stanley |last3=Chan |first3=Tony |citeseerx=10.1.1.24.8744 }}</ref> In 1996, Guang-Sh and [[Chi-Wang Shu]] developed new WENO scheme<ref>{{cite journal |doi=10.1006/jcph.1996.0130 |title=Efficient Implementation of Weighted ENO Schemes |journal=Journal of Computational Physics |volume=126 |pages=202–228 |year=1996 |last1=Jiang |first1=Guang-Shan |last2=Shu |first2=Chi-Wang |citeseerx=10.1.1.7.6297 }}</ref> which is called WENO-JS.<ref>{{cite journal |doi=10.1016/j.jmaa.2012.04.040 |title=Mapped WENO schemes based on a new smoothness indicator for Hamilton–Jacobi equations |journal=Journal of Mathematical Analysis and Applications |volume=394 |issue=2 |pages=670–682 |year=2012 |last1=Ha |first1=Youngsoo |last2=Kim |first2=Chang Ho |last3=Lee |first3=Yeon Ju |last4=Yoon |first4=Jungho }}</ref> Nowadays, there are many WENO methods.<ref>{{cite journal |doi=10.1137/10080960X |title=Strong Stability Preserving Two-step Runge–Kutta Methods |journal=SIAM Journal on Numerical Analysis |volume=49 |issue=6 |pages=2618–2639 |year=2011 |last1=Ketcheson |first1=David I. |last2=Gottlieb |first2=Sigal |last3=MacDonald |first3=Colin B. |arxiv=1106.3626 }}</ref>\n\n==See also==\n*[[High-resolution scheme]]\n*[[ENO methods]]\n\n==References==\n{{reflist}}\n\n==Further reading==\n*{{cite book |doi=10.1007/BFb0096355 |chapter=Essentially non-oscillatory and weighted essentially non-oscillatory schemes for hyperbolic conservation laws |title=Advanced Numerical Approximation of Nonlinear Hyperbolic Equations |volume=1697 |pages=325–432 |series=Lecture Notes in Mathematics |year=1998 |last1=Shu |first1=Chi-Wang |isbn=978-3-540-64977-9 |citeseerx=10.1.1.127.895 }}\n*{{cite journal |doi=10.1137/070679065 |title=High Order Weighted Essentially Nonoscillatory Schemes for Convection Dominated Problems |journal=SIAM Review |volume=51 |pages=82–126 |year=2009 |last1=Shu |first1=Chi-Wang }}\n\n{{Numerical PDE}}\n\n[[Category:Numerical differential equations]]\n[[Category:Computational fluid dynamics]]"
    },
    {
      "title": "Computational fluid dynamics",
      "url": "https://en.wikipedia.org/wiki/Computational_fluid_dynamics",
      "text": "{{more footnotes|date=September 2014}}\n\n{{Computational physics}}\n[[File:Verus Engineering Porsche 987.2 Ventus 2 Package.png|thumb|A simulation of aerodynamic package of a Porsche 987.2 Cayman.]]\n'''Computational fluid dynamics''' ('''CFD''') is a branch of [[fluid mechanics]] that uses [[numerical analysis]] and [[data structure]]s to analyze and solve problems that involve [[fluid dynamics|fluid flows]].  Computers are used to perform the calculations required to simulate the free-stream flow of the fluid, and the interaction of the fluid ([[liquid]]s and [[gas]]es) with surfaces defined by [[Boundary value problem#Boundary value conditions|boundary conditions]]. With high-speed [[supercomputer]]s, better solutions can be achieved, and are often required to solve the largest and most complex problems. Ongoing research yields software that improves the accuracy and speed of complex simulation scenarios such as [[transonic]] or [[turbulence|turbulent]] flows. Initial validation of such software is typically performed using experimental apparatus such as  [[wind tunnel]]s.  In addition, previously performed [[Closed-form solution|analytical]] or [[Empirical research|empirical]] analysis of a particular problem can be used for comparison.  A final validation is often performed using full-scale testing, such as [[flight test]]s.\n\nCFD is applied to a wide range of research and engineering problems in many fields of study and industries, including [[aerodynamics]] and aerospace analysis, [[Numerical weather prediction|weather simulation]], natural science and [[environmental engineering]], industrial system design and analysis, [[biological engineering]] and fluid flows, and [[engine]] and [[combustion]] analysis.\n\n==Background and history==\n[[Image:CFD Shuttle.jpg|thumb|right|A computer simulation of high velocity air flow around the [[Space Shuttle]] during re-entry.]]\n[[Image:X-43A (Hyper - X) Mach 7 computational fluid dynamic (CFD).jpg|thumb|right|A simulation of the [[Hyper-X]] scramjet vehicle in operation at [[Mach number|Mach]]-7]] The fundamental basis of almost all CFD problems is the [[Navier–Stokes equations]], which define many single-phase (gas or liquid, but not both) fluid flows.  These equations can be simplified by removing terms describing [[viscous]] actions to yield the [[Euler equations (fluid dynamics)|Euler equations]].  Further simplification, by removing terms describing [[vorticity]] yields the [[full potential equation]]s. Finally, for small [[Perturbation theory|perturbation]]s in subsonic and [[supersonic]] flows (not [[transonic]] or [[hypersonic]]) these equations can be [[Linearization|linearized]] to yield the linearized potential equations.\n\nHistorically, methods were first developed to solve the linearized potential equations. Two-dimensional (2D) methods, using [[conformal transformation]]s of the flow about a [[Cylinder (geometry)|cylinder]] to the flow about an [[airfoil]] were developed in the 1930s.<ref>{{cite book|last=Milne-Thomson|first=L.M.|authorlink=L. M. Milne-Thomson|title=Theoretical Aerodynamics|journal=Physics of Fluids A|volume=5|issue=4|pages=1023|year=1973|publisher=Dover Publications|isbn=978-0-486-61980-4}}</ref>\n\nOne of the earliest type of calculations resembling modern CFD are those by [[Lewis Fry Richardson]], in the sense that these calculations used finite differences and divided the physical space in cells. Although they failed dramatically, these calculations, together with Richardson's book \"Weather prediction by numerical process\",<ref>{{cite book|title=Weather prediction by numerical process|year=1965|publisher=Dover Publications|author=Richardson, L. F.|author2=Chapman, S.}}</ref> set the basis for modern CFD and numerical meteorology. In fact, early CFD calculations during the 1940s using [[ENIAC]] used methods close to those in Richardson's 1922 book.<ref>{{cite journal|last=Hunt|title=Lewis Fry Richardson and his contributions to mathematics, meteorology, and models of conflict|journal=Annual Review of Fluid Mechanics|year=1997|volume=30|issue=1|pages=xiii–xxxvi|doi=10.1146/annurev.fluid.30.1.0|bibcode = 1998AnRFM..30D..13H }}</ref>\n\nThe computer power available paced development of [[Three-dimensional space|three-dimensional]] methods.  Probably the first work using computers to model fluid flow, as governed by the Navier-Stokes equations, was performed at [[Los Alamos National Lab]], in the T3 group.<ref name=legacy_T3>{{cite web|title=The Legacy of Group T-3|url=https://www.lanl.gov/orgs/t/t3/history.shtml#early|accessdate=March 13, 2013}}</ref><ref name=harlow2004fluid>{{cite journal|last=Harlow|first=F. H.|title=Fluid dynamics in Group T-3 Los Alamos National Laboratory:(LA-UR-03-3852)|journal=[[Journal of Computational Physics]]|year=2004|volume=195|issue=2|pages=414–433|bibcode = 2004JCoPh.195..414H |doi = 10.1016/j.jcp.2003.09.031 |url=https://zenodo.org/record/1259097}}</ref> This group was led by [[Francis H. Harlow]], who is widely considered as one of the pioneers of CFD. From 1957 to late 1960s, this group developed a variety of numerical methods to simulate transient two-dimensional fluid flows, such as \n[[Particle-in-cell]] method (Harlow, 1957),<ref>{{Cite journal|author=F.H. Harlow|title=A Machine Calculation Method for Hydrodynamic Problems|publisher=Los Alamos Scientific Laboratory report LAMS-1956|year=1955|author-link=Francis H. Harlow}}</ref> \n[[Fluid-in-cell]] method (Gentry, Martin and Daly, 1966),<ref>{{Cite journal|author1=Gentry, R. A. |author2=Martin, R. E. |author3=Daly, J. B. |title=An Eulerian differencing method for unsteady compressible flow problems|journal=[[Journal of Computational Physics]]|volume=1|issue=1|pages=87–118|year=1966|bibcode = 1966JCoPh...1...87G |doi = 10.1016/0021-9991(66)90014-3 }}</ref>\n[[Vorticity stream function]] method (Jake Fromm, 1963),<ref name=Fromm1963>{{cite journal|last=Fromm|first=J. E.|author2=F. H. Harlow|title=Numerical solution of the problem of vortex street development|journal=[[Physics of Fluids]]|year=1963|volume=6|issue=7|pages=975|url=http://pof.aip.org/resource/1/pfldas/v6/i7/p975_s1|bibcode = 1963PhFl....6..975F |doi = 10.1063/1.1706854 }}</ref> and\n[[Marker-and-cell method]] (Harlow and Welch, 1965).<ref name=harlow_welch>{{cite journal|last=Harlow|first=F. H.|author2=J. E. Welch|title=Numerical calculation of time-dependent viscous incompressible flow of fluid with a free surface|journal=[[Physics of Fluids]]|year=1965|volume=8|issue=12|pages=2182–2189|url=http://www.cs.rpi.edu/~cutler/classes/advancedgraphics/S09/papers/harlow_welch.pdf|bibcode = 1965PhFl....8.2182H |doi = 10.1063/1.1761178 }}</ref> Fromm's vorticity-stream-function method for 2D, transient, incompressible flow was the first treatment of strongly contorting incompressible flows in the world.\n\nThe first paper with three-dimensional model was published by John Hess and [[A.M.O. Smith]] of [[Douglas Aircraft]] in 1967.<ref>{{cite journal|last=Hess|first=J.L.|author2=A.M.O. Smith|year=1967|title=Calculation of Potential Flow About Arbitrary Bodies|journal=Progress in Aerospace Sciences|volume=8|pages=1–138|doi=10.1016/0376-0421(67)90003-6|bibcode = 1967PrAeS...8....1H }}</ref> This method discretized the surface of the geometry with panels, giving rise to this class of programs being called Panel Methods.  Their method itself was simplified, in that it did not include lifting flows and hence was mainly applied to ship hulls and aircraft fuselages.  The first lifting Panel Code (A230) was described in a paper written by Paul Rubbert and Gary Saaris of Boeing Aircraft in 1968.<ref>{{Cite book | doi=10.2514/6.1972-188|chapter = Review and evaluation of a three-dimensional lifting potential flow computational method for arbitrary configurations|title = 10th Aerospace Sciences Meeting|year = 1972|last1 = Rubbert|first1 = P.| last2=Saaris| first2=G.}}</ref>  In time, more advanced three-dimensional Panel Codes were developed at [[Boeing]] (PANAIR, A502),<ref>{{Cite book | doi=10.2514/6.1981-1255|chapter = PAN AIR - A higher order panel method for predicting subsonic or supersonic linear potential flows about arbitrary configurations|title = 14th Fluid and Plasma Dynamics Conference|year = 1981|last1 = Carmichael|first1 = R.| last2=Erickson| first2=L.}}</ref> [[Lockheed Corporation|Lockheed]] (Quadpan),<ref>{{Cite book | doi=10.2514/6.1983-1827|chapter = Comparison of panel method formulations and its influence on the development of QUADPAN, an advanced low-order method|title = Applied Aerodynamics Conference|year = 1983|last1 = Youngren|first1 = H.| last2=Bouchard| first2=E.| last3=Coopersmith| first3=R.| last4=Miranda| first4=L.}}</ref> [[Douglas Aircraft Company|Douglas]] (HESS),<ref>{{Cite book | doi=10.2514/6.1983-1828|chapter = Analysis of complex inlet configurations using a higher-order panel method|title = Applied Aerodynamics Conference|year = 1983|last1 = Hess|first1 = J.| last2=Friedman| first2=D.}}</ref> [[McDonnell Aircraft]] (MACAERO),<ref>Bristow, D.R., \"[https://ntrs.nasa.gov/archive/nasa/casi.ntrs.nasa.gov/19800007773.pdf Development of Panel Methods for Subsonic Analysis and Design],\" NASA CR-3234, 1980.</ref> [[NASA]] (PMARC)<ref>Ashby, Dale L.; Dudley, Michael R.; Iguchi, Steve K.; Browne, Lindsey and Katz, Joseph, “[https://ntrs.nasa.gov/archive/nasa/casi.ntrs.nasa.gov/19920023178.pdf Potential Flow Theory and Operation Guide for the Panel Code PMARC]”, NASA NASA-TM-102851 1991.</ref> and Analytical Methods (WBAERO,<ref>Woodward, F.A., Dvorak, F.A. and Geller, E.W., \"[http://www.dtic.mil/dtic/tr/fulltext/u2/782202.pdf A Computer Program for Three-Dimensional Lifting Bodies in Subsonic Inviscid Flow],\" USAAMRDL Technical Report, TR 74-18, Ft. Eustis, Virginia, April 1974.</ref> USAERO<ref>{{Cite journal | doi=10.2514/3.45564| title=Unsteady low-speed aerodynamic model for complete aircraft configurations| journal=Journal of Aircraft| volume=25| issue=4| pages=302–310| year=1988| last1=Katz| first1=Joseph| last2=Maskew| first2=Rian}}</ref> and VSAERO<ref>{{Cite journal | doi=10.2514/3.57369|title = Prediction of Subsonic Aerodynamic Characteristics: A Case for Low-Order Panel Methods|journal = Journal of Aircraft| volume=19| issue=2| pages=157–163|year = 1982}}</ref><ref>Maskew, Brian, “[https://ntrs.nasa.gov/archive/nasa/casi.ntrs.nasa.gov/19900004884.pdf Program VSAERO Theory Document: A Computer Program for Calculating Nonlinear Aerodynamic Characteristics of Arbitrary Configurations]”, NASA CR-4023, 1987.</ref>).  Some (PANAIR, HESS and MACAERO) were higher order codes, using higher order distributions of surface singularities, while others (Quadpan, PMARC, USAERO and VSAERO) used single singularities on each surface panel.  The advantage of the lower order codes was that they ran much faster on the computers of the time.  Today, VSAERO has grown to be a multi-order code and is the most widely used program of this class. It has been used in the development of many [[submarine]]s, surface [[ship]]s, [[automobile]]s, [[helicopter]]s, [[aircraft]], and more recently [[wind turbines]].  Its sister code, USAERO is an unsteady panel method that has also been used for modeling such things as high speed trains and racing [[yacht]]s.  The NASA PMARC code from an early version of VSAERO and a derivative of PMARC, named CMARC,<ref>Pinella, David and Garrison, Peter, “Digital Wind Tunnel CMARC; Three-Dimensional Low-Order Panel Codes,” Aerologic, 2009.</ref> is also commercially available.\n\nIn the two-dimensional realm, a number of Panel Codes have been developed for airfoil analysis and design.  The codes typically have a [[boundary layer]] analysis included, so that viscous effects can be modeled.  Professor Richard Eppler of the [[University of Stuttgart]] developed the [http://www.pdas.com/eppler.html PROFILE] code, partly with NASA funding, which became available in the early 1980s.<ref>Eppler, R.; Somers, D. M., \"[https://ntrs.nasa.gov/archive/nasa/casi.ntrs.nasa.gov/19800020753.pdf A Computer Program for the Design and Analysis of Low-Speed Airfoils],\" NASA TM-80210, 1980.</ref>  This was soon followed by [[MIT]] Professor Mark Drela's [[XFOIL]] code.<ref>Drela, Mark, \"[http://www.web.mit.edu/drela/Public/papers/xfoil_sv.pdf XFOIL: An Analysis and Design System for Low Reynolds Number Airfoils],\" in Springer-Verlag Lecture Notes in Engineering, No. 54, 1989.</ref> Both PROFILE and XFOIL incorporate two-dimensional panel codes, with coupled boundary layer codes for airfoil analysis work.  PROFILE uses a [[conformal transformation]] method for inverse airfoil design, while XFOIL has both a conformal transformation and an inverse panel method for airfoil design.\n\nAn intermediate step between Panel Codes and Full Potential codes were codes that used the Transonic Small Disturbance equations.  In particular, the three-dimensional WIBCO code,<ref>{{Cite book | doi=10.2514/6.1977-207| chapter=Calculation of transonic wing flows by grid embedding| title=15th Aerospace Sciences Meeting| year=1977| last1=Boppe| first1=C.}}</ref> developed by Charlie Boppe of [[Grumman Aircraft]] in the early 1980s has seen heavy use.\n\nDevelopers turned to Full Potential codes, as panel methods could not calculate the non-linear flow present at [[transonic]] speeds.  The first description of a means of using the Full Potential equations was published by Earll Murman and [[Julian Cole]] of Boeing in 1970.<ref>Murman, Earll and Cole, Julian, \"Calculation of Plane Steady Transonic Flow,\" AIAA paper 70-188, presented at the AIAA 8th Aerospace Sciences Meeting, New York New York, January 1970.</ref> Frances Bauer, [[Paul Garabedian]] and [[David Korn (computer scientist)|David Korn]] of the Courant Institute at [[New York University]] (NYU) wrote a series of two-dimensional Full Potential airfoil codes that were widely used, the most important being named Program H.<ref>Bauer, F., Garabedian, P., and Korn, D. G., \"A Theory of Supercritical Wing Sections, with Computer Programs and Examples,\" Lecture Notes in Economics and Mathematical Systems 66, Springer-Verlag, May 1972. {{ISBN|978-3540058076}}</ref>  A further growth of Program H was developed by Bob Melnik and his group at [[Grumman Aerospace]] as Grumfoil.<ref>Mead, H. R.; Melnik, R. E., \"[https://ntrs.nasa.gov/archive/nasa/casi.ntrs.nasa.gov/19860002735.pdf GRUMFOIL: A computer code for the viscous transonic flow over airfoils],\" NASA CR-3806, 1985.</ref>  [[Antony Jameson]], originally at Grumman Aircraft and the Courant Institute of NYU, worked with David Caughey to develop the important three-dimensional Full Potential code FLO22<ref>Jameson A. and Caughey D., \"[https://www.researchgate.net/profile/David_Caughey/publication/23862421_A_Finite_Volume_Method_for_Transonic_Potential_Flow_Calculations/links/5457a0a20cf2bccc49111163.pdf A Finite Volume Method for Transonic Potential Flow Calculations],\" AIAA paper 77-635, presented at the Third AIAA Computational Fluid Dynamics Conference, Alburquerque New Mexico, June 1977.</ref> in 1975.  Many Full Potential codes emerged after this, culminating in Boeing's Tranair (A633) code,<ref>{{Cite book | doi=10.2514/6.1987-34|chapter = TRANAIR - A computer code for transonic analyses of arbitrary configurations|title = 25th AIAA Aerospace Sciences Meeting|year = 1987|last1 = Samant|first1 = S.| last2=Bussoletti| first2=J.| last3=Johnson| first3=F.| last4=Burkhart| first4=R.| last5=Everson| first5=B.| last6=Melvin| first6=R.| last7=Young| first7=D.| last8=Erickson| first8=L.| last9=Madson| first9=M.}}</ref> which still sees heavy use.\n\nThe next step was the Euler equations, which promised to provide more accurate solutions of transonic flows.  The methodology used by Jameson in his three-dimensional FLO57 code<ref>Jameson, A., Schmidt, W. and Turkel, E., \"[http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.464.3391&rep=rep1&type=pdf Numerical Solution of the Euler Equations by Finite Volume Methods Using Runge-Kutta Time-Stepping Schemes],\" AIAA paper 81-1259, presented at the AIAA 14th Fluid and Plasma Dynamics\nConference, Palo Alto California, 1981.</ref> (1981) was used by others to produce such programs as Lockheed's TEAM program<ref>{{Cite journal | doi=10.2514/3.45717|title = Improvements to an Euler aerodynamic method for transonic flow analysis| journal=Journal of Aircraft| volume=26| pages=13–20|year = 1989|last1 = Raj|first1 = Pradeep| last2=Brennan| first2=James E.}}</ref> and IAI/Analytical Methods' MGAERO program.<ref>{{Cite book | doi=10.2514/6.1991-3236|chapter = Application of an efficient 3-D multigrid Euler method (MGAERO) to complete aircraft configurations|title = 9th Applied Aerodynamics Conference|year = 1991|last1 = Tidd|first1 = D.| last2=Strash| first2=D.| last3=Epstein| first3=B.| last4=Luntz| first4=A.| last5=Nachshon| first5=A.| last6=Rubin| first6=T.}}</ref>  MGAERO is unique in being a structured [[cartesian coordinate system|cartesian]] mesh code, while most other such codes use structured body-fitted grids (with the exception of NASA's highly successful CART3D code,<ref>{{Cite book | doi=10.2514/6.1995-853|chapter = 3D applications of a Cartesian grid Euler method|title = 33rd Aerospace Sciences Meeting and Exhibit|year = 1995|last1 = Melton|first1 = John| last2=Berger| first2=Marsha| last3=Aftosmis| first3=Michael| last4=Wong| first4=Michael}}</ref> Lockheed's SPLITFLOW code<ref>{{Cite book | doi=10.2514/6.1995-343|chapter = SPLITFLOW - A 3D unstructured Cartesian/prismatic grid CFD code for complex geometries|title = 33rd Aerospace Sciences Meeting and Exhibit|year = 1995|last1 = Karman|first1 = l.}}</ref> and [[Georgia Institute of Technology|Georgia Tech]]'s NASCART-GT).<ref>Marshall, D., and Ruffin, S.M., \" [http://digitalcommons.calpoly.edu/cgi/viewcontent.cgi?article=1084&context=aero_fac An Embedded Boundary Cartesian Grid Scheme for Viscous Flows using a New Viscous Wall Boundary Condition Treatment],” AIAA Paper 2004-0581, presented at the AIAA 42nd Aerospace Sciences Meeting, January 2004.</ref> [[Antony Jameson]] also developed the three-dimensional AIRPLANE code<ref>{{Cite book | doi=10.2514/6.1986-103|chapter = Calculation of Inviscid Transonic Flow over a Complete Aircraft|title = 24th Aerospace Sciences Meeting|year = 1986|last1 = Jameson|first1 = A.| last2=Baker| first2=T.| last3=Weatherill| first3=N.}}</ref> which made use of unstructured tetrahedral grids.\n\nIn the two-dimensional realm, Mark Drela and Michael Giles, then graduate students at MIT, developed the ISES Euler program<ref>{{Cite book | doi=10.2514/6.1985-1530|chapter = Newton solution of direct and inverse transonic Euler equations|title = 7th Computational Physics Conference|year = 1985|last1 = Giles|first1 = M.| last2=Drela| first2=M.| last3=Thompkins, Jr| first3=W.}}</ref> (actually a suite of programs) for airfoil design and analysis.  This code first became available in 1986 and has been further developed to design, analyze and optimize single or multi-element airfoils, as the MSES program.<ref>{{Cite book | doi=10.2514/6.1990-1470|chapter = Newton solution of coupled viscous/inviscid multielement airfoil flows|title = 21st Fluid Dynamics, Plasma Dynamics and Lasers Conference|year = 1990|last1 = Drela|first1 = Mark}}</ref>  MSES sees wide use throughout the world.  A derivative of MSES, for the design and analysis of airfoils in a cascade, is MISES,<ref>Drela, M. and Youngren H., \"A User's Guide to MISES 2.53\", MIT Computational Sciences Laboratory, December 1998.</ref> developed by Harold \"Guppy\" Youngren while he was a graduate student at MIT.\n\nThe Navier–Stokes equations were the ultimate target of development.  Two-dimensional codes, such as NASA Ames' ARC2D code first emerged.  A number of three-dimensional codes were developed (ARC3D, [[Overflow (software)|OVERFLOW]], CFL3D are three successful NASA contributions), leading to numerous commercial packages.\n\n==Methodology==\nIn all of these approaches the same basic procedure is followed.\n* During [[preprocessor (CAE)|preprocessing]]\n** The [[geometry]] and physical bounds of the problem can be defined using [[Computer-aided design|computer aided design]] (CAD). From there, data can be suitably processed (cleaned-up) and the fluid volume (or fluid domain) is extracted.\n** The [[volume]] occupied by the fluid is divided into discrete cells (the mesh). The mesh may be uniform or non-uniform, structured or unstructured, consisting of a combination of hexahedral, tetrahedral, prismatic, pyramidal or polyhedral elements.\n** The physical modeling is defined – for example, the equations of fluid motion + [[enthalpy]] + radiation + species conservation\n** Boundary conditions are defined. This involves specifying the fluid behaviour and properties at all bounding surfaces of the fluid domain. For transient problems, the initial conditions are also defined.\n* The [[computer simulation|simulation]] is started and the equations are solved iteratively as a steady-state or transient.\n* Finally a postprocessor is used for the analysis and visualization of the resulting solution.\n\n===Discretization methods===\n{{further|Discretization of Navier–Stokes equations}}\n\nThe stability of the selected discretisation is generally established numerically rather than analytically as with simple linear problems.  Special care must also be taken to ensure that the discretisation handles discontinuous solutions gracefully.  The [[Euler equations (fluid dynamics)|Euler equations]] and [[Navier–Stokes equations]] both admit shocks, and contact surfaces.\n\nSome of the discretization methods being used are:\n\n==== Finite volume method ====\n\n{{Main|Finite volume method}}\n\nThe finite volume method (FVM) is a common approach used in CFD codes, as it has an advantage in [[Random-access memory|memory]] usage and solution speed, especially for large problems, high [[Reynolds number]] turbulent flows, and source term dominated flows (like combustion).<ref>{{cite book|last=Patankar|first=Suhas V.|authorlink=Suhas Patankar|title=Numerical Heat Transfer and Fluid FLow|year=1980|publisher=Hemisphere Publishing Corporation\n|isbn=978-0891165224}}</ref>\n\nIn the finite volume method, the governing partial differential equations (typically the Navier-Stokes equations, the mass and energy conservation equations, and the turbulence equations) are recast in a conservative form, and then solved over discrete control volumes. This [[discretization]] guarantees the conservation of fluxes through a particular control volume. The finite volume equation yields governing equations in the form,\n:<math>\\frac{\\partial}{\\partial t}\\iiint Q\\, dV + \\iint F\\, d\\mathbf{A} = 0,</math>\nwhere <math>Q</math> is the vector of conserved variables, <math>F</math> is the vector of fluxes (see [[Euler equations (fluid dynamics)|Euler equations]] or [[Navier–Stokes equations]]), <math>V</math> is the volume of the control volume element, and <math>\\mathbf{A}</math> is the surface area of the control volume element.\n\n==== Finite element method ====\n\n{{Main|Finite element method}}\n\nThe finite element method (FEM) is used in structural analysis of solids, but is also applicable to fluids.  However, the FEM formulation requires special care to ensure a conservative solution. The FEM formulation has been adapted for use with fluid dynamics governing equations.{{Citation needed|date=November 2010}} Although FEM must be carefully formulated to be conservative, it is much more stable than the finite volume approach.<ref>{{cite journal\n| title=k-version of finite element method in gas dynamics: higher-order global differentiability numerical solutions\n| last1=Surana\n| first1=K.A.\n| last2=Allu\n| first2=S.\n| last3=Tenpas\n| first3=P.W.\n| last4=Reddy\n| first4=J.N.\n| journal=International Journal for Numerical Methods in Engineering\n| volume=69\n| issue=6\n| pages=1109–1157\n|date=February 2007\n| doi=10.1002/nme.1801\n|bibcode = 2007IJNME..69.1109S }}</ref>  However, FEM can require more memory and has slower solution times than the FVM.<ref>{{cite book\n|author1=Huebner, K.H. |author2=Thornton, E.A. |author3=and Byron, T.D. | title=The Finite Element Method for Engineers\n| edition=Third\n| publisher=Wiley Interscience\n| year=1995}}</ref>\n\nIn this method, a weighted residual equation is formed:\n\n:<math>R_i = \\iiint W_i Q \\, dV^e</math>\n\nwhere <math>R_i</math> is the equation residual at an element vertex <math>i</math>, <math>Q</math> is the conservation equation expressed on an element basis, <math>W_i</math> is the weight factor, and <math>V^{e}</math> is the volume of the element.\n\n==== Finite difference method ====\n\n{{Main|Finite difference method}}\n\nThe finite difference method (FDM) has historical importance{{Citation needed|date=November 2010}} and is simple to program.  It is currently only used in few specialized codes, which handle complex geometry with high accuracy and efficiency by using embedded boundaries or overlapping grids (with the solution interpolated across each grid).{{Citation needed|date=November 2010}} \n:<math> \n\\frac{\\partial Q}{\\partial t}+\n\\frac{\\partial F}{\\partial x}+\n\\frac{\\partial G}{\\partial y}+\n\\frac{\\partial H}{\\partial z}=0\n</math>\nwhere <math>Q</math> is the vector of conserved variables, and <math>F</math>, <math>G</math>, and <math>H</math> are the fluxes in the <math>x</math>, <math>y</math>, and <math>z</math> directions respectively.\n\n==== Spectral element method ====\n\n{{Main|Spectral element method}}\n\nSpectral element method is a finite element type method. It requires the mathematical problem (the partial differential equation) to be cast in a weak formulation. This is typically done by multiplying the differential equation by an arbitrary test function and integrating over the whole domain. Purely mathematically, the test functions are completely arbitrary - they belong to an infinite-dimensional function space. Clearly an infinite-dimensional function space cannot be represented on a discrete spectral element mesh; this is where the spectral element discretization begins. The most crucial thing is the choice of interpolating and testing functions. In a standard, low order FEM in 2D, for quadrilateral elements the most typical choice is the bilinear test or interpolating function of the form <math>v(x,y) = ax+by+cxy+d</math>. In a spectral element method however, the interpolating and test functions are chosen to be polynomials of a very high order (typically e.g. of the 10th order in CFD applications). This guarantees the rapid convergence of the method. Furthermore, very efficient integration procedures must be used, since the number of integrations to be performed in numerical codes is big. Thus, high order Gauss integration quadratures are employed, since they achieve the highest accuracy with the smallest number of computations to be carried out.\nAt the time there are some academic CFD codes based on the spectral element method and some more are currently under development, since the new time-stepping schemes arise in the scientific world.\n\n==== Boundary element method ====\n\n{{Main|Boundary element method}}\n\nIn the boundary element method, the boundary occupied by the fluid is divided into a surface mesh.\n\n==== High-resolution discretization schemes ====\n\n{{Main|High-resolution scheme}}\n\nHigh-resolution schemes are used where shocks or discontinuities are present. Capturing sharp changes in the solution requires the use of second or higher-order numerical schemes that do not introduce spurious oscillations. This usually necessitates the application of [[flux limiters]] to ensure that the solution is [[total variation diminishing]].{{Citation needed|date=November 2010}}\n\n===Turbulence models===\n\nIn computational modeling of turbulent flows, one common objective is to obtain a model that can predict quantities of interest, such as fluid velocity, for use in engineering designs of the system being modeled.  For turbulent flows, the range of length scales and complexity of phenomena involved in turbulence make most modeling approaches prohibitively expensive; the resolution required to resolve all scales involved in turbulence is beyond what is computationally possible.  The primary approach in such cases is to create numerical models to approximate unresolved phenomena.  This section lists some commonly used computational models for turbulent flows.\n\nTurbulence models can be classified based on computational expense, which corresponds to the range of scales that are modeled versus resolved (the more turbulent scales that are resolved, the finer the resolution of the simulation, and therefore the higher the computational cost). If a majority or all of the turbulent scales are not modeled, the computational cost is very low, but the tradeoff comes in the form of decreased accuracy.\n\nIn addition to the wide range of length and time scales and the associated computational cost, the governing equations of fluid dynamics contain a [[Nonlinear system|non-linear]] convection term and a non-linear and non-local pressure gradient term.  These nonlinear equations must be solved numerically with the appropriate boundary and initial conditions.\n\n==== Reynolds-averaged Navier–Stokes ====\n{{main|Reynolds-averaged Navier–Stokes equations}}\n\n[[Reynolds-averaged Navier–Stokes equations|Reynolds-averaged Navier–Stokes]] (RANS) equations are the oldest approach to turbulence modeling. An ensemble version of the governing equations is solved, which introduces new ''apparent stresses'' known as [[Reynolds stresses]]. This adds a second order tensor of unknowns for which various models can provide different levels of closure. It is a common misconception that the RANS equations do not apply to flows with a time-varying mean flow because these equations are 'time-averaged'. In fact, statistically unsteady (or non-stationary) flows can equally be treated. This is sometimes referred to as URANS. There is nothing inherent in Reynolds averaging to preclude this, but the turbulence models used to close the equations are valid only as long as the time over which these changes in the mean occur is large compared to the time scales of the turbulent motion containing most of the energy.\n\nRANS models can be divided into two broad approaches:\n\n; [[Turbulence modeling|Boussinesq hypothesis]]: This method involves using an algebraic equation for the Reynolds stresses which include determining the turbulent viscosity, and depending on the level of sophistication of the model, solving transport equations for determining the turbulent kinetic energy and dissipation. Models include k-ε ([[Brian Launder|Launder]] and [[Brian Spalding|Spalding]]),<ref>{{cite journal|last=Launder|first=B.E.|author2=D.B. Spalding|year=1974|title= The Numerical Computation of Turbulent Flows|journal=Computer Methods in Applied Mechanics and Engineering|pages=269–289|doi = 10.1016/0045-7825(74)90029-2|bibcode = 1974CMAME...3..269L|volume=3|issue=2 }}</ref> Mixing Length Model ([[Ludwig Prandtl|Prandtl]]),<ref name=wilcox>{{cite book|last=Wilcox|first=David C.|title=Turbulence Modeling for CFD|year=2006|publisher=DCW Industries, Inc.|isbn=978-1-928729-08-2|edition=3}}</ref> and Zero Equation Model (Cebeci and [[Apollo M. O. Smith|Smith]]).<ref name=wilcox /> The models available in this approach are often referred to by the number of transport equations associated with the method. For example, the Mixing Length model is a \"Zero Equation\" model because no transport equations are solved; the <math>k-\\epsilon</math> is a \"Two Equation\" model because two transport equations (one for <math>k</math> and one for <math>\\epsilon</math>) are solved.\n; [[Reynolds stress model]] (RSM): This approach attempts to actually solve transport equations for the Reynolds stresses. This means introduction of several transport equations for all the Reynolds stresses and hence this approach is much more costly in CPU effort.{{Citation needed|date=November 2010}}\n\n====Large eddy simulation====\n{{main|Large eddy simulation}}\n\n[[Image:LESPremixedFlame.jpg|thumb|right|250px|Volume rendering of a non-premixed swirl flame as simulated by LES.]]\n[[Large eddy simulation]] (LES) is a technique in which the smallest scales of the flow are removed through a filtering operation, and their effect modeled using subgrid scale models.  This allows the largest and most important scales of the turbulence to be resolved, while greatly reducing the computational cost incurred by the smallest scales. This method requires greater computational resources than RANS methods, but is far cheaper than DNS.\n\n====Detached eddy simulation====\n{{main|Detached eddy simulation}}\n\n[[Detached eddy simulation]]s (DES) is a modification of a RANS model in which the model switches to a subgrid scale formulation in regions fine enough for LES calculations. Regions near solid boundaries and where the turbulent length scale is less than the maximum grid dimension are assigned the RANS mode of solution. As the turbulent length scale exceeds the grid dimension, the regions are solved using the LES mode. Therefore, the grid resolution for DES is not as demanding as pure LES, thereby considerably cutting down the cost of the computation. Though DES was initially formulated for the Spalart-Allmaras model (Spalart et al., 1997), it can be implemented with other RANS models (Strelets, 2001), by appropriately modifying the length scale which is explicitly or implicitly involved in the RANS model. So while Spalart–Allmaras model based DES acts as LES with a wall model, DES based on other models (like two equation models) behave as a hybrid RANS-LES model. Grid generation is more complicated than for a simple RANS or LES case due to the RANS-LES switch. DES is a non-zonal approach and provides a single smooth velocity field across the RANS and the LES regions of the solutions.\n\n====Direct numerical simulation====\n{{main|Direct numerical simulation}}\n\n[[Direct numerical simulation]] (DNS) resolves the entire range of turbulent length scales.  This marginalizes the effect of models, but is extremely expensive.  The computational cost is proportional to <math>Re^{3}</math>.<ref name=\"Pope_2000\">{{cite book|title=Turbulent Flows|author=Pope, S.B.|publisher=Cambridge University Press|year=2000|isbn=978-0-521-59886-6}}</ref> DNS is intractable for flows with complex geometries or flow configurations.\n\n====Coherent vortex simulation====\n\nThe coherent vortex simulation approach decomposes the turbulent flow field into a coherent part, consisting of organized vortical motion, and the incoherent part, which is the random background flow.<ref name=\"Farge_2001\">{{cite journal\n|title=Coherent Vortex Simulation (CVS), A Semi-Deterministic Turbulence Model Using Wavelets\n|last1=Farge | first1= Marie | author1-link = Marie Farge\n|author2=Schneider, Kai\n|journal=Flow, Turbulence and Combustion\n|volume=66\n|issue=4\n|pages=393–426\n|doi=10.1023/A:1013512726409\n|year=2001}}</ref>  This decomposition is done using [[wavelet]] filtering.  The approach has much in common with LES, since it uses decomposition and resolves only the filtered portion, but different in that it does not use a linear, low-pass filter.  Instead, the filtering operation is based on wavelets, and the filter can be adapted as the flow field evolves.  [[Marie Farge|Farge]] and Schneider tested the CVS method with two flow configurations and showed that the coherent portion of the flow exhibited the <math>-\\frac{40}{39}</math> energy spectrum exhibited by the total flow, and corresponded to coherent structures ([[vortex stretching|vortex tubes]]), while the incoherent parts of the flow composed homogeneous background noise, which exhibited no organized structures.  Goldstein and Vasilyev<ref name=\"Goldstein_2004\">{{cite journal\n|author1=Goldstein, Daniel\n|author2=Vasilyev, Oleg\n|title=Stochastic coherent adaptive large eddy simulation method\n|journal=Physics of Fluids A\n|year=1995\n|volume=24\n|page=2497\n|doi=10.1063/1.1736671|bibcode = 2004PhFl...16.2497G\n|issue=7 |citeseerx=10.1.1.415.6540\n}}</ref> applied the FDV model to large eddy simulation, but did not assume that the wavelet filter completely eliminated all coherent motions from the subfilter scales.  By employing both LES and CVS filtering, they showed that the SFS dissipation was dominated by the SFS flow field's coherent portion.\n\n====PDF methods====\n\n[[Probability density function]] (PDF) methods for turbulence, first introduced by [[Thomas S. Lundgren|Lundgren]],<ref name=\"Lundgren_1969\">{{cite journal\n|title=Model equation for nonhomogeneous turbulence\n|author=Lundgren, T.S.\n|journal=Physics of Fluids A\n|volume=12\n|issue=3\n|year=1969\n|pages=485–497\n|doi=10.1063/1.1692511|bibcode = 1969PhFl...12..485L }}</ref> are based on tracking the one-point PDF of the velocity, <math>f_{V}(\\boldsymbol{v};\\boldsymbol{x},t) d\\boldsymbol{v}</math>, which gives the probability of the velocity at point <math>\\boldsymbol{x}</math> being between <math>\\boldsymbol{v}</math> and <math>\\boldsymbol{v}+d\\boldsymbol{v}</math>.  This approach is analogous to the [[kinetic theory of gases|kinetic theory]] of gases, in which the macroscopic properties of a gas are described by a large number of particles.  PDF methods are unique in that they can be applied in the framework of a number of different turbulence models; the main differences occur in the form of the PDF transport equation.  For example, in the context of [[large eddy simulation]], the PDF becomes the filtered PDF.<ref name=\"Colucci_1998\">{{cite journal\n|title=Filtered density function for large eddy simulation of turbulent reacting flows\n|author1=Colucci, P.J.\n|author2=Jaberi, F.A\n|author3=Givi, P.\n|author4=Pope, S.B.\n|journal=Physics of Fluids A\n|year=1998\n|volume=10\n|issue=2\n|pages=499–515\n|doi=10.1063/1.869537|bibcode = 1998PhFl...10..499C }}</ref>  PDF methods can also be used to describe chemical reactions,<ref name=\"Fox_2003\">{{cite book\n|author=Fox, Rodney\n|title=Computational models for turbulent reacting flows\n|year=2003\n|publisher=Cambridge University Press\n|isbn=978-0-521-65049-6}}</ref><ref name=\"Pope_1985\">{{cite journal\n|title=PDF methods for turbulent reactive flows\n|author=Pope, S.B.\n|journal=Progress in Energy and Combustion Science\n|year=1985\n|volume=11\n|pages=119–192|bibcode = 1985PrECS..11..119P\n|doi=10.1016/0360-1285(85)90002-4\n|issue=2 }}</ref> and are particularly useful for simulating chemically reacting flows because the chemical source term is closed and does not require a model.  The PDF is commonly tracked by using Lagrangian particle methods; when combined with large eddy simulation, this leads to a [[Langevin equation]] for subfilter particle evolution.\n\n====Vortex method====\nThe vortex method is a grid-free technique for the simulation of turbulent flows. It uses vortices as the computational elements, mimicking the physical structures in turbulence. Vortex methods were developed as a grid-free methodology that would not be limited by the fundamental smoothing effects associated with grid-based methods. To be practical, however, vortex methods require means for rapidly computing velocities from the vortex elements – in other words they require the solution to a particular form of the [[N-body problem]] (in which the motion of N objects is tied to their mutual influences). A breakthrough came in the late 1980s with the development of the [[fast multipole method]] (FMM), an algorithm by V. Rokhlin (Yale) and L. Greengard (Courant Institute). This breakthrough paved the way to practical computation of the velocities from the vortex elements and is the basis of successful algorithms.  They are especially well-suited to simulating filamentary motion, such as wisps of smoke, in real-time simulations such as video games, because of the fine detail achieved using minimal computation.<ref>{{cite web\n| url=http://software.intel.com/en-us/articles/fluid-simulation-for-video-games-part-1/\n| title=Fluid Simulation for Video Games\n| last=Gourlay\n| first=Michael J.\n| publisher=Intel Software Network\n|date=July 2009}}</ref>\n\nSoftware based on the vortex method offer a new means for solving tough fluid dynamics problems with minimal user intervention.{{Citation needed|date=November 2010}}  All that is required is specification of problem geometry and setting of boundary and initial conditions. Among the significant advantages of this modern technology;\n* It is practically grid-free, thus eliminating numerous iterations associated with RANS and LES.\n* All problems are treated identically. No modeling or calibration inputs are required.\n* Time-series simulations, which are crucial for correct analysis of acoustics, are possible.\n* The small scale and large scale are accurately simulated at the same time.\n\n====Vorticity confinement method====\n\n{{Main|Vorticity confinement}}\n\nThe [[vorticity confinement]] (VC) method is an Eulerian technique used in the simulation of turbulent wakes. It uses a solitary-wave like approach to produce a stable solution with no numerical spreading. VC can capture the small-scale features to within as few as 2 grid cells. Within these features, a nonlinear difference equation is solved as opposed to the [[finite difference equation]]. VC is similar to [[shock capturing methods]], where conservation laws are satisfied, so that the essential integral quantities are accurately computed.\n\n====Linear eddy model====\n\nThe Linear eddy model is a technique used to simulate the convective mixing that takes place in turbulent flow.<ref>{{cite journal|last=Krueger|first=Steven K.|title=Linear Eddy Simulations Of Mixing In A Homogeneous Turbulent Flow|journal=Physics of Fluids|year=1993|volume=5|issue=4|pages=1023–1034|bibcode = 1993PhFlA...5.1023M |doi = 10.1063/1.858667 |url=https://zenodo.org/record/1232081}}<!--|accessdate=2 December 2012--></ref> Specifically, it provides a mathematical way to describe the interactions of a scalar variable within the vector flow field. It is primarily used in one-dimensional representations of turbulent flow, since it can be applied across a wide range of length scales and Reynolds numbers. This model is generally used as a building block for more complicated flow representations, as it provides high resolution predictions that hold across a large range of flow conditions.\n\n===Two-phase flow===\n\n[[File:Bubble-rising.jpg|thumb|right|Simulation of bubble swarm using [[volume of fluid method]]]]\n\nThe modeling of [[two-phase flow]] is still under development. Different methods have been proposed, including the [[Volume of fluid method]], the [[level-set method]] and [[front tracking]].<ref>{{cite news|last1=Hirt|last2=Nichols|first1=C.W.|first2=B.D.|title=Volume of fluid (VOF) method for the dynamics of free boundaries|year=1981|publisher=Journal of Computational Physics }}</ref><ref>{{cite news|last1=Unverdi |first1=S.O.|last2=Tryggvason|first2=G.|authorlink2=Gretar Tryggvason|title=A Front-Tracking Method for Viscous, Incompressible, Multi-Fluid Flows|year=1992|publisher=J. Comput. Phys}}</ref>  These methods often involve a tradeoff between maintaining a sharp interface or conserving mass {{According to whom|date=November 2010}}.  This is crucial since the evaluation of the density, viscosity and surface tension is based on the values averaged over the interface.{{Citation needed|date=November 2010}} Lagrangian multiphase models, which are used for dispersed media, are based on solving the Lagrangian equation of motion for the dispersed phase.{{Citation needed|date=November 2010}}\n\n===Solution algorithms===\n\nDiscretization in the space produces a system of [[ordinary differential equations]] for unsteady problems and algebraic equations for steady problems. Implicit or semi-implicit methods are generally used to integrate the ordinary differential equations, producing a system of (usually) nonlinear algebraic equations.  Applying a [[Newton's method#Nonlinear systems of equations|Newton]] or [[Fixed point iteration|Picard]] iteration produces a system of linear equations which is nonsymmetric in the presence of advection and indefinite in the presence of incompressibility. Such systems, particularly in 3D, are frequently too large for direct solvers, so iterative methods are used, either stationary methods such as [[Successive over-relaxation|successive overrelaxation]] or [[Krylov subspace]] methods. Krylov methods such as [[Generalized minimal residual method|GMRES]], typically used with [[Preconditioner|preconditioning]], operate by minimizing the residual over successive subspaces generated by the preconditioned operator.\n\n[[Multigrid method|Multigrid]] has the advantage of asymptotically optimal performance on many problems. Traditional{{According to whom|date=November 2010}} solvers and preconditioners are effective at reducing high-frequency components of the residual, but low-frequency components typically require many iterations to reduce. By operating on multiple scales, multigrid reduces all components of the residual by similar factors, leading to a mesh-independent number of iterations.{{Citation needed|date=November 2010}}\n\nFor indefinite systems, preconditioners such as [[incomplete LU factorization]], [[Additive Schwarz method|additive Schwarz]], and [[Multigrid method|multigrid]] perform poorly or fail entirely, so the problem structure must be used for effective preconditioning.<ref>{{cite journal\n| author=Benzi, Golub, Liesen\n| title=Numerical solution of saddle-point problems\n| journal=Acta Numerica\n| year=2005\n| doi=10.1017/S0962492904000212\n| volume=14\n| pages=1–137|bibcode = 2005AcNum..14....1B | citeseerx=10.1.1.409.4160\n}}</ref> Methods commonly used in CFD are the [[SIMPLE algorithm|SIMPLE]] and [[Uzawa iteration|Uzawa algorithms]] which exhibit mesh-dependent convergence rates, but recent advances based on block LU factorization combined with multigrid for the resulting definite systems have led to preconditioners that deliver mesh-independent convergence rates.<ref>{{cite journal\n| author=Elman\n| title=A taxonomy and comparison of parallel block multi-level preconditioners for the incompressible Navier–Stokes equations\n| journal=Journal of Computational Physics\n| volume=227\n| issue=3\n|date=January 2008\n| doi=10.1016/j.jcp.2007.09.026\n| last2=Howle\n| first2=V.\n| last3=Shadid\n| first3=J.\n| last4=Shuttleworth\n| first4=R.\n| last5=Tuminaro\n| first5=R.\n| pages=1790–1808|bibcode = 2008JCoPh.227.1790E |display-authors=etal| url=https://digital.library.unt.edu/ark:/67531/metadc902332/\n}}</ref>\n\n===Unsteady aerodynamics===\nCFD made a major break through in late 70s with the introduction of LTRAN2, a 2-D code to model oscillating airfoils based on [[transonic]] small perturbation theory by Ballhaus and associates.<ref>{{cite web | url = http://history.arc.nasa.gov/hist_pdfs/bio_ballhaus.pdf | title = Bioographies | last = Haigh | first = Thomas | work = IEEE Annals of the History of Computing | year = 2006}}</ref> It uses a Murman-Cole switch algorithm for modeling the moving shock-waves.<ref>Murman, E.M. and Cole, J.D., \"Calculation of Plane Steady Transonic Flows\", AIAA Journal , Vol 9, No 1, pp. 114–121, Jan 1971. Reprinted in AIAA Journal, Vol 41, No 7A, pp. 301–308, July 2003</ref> Later it was extended to 3-D with use of a rotated difference scheme by  AFWAL/Boeing that resulted in LTRAN3.<ref>{{cite journal | title = Iterative solution of transonic flows over airfoils and wings, including flows at mach 1 |journal = Communications on Pure and Applied Mathematics| last = Jameson | first = Antony | doi = 10.1002/cpa.3160270302 | date = October 13, 2006 | volume = 27 | issue = 3 | pages = 283–309}}</ref><ref>Borland, C.J., “XTRAN3S - Transonic Steady and Unsteady Aerodynamics for Aeroelastic Applications,”AFWAL-TR-85-3214, Air Force Wright Aeronautical Laboratories, Wright-Patterson AFB, OH, January, 1986</ref>\n\n===Biomedical engineering===\n\n[[File:Vel-Streamline-FC.jpg|thumb|right|Simulation of blood flow in a human [[aorta]]]]\nCFD investigations are used to clarify the characteristics of aortic flow in detail that are otherwise invisible to experimental measurements. To analyze these conditions, CAD models of the human vascular system are extracted employing modern imaging techniques. A 3D model is reconstructed from this data and the fluid flow can be computed. Blood properties like Non-Newtonian behavior and realistic boundary conditions (e.g.  systemic pressure) have to be taken into consideration. Therefore, making it possible to analyze and optimize the flow in the cardiovascular system for different applications.<ref>Kaufmann, T.A.S., Graefe, R., Hormes, M., Schmitz-Rode, T. and Steinseiferand, U., \"Computational Fluid Dynamics in Biomedical Engineering\", Computational Fluid Dynamics: Theory, Analysis and Applications , pp. 109–136</ref>\n\n=== CPU versus GPU ===\nTraditionally, CFD simulations are performed on CPU's.<ref>{{Citation|work=SpringerReference|publisher=Springer-Verlag|doi=10.1007/springerreference_9750|chapter =Central processing unit|year = 2011|title=Springer ''Reference''}}</ref> In a more recent trend, simulations are also performed on GPU's. These typically contain slower but more processors. For CFD algorithms that feature good parallellisation performance (i.e. good speed-up by adding more cores) this can greatly reduce simulation times. Lattice-Boltzmann methods are a typical example of codes that scale well on GPU's.<ref>{{Cite web|url=http://www.nvidia.com/content/intersect-360-HPC-application-support.pdf|title=Intersect 360 HPC application Support}}</ref>\n\n== See also ==\n{{Div col|colwidth=25em}}\n* [[Blade element theory]]\n* [[Boundary conditions in fluid dynamics]]\n* [[Cavitation modelling]]\n* [[Central differencing scheme]]\n* [[Computational magnetohydrodynamics]]\n* [[Discrete element method]]\n* [[Finite element method]]\n* [[Finite volume method for unsteady flow]]\n* [[Fluid animation]]\n* [[Immersed boundary method]]\n* [[Lattice Boltzmann methods]]\n* [[List of finite element software packages]]\n* [[Meshfree methods]]\n* [[Moving particle semi-implicit method]]\n* [[Multi-particle collision dynamics]]\n* [[Multidisciplinary design optimization]]\n* [[Numerical methods in fluid mechanics]]\n* [[Shape optimization]]\n* [[Smoothed-particle hydrodynamics]]\n* [[Stochastic Eulerian Lagrangian method]]\n* [[Turbulence modeling]]\n* [[Visualization (graphics)]]\n* [[Wind tunnel]]\n{{Div col end}}\n\n==References==\n{{reflist|30em}}\n\n==Notes==\n\n*{{Cite book\n  | last = Anderson\n  | first = John D.\n  | title = Computational Fluid Dynamics: The Basics With Applications\n  | publisher = McGraw-Hill Science\n  | series = Science/Engineering/Math\n  | year = 1995\n  | isbn = 978-0-07-001685-9\n  | postscript = <!-- Bot inserted parameter. Either remove it; or change its value to \".\" for the cite to end in a \".\", as necessary. -->{{inconsistent citations}}}}\n*{{Cite book\n  | last = Patankar\n  | first = Suhas\n  | title = Numerical Heat Transfer and Fluid Flow\n  | publisher = Taylor & Francis\n  | series = Hemisphere Series on Computational Methods in Mechanics and Thermal Science\n  | year = 1980\n  | isbn = 978-0-89116-522-4\n  | postscript = <!-- Bot inserted parameter. Either remove it; or change its value to \".\" for the cite to end in a \".\", as necessary. -->{{inconsistent citations}}  }}\n*{{Cite journal\n  | last =Shah\n  | first =Tasneem M.\n  | authorlink =Tasneem M. Shah\n  |author2=Sadaf Siddiq |author3=Zafar U. Koreshi\n   | title =An analysis and comparison of tube natural frequency modes with fluctuating force frequency from the thermal cross-flow fluid in 300 MWe PWR\n  | journal = International Journal of Engineering and Technology\n  | volume = 9\n  | issue =9\n  | pages =201–205\n  | url =https://docs.google.com/viewer?a=v&q=cache:4gQM2Vj9itIJ:www.ijens.org/1936091%2520IJET.pdf+tasneem+M.+Shah&hl=en&gl=us&pid=bl&srcid=ADGEESg-lxYkvf5xfu4Nv6UfF-xgO2yzh2O6wa7EzNVurfVgtXdi_bkvvSAijrk7DvwDqWJE9Ke-trzYKGEM5GCvi5w-qmbo5nvDaGt4kv-mBr-XL6in2xo0WRyHVX3o4roKLkcZgTAk&sig=AHIEtbQ4XElNn3nmOsUXoM0JdkNeY9cMxg\n}}\n\n==External links==\n{{Sister project links| wikt=no | commons=Category:Computational fluid dynamics | b=no | n=no | q=Computational fluid dynamics | s=no | v=no | voy=no | species=no | d=no}}\n\n* ''Course:'' [http://www.mathematik.uni-dortmund.de/~kuzmin/cfdintro/cfd.html Introduction to CFD] – Dmitri Kuzmin ([[Dortmund University of Technology]])\n* ''Course:'' [https://nptel.ac.in/courses/112105045/ Computational Fluid Dynamics] – [[Suman Chakraborty]] ([[Indian Institute of Technology Kharagpur]])\n* ''Course:'' [http://www3.nd.edu/~dbalsara/Numerical-PDE-Course/ Numerical PDE Techniques for Scientists and Engineers], Open access Lectures and Codes for Numerical PDEs, including a modern view of Compressible CFD\n* [http://software.intel.com/en-us/articles/fluid-simulation-for-video-games-part-1/ Fluid Simulation for Video Games], a series of over a dozen articles describing numerical methods for simulating fluids\n* [http://prj.dimanov.com/ Joukowsky Transform Interactive WebApp]\n\n{{Authority control}}\n\n{{DEFAULTSORT:Computational Fluid Dynamics}}\n[[Category:Computational fluid dynamics| ]]\n[[Category:Computational fields of study]]"
    },
    {
      "title": "Computational methods for free surface flow",
      "url": "https://en.wikipedia.org/wiki/Computational_methods_for_free_surface_flow",
      "text": "{{multiple issues|\n{{confusing|date=November 2014}}\n{{context|date=November 2014}}\n{{technical|date=November 2014}}\n{{Refimprove|date=November 2014}}\n}}\n<!--- Don't mess with this line! ---><!--- Write your article below this line --->\nIn physics, a free surface flow is the surface of a fluid flowing that is subjected to both zero perpendicular normal stress and parallel shear stress. This can be the boundary between two homogeneous fluids, like water in an open container and the air in the Earth's atmosphere that form a boundary at the open face of the container. Computation of free surfaces is complex because of the continuous change in the location of the boundary layer. Conventional methods of computation are insufficient for such analysis. Therefore, special methods are developed for the computation of free surface flows.\n\n== Introduction ==\nComputation in flows with free and moving boundaries like the [[open-channel flow]] is a difficult task. The position of the boundary is known only at the initial time and its location at later times can be determined as using various methods like the Interface Tracking Method and the Interface Capturing Method.\n\n== Boundary conditions ==\nNeglecting the phase change at the free surface, the following boundary conditions apply.\n\n=== Kinematic condition ===\nThe free surface should be a sharp boundary separating the two fluids. There should be no flow through this boundary, i.e.,\n: <math>[(v - v_b)\\cdot n]_{fs}  =  0,</math> or\n: <math>\\dot{m}_{fs} = 0</math>\nwhere '''‘fs’''' stands for free surface. This implies that the normal component of the velocity of the fluid at the surface is equal to the normal component of the velocity of the free surface.\n\n=== Dynamic condition ===\nThe forces acting on the fluid at free surface should be in equilibrium, i.e. the momentum is conserved at the free surface. The normal forces on either side of the free surface are equal and opposite in direction and the forces in tangential direction should be equal in magnitude and direction.\n\n:<math>(n\\cdot T)_l \\cdot n + \\sigma K = -(n\\cdot T)_g \\cdot n,</math>\n:<math>(n\\cdot T)_l \\cdot t - \\frac{\\partial \\sigma}{\\partial t} = (n\\cdot T)_g \\cdot t,</math>\n:<math>(n\\cdot T)_l \\cdot s - \\frac{\\partial \\sigma}{\\partial s} = (n \\cdot T)_g \\cdot s,</math>\nHere '''σ''' is the surface tension, '''n''', '''t''' and '''s''' are unit vectors in a local orthogonal coordinate system ('''n''','''t''','''s''') at the free surface ('''n''' is outward normal to the free surface while the other two lie in the tangential plane and are mutually orthogonal). The indices ''''l'''' and ''''g'''' denote liquid and gas, respectively and '''K''' is the curvature of the free surface.\n\n:<math> K = \\frac{1}{R_t} + \\frac{1}{R_s}</math>\n\nwith '''R<sub>t</sub>''' and '''R<sub>s</sub>''' being radii of curvature along coordinates '''t''' and '''s'''.\n\nThe [[surface tension]] '''σ''' is force per unit length of a surface element and acts tangential to the free surface.\n\n: <math> f_\\sigma = \\sigma \\ dl</math>\nFor an infinitesimally small surface element '''dS''', the tangential components of the surface tension forces cancel out when '''σ = constant''', and the normal component can be expressed as a local force that results in a pressure jump across the surface.\n\n== Methods of computation ==\n\n=== Interface tracking method ===\nThis is a methods which treat the free surface as a sharp interface whose motion is followed. In this method, boundary-fitted grids are used and advanced each time the free surface is moved.<br />\nInterface tracking method is useful in situations like calculation of flow around submerged bodies. This is done by linearizing about unperturbed free surface, so a height function is introduced for the free surface elevation relative to its unperturbed state.\n\n: <math>Z = H(x,y,t)</math>\nThis gives the kinematic boundary condition a new form:<br />\n: <big><big>{{sfrac|∂H|∂t}} = u<sub>z</sub> - u<sub>x</sub>{{sfrac|∂H|∂x}} - u<sub>y</sub>{{sfrac|∂H|∂y}}</big></big>\nThis equation can be integrated and the fluid velocity at free surface can be obtained either by extrapolation from the interior or by using dynamic boundary condition. For the calculation of flow, FV method is widely used. The steps for a fully conservative FV method of this type are:\n* momentum equation is solved to obtain velocity <math>u</math><sub><math>i</math></sub><sup><math>*</math></sup> at the current free surface using specified pressure.\n* Local mass conservation is enforced in each CV by solving a pressure-correction equation. Mass is conserved both globally and locally, but velocity-correction is produced at free surface giving a non-zero mass flux.\n* Position of free surface is corrected to compensate for the non-zero mass flux with the volume flux due to the movement of the each free-surface cell face by enforcing the kinematic boundary conditions.\n* Iterate until no further correction is needed, satisfying the continuity and momentum equations.\n* Advance to the next time step.<ref>Ferziger, Joel H., and Milovan Perić. Computational methods for fluid dynamics. Vol. 3. Berlin: Springer, 2002.</ref>\nThe main problem with the algorithm in this procedure is that there is only one equation for one cell but large number of grid nodes moving. To avoid instability and wave reflection, the method is modified as follows:<br />\nFrom the previous steps, we can calculate the volume of fluid to be flowed in or out of the CV to have mass conservation. To obtain the coordinates of CV vertices at free surface, we have more unknowns and less equations due to single volumetric flow rate for each cell.\n\nHence the CVs are defined by the cell face centers rather than vertices and vertices are obtained by interpolation. This gives a tridiagonal system for 2D and can be solved using [[Tridiagonal matrix algorithm|TDMA method]]. For 3D, the system is block tridiagonal and is best solved by one of the iterative solvers.\n\n=== Interface capturing method ===\nIn computation of two-fluid flows, in some cases the interface might be too complex to track while keeping the frequency of re-meshing at an acceptable level. Not being able to reduce the frequency of re-meshing in 3D might introduce overwhelming mesh generation and projection costs, making the computations with the interface-tracking technique no longer feasible. In such cases, interface-capturing techniques, which do not normally require costly mesh update steps, could be used with the understanding that the interface will not be represented as accurately as we would have with an interface-tracking technique.<ref>Tezduyar, T. \"Interface-tracking and interface-capturing techniques for computation of moving boundaries and interfaces.\" Proceedings of the 6th World Congress on Computational Mechanics, On-line publication: http://wccm. tuwien. ac. at/, Paper-ID. Vol. 81513. 2002.</ref>\nMethods which do not define the interface as sharp boundary. A fixed grid extends beyond the free surface over which the computation is performed. To determine the shape of the free surface, the fraction of each cell near the interface is computed that is partially filled.\n\n==== Marker-and-cell or MAC Scheme ====\n[[Marker-and-cell method|MAC]] scheme was proposed by Harlow and Welch in 1965. In this method, a massless particle is introduced at the initial time at the free surface. The motion of this massless particle is followed with the passage of time.\n\n'''Benefit:''' This scheme can treat complex phenomena like wave breaking.\n\n'''Drawback:''' In three dimensional flow solving the equations governing fluid flow and also following the motion of a large number of markers both simultaneously demands high computational power.\n\n==== Volume-of-fluid or VOF scheme ====\n[[Volume of fluid method|VOF]] scheme was proposed by Hirt and Nichols in 1981. In this method, fraction of the cell occupied by the liquid phase can be calculated by solving the transport equation.<ref>Hirt, C.W.; Nichols, B.D. (1981), Volume of fluid (VOF) method for the dynamics of free boundaries, Journal of Computational Physics 39 (1): 201–225, {{Bibcode|1981JCoPh..39..201H}}, {{doi|10.1016/0021-9991(81)90145-5}}</ref> The transport equation is:\n\n:<big><big>{{sfrac|∂c|∂t}} + div(cv) = 0</big></big>\nwhere c is the fraction of control volume filled. c=1 for completely filled and c = 0 for completely empty control volumes.<br />\nSo in total, for VOF method, one has to solve three forms of equations, conservation equations for mass, conservation equations for momentum, equation for filled fraction for each control volume.\n\n'''''NOTE''': IN INCOMPRESSIBLE FLOWS, ABOVE EQUATION GIVES SAME RESULTS WITH c AND 1 - c MAKING THE ENFORCEMENT OF MASS CONSERVATION A MUST.''\n\nSince the higher order schemes are preferred over lower order schemes to prevent artificial mixing of the two fluids, it is important to prevent the overshoots and undershoots due to the condition 0 ≤ c ≤ 1. For such problems, modifications were made to MAC and VOF schemes.\n\n==== Modifications to MAC and VOF scheme ====\nMarker and micro-cell method in which local grid refinement is done according to the following criteria:\n\nonly the cells having 0 < c < 1 are refined.\n\nThis method is more efficient than MAC scheme because only the cells at the boundary are refined. But in this method, the free surface profile is not sharply defined.\n\n=== Hybrid methods ===\nThere are some fluid flows which do not come under either of the category, for example, bubbly flows. For the computation of such two-phase flows which do not come under any of the above discussed categories, elements are borrowed from both surface-capturing and surface-tracking methods. Such methods are called hybrid methods. In this method, fluid properties are smeared over a fixed number of grid points normal to the interface. Now, as in interface capturing method, both fluids are treated as single fluid with variable properties. Interface is also tracked as in interface-tracking method to prevent it from smearing by moving the marker particles using the velocity field generated by the flow solver. marker particles are added and removed to maintain the accuracy by keeping the approximate spacing between them equal.\n\n==References==\n{{Reflist}}\n\n[[Category:Computational fluid dynamics|*]]"
    },
    {
      "title": "ADCIRC",
      "url": "https://en.wikipedia.org/wiki/ADCIRC",
      "text": "{{short description|A high-performance, cross-platform numerical ocean circulation model}}\nThe '''ADCIRC''' model is a high-performance, cross-platform numerical [[ocean circulation model]] popular in simulating [[storm surge]], [[tides]], and coastal circulation problems.<ref name=adcircwebsite>[http://www.adcirc.org/ http://adcirc.org/] ADCIRC official website. Retrieved on 27 April 2018.</ref><ref>[http://adcirc.org/home/documentation/adcirc-related-publications/ ADCIRC-related publications]. Retrieved on 27 April 2018</ref><ref>[http://www.erdc.usace.army.mil/Media/Fact-Sheets/Fact-Sheet-Article-View/Article/476698/advanced-circulation-model/ US Army Corps ADCIRC Factsheet]. Retrieved on 27 April 2018.</ref><ref>[https://www.dhs.gov/sites/default/files/publications/Getting%20Ahead%20of%20the%20Storm%20Surge-ADCIRC%20Model_1.pdf DHS ADCIRC factsheet]. Retrieved 27 April 2018. </ref>\nOriginally developed by Drs. Rick Luettich and Joannes Westerink,<ref>{{cite journal|last1=Luettich|first1=Rick|last2=Westerink|first2=Joannes|last3=Scheffner|first3=Norman|title=ADCIRC: An Advanced Three-Dimensional Circulation Model for Shelves, Coasts, and Estuaries. Report 1. Theory and Methodology of ADCIRC-2DDI and ADCIRC-3DL|date=November 1992|publisher=Coastal Engineering Research Center|location=Vicksburg MS}}</ref><ref>{{cite journal|last1=Luettich|first1=Rick|last2=Westerink|first2=Joannes|last3=Scheffner|first3=Norman|title=ADCIRC: An Advanced Three-Dimensional Circulation Model for Shelves, Coasts, and Estuaries. Report 2. User's Manual for ADCIRC-2DDI|date=January 1994|publisher=Coastal Engineering Research Center|location=Vicksburg MS}}</ref>\nthe model is developed and maintained by a combination of academic, governmental, and corporate partners, including the [[University of North Carolina at Chapel Hill]], the [[University of Notre Dame]], and the [[United States Army Corps of Engineers|US Army Corps of Engineers]].<ref>[http://adcirc.org/community/developers/development-group/ ADCIRC Development Group]. Retrieved on 27 April 2018.</ref>\nThe ADCIRC system includes an independent multi-algorithmic wind forecast model and also has advanced coupling capabilities, allowing it to integrate effects from sediment transport, ice, waves, surface runoff, and baroclinicity.\n\n== Access ==\nThe model is free, with source code made available by request via the website<ref name=adcircwebsite />, allowing users to run the model on any system with a [[List of compilers#Fortran compilers|Fortran compiler]]. A pre-compiled [[Windows]] version of the model can also be purchased alongside the [[SMS (hydrology software)]]<ref>[https://www.aquaveo.com/software/sms-adcirc SMS ADCIRC website]. Retrieved 27 April 2018. </ref>. ADCIRC is coded in [[Fortran]], and can be used with native [[binary file|binary]], [[ASCII|text]], or [[netCDF]] file formats.  \n\n== Capabilities ==\nThe model formulation<ref>[http://www.unc.edu/ims/adcirc/adcirc_theory_2004_12_08.pdf ADCIRC Theory Report]. Retrieved on 27 April 2018. </ref>\nis based on the [[shallow water equations]], solving the [[continuity equation#fluid dynamics|continuity equation]] (represented in the form of the Generalized Wave Continuity Equation<ref name=\"Kinnmark1986\">{{cite book|last1=Kinnmark|first1=Ingemar|title=The Shallow Water Wave Equations: Formulation, Analysis and Application|volume=15|year=1986|issn=0176-5035|doi=10.1007/978-3-642-82646-7|series=Lecture Notes in Engineering|isbn=978-3-540-16031-1}}</ref>)\nand the momentum equations (with [[Cauchy momentum equation#Convective acceleration|advective]], [[Coriolis force|Coriolis]], [[viscosity#Eddy viscosity|eddy viscosity]], and [[shear stress#shear stress in fluids|surface stress]] terms included).  ADCIRC utilizes the [[finite element method]] in either three-dimensional or two-dimensional depth-integrated form on a triangular [[unstructured grid]] with [[Cartesian Coordinate System|Cartesian]] or [[Spherical coordinate system|spherical]] coordinates. It can run in either [[Barotropic fluid|barotropic]] or [[baroclinic]] modes, allowing inclusion of changes in water density and properties such as salinity and temperature. ADCIRC can be run either in serial mode (e.g. on a personal computer) or in parallel on [[supercomputer|supercomputers]] via [[Message Passing Interface|MPI]]. The model has been optimized to be [[parallel algorithm#parallelizability|highly parallelized]], in order to facilitate rapid computation of large, complex problems.<ref name=\"KerrDonahue2013\">{{cite journal|last1=Kerr|first1=P. C.|last2=Donahue|first2=A. S.|last3=Westerink|first3=J. J.|last4=Luettich|first4=R. A.|last5=Zheng|first5=L. Y.|last6=Weisberg|first6=R. H.|last7=Huang|first7=Y.|last8=Wang|first8=H. V.|last9=Teng|first9=Y.|last10=Forrest|first10=D. R.|last11=Roland|first11=A.|last12=Haase|first12=A. T.|last13=Kramer|first13=A. W.|last14=Taylor|first14=A. A.|last15=Rhome|first15=J. R.|last16=Feyen|first16=J. C.|last17=Signell|first17=R. P.|last18=Hanson|first18=J. L.|last19=Hope|first19=M. E.|last20=Estes|first20=R. M.|last21=Dominguez|first21=R. A.|last22=Dunbar|first22=R. P.|last23=Semeraro|first23=L. N.|last24=Westerink|first24=H. J.|last25=Kennedy|first25=A. B.|last26=Smith|first26=J. M.|last27=Powell|first27=M. D.|last28=Cardone|first28=V. J.|last29=Cox|first29=A. T.|title=U.S. IOOS coastal and ocean modeling testbed: Inter-model evaluation of tides, waves, and hurricane surge in the Gulf of Mexico|journal=Journal of Geophysical Research: Oceans|volume=118|issue=10|year=2013|pages=5129–5172|issn=21699275|doi=10.1002/jgrc.20376}}</ref><ref name=\"TanakaBunya2010\">{{cite journal|last1=Tanaka|first1=S.|last2=Bunya|first2=S.|last3=Westerink|first3=J. J.|last4=Dawson|first4=C.|last5=Luettich|first5=R. A.|title=Scalability of an Unstructured Grid Continuous Galerkin Based Hurricane Storm Surge Model|journal=Journal of Scientific Computing|volume=46|issue=3|year=2010|pages=329–358|issn=0885-7474|doi=10.1007/s10915-010-9402-1}}</ref>\n\nADCIRC is able to apply several different bottom friction formulations including [[Manning formula|Manning's n]]-based bottom drag due to changes in land coverage (such as forests, cities, and seafloor composition), as well as utilize atmospheric forcing data (wind stress and atmospheric pressure) from several sources, and further reduce the strength of the wind forcing due to [[roughness length|surface roughness]] effects.<ref name=\"WesterinkLuettich2008\">{{cite journal|last1=Westerink|first1=Joannes J.|last2=Luettich|first2=Richard A.|last3=Feyen|first3=Jesse C.|last4=Atkinson|first4=John H.|last5=Dawson|first5=Clint|last6=Roberts|first6=Hugh J.|last7=Powell|first7=Mark D.|last8=Dunion|first8=Jason P.|last9=Kubatko|first9=Ethan J.|last10=Pourtaheri|first10=Hasan|title=A Basin- to Channel-Scale Unstructured Grid Hurricane Storm Surge Model Applied to Southern Louisiana|journal=Monthly Weather Review|volume=136|issue=3|year=2008|pages=833–864|issn=0027-0644|doi=10.1175/2007MWR1946.1}}</ref><ref name=\"DietrichBunya2010\">{{cite journal|last1=Dietrich|first1=J. C.|last2=Bunya|first2=S.|last3=Westerink|first3=J. J.|last4=Ebersole|first4=B. A.|last5=Smith|first5=J. M.|last6=Atkinson|first6=J. H.|last7=Jensen|first7=R.|last8=Resio|first8=D. T.|last9=Luettich|first9=R. A.|last10=Dawson|first10=C.|last11=Cardone|first11=V. J.|last12=Cox|first12=A. T.|last13=Powell|first13=M. D.|last14=Westerink|first14=H. J.|last15=Roberts|first15=H. J.|title=A High-Resolution Coupled Riverine Flow, Tide, Wind, Wind Wave, and Storm Surge Model for Southern Louisiana and Mississippi. Part II: Synoptic Description and Analysis of Hurricanes Katrina and Rita|journal=Monthly Weather Review|volume=138|issue=2|year=2010|pages=378–404|issn=0027-0644|doi=10.1175/2009MWR2907.1}}</ref>\nThe model is also able to incorporate effects such as time-varying topography and bathymetry, boundary fluxes from rivers or other sources, tidal potential, and sub-grid scale features like levees. \n\nADCIRC is frequently coupled to a [[wind wave model]] such as STWAVE, [http://swanmodel.sourceforge.net/ SWAN], or [[Wind wave model#WAVEWATCH|WAVEWATCH III]], especially in storm surge applications where [[radiation stress|wave radiation stress]] can have important effects on ocean circulation and vice versa. In these applications, the model is able to take advantage of tight coupling with wave models to increase calculation accuracy.<ref name=\"DietrichBunya2010\" /><ref name=\"BunyaDietrich2010\">{{cite journal|last1=Bunya|first1=S.|last2=Dietrich|first2=J. C.|last3=Westerink|first3=J. J.|last4=Ebersole|first4=B. A.|last5=Smith|first5=J. M.|last6=Atkinson|first6=J. H.|last7=Jensen|first7=R.|last8=Resio|first8=D. T.|last9=Luettich|first9=R. A.|last10=Dawson|first10=C.|last11=Cardone|first11=V. J.|last12=Cox|first12=A. T.|last13=Powell|first13=M. D.|last14=Westerink|first14=H. J.|last15=Roberts|first15=H. J.|title=A High-Resolution Coupled Riverine Flow, Tide, Wind, Wind Wave, and Storm Surge Model for Southern Louisiana and Mississippi. Part I: Model Development and Validation|journal=Monthly Weather Review|volume=138|issue=2|year=2010|pages=345–377|issn=0027-0644|doi=10.1175/2009MWR2906.1}}</ref>\n\n==References==\n{{Reflist}}\n\n== External links ==\n*[http://adcirc.org ADCIRC official website]\n\n[[Category:Physical oceanography]]\n[[Category:Water waves]]\n[[Category:Numerical climate and weather models]]\n[[Category:Computational science]]\n[[Category:Computational fluid dynamics]]\n[[Category:Free science software]]\n[[Category:Scientific simulation software]]"
    },
    {
      "title": "ADINA",
      "url": "https://en.wikipedia.org/wiki/ADINA",
      "text": "{{Infobox company\n| name          = ADINA R & D, Inc.\n| logo          = ADINA Band 2014.png\n| type          = [[Privately held company|Private]]\n| industry      = [[Computer Software]]\n| foundation    = {{Start date|1986|09|03}}\n| founder       = Dr. [[Klaus-Jürgen Bathe]]\n| location      = Watertown, [[Massachusetts]], United States\n| area_served   = Worldwide\n| products      = ADINA Structures <br /> ADINA Thermal <br /> ADINA CFD <br /> ADINA EM\n| homepage      = {{URL|www.adina.com}}\n}}\n\n'''ADINA''' is a commercial [[Computer-aided engineering|engineering simulation software]] program that is developed and distributed worldwide by ADINA R & D, Inc.<ref>{{cite web |url = http://www.adina.com |title = ADINA R & D, Official Webpage}}</ref> The company was founded in 1986 by Dr. [[Klaus-Jürgen Bathe]],<ref>{{cite web |url = http://meche.mit.edu/people/faculty/index.html?id=10 | title = K. J. Bathe MIT Faculty Page}}</ref> and is headquartered in Watertown, [[Massachusetts]], United States.\n\nADINA is used in industry and academia to solve [[structural mechanics|structural]], [[fluid mechanics|fluid]], [[heat transfer]], and [[electromagnetism|electromagnetic]] problems.<ref>{{cite web |url = http://www.encyclopediaofmath.org/index.php?title=ADINA_system&oldid=14399 | title = ADINA System, Encyclopaedia of Mathematics | isbn=1-4020-0609-8}}</ref> ADINA can also be used to solve [[multiphysics]] problems, including [[fluid-structure interaction]]s <ref>{{cite journal | first1 = H. | last1 = Zhang | first2 = et | last2 = al. | title = Recent development of fluid-structure interaction capabilities in the ADINA system | journal = Computers & Structures | year = 2003 | issue = 8–11 | pages = 1071–1085}}</ref>  and [[thermomechanical analysis|thermo-mechanical problems]].\n\nSome of ADINA's nonlinear structural analysis [[source code|code]] is offered as the [[NX Nastran]] Advanced Nonlinear module, Sol 601/701.\n\n==History==\nThe development of ADINA was started in 1974 by Dr. [[Klaus-Jürgen Bathe]], shortly after he finished, as the principal developer, the finite element programs SAP IV <ref>{{cite web |url = http://nisee.berkeley.edu/elibrary/getpkg?id=SAP4 |title = SAP-IV Software and Manuals | location=NISEE e-Library, The Earthquake Engineering Online Archive}}</ref> and NONSAP.<ref>{{cite journal | first1 = K.J. | last1 = Bathe | authorlink1= Klaus-Jürgen Bathe | first2 = E.L. | last2 = Wilson | first3 = R. | last3 = Iding | title = NONSAP – A Structural Analysis Program for Static and Dynamic Response of Nonlinear Systems | journal = Report UCSESM 74-3, Department of Civil Engineering, University of California, Berkeley | year = 1974}}</ref>\n\nIn 1986, Dr. Bathe founded ADINA R & D, Inc. in Massachusetts, USA, and he continues to lead the development of ADINA as [[technical director]] of the company.<ref>{{cite book | first1=O. | last1=Anwar Bég | title=Giants of Engineering Science | url = https://books.google.com/books?id=S2OiZVmf1ccC&pg=PA68&dq=Klaus-Jurgen+Bathe | publisher= Troubador Publishing Ltd | isbn=978-1-899293-52-0}}</ref>\n\nADINA R & D performs all developments of the ADINA program in-house, and focuses on reliable and efficient finite element procedures.<ref>{{cite book | first1 = K.J. | last1 = Bathe | authorlink1= Klaus-Jürgen Bathe | title = Extreme Man-made and Natural Hazards in Dynamics of Structures | publisher= Springer | chapter=On Reliable Finite Element Methods for Extreme Loading Conditions | year = 2007}}</ref> ADINA R & D sponsored twelve bi-yearly [[academic conferences]] at M.I.T. on [[nonlinear system|nonlinear]] finite element analysis, the proceedings of which are published by [[Elsevier]] in the international journal Computers & Structures.<ref>{{cite journal | title = Nonlinear Finite Element Analysis and ADINA | journal = Computers & Structures | issue = Proceedings of the 12th Conference | volume = 72 | year = 1999}}</ref>\n\nIn 2003, ADINA R & D signed an [[Original equipment manufacturer|OEM]] agreement with [[Electronic Data Systems|EDS]]. As a result of this agreement, some of ADINA's nonlinear structural analysis capabilities are now offered with [[NX Nastran]] by [[Siemens PLM Software]]. This version of ADINA is referred to as the Advanced Nonlinear module, Solution 601 / 701, for [[Explicit and implicit methods|implicit / explicit]] solutions.<ref>{{cite web |url = http://www.plm.automation.siemens.com/en_us/products/nx/for-simulation/structural-analysis/nonlinear.shtml#lightview%26uri=tcm:1023-4483%26title=NX%20Nastran%20Advanced%20Nonlinear-Solution%20601%2F701%20-%20NX%20Fact%20Sheet%20-%204989%26docType=.pdf | title = NX Nastran Advanced Nonlinear – Solution 601 / 701 | location = Siemens PLM Software, Official Webpage}}</ref>\n\n==Software Architecture==\n[[File:ADINA R & D FSI Heart Valve Analysis.gif|thumb|280px|[[Fluid-structure interaction]] (FSI) results of an [[aortic heart valve]], obtained by coupling the ADINA modules.<ref>{{cite web |url = http://www.adina.com/newsg0P.shtml | title = Simulation of Aortic Valve Tech Brief | location = ADINA R & D, Official Webpage}}</ref> The simulation was used to study how [[sinus (anatomy)|sinus]]es behind the aortic valve leaflets produce [[vortex|vortices]] that aid in closure with minimal transvalvular [[pressure]].]]\nADINA is the [[acronym]] for Automatic Dynamic Incremental Nonlinear Analysis. The ADINA program consists of four core [[modular programming|modules]]:\n\n* ''ADINA Structures'' for linear and nonlinear analysis of solids and structures\n* ''ADINA Thermal'' for analysis of heat transfer in solids and field problems\n* ''ADINA CFD'' for analysis of compressible and incompressible flows, including heat transfer\n* ''ADINA EM'' for analysis of electromagnetic phenomena\n\nThese modules can be used fully coupled together to solve [[multiphysics]] problems, where the response of the system is affected by the interaction of several distinct physical fields (e.g. [[fluid-structure interaction]], [[thermo-mechanical analysis]], [[piezoelectric| piezoelectric coupling]], [[Joule heating]], [[mass transfer|fluid flow-mass transfer coupling]], [[Lorentz force|electromagnetic forces on fluids and structures]], etc.).<ref>{{cite web |url = http://www.adina.com/multiphysics.shtml | title = ADINA Multiphysics, Official Webpage }}</ref>\n\nAlso, included in the ADINA suite of programs is a [[graphical user interface]] (known as the ADINA User Interface, or AUI) with a solid modeler, ADINA-M, for the pre- and post-processing tasks. The AUI can be used to import solid models, and finite element models in Nastran format, providing an interface to many [[Computer-aided design|CAD]] and [[Computer-aided engineering|CAE]] packages.<ref>{{cite web |url = http://www.adina.com/cadlink/adinacad.shtml | title = ADINA CAD/CAE User Interface, Official Webpage }}</ref>\n\nFurthermore, as part of the ADINA suite, [[Femap]] can be used for the pre- and post-processing of ADINA data in structural, CFD, and FSI analyses.<ref>{{cite web |url = http://www.adina.com/newsgH76.shtml | title = Direct Femap Interface to ADINA, Official Webpage}}</ref>\n\n==References==\n{{reflist|30em}}\n\n== External links ==\n* {{Official website|www.adina.com}}\n* [http://www.adina.com/fluid-structure-interaction.shtml ADINA FSI (Fluid-structure Interaction)]\n\n{{CAE software}}\n\n{{DEFAULTSORT:ADINA}}\n[[Category:Finite element software]]\n[[Category:Finite element software for Linux]]\n[[Category:Computational fluid dynamics]]"
    },
    {
      "title": "Advanced Simulation Library",
      "url": "https://en.wikipedia.org/wiki/Advanced_Simulation_Library",
      "text": "{{Use dmy dates|date=May 2015}}\n{{Infobox Software\n| name                   = Advanced Simulation Library\n| screenshot             = Advanced_Simulation_Library_-_Multicomponent_flow.png\n| caption                = Multicomponent flow simulation\n| developer              = [http://avtechscientific.com/ Avtech Scientific]\n| released               = {{Start date and age|2015|05|14}}\n| latest release version = 0.1.7\n| latest release date    = {{Start date and age|2016|11|09}}\n| operating system       = [[Unix]]/[[Linux]], [[Microsoft Windows|Windows]], [[Macintosh|Mac]]\n| genre                  = [[Multiphysics]], [[Computer-aided engineering]], [[Computational fluid dynamics]], [[Simulation software]]\n| license                = [[GNU Affero General Public License]], optional commercial license (based on [[MIT License]])\n| website                = {{url|asl.org.il}}\n}}\n[[File:Advanced Simulation Library - Multicomponent flow video.ogv|thumb|right|Multicomponent flow video]]\n[[File:Advanced_Simulation_Library_-_Computer-assisted_cryosurgery.png|thumb|right|Computer-assisted cryosurgery]]\n[[File:Advanced_Simulation_Library_-_microfluidic_device_for_separating_mixtures_of_proteins.png|thumb|right|Simulation of a microfluidic device for separating mixtures of proteins]]\n[[File:Advanced_Simulation_Library_-_Coating_procedure_employing_Physical_Vapor_Deposition_(PVD)_method.png|thumb|right|Coating procedure employing physical vapor deposition (PVD) method]]\n[[File:Advanced_Simulation_Library_-_Image-guided_neurosurgery,_brain_deformation_simulation.png|thumb|right|Image-guided neurosurgery, brain deformation simulation]]\n[[File:Advanced_Simulation_Library_-_Aerodynamics_of_a_locomotive_in_a_tunnel.png|thumb|right|Aerodynamics of a locomotive in a tunnel]]\n\n'''Advanced Simulation Library''' ('''ASL''') is free and open-source [[Hardware acceleration|hardware-accelerated]] [[multiphysics]] simulation platform. It enables users to write customized numerical solvers in C++ and deploy them on a variety of [[Massively parallel (computing)|massively parallel architectures]], ranging from inexpensive FPGAs, DSPs and GPUs<ref>{{cite web|url=http://hgpu.org/papers/AvtechScientific-ASL_Presentation.pdf |title=ASL - expanding software ecosystem for the DSP/FPGA/GPU market}}</ref> up to heterogeneous clusters and supercomputers. Its internal computational engine is written in [[OpenCL]] and utilizes matrix-free solution techniques. ASL implements variety of modern numerical methods, i.a. [[level-set method]], [[Lattice Boltzmann methods|lattice Boltzmann]], [[Immersed boundary method|immersed Boundary]]. [[Meshfree methods|Mesh-free]], immersed boundary approach allows users to move from CAD directly to simulation, reducing pre-processing efforts and amount of potential errors. ASL can be used to model various coupled physical and chemical phenomena, especially in the field of [[computational fluid dynamics]].\nIt is distributed under the free [[GNU Affero General Public License]] with an optional commercial license (which is based on the permissive [[MIT License]]).\n\n== History ==\nAdvanced Simulation Library is being developed by Avtech Scientific, an Israeli company. Its source code was released to the community on 14 May 2015, whose members packaged it for scientific sections of all major [[Linux]] distributions shortly thereafter.<ref>{{cite web|url=http://asl.org.il/2015/07/31/ASL_enters_Linux/ |title=ASL enters Linux}}</ref><ref>{{cite web|url=https://build.opensuse.org/package/show/science/ASL |title=ASL for OpenSuse}}</ref><ref>{{cite web|url=https://packages.debian.org/sid/libasl0 |title=ASL for Debian}}</ref><ref>{{cite web|url=https://cgit.gentoo.org/proj/sci.git/tree/sci-libs/asl |title=ASL for Gentoo}}</ref><ref>{{cite web |url=https://admin.fedoraproject.org/pkgdb/package/libASL/ |title=ASL for Fedora |access-date=30 November 2015 |archive-url=https://web.archive.org/web/20151208172816/https://admin.fedoraproject.org/pkgdb/package/libASL/ |archive-date=8 December 2015 |dead-url=yes |df=dmy-all }}</ref><ref>{{cite web|url=https://www.archlinux.org/packages/libasl/ |title=ASL for Arch Linux}}</ref> Subsequently, [[Khronos Group]] acknowledged the significance of ASL and listed it on its website among OpenCL-based resources.<ref>{{cite web|url=https://www.khronos.org/opencl/resources/opencl-libraries-and-frameworks-with-opencl-acceleration |title=ASL among Khronos' OpenCL resources}}</ref>\n\n== Application areas ==\n* [[Computational fluid dynamics]]\n* [[Computer-assisted surgery]]\n* [[Virtual sensing]]\n* [[Data validation and reconciliation|Industrial process data validation and reconciliation]]\n* [[Multidisciplinary design optimization]]\n* [[Design space exploration]]\n* [[Computer-aided engineering]]\n* [[Crystallography]]\n* [[Microfluidics]]\n\n== Advantages and disadvantages ==\n\n=== Advantages ===\n* C++ API<ref>{{cite web|url=http://asl.org.il/doc/Developer-Guide/locomotive_8cc-example.html |title=Example of an aerodynamic simulation}}</ref> (no OpenCL knowledge required)\n* Mesh-free, immersed boundary approach allows users to move from CAD directly to computations reducing pre-processing effort\n* Dynamic compilation enables an additional layer of optimization at run-time (i.e. for a specific parameters set the application was provided with)\n* Automatic hardware acceleration and parallelization of applications\n* Deployment of same program on a variety of parallel architectures - GPU, APU, FPGA, DSP, multicore CPUs\n* Ability to deal with complex boundaries\n* Ability to incorporate microscopic interactions\n* Availability of the source code\n\n=== Disadvantages ===\n* Absence of detailed documentation (besides the Developer Guide generated from the source code comments)\n* Not all OpenCL drivers are mature enough for the library<ref>{{cite web|url=https://github.com/AvtechScientific/ASL/wiki/Deployment#opencl-drivers-known-to-have-problems |title=ASL deployment: problematic drivers}}</ref>\n\n== Features ==\nASL provides a range of features to solve number of problems - from complex fluid flows involving chemical reactions, turbulence and heat transfer, to solid mechanics and elasticity.<ref>{{cite web|url=http://hgpu.org/?p=14517 |title=About Advanced Simulation Library: hgpu.org}}</ref>\n\n* Interfacing: [[VTK]]/[[ParaView]], [[MATLAB]] (export).\n** import file formats: .stl .vtp .vtk .vti .mnc [[DICOM|.dcm]]\n** export file formats: .vti .mat\n* Geometry:\n** flexible and complex geometry using simple [[regular grid|rectangular grid]]\n** mesh-free, immersed boundary approach\n** generation and manipulation of geometric primitives\n* Implemented phenomena:\n** Transport processes\n*** multicomponent transport processes\n*** compressible and incompressible fluid flow\n** Chemical reactions\n*** electrode reactions\n** Elasticity\n*** homogeneous isotropic elasticity\n*** homogeneous isotropic poroelasticity\n** Interface tracking\n*** evolution of an interface\n*** evolution of an interface with crystallographic kinetics\n\n== Uses ==\n* ACTIVE - Active Constraints Technologies for Ill-defined or Volatile Environments (European FP7 Project)<ref>{{cite web|url=http://www.active-fp7.eu/index.php/resultsmenu/intraopbs.html |title=ACTIVE Project: Intraoperative Brain Shift}}</ref><ref>{{cite web|url=http://www.technology.org/2015/09/14/asl-assists-neurosurgeons-and-robots-computes-brain-deformation-in-real-time/ |title=ASL on www.technology.org}}</ref><ref>{{cite web|url=http://interestingengineering.com/how-asl-assists-neurosurgeons-and-robots/ |title=ASL on interestingengineering.com}}</ref>\n\n== References ==\n{{Reflist|colwidth=30em}}\n\n{{Numerical analysis software}}\n{{CAE software}}\n\n[[Category:Computational chemistry software]]\n[[Category:Computer-aided engineering software for Linux]]\n[[Category:Software using the GNU AGPL license]]\n[[Category:Computational fluid dynamics]]\n[[Category:Free science software]]\n[[Category:Open Source computer aided engineering applications]]\n[[Category:Articles containing video clips]]\n[[Category:GPGPU|Libraries]]\n[[Category:Numerical libraries]]\n[[Category:C++ libraries|Numerical libraries, C++]]"
    },
    {
      "title": "Aeroacoustic analogy",
      "url": "https://en.wikipedia.org/wiki/Aeroacoustic_analogy",
      "text": "'''Acoustic analogies''' are applied mostly in [[Computational aeroacoustics|numerical aeroacoustics]] to reduce aeroacoustic sound sources to simple emitter types. They are therefore often also referred to as '''aeroacoustic analogies'''.<ref>{{Cite journal | last1 = Lighthill | first1 = M. J. | authorlink1 = James Lighthill| title = On Sound Generated Aerodynamically. I. General Theory | doi = 10.1098/rspa.1952.0060 | journal = Proceedings of the Royal Society A: Mathematical, Physical and Engineering Sciences | volume = 211 | issue = 1107 | pages = 564–587 | year = 1952 | pmid =  | pmc = |bibcode = 1952RSPSA.211..564L }}</ref><ref>{{Cite journal | last1 = Lighthill | first1 = M. J. | authorlink1 = James Lighthill| title = On Sound Generated Aerodynamically. II. Turbulence as a Source of Sound | doi = 10.1098/rspa.1954.0049 | journal = Proceedings of the Royal Society A: Mathematical, Physical and Engineering Sciences | volume = 222 | issue = 1148 | pages = 1–32| year = 1954 | pmid =  | pmc = |bibcode = 1954RSPSA.222....1L }}</ref><ref>{{Cite journal | last1 = Williams | first1 = J. E. F. | authorlink = John Ffowcs Williams| last2 = Hawkings | first2 = D. L. | doi = 10.1098/rsta.1969.0031 | title = Sound Generation by Turbulence and Surfaces in Arbitrary Motion | journal = Philosophical Transactions of the Royal Society A: Mathematical, Physical and Engineering Sciences | volume = 264 | issue = 1151 | pages = 321 | year = 1969 | pmid =  | pmc = |bibcode = 1969RSPTA.264..321W }}</ref><ref>{{Cite journal | last1 = Curle | first1 = N. | title = The Influence of Solid Boundaries upon Aerodynamic Sound | doi = 10.1098/rspa.1955.0191 | journal = Proceedings of the Royal Society A: Mathematical, Physical and Engineering Sciences | volume = 231 | issue = 1187 | pages = 505–510 | year = 1955 | pmid =  | pmc = |bibcode = 1955RSPSA.231..505C }}</ref>\n\nIn general, aeroacoustic [[analogy|analogies]] are derived from the compressible [[Navier–Stokes equations]] (NSE). The [[compressibility|compressible]] NSE are rearranged into various forms of the inhomogeneous acoustic [[wave equation]]. Within these equations, source terms describe the acoustic sources. They consist of pressure and speed fluctuation as well as [[Cauchy stress tensor|stress tensor]] and force terms.\n\n[[Approximations]] are introduced to make the source terms independent of the acoustic [[Variable (mathematics)|variables]]. In this way, linearized equations are derived which describe the propagation of the acoustic waves in a homogeneous, resting medium. The latter is excited by the acoustic source terms, which are determined from the turbulent fluctuations. Since the aeroacoustics are described by the equations of classical acoustics, the methods are called aeroacoustic analogies.\n\nThe '''[[Michael James Lighthill|Lighthill]] analogy''' considers a free flow, as for example with an engine jet. The nonstationary fluctuations of the stream are represented by a distribution of [[quadrupole]] sources in the same volume.\n\nThe '''Curle analogy''' is a formal solution of the Lighthill analogy, which takes hard surfaces into consideration.\n\nThe '''[[John Ffowcs Williams|Ffowcs Williams]]–Hawkings analogy''' is valid for aeroacoustic sources in relative motion with respect to a hard surface, as is the case in many technical applications for example in the automotive industry or in air travel. The calculation involves [[quadrupole]], [[dipole]] and [[monopole (mathematics)|monopole]] terms.\n\n==References==\n{{reflist}}\n\n==Further reading==\n* Blumrich, R.: ''Berechnungsmethoden für die Aeroakustik von Fahrzeugen''. Tagungsband der ATZ/MTZ-Konferenz Akustik 2006, Stuttgart, 17–18.5.2006..\n* [https://web.archive.org/web/20070622164309/http://www.ias.et.tu-dresden.de/akustik/Publikationen/Stroemungsakustik/koe2004_3.pdf Contribution of the Technical University of Dresden to the modeling of flow sound sources with elementary emitters.]\n* [https://web.archive.org/web/20070622164256/http://www.ias.et.tu-dresden.de/akustik/Publikationen/Stroemungsakustik/koe2000-1.pdf Contribution of the Technical University of Dresden to the history of aeroacoustics.]\n\n[[Category:Computational fluid dynamics]]\n[[Category:Fluid mechanics]]\n[[Category:Acoustics]]\n[[Category:Analogy]]"
    },
    {
      "title": "Application of CFD in thermal power plants",
      "url": "https://en.wikipedia.org/wiki/Application_of_CFD_in_thermal_power_plants",
      "text": "{{multiple issues|{{refimprove|date=February 2015}}\n{{orphan|date=February 2015}}\n{{lead rewrite|date=October 2015}}\n{{manual|date=October 2015}}\n{{technical|date=October 2015}}\n}}\n[[Computational fluid dynamics]] (CFD) are used to understand complex thermal flow regimes in [[power plant]]s. The thermal power plant may be divided into different subsectors and the CFD analysis applied to critical equipment/components - mainly different types of [[heat exchanger]]s - which are of crucial significance for efficient and trouble free long-term operation of the plant.\n\n==Overview==\nThe [[thermal power station]] subsystem involves multiphase flow, phase transformation and complex chemical reaction associated with conjugate heat transfer.\n\n[[File:Typical thermal power plant layout.jpg|thumb|center|600px|Typical layout of thermal power plant]].\n\n==Methods==\n===Finite difference method===\n[[Finite difference method]] describes the unknowns of the flow problem by means of point samples at the node points of a grid co-ordinate lines. [[Taylor series]] expansions are used to generate finite difference approximations of derivatives in terms of point samples at each grid point and its immediate neighbours. Those derivatives appearing in the governing equations are replaced by finite differences yielding an [[algebraic equation]].\n\n===Finite element method===\n[[Finite element method]] uses piece wise functions valid on elements to describe the local variations of unknown flow variables. Here also a set of algebraic equations are generated to determine unknown co-efficients.\n\n===Finite volume method===\n[[Finite volume method]] is probably the most popular method used for numerical discretization in CFD. This method is similar in some ways to the finite difference method. This approach involves the discretization of the spatial domain into finite control volumes. The governing equations in their differential form are integrated over each control volume. The resulting integral conservation laws are exactly satisfied for each control volume and for the entire domain, which is a distinct advantage of the finite volume method. Each integral term is then converted into a discrete form, thus yielding discretised equations at the centroids, or nodal points, of the control volumes.\n\n==Application of CFD in thermal power plants==\n\n===Low NOx burner design===\nWhen [[fossil fuel]]s are burned, [[Nitric oxide]] and [[Nitrogen dioxide]] are produced. These pollutants initiate reactions which result in production of [[ozone]] and [[acid rain]]. NOx formation takes place due to (1) High temperature combustion i.e. thermal NOx and (2)Nitrogen bound to fuel i.e. fuel NOx and which is insignificant. In the majority of cases the level of thermal NOx can be reduced by lowering flame temperature. This can be done by modifying the burner to create a larger (hence lower temperature) flame, in turn reducing the NOx formation. The role of CFD analysis is vital for design and analysis of such low NOx burners. Many available CFD tools, such as CFX, Fluent, Star CCM++ with different models as RNG k-ε turbulence models with hybrid and CONDIF upwind differencing schemes has been used for analysis purpose and the data obtained with these analysis helped in modifying the burner design in turn lowering the adverse effect on the environment due to NOx formation during combustion.<ref>P. J Stopford, “Recent Application of CFD Modeling in the Power Generation and Combustion Industries”, Applied Mathematical Modeling, Vol 26, Pg. No. 351-374, 2002.</ref>\n\n===CFD analysis of economiser ===\nThe [[economiser]] is a crucial component for efficient performance of a thermal power plant. It is a non-steaming type of heat exchanger which is placed in the convective zone of the furnace. It takes the heat energy of the flue gases for heating the feed water before it enters the boiler drum. The thermal efficiency/boiler efficiency largely depends on the performance of the economiser.  CFD analysis helps in optimizing the thermal performance of the economiser by analysing the pressure, velocity and temperature distribution, and to identify the critical areas for further improvement with the result obtained by CFD analysis.\n\n===CFD analysis of superheaters===\n[[Superheater]]s, which are generally placed in the radiant zone of the furnace, are used for increasing the temperature of dry [[saturated steam]] coming out from boiler drum and to maintain the required parameters before sending it to the [[steam turbine]]. The thermal efficiency of a thermal power plant depends on the performance of the superheater. The CFD analysis of superheaters is done at design stage and later at the troubleshooting and performance evaluation during the operation of the plant. The CFD results obtained can be useful for the maintenance engineer to make suitable predictions of the tube life and make suitable arrangements for the high temperature zone to reduce the erosion of the tube coil and restricting the tube leakage problem. CFD analysis consists of modelling the superheater and doing analysis to study the velocity, pressure and temperature distribution of the steam inside the superheater. The uneven temperature distribution of steam in the tube leads to boiler tube leakage.  CFD also helps to study the effect of the operating parameters on the tube erosion rate. Thermal power plants operates round the year and it is not always possible to shut down and analyse the problem. CFD helps in this.\n\n===CFD analysis of pulverized coal combustion===\nIn a thermal power plant combustion of fuel, especially [[pulverized coal]], is of significant importance. Proper and complete combustion, with the required proportions of air and fuel, is required for total energy transfer to water for steam generation and to reduce pollutants. CFD models based on fundamental conservation equations of mass, energy, chemical species and momentum can be used to simulate the flow of air and coal through the burners. The results obtained from CFD analyses give insight to identify the potential areas for improvement.<ref>Cristiano V. da Silva, Maria Luiza S. Indrusiak, Arthur B. Beskow \" CFD Analysis of the Pulverized Coal Combustion Processes in a 160 MWe Tangentially-Fired-Boiler of a Thermal Power Plant\" Journal of the Braz. Soc. of Mech. Sci. & Eng. October–December 2010, Vol. XXXII, No. 4.</ref>\n\n===CFD application in other areas of thermal power plants===\nThere are some other areas of importance where CFD can play a significant role in performance and efficiency improvement. The unbalanced coal/air flow in the pipe systems of coal fired power plants leads to non-uniform combustion in the furnace, and hence an overall lower efficiency of the boiler. A common solution to this problem is to put orifices in the pipe systems to balance the flow. If the orifices are sized to balance clean airflow to individual burners connected to a pulverizer, the coal/airflow would still be unbalanced and vice versa. The CFD with standard k–e two-phase flow model can be used to calculate pressure drop coefficients for the coal/air as well as the clean air flow.<ref>SowjanyaVijiapurapua, JieCuia, SastryMunukutla \"CFD application for coal/air balancing in power plants\" AppliedMathematicalModelling30(2006)854–866</ref>\n\nThe CFD is also used to obtain the numerical solution to address the problem of water wall erosion of the furnace of a thermal power plant. This is caused by flame misalignment, thermal attack and erosion due to the contact with chemicals. The flame misalignment occurs because of alteration in fluid dynamics factors due to burner geometry. CFD results show velocity profiles, pressure profiles, streamlines and other data that is helpful in understanding the fluid flow phenomena inside the equipment.<ref>Jairo Z. Souzaa, Leonardo P. Rangel\" Numerical Simulation of Coal Boiler at Electric Thermal Plants Using Computational Fluid Dynamics\" 10th International Symposium on Process Systems Engineering - PSE2009</ref> It is clearly evident from above examples how crucial is the application of CFD in addressing the bottlenecks in thermal power plants, improving power plant efficiency and assisting in maintenance decisions.\n\n== References ==\n<references />\n\n==Further reading==\n* Krunal .P Mudafle, Hemant S. Farkade \"CFD analysis of economizer in a tengential fired boiler\", International Journal of Mechanical and Industrial Engineering (IJMIE) ISSN No. 2231 –6477, Vol-2, Iss-4, 2012.\n* Ajay N. Ingale, Vivek C. Pathade, Dr. Vivek H. Tatwawadi\" CFD Analysis of Superheater in View of Boiler Tube Leakage\" International Journal of Engineering and Innovative Technology (IJEIT) Volume 1, Issue 3, March 2012 \n* H.Versteg, W.malalasekra \" An Introduction to Computational Fluid Dynamics\" Second edition,Pearson Publications.\n\n[[Category:Computational fluid dynamics]]\n[[Category:Power station technology]]"
    },
    {
      "title": "Bhatnagar–Gross–Krook operator",
      "url": "https://en.wikipedia.org/wiki/Bhatnagar%E2%80%93Gross%E2%80%93Krook_operator",
      "text": "{{distinct|text=[[Bernstein–Greene–Kruskal modes|Bernstein–Greene–Kruskal]] in plasma physics, also abbreviated as BGK}}\n\nThe '''Bhatnagar–Gross–Krook operator''' (abbreviated '''BGK operator''') term refers to a collision [[operator (mathematics)|operator]] used in the [[Boltzmann Equation]] and in the [[Lattice Boltzmann methods|Lattice Boltzmann method]], a [[Computational fluid dynamics]] technique.  It is given by the following formula:\n\n:<math>\\Omega_i=-\\tau^{-1}(n_i-n_i^{EQ})</math>\n\nwhere <math>n_i^{EQ}</math>  is a local equilibrium value for the population of particles in the direction of link <math>\\mathbf{e}_i</math> The term <math>\\tau</math> is a relaxation time, and related to the viscosity.\n\nThe operator is named after [[Prabhu Lal Bhatnagar|Prabhu L. Bhatnagar]], [[Eugene P. Gross]], and [[Max Krook]], the three scientists who introduced it in a paper in [[Physical Review]] in 1954.<ref>\n{{cite journal\n |author1=P.L. Bhatnagar |author2=E.P. Gross |author3=M. Krook |year=1954\n |title=A Model for Collision Processes in Gases. I. Small Amplitude Processes in Charged and Neutral One-Component Systems\n |journal=[[Physical Review]]\n |volume=94 |pages=511–525\n |doi=10.1103/PhysRev.94.511\n |bibcode=1954PhRv...94..511B\n |issue=3\n}}</ref>\n\n\n==References==\n{{reflist}}\n*{{cite book\n |author=S. Succi\n |year=2001\n |title=The Lattice Boltzmann Equation for Fluid Dynamics and Beyond\n |publisher=[[Oxford University Press]]\n |isbn=978-0-19-850398-9\n}}\n\n{{DEFAULTSORT:Bhatnagar-Gross-Krook operator}}\n[[Category:Statistical mechanics]]\n[[Category:Computational fluid dynamics]]\n\n\n{{fluiddynamics-stub}}"
    },
    {
      "title": "Boundary conditions in computational fluid dynamics",
      "url": "https://en.wikipedia.org/wiki/Boundary_conditions_in_computational_fluid_dynamics",
      "text": "{{Main|Boundary conditions in fluid dynamics}}\n[[File:Fig 1 Formation of grid in cfd.JPG|thumb|Fig 1 Formation of grid in cfd]]Almost every [[computational fluid dynamics]] problem is defined under the limits of initial and boundary conditions. For implementation of boundary conditions when we construct a staggered grid we add an extra node across the physical boundary in order to get,\n\n*The nodes just outside the inlet of the system are used to assign the inlet conditions\n*The physical boundaries can coincide with the scalar control volume boundaries.\n\nThis allow us to introduce the boundary conditions and achieve discretion equations for nodes near boundary with small modifications.\n\n'''Most common boundary conditions used in [[computational fluid dynamics]] are'''\n\n*Intake conditions\n*Symmetry conditions\n*Physical boundary conditions\n*Cyclic conditions\n*pressure conditions\n*exit conditions\n\n==Intake boundary conditions==\n\nWe are considering the case of an inlet perpendicular to the x-direction -[[File:Fig.2 u-velocity cell at intake boundary.JPG|left|thumb|Fig.2 u-velocity cell at intake boundary]]\n[[File:Fig.4 pressure correction cell at intake boundary.JPG|thumb|Fig.4 pressure correction cell at intake boundary]]\n[[File:Fig.3 v-velocity cell at intake boundary.JPG|center|thumb|Fig.3 v-velocity cell at intake boundary]]\n[[File:Fig. 5 scalar cell at intake boundary.JPG|left|thumb|Fig. 5 scalar cell at intake boundary]]\n\n*For the first u, v, φ-cell all links to neighboring nodes are active, so there is no need of any modifications to discretion equations.\n*At one of the inlet node absolute pressure is fixed and made pressure correction to zero at that node.\n*Generally [[computational fluid dynamics]] codes estimate k and ε with approximate formulate based on turbulent intensity between 1 and 6% and length scale\n\n==Symmetry boundary condition==\n\n'''If flow across the boundary is zero''':\n\nNormal velocities are set to zero\n\n'''Scalar flux across the boundary is zero''':\n\nIn this type of situations values of properties just adjacent to the solution domain are taken as values at the nearest node just inside the domain.\n\n==physical boundary conditions==\n\nConsider situation solid wall parallel to the x-direction:\n[[File:Fig.6 u-velocity cell at a physical boundary.JPG|left|thumb|Fig.6 u-velocity cell at a physical boundary]]\n[[File:Fig.8 v-cell at physical boundary j=NJ.JPG|thumb|Fig.8 v-cell at physical boundary j=NJ]]\n\n[[File:Fig.7 v-cell at physical boundary j=3.JPG|center|thumb|Fig.7 v-cell at physical boundary j=3]]\n[[File:Fig.9 scalar cell at a physical boundary.JPG|left|thumb|Fig.9 scalar cell at a physical boundary]]\n'''Assumptions made and relations considered'''-\n\n*The near wall flow is considered as [[laminar flow|laminar]] and the velocity varies linearly with distance from the wall\n*No slip condition: u = v = 0.\n*In this we are applying the “wall functions” instead of the mesh points.\n\n'''[[Turbulent flow]]''':\n\n<math> y^+ > 11.63\\,</math>.\n\nin the log-law region of a turbulent boundary layer.\n\n'''[[Laminar flow]]''' :\n\n<math>y^+ < 11.63\\,</math>.\n\nImportant points for applying wall functions:\n\n*The velocity is constant along parallel to the wall and varies only in the direction normal to the wall.\n*No pressure gradients in the flow direction.\n*High [[Reynolds number]]\n*No chemical reactions at the wall\n\n==cyclic boundary condition==\n\n*We take flux of flow leaving the outlet cycle boundary equal to the flux entering the inlet cycle boundary\n*Values of each variable at the nodes at upstream and downstream of the inlet plane are equal to values at the nodes at upstream and downstream of the outlet plane.\n\n==Pressure boundary condition==\n[[File:Fig.10 p’-cell at an intake boundary.JPG|left|thumb|Fig.10 p’-cell at an intake boundary]]\n[[File:Fig. 11 p’-cell at an exit boundary.JPG|thumb|Fig. 11 p’-cell at an exit boundary]]\n\nThese conditions are used when we don’t know the exact details of flow distribution but boundary values of pressure are known\n\nFor example: external flows around objects, internal flows with multiple outlets, [[buoyancy]]-driven flows, free surface flows, etc.\n\n*The pressure corrections are taken zero at the nodes.\n\n==exit boundary conditions==\nConsidering the case of an outlet perpendicular to the x-direction -\n[[File:Fig.12 A control volume at an exit boundary.JPG|left|thumb|Fig.12 A control volume at an exit boundary]]\n[[File:Fig. 14 pressure correction cell at an exit boundary.JPG|thumb|Fig. 14 pressure correction cell at an exit boundary]]\n[[File:Fig. 13 v-control volume at an exit boundary.JPG|center|thumb|Fig. 13 v-control volume at an exit boundary]]\n[[File:Fig.15 scalar cell at an exit boundary.JPG|left|thumb|Fig.15 scalar cell at an exit boundary]]\n\nIn fully developed flow no changes occurs in flow direction, gradient of all variables except pressure are zero in flow direction\n\nThe equations are solved for cells up to NI-1, outside the domain values of flow variables are determined by extrapolation from the interior by assuming zero gradients at the outlet plane\n\nThe outlet plane velocities with the [[Continuity (mathematics)|continuity]] correction\n\n<math>U_{NI,J} = U_{NI-1,J}\\frac{M_{in}}{M_{out}}\\,</math>.\n\n==References==\n<references/>\n*An introduction to computational fluid dynamics by Versteeg,PEARSON.\n\n[[Category:Computational fluid dynamics]]"
    },
    {
      "title": "Calculation of buoyancy flows and flows inside buildings",
      "url": "https://en.wikipedia.org/wiki/Calculation_of_buoyancy_flows_and_flows_inside_buildings",
      "text": "{{Orphan|date=November 2016}}\n\n'''Buoyancy force''' is the defined as the force exerted on the body or an object when inserted in a fluid. [[Buoyancy]] force is based on the basic principle of [[pressure]] variation with depth, since pressure increases with depth. Hence buoyancy force arises as pressure on the bottom surface of the immersed object is greater than that at the top.\n\nFlow problems in [[buildings]] were studied since 700 B.C. Recent advancements in [[Computational fluid dynamics|CFD]] and [[Computer-aided engineering|CAE]] have led to comprehensive '''calculation of buoyancy flows and flows in buildings'''.\n\n==Calculation of buoyant flows and flow inside buildings==\nSince there is natural driven ventilation resulting from the difference in [[temperature]] inside the buildings hence flows inside buildings fall under [[buoyancy]] force category. The [[momentum]] equation in the direction of [[gravity]] should be modeled for buoyant forces resulting from buoyancy.<ref>H.K Versteeg & W. Malalasekera (1995). An introduction to Computational Fluid Dynamics. Chapter:10. Retrieved 11 November 2013.</ref> Hence the [[momentum]] equation is given by\n\n'''<big>∂ρv/∂t + V.∇(ρv)= -g((ρ-ρ°) - ∇P+μ∇<sup>2</sup>v + S<sub>v</sub></big>'''\n\nIn the above equation -g((ρ-ρ°) is the buoyancy term, where ρ° is the reference [[density]].\n\nOn discretizing the above equation several instabilities are obtained during the solution process. Hence we use a transient approach as several relaxations are often required in obtaining a [[steady state]] solution.\n\nWhen applied to turbulent flows some additional modifications are to be applied to the calculation of buoyant flows. Hence an additional term is added, as recommended by Rodi(1978) in the k equation of the k- ε model is used below in modelling turbulent buoyant flows. Therefore, the k-equations takes the form<ref>H.K Versteeg & W. Malalasekera (1995). An introduction to Computational Fluid Dynamics. Chapter:3. Retrieved 11 November 2013.</ref>\n\n'''<big>∂ρk/∂t + ∇(ρku)= -g((ρ-ρ°) - ∇(τ∇×k) + G + B - ρε</big>'''\n\nWhere\n\nG= Usual Production or generation term<ref>H.K Versteeg & W. Malalasekera (1995). An introduction to Computational Fluid Dynamics. Chapter:3.5.2. Retrieved 11 November 2013.</ref> = 2µE.E\n\nB = Generation term related to buoyancy\n\nAlso '''B = βg<sub>i</sub> (μ/σ) <big>∂T/∂xi</big>'''\n\nWhere,\n\nT = Temperature\n\ngi = Gravitational acceleration in x-direction\n\nβ = Volumetric expansion coefficient = -(1/ρ)  ∂ρ/∂T\n\nHence for turbulent kinetic energy the modeled transport equation<ref>H.K Versteeg & W. Malalasekera (1995). An introduction to Computational Fluid Dynamics. Page:218. Retrieved 11 November 2013.</ref> is given as\n\n'''∂ρε/∂t + ∇(ρεu) = ∇(τ∇×k) + C<sub>1</sub>ε (ε/k)(G+B)(1+C<sub>3</sub> R<sub>f</sub> ) - C<sub>2</sub> ε ρ(ε<sup>2</sup>/k)'''\n\nWhere,\n\nR<sub>f</sub> = Flux Richardson number.\n\nC<sub>3</sub> = Additional model constant.\n\nFlux Richardson number as defined by Hossain and Rodi (1976)<ref>H.K Versteeg & W. Malalasekera (1995). An introduction to Computational Fluid Dynamics.page:219. Retrieved 11 November 2013.</ref> is '''R<sub>f</sub> = -B/G'''.\n\nAs C<sub>3</sub> is close to unity in vertical buoyant shear layers and close zero in horizontal shear layers hence a single value of C<sub>3</sub> cannot be used as R<sub>f</sub>.\n\n'''R<sub>f</sub> = - G<sub>l</sub>/2(G+B)'''\n\nWhere,\n\nG<sub>l</sub> = Buoyancy production in lateral [[energy]] component.\n\nIf we consider the horizontal shear layer where the lateral [[flow velocity]] component is in the direction of gravity, the production of [[buoyancy]] is given as\n\n<big>G<sub>l</sub> = 2B</big>\n\nIf we consider the vertical shear layer then the direction of [[gravity]] and the lateral component are normal to each other. Hence G<sub>l</sub> = 0. Therefore, we obtain\n\n'''<big>R<sub>f</sub>  = - B/(B+G)</big>'''      ------------    '''For horizontal layers'''\n\n'''<big>R<sub>f</sub> = 0</big>'''               -------------   '''For vertical layers'''\n\nFinally in a given flow if vertical shear stresses are dominant then we can set R<sub>f</sub> equal to zero and take C<sub>3</sub> = 0.8.\n\n==Uses==\n[[Buoyancy]] flow calculation and [[force]] calculations are used in successfully predicting the effect of various natural calamities upon [[buildings]], [[ships]], [[aircraft]] and other commercial and non-commercial [[vehicles]]. They are also used in locating a prominent location for placing the exhaust chimney for the large scale [[industries]]. Also the shape of the chimney is obtained keeping in mind the above calculations. They are also used in planning of buildings in coastal area such that the structure is able to sustain [[floods]] and strong currents that arise at the coast.\n\n==See also==\n{{cmn|colwidth=22em|\n* [[Air]]\n* [[Archimedes paradox]]\n* [[Buoy]]\n* [[Brunt–Väisälä frequency]]\n* [[Buoyancy compensator (diving)]]\n* [[Buoyancy compensator (aviation)]]\n* [[Cartesian diver]]\n* [[Dasymeter]]\n* [[Diving weighting system]]\n* [[Fluid]]\n* [[Fluid statics|Hydrostatics]]\n* [[Galileo thermometer]]\n* [[Hull (ship)]]\n* [[Hydrometer]]\n* [[Hydrostatic weighing]]\n* [[Lighter than air]]\n* [[Naval architecture]]\n* [[Plimsoll line]]\n* [[Pontoon (boat)|Pontoon]]\n* [[Quicksand]]\n* [[Salt fingering]]\n* [[Submarine]]\n* [[Swim bladder]]\n* [[Thrust]]\n}}\n\n==References==\n{{reflist}}\n\n{{portal bar|Underwater diving}}\n\n[[Category:Computational fluid dynamics]]\n[[Category:Buoyancy]]"
    },
    {
      "title": "Cavitation modelling",
      "url": "https://en.wikipedia.org/wiki/Cavitation_modelling",
      "text": "{{Expert-subject|Physics|date=June 2014}}\n'''Cavitation modelling''' is a type of [[Computational fluid dynamics|computational fluid dynamic]] (CFD) that represents the flow of fluid during [[cavitation]]. It covers a wide range of applications, such as [[pump]]s, [[water turbine]]s, [[pump inducer]]s, and fuel cavitation in orifices as commonly encountered in [[fuel injection]] systems.\n\n== Modelling categories ==\nModelling efforts can be divided into two broad categories: ''vapor transport models'' and ''discrete bubble models''.\n\n=== Vapor transport model ===\nVapor transport models are best suited to large-scale cavitation, like sheet cavitation that often occurs on [[rudder]]s and [[propeller]]s. These models include two-way interactions between the phases.\n\n=== Discrete bubble model ===\nThe discrete bubble model includes the effects of the surrounding fluid on the bubbles. Discrete bubble models, e.g. the Rayleigh-Plesset,<ref name =\"Rayleigh1917\">{{cite journal|last1=Rayleigh|first1=Lord|title=On the pressure developed in a liquid during the collapse of a spherical cavity|journal=The London, Edinburgh, and Dublin Philosophical Magazine and Journal of Science|doi=10.1080/14786440808635681|date=1917|volume=34|pages=94–98}}</ref><ref name=\"Plesset1977\">{{cite journal|last1=Plesset|first1=Milton|first2=Andrea|last2=Prosperetti|title=Bubble dynamics and cavitation.|journal=Annual Review of Fluid Mechanics|doi=10.1146/annurev.fl.09.010177.001045|date=1977|pages=145–185|volume=9|bibcode = 1977AnRFM...9..145P }}</ref> Gilmore <ref name=\"Gilmore1952\">{{cite journal|last1=Gilmore|first1=Forrest|year=1952|title=The growth or collapse of a spherical bubble in a viscous compressible liquid|volume=Technical Report|url=http://resolver.caltech.edu/CaltechAUTHORS:Gilmore_fr_26-4}}</ref> and Keller-Miksis,<ref name=\"Kellermiksis1980\">{{cite journal|last1=Keller|first1=Joseph|last2=Miksis|first2=Michel|title=Bubble oscillations of large amplitude|doi=10.1121/1.384720|journal=The Journal of the Acoustical Society of America|date=1980|volume=68|pages=628|bibcode = 1980ASAJ...68..628K |url=http://www.dtic.mil/get-tr-doc/pdf?AD=ADA095754}}</ref> describe the relation between the external pressure, bubble radius and the velocity and acceleration of the bubble wall.\n\n== Two-phase modeling ==\nTwo-phase modeling is the modelling of the two [[Phase (matter)|phases]], as in a [[free surface]] code. Two common types of two phase models are ''homogeneous mixture models'' and ''sharp interface models''. The difference between both the models is in the treatment of the contents of cells containing both phases.\n\n=== Homogeneous mixture models ===\nMost recent cavitation modelling efforts have used [[homogeneous mixture]] models, in which the contents of individual cells are assumed to be uniform. This approach is best suited to modeling large numbers of bubbles that are much smaller than one cell. The disadvantage of this approach is that when the cavities are larger than one cell, the vapor fraction is [[Molecular diffusion|diffused]] across neighboring cells by the ''vapor'' ''transport model''.\n\nThis is different from the ''sharp interface models'' in that the vapor and liquid are modeled as distinct phases separated by an interface.\n\n=== Sharp interface models ===\nIn sharp interface models, the interface is not diffused by [[advection]]. The model maintains a sharp interface. Naturally, this is only appropriate when the bubble size is at least on the order of a few cells.\n\n== Phase change models ==\nPhase change models represent the [[mass transfer]] between the phases. In cavitation, [[pressure]] is responsible for the mass transfer between liquid and vapor phases. This is in contrast to [[boiling]], in which the temperature causes the phase change. There are two general categories of phase change models used for cavitation: the ''barotropic models'' and ''equilibrium models''. This section will briefly discuss the advantages and disadvantages of each type.\n\n=== Barotropic model ===\nIf the [[pressure]] is greater than [[vapor pressure]], then the fluid is liquid, otherwise [[vapor]]. This means density of liquid water is considered as the density of fluid if the pressure is greater than vapor pressure and the density of water vapor is considered when pressure is less than vapor pressure of water at the ambient temperature.\n\n=== Equilibrium model ===\nThe equilibrium model requires the solution of the energy equation. The equation for state of water is used, with the energy absorbed or released by phase change creating local temperature gradients which control the rate of phase change.\n\n== Bubble dynamics models ==\nSeveral models for the bubble dynamics have been proposed:\n\n===Rayleigh===\nThe Rayleigh model is the oldest, dating from 1917. This model was derived by [[John William Strutt, 3rd Baron Rayleigh|Lord Rayleigh]]<ref name=Rayleigh1917 /> It describes an empty space in the water, influenced by a constant external pressure. His assumption of an empty space led to the name cavity still used.\nThe Rayleigh equation, derived from the [[Navier-Stokes equation]] for a spherically symmetric bubble convected with the flow with constant external pressure, reads\n:<math>R\\ddot{R} +\\frac{3}{2}\\dot{R}^2 =\\frac{p(R)-p_\\infty}{\\rho_L}</math>\n\n===Rayleigh-Plesset===\nBuilding on the work of Lord Rayleigh, [[Milton S. Plesset|Plesset]] <ref name=\"Plesset1977\" /> included the effects of viscosity, surface tension and a non-constant external pressure to the equation. This equation reads\n:<math>R\\ddot{R} +\\frac{3}{2}\\dot{R}^2 =\\frac{p_i-p_\\infty-\\frac{2 \\sigma}{R}- \\frac{4\\mu}{R}\\dot{R}}{\\rho_L}</math>\n\n===Gilmore===\nThe equation by Gilmore accounted for the compressibility of the liquid. In its derivation, the viscous term is only present as a product with the compressibility. This term is neglected. The resulting term is:\n:<math>\n(1-\\frac{\\dot{R}(t)}{c(R)})R(t)\\ddot{R}(t) +\\frac{3}{2}(1-\\frac{\\dot{R}(t)}{3c(R)})\\dot{R}^2(t) =(1+\\frac{\\dot{R}(t)}{c(R)})H(R)+(1-\\frac{\\dot{R}}{c(R)})\\frac{R}{c(R)}\\dot{H}(R)\n</math>\n\nIn which:\n:<math>H = \\frac{n}{n-1}\\frac{p_\\infty(t)+B}{\\rho_L}\\left[ (\\frac{P+B}{p_\\infty(t) +B})^{\\frac{n-1}{n}}-1\\right]</math>\n:<math>c = c_0\\left(\\frac{p_{g}(t) -2\\sigma /R+B}{p_\\infty (t)+B}\\right)^{\\frac{n-1}{2n}}</math>\n:<math>\\dot{H} = \\frac{D}{p_{\\infty}(t)+B} H-\\frac{D}{\\rho} (\\frac{P+B}{p_{\\infty}(t)+B}) ^ {\\frac{n-1}{n}}+\\frac{\\dot{R}}{\\rho_L R} \\left[\\frac{p_{\\infty}(t)+B}{P+B}\\right] ^{\\frac{1}{n}} \\left[\\frac{2 \\sigma}{R} -3k p_{g}(t)\\right]</math>\n\n===Others===\nOver the years, several other models have been developed by making different assumptions in the derivation of the Navier-Stokes equations.\n\n==References==\n{{reflist}}\n\n[[Category:Computational fluid dynamics]]"
    },
    {
      "title": "CFD in buildings",
      "url": "https://en.wikipedia.org/wiki/CFD_in_buildings",
      "text": "{{Underlinked|date=December 2012}}\n\n'''CFD''' stands for [[computational fluid dynamics]] (and heat transfer). As per this technique, the governing differential equations of a flow system or thermal system are known in the form of [[Navier–Stokes equations]], thermal energy equation and species equation with an appropriate equation of state.<ref>{{citation | journal=ASHRAE Journal |volume=39 |issue=1 |pages=44–48 | first=Ladeinde | last=Foluso | year=1997 | title=CFD application in the HVAC & R }}</ref> In the past few years, CFD has been playing an increasingly important role in [[building design]], following its continuing development for over a quarter of a century. The information provided by CFD can be used to analyse the impact of building exhausts to the environment, to predict smoke and fire risks in buildings, to quantify indoor environment quality, and to design natural ventilation systems.\n\n==Applications==\nRecently CFD finds very wide application in different areas of science and engineering; some examples are:<ref>{{cite book |last=Versteeg |first=H. |authorlink=H.Versteeg |title=An Introduction to Computational Fluid Dynamics |year=2009 |publisher=Pearson Publications |isbn=978-81-317-2048-6}}</ref>\n* [[Aerodynamics]] of aircraft and vehicles : lift and drag \n* Hydrodynamics of ships \n* Power plant : combustion in internal combustion engines and [[gas turbines]] \n* [[Turbo machinery]]: Flows inside rotating passages, diffusers etc.\n* [[Electrical and electronics engineering]]: cooling of equipment including microcircuits.\n* Chemical process engineering: mixing and separation and polymer moulding.\n* [[Marine engineering]]: loads on off-shore structure.\n* [[Environmental engineering]]: distribution of pollutant and effluents.\n* [[Hydrology]] and [[oceanography]]: flows in rivers, estuaries and oceans.\n* [[Meteorology]]: weather prediction.\n* [[Biomedical engineering]]: blood flows through arteries and veins.\n* External and internal environment of buildings: wind loading, [[ventilation (architecture)|ventilation]] analysis and heating/cooling load calculations.\n\nPreviously, most [[building]]-related issues such as ventilation analysis, wind loading, wind environment etc. were examined using [[wind tunnel]] tests, but today all these tests can be done effectively with CFD. CFD can resolve all of the above-mentioned issues in a relatively short time period, and it is more economical as well as being a stronger approach than the older one (experimental).<ref>{{cite book|last=Lawson|first=Tom|authorlink=Tom Lawson (engineer)|title=Building Aerodynamics|year=2010|publisher=Imperial College Press|isbn=978-81-7596-757-1}}</ref> Currently, Computational Fluid Dynamics is used as a sophisticated airflow modeling method and can be used to predict airflow, heat transfer and contaminant transportation in and around buildings. CFD plays an important role in building design, designing a thermally-conformable, healthy and energy-efficient building. CFD can examine the effectiveness and efficiency of various heating ventilation and air conditioning (HVAC) systems by easily changing the type and location of different components, supply air conditions and system control schedules. Furthermore, CFD helps in developing passive heating/cooling/ventilation strategies (e.g. natural ventilation) by modelling and optimizing building site-plans and indoor layouts.<ref>{{citation | journal= Indoor and Built Environment| volume=15 | issue=4 | pages=305–313 | first=Zhiqiang | last=Zhai | year=2005 | title=Application of Computational Fluid Dynamics in Building Design: Aspects and Trends |doi=10.1177/1420326X06067336 }}</ref> Globally, the building sector is the source of approximately 40% of total energy consumption.<ref>\n{{citation\n  | journal=The Appraisal Journal\n  |volume=79 |issue=2 |pages=115–125\n  | first=Leopolds\n  | last=Berger\n  | year=2011\n  | title=Energising property valuation: putting a value on energy-efficient buildings\n  }}</ref>\n\nIn the present era, there is a huge gap in [[energy consumption]] and [[Energy Production|energy production]]. As the building sector makes up a huge amount of the total consumption, it is essential to investigate the optimum configuration for buildings to reduce the buildings' energy usage. In order to achieve this, CFD can play an important role. [[Building performance simulation]] (BPS) and CFD programs are important [[building design]] tools which are used for the evaluation of building performance, including thermal comfort, indoor air quality mechanical system efficiency and energy consumption.<ref>{{citation |doi=10.1016/j.enbuild.2004.07.001|title=Performance of coupled building energy and CFD simulations|journal=Energy and Buildings|volume=37|issue=4|pages=333|year=2005|last1=Zhai|first1=Zhiqiang John|last2=Chen|first2=Qingyan Yan}}</ref>\n\nCFD in buildings is mainly used for one or more followings purposes:\n# [[Thermal analysis]]: through walls, roof and floor of buildings\n# [[Ventilation (architecture)|Ventilation]] analysis.\n# Orientation, site and location selection of buildings based on local geographical and environmental conditions.\n\n===Thermal analysis===\n\nIn buildings, [[heat transfer]] takes place in its all modes i.e. [[Conduction (heat)|conduction]], [[convection]] and [[radiation]]. In order to reduce heat losses from buildings, CFD analysis can be done for the optimum configuration of [[composite walls]], roof and floor. The differential form of the general transport equation is as follows:<ref>{{cite book|last=Versteeg|first=H.|authorlink=H.Versteeg|title=An Introduction to Computational Fluid Dynamics|year=2009|publisher=Pearson Publications|isbn=978-81-317-2048-6}}</ref>\n{| style=\"width:80%;\"\n|<math> { \\frac{\\partial{(\\rho \\phi)}}{\\partial t}} + { div\\, (\\rho u \\phi )} ={div\\, (k\\, grad\\, \\phi )} + {S_{\\phi}} </math>\n|style=\"text-align:right\"|(1)\n|}\n<!-- The terms of which represent? -->\n\nThe numerical solution of above equation can be obtained by finite difference method (FDM), finite volume method (FVM) and finite element method (FEM). In buildings, for heat transfer analysis, the scalar function ф in equation (1) is replaced by Temperature (T), diffusion coefficient Γ is replaced by thermal conductivity k and the source term <math>S_{\\phi} </math> is replaced by heat generation term e or by any heat radiation source <math>Q_i </math> or by both (depending upon the nature of source available) and there are different forms of equations for different cases. For simplicity and easy understanding, only 1-Dimensional cases have been discussed.\n\nIn buildings the heat transfer analysis can be done for all parts of buildings (walls, roof and floor) in following two ways\n# Steady State Thermal Analysis\n# Transient Thermal Analysis\n\n==== Steady state thermal analysis ====\nThe steady state thermal analysis consist the following type of governing differential equations.\n\n'''Case-1''': General steady state heat conduction equation.\n\nFor this case the governing differential equation (GDE) (1) becomes as follows:\n:<math> { div\\, (\\rho u T )} ={div\\, (k\\, grad\\, T )}+ {S_{T}} \\, </math>\n\n'''Case-2''': Steady state heat conduction equation (no heat generation)\n\nFor this case the governing differential equation (GDE) (1) becomes as follows:\n:<math> { div\\, (\\rho u T )} ={div\\, (k\\, grad\\, T )} \\, </math>\n\n'''Case-3''': Steady state heat conduction equation (no heat generation and no convection)\n\nFor this case the governing differential equation (GDE) (1) becomes as follows:\n:<math>  {div\\, (k\\, grad\\, T )} = 0 \\, </math>\n\n==== Transient thermal analysis ====\nThe transient thermal analysis consist the following type of governing differential equations.\n\n'''Case-1''': Transient heat conduction\n\nFor this case the governing differential equation (GDE) (1) becomes as follows:\n:<math> { \\frac{\\partial{(\\rho T)}}{\\partial t}} + { div\\, (\\rho u T )} ={div\\, (k\\, grad\\, T )}+ {S_{T}} \\, </math>\n\n'''Case- 2''': Transient heat conduction (no heat generation)\n\nFor this case the governing differential equation (GDE) (1) becomes as follows:\n\n:<math> { \\frac{\\partial{(\\rho T)}}{\\partial t}} + { div\\, (\\rho u T )} ={div\\, (k\\, grad\\, T )} </math>\n\n'''Case-3''': Transient heat conduction (no heat generation and no convection)\n\nFor this case the governing differential equation (GDE) (1) becomes as follows:\n:<math> { \\frac{\\partial{(\\rho T)}}{\\partial t}} = {div\\, (k\\, grad\\, T )} \\, </math>\n\nWe can solve these above mentioned governing differential equation (GDE) equations using CFD technique.\n\n===Ventilation analysis===\nThe ventilation study in buildings is done to find the thermally comfortable environment with acceptable indoor air quality by regulating indoor air parameters (air temperature, relative humidity, air speed, and chemical species concentrations in the air). CFD finds an important role in regulating the indoor air parameters to predict the ventilation performance in buildings. The ventilation performance prediction provides the information regarding indoor air parameters in a room or a building even before the construction of buildings.<ref>{{citation |doi=10.1016/j.buildenv.2008.05.025|title=Ventilation performance prediction for buildings: A method overview and recent applications|journal=Building and Environment|volume=44|issue=4|pages=848–858|year=2009|last1=Chen|first1=Q}}</ref>\n\nThese air parameters are crucial for designing a comfortable indoor as well as a good integration of the building in the outdoor environment. This is because the design of appropriate ventilation systems and the development of control strategies need detailed information regarding the following parameters;\n*Airflow\n*Contaminant dispersion \n*Temperature distribution\n\nThe aforesaid information is also useful for an architect to design the building configuration. From the last three decades, the CFD technique is widely used with considerable success in buildings.<ref>\n{{citation\n  | journal=International Journal on Architectural Science\n |volume=1 |issue=1 |pages=14–29\n  | first=Q.\n  | last=Chen\n  | first2=J.\n  | last2=Srebric \n  | year= 2000\n  | title=Application of CFD Tools for Indoor and Outdoor Environment Design\n  }}</ref>\n\nRecently ventilation and its related fields has becomes a great part of wind engineering. A ventilation study can be done using wind tunnel investigation (experimentally) or by CFD modeling (theoretically). Natural ventilation system may be preferred over the forced ventilation system in some applications, as it eliminates or reduces the mechanical ventilation system, which may provide both fan energy and first-cost savings. In present era, due to development of a lot of CFD software and other building performance simulation software, it has become easier to assess the possibility of natural/forced ventilation system in a building. CFD analysis is quite useful than the experimental approach because here other related relations among the variables in post-processing could be found. The data obtained either experimental or numerically is useful in two ways:<ref name=\":0\">{{cite book|title=Building Aerodynamics|last=Lawson|first=Tom|publisher=Imperial College Press|year=2010|isbn=978-81-7596-757-1|location=|pages=|authorlink=}}</ref> \n# Better comfort of user\n# It provides the data which is used as input to the heat balance calculation of the buildings\n\n===Orientation, site and location selection===\n[[File:Figuree onea.jpg|thumb|right|Figure-1 (a): Flow around a building (collection of air at height and delivering it at ground level)]]\n[[File:Figuree oneb.jpg|thumb|right|Figure-1 (b): Flow around a building (center of the front face )]]\nEarlier, the choice of dwelling location was made mindful of the need for water, so most of earlier development started in valley area. In present era, due to advancement in science and technology, it becomes easy to select a proper orientation, site and location of buildings based on local geographical and environmental conditions. In selection of building site and location, wind loading plays and important role. In case of two buildings at a location exists side by side having some gap, when volume of [[wind]] blows round the ends of building through the gap is, in first instant the sum of flow around each building separately, then its velocity must increase above that around the end of a single building at the expense of pressure loss.\n \nSo, there will be a built of pressure, entering the gap, which will lead to higher wind loads on the sides of buildings. When wind blows over the face of a high rise building, a vortex is created by the downward flow on the front face (as shown in figure-1). The wind speed in the reverse direction near the ground level may have 140 percent of the reference wind speed. So, if any building exist in such region, then that may be subjected to damage (especially the roof of building may get severe damage). Such damage to buildings can be prohibited successfully, if the effects of wind loading are considered in the early stage of construction of a building. In early age of construction all these wind loading effects were determined by the wind tunnel test, but today all these test can be successfully through CFD analysis. The importance of providing pleasant environment to buildings is increasing. Architects and wind engineers are often asked to look over the design (orientation, site, location and gaps between the surrounding buildings) in the formative stage of buildings & planning stage of construction.<ref name=\":0\" /> So by using CFD analysis, it is possible to find the suitable information (local wind velocity, convective coefficients, and solar radiation intensity) for orientation, site and location selection of buildings.\n\n==CFD approach for heat transfer analysis in buildings==\n\nCFD technique can be used for the analysis of heat transfer in each part of a building. CFD technique finds the solution by following ways:\n# Discretization of the governing differential equation using numerical methods (Finite difference method has been discussed).\n# Solve the discretized version of equation with high performance computers.\n\n===Discretization of the governing differential equations for the steady state heat transfer analysis===\nConsider a building having a plane wall with thickness L, heat generation e and constant thermal conductivity k.  The wall is subdivided into M equal regions of thickness  <math>\\Delta x</math> = X/T in x-direction, and the divisions between the regions are selected as nodes as shown in figure-2.\n\n[[File:Fig one.jpg|thumb|right|Figure-2:the nodal points and volume elements for the finite difference formulation of 1-D conduction in a plane wall]]\n\nThe whole domain of wall in x-direction is divided in elements as shown in figure and the size of all interior elements is same while for exterior elements it is half.\n\nNow to obtain the FDM solution for the interior nodes, consider the element represented by the node m which is surrounded by neighboring nodes m-1 and m+1. The FDM technique presumes that temperature varies linearly in walls (shown in figure-3).\n\nFDM solution is (for all interior nodes except to 0 and last node):\n\n:<math>  \\frac{(T_{m-1}^i - 2T_{m}^n +T_{m}^i )}{\\Delta {x}^2} + \\frac {e}{k} = 0 </math>\n\n[[File:Fig two.jpg|thumb|right|Figure-3:Linear temperature variation in finite difference formulation]]\n\n====Boundary conditions====\nAbove equation is valid only to interior nodes only. To obtain the solution for exterior nodes we have to apply the boundary conditions (as applicable), which are as follows.<ref>{{cite book|last=A. Cengel|first=Yunus|authorlink=Yunus A. Cengel|title=Heat and mass transfer|year=2008|publisher=Tata McGraw-Hills|isbn=978-0-07-063453-4}}</ref>\n\n'''1.Specified heat flux boundary condition'''\n:<math>  q_{0} A+ k A\\frac{(T_{1} - T_{0} )}{\\Delta {x}} + \\frac {e_{0}}{2}A \\Delta {x} = 0   </math>\nWhen boundary is insulated (q=0)\n:<math> k A\\frac{(T_{1} - T_{0} )}{\\Delta {x}} + \\frac {e_{0}}{2}A \\Delta {x} = 0    </math>\n\n'''2. Convective boundary condition'''\n:<math> h A {(T_{\\infty} - T_{0} )}+k A\\frac{(T_{1} - T_{0} )}{\\Delta {x}} + \\frac {e_{0}}{2}A \\Delta {x} = 0  </math>\n\n'''3. Radiation boundary condition'''\n:<math> \\epsilon \\sigma A {(T_{sur}^4 - T_{0}^4 )}+k A\\frac{(T_{1} - T_{0} )}{\\Delta {x}} + \\frac {e_{0}}{2}A \\Delta {x} = 0  </math>\n\n'''4. Combined convective and radiation boundary condition''' (shown in figure-4).\n:<math> h A {(T_{\\infty} - T_{0} )}+\\epsilon \\sigma A {(T_{sur}^4 - T_{0}^4 )}+k A\\frac{(T_{1} - T_{0} )}{\\Delta {x}} + \\frac {e_{0}}{2}A \\Delta {x} = 0  </math>\n\nor\nwhen radiation and convection heat transfer coefficient are combined, above equation becomes as follows; \n:<math> h A_{combined} {(T_{\\infty} - T_{0} )}+k A\\frac{(T_{1} - T_{0} )}{\\Delta {x}} + \\frac {e_{0}}{2}A \\Delta {x} = 0  \\, </math>\n\n[[File:Fig three.jpg|thumb|right|Figure-4: Schematic for the FDM formulation of combined convective and radiation on the left boundary of a plane wall]]\n\n'''5. Combined convective, radiation and heat flux boundary condition'''\n:<math> q_{0}A+h A {(T_{\\infty} - T_{0} )}+\\epsilon \\sigma A {(T_{sur}^4 - T_{0}^4 )}+k A\\frac{(T_{1} - T_{0} )}{\\Delta {x}} + \\frac {e_{0}}{2}A \\Delta {x} = 0  </math>\n\n'''6.Interface boundary condition : when there is an interface''' (in composite walls) of different walls having different thermo-physical properties, the two different solid media A and B are assumed to be perfect contact and thus have same temperature at interface at node m (as shown in figure-5).\n:<math>   k_{A} A\\frac{(T_{m-1} - T_{m} )}{\\Delta {x}} +k_{B} A\\frac{(T_{m+1} - T_{m} )}{\\Delta {x}}+ \\frac {e_{A,m}}{2}A \\Delta {x}+\\frac {e_{B,m}}{2}A \\Delta {x} = 0   </math>\n\n[[File:Fig four.jpg|thumb|right|Figure-5: Schematic for the FDM of the interface boundary condition for two mediums A and B having perfect thermal contact]]\n\nIn above equations q_0 = denotes specified heat flux is in <math>(W/m^2)</math>, h =convective coefficient, <math> h_{combined}</math> = combined convective and radiation heat transfer coefficient,<math>T_sur</math> = Temperature of surrounding surface,<math>T_(\\infty)</math> =Ambient Temperature, <math>T_0</math> = Temperature of at initial node.\nNote: For interior side of wall we can apply the suitable boundary condition from above (as applicable), in that case  <math>T_(\\infty)</math> will be replaced by <math>T_r</math> (Room Temperature), <math>T_0</math>= will be replaced by <math>T_l</math> (Temperature of last node).\n\n===Discretization of the governing differential equations for the transient heat transfer analysis===\nTransient thermal analysis is more important than the steady thermal analysis, as this analysis include the variable ambient condition with time. In transient heat conduction, the temperature changes with time as well as position. The finite difference solution of transient heat conduction requires discretization in time in addition to space, as shown in figure-6.\n\n[[File:Fig five.jpg|thumb|right|Figure-6: FDM fotirmulation of time dependent problem involves discrete points in time as well as in space]]\n\nThe nodal points and volume elements for the transient FDM formulation of 1-D conduction in a plane wall exist as shown in the figure-7.\n\n[[File:Fig six.jpg|thumb|right|Figure-7:The nodal points and volume elements for the transient FDM formulation of 1-D conduction in a plane wall]]\n\nFor this case the FDM explicit solution for equation (1) will be as follows,\n\n:<math>   k A\\frac{(T_{m-1}^i - T_{m}^i )}{\\Delta {x}} +k A\\frac{(T_{m+1}^i - T_{m}^i )}{\\Delta {x}}+ {e_{m}}A \\Delta {x}= (\\rho c_{p} \\Delta x  A) \\frac{(T_{m}^{i+1} - T_{m}^i )}{\\Delta x}  </math> \nThe above equation can be solved explicitly for the temperature <math>(T_{m}^{i+1})</math> to give\n:<math> {T_{m}^{i+1}}= \\tau {(T_{m+1}^i - T_{m}^i )}+{(1-2\\tau)}T_{m}^i +\\tau \\frac {(e_{m} \\Delta {x}^2)}{k}  </math>\n\nwhere,\n:<math> \\tau =  \\frac{(\\alpha \\Delta t  )}{\\Delta x^2} \\, </math>\nand \n:<math> \\alpha =  \\frac{k}{\\rho c_p} \\, </math>\nhere,<math> \\tau </math> represents the cell Fourier no,<math> \\alpha </math> represents thermal diffusivity,   <math> c_p </math> represents specific heat at constant pressure, <math> \\Delta t </math> represents time step,<math> \\Delta x </math> represents space step.\n\nAbove equation is valid for all interior nodes and to find the relation for first and last node, apply boundary conditions (as applicable) as discussed in steady state heat transfer. For a convective & radiation boundary if solar radiation data  <math> q_{solar} </math>\\, in (<math> (W/m^2) </math>)  is available and absorptivity-transmissivity constant K is known, the relation for temperature is obtained as follows;\n:<math> h A {(T_{\\infty}^i - T_{0}^i )}+ \\kappa A q_{sol} = (\\rho c_{p} \\Delta x  A) \\frac{(T_{1}^i - T_{0}^i )}{\\Delta x}   </math> \nNote: the thermal analysis for the roof and floor of a building can be done in same way, as discussed for walls.\\\\\n\n== See also ==\n*[[Computational fluid dynamics]]\n*[[Natural ventilation]]\n*[[JPMorgan Chase Tower (Houston)]]\n*[[Environmental Systems Design, Inc.]]\n*[[Dynamic insulation]]\n*[[Thermal management of high-power LEDs]]\n*[[Vented balance safety enclosure]]\n*[[Different types of boundary conditions in fluid dynamics]]\n*[[Wind tunnel]]\n*[[Greenhouse]]\n\n==References==\n{{Reflist|2}}\n\n== External links ==\n* [http://rheologic.net/en/urban-wind-assessment Basic about CFD ]\n* [http://us.cradle-cfd.com/applications/architecture.html Collection of CFD Applications in Architecture & Building ]\n* [http://www.cradle-cfd.com/casestudy/user_interview/0000000039 Humidity Evacuation Efficiency for a Kitchen Exhaust Hood System ]\n* [http://us.cradle-cfd.com/applications/casestudy/cleanroom_ventilation.pdf Clean Room Ventilation Optimization ]\n* [http://www.cradle-cfd.com/casestudy/user_interview/0000000002?p=1 Integrating BIM with CFD for Environmental and Facility Design ]\n* {{YouTube|id=VNTDFSEz8L8|title=Stack effect simulation}}\n* {{YouTube|id=bDLe16JvWD4|title=Carpark Fire and Emergency Ventilation Simulation}}\n* {{YouTube|id=W9vlToPAD80|title=CFD analysis for Bio-safety labs}}\n* {{YouTube|id=st8HRgHOErw|title=Office Fire Emergency Evacuation Simulation}}\n*{{YouTube|id=SVtwXMt_Cf8|title=Air Handling Unit CFD Simulation}}\n*{{YouTube|id=Cnue32gRLf0|title=Piston Effect Simulation in underground Subway Tunnel}}\n* [http://www.airflowsciences.com/sites/default/files/docs/2015_NHUG_HVAC-CFD.pdf CFD Design of HVAC System for a Nuclear Power Plant Building ]\n* [https://www.cibse.org/content/Groups/Building_Simulation_Group/CMLETBE10/Richard%20Chitty%20%28BRE%29%20-%20Analysis%20of%20Building%20Performance%20using%20Computational%20Fluid%20Dynamics%20%28CFD%29%20-%20121010.pdf Analysis of Building Performance using Computational Fluid Dynamics]\n* [https://www.google.co.in/search?q=cfd+analysis+in+buildings&hl=en&tbm=isch&tbo=u&source=univ&sa=X&ei=ynyIUZvCA4WyrAe85AE&ved=0CD8QsAQ&biw=1920&bih=1028 Images for cfd analysis in buildings]\n* [http://www.designbuildersoftware.com/docs/designbuilder/DesignBuilder_CFD_DraftManual.pdf DesignBuilder CFD ]\n* [http://www.inive.org/members_area/medias/pdf/Inive/IAQVEC2007/Tominaga.pdf CFD ANALYSIS OF FLOW AND CONCENTRATION FIELDS AROUND A BUILDING WITH A ROOF STACK ]\n* [http://www.bse.polyu.edu.hk/researchCentre/Fire_Engineering/summary_of_output/journal/IJAS/V2/p.67-82.pdf CFD AS A BUILDING SERVICES ENGINEERING TOOL ]\n* [https://engineering.purdue.edu/~yanchen/paper/2005-1.pdf Performance of Coupled Building Energy and CFD Simulations ]\n* [http://www.ibpsa.org/proceedings/BS2009/BS09_0489_496.pdf APPLICATION OF CFD IN BUILDING PERFORMANCE SIMULATION FOR THE OUTDOOR ENVIRONMENT]\n* [http://www.sciencedirect.com/science/article/pii/S0360132302000458 Integrating CFD and building simulation]\n* [https://web.archive.org/web/20130501101630/http://www.mechartes.com/casestudy/Building_Design_Services.html Building Design and Analysis]\n*[https://web.archive.org/web/20130326220619/http://halcrow.com/Documents/fire_safety/cfd_soc_building_serv.pdf Capability in Computational Fluid Dynamics (CFD) for Building Services]\n*[http://www.cfd-online.com/Forums/main/72725-cfd-hvac-green-building.html CFD in HVAC and green building ]\n*[http://www.engr.colostate.edu/~meroney/PapersPDF/CEP09-10-1.pdf CFD Prediction of Airflow in Buildings for Natural Ventilation ]\n*[http://www.glumac.com/greenresources/gr_cfd_advantages.html CFD Advantages and Practical Applications]\n*[https://www.modelica.org/events/modelica2011/Proceedings/pages/papers/12_3_ID_179_a_fv.pdf Numerical coupling of Modelica and CFD for building energy supply systems]\n*[http://www.mechanical3dmodelling.com/articles/thermal-cfd-applications.php Applications of the Thermal CFD Services]\n* [http://www.airflowsciences.com/sites/default/files/docs/2013Coal-to-Gas_Gas_Accumulation.pdf CFD Analysis of a Natural Gas Leak in a Power Plant ]\n\n[[Category:Computational fluid dynamics]]"
    },
    {
      "title": "CFD-FASTRAN",
      "url": "https://en.wikipedia.org/wiki/CFD-FASTRAN",
      "text": "'''[http://www.esi-group.com/software-services/virtual-environment/cfd-multiphysics/ace-suite/cfd-fastran CFD-FASTRAN]''' is a commercial [[Computational Fluid Dynamics]] (CFD) software package developed by [[ESI Group]] for [[aerodynamic]] and aerothermodynamic applications. It employs multiple moving body capability for simulating problems such as missile launch, maneuvering and staging, and aircraft flight dynamics and store separation.\n\nCFD-FASTRAN was used by the [[Council for Scientific and Industrial Research]] in South Africa to simulate the release of a missile from the outboard pylon of the BAE Hawk Mk120 at transonic speeds where shockwaves dominate the flowfield. The CFD software was used to calculate the carriage loads, structural dynamic responses from the ejection forces and model the loads on the missile in free-flight.<ref>K. Jamison, R. Heise, “[http://researchspace.csir.co.za/dspace/handle/10204/5605 Evaluating the Release of a Large Store from the BAE Hawk MK120],” International Aerospace Symposium of South Africa, Gordons Bay, 23–25 November 2010.</ref>\n\nThe CFD software was used to predict supercooled droplet impingement on helicopter blades by the Institute for Aerospace Research. This is a first step towards simulating ice formation on rotating helicopter blades.<ref>Krzysztof Szilder, Hongyi Xu, “[http://www.icas.org/ICAS_ARCHIVE/ICAS2008/PAPERS/382.PDF Prediction of Supercooled Droplet Impingement on Helicopter Rotor Blades],” 26th International Conference of the Aeronautical Sciences, [[International Council of the Aeronautical Sciences |ICAS]] 2008.</ref>\n\nCFD-FASTRAN was used to study the aerodynamic performance of a hypersonic vehicle powered by scramjet engines. Flow conditions were simulated at various angles of attack at Mach 5.85.<ref>Liang Jin, Xian Yu Wu, Jing Lei, Li Yan, Wei Huang, Jun Liu, “[http://www.scientific.net/AMM.390.71 CFD Analysis of a Hypersonic Vehicle Powered by Triple-Module Scramjets],” ''Applied Mechanics and Materials'', Volume 390, Pages 71-75, August 2013.</ref>\n\nTwo-dimensional numerical flow simulations were performed with CFD-FASTRAN to compare the effects of a combined jet flap and Coanda jet effects a supercritical airfoil. The results showed the combined jet flap provided the best performance.<ref>M. Mamou, M. Khalid, “[http://www.cder.dz/download/cer07_12.pdf Steady and unsteady flow simulation of a combined jet flap and Coanda jet effects on a 2D airfoil aerodynamic performance],” Colloque International sur les Energies Renouvelables CER '2007 Oujda, 4 to 5 May 2007, Oujda, Morocco.</ref>\n\nCFD-FASTRAN was used to simulate flow past helicopter rotors in hover and forward flight conditions. The predictions matched experimental data.<ref>M. Mamou, M. Khalid, “[http://pubs.casi.ca/doi/abs/10.5589/q06-016?journalCode=casj Time-Accurate Flow Simulations Past Helicopter Rotors in Hover and Forward Flight Conditions Using Chimera Grid Technique],” ''Canadian Aeronautics and Space Journal'', 2006, 52(4): 135-148, 10.5589/q06-016.</ref>\n\n== References ==\n<!--- See http://en.wikipedia.org/wiki/Wikipedia:Footnotes on how to create references using <ref></ref> tags which will then appear here automatically -->\n{{Reflist}}\n\n[[Category:Computational fluid dynamics]]\n[[Category:Engineering software companies]]\n[[Category:Physics software]]"
    },
    {
      "title": "CGNS",
      "url": "https://en.wikipedia.org/wiki/CGNS",
      "text": "{{Infobox file format\n| name                   = CFD General Notation System\n| icon                   = \n| logo                   = \n| screenshot             = \n| caption                = \n| extension              = <tt>cgns</tt>\n| mime                   = \n| type code              = \n| uniform type           = \n| magic                  = \n| owner                  = \n| released               = \n| latest release version = 3.4.0\n| latest release date    = March 5, 2019\n| genre                  = [[scientific data format]]\n| container for          = \n| contained by           = \n| extended from          = \n| extended to            = \n| standard               = \n| url                    = http://www.cgns.org\n}}\n\n'''CGNS''' stands for '''CFD General Notation System'''. It is a general, portable, and extensible standard for the storage and retrieval of [[Computational fluid dynamics|CFD]] analysis data. It consists of a collection of conventions, and free and [[open software]] implementing those conventions. It is self-descriptive, [[cross-platform]] also termed platform or machine independent, documented, and administered by an international steering committee. It is also an American Institute of Aeronautics and Astronautics ([[AIAA]]) recommended practice. The [http://www.cgns.org CGNS project] originated in 1994 as a joint effort between [[Boeing]] and [[NASA]], and has since grown to include many other contributing organizations worldwide. In 1999, control of CGNS was completely transferred to a public forum known as the [http://www.cgns.org/steering.html CGNS Steering Committee]. This Committee is made up of international representatives from government and private industry.\n\nThe CGNS system consists of two parts: (1) a standard format (known as Standard Interface Data Structure, or SIDS) for recording the data, and (2) software that reads, writes, and modifies data in that format.  The format is a conceptual entity established by the documentation; the software is a physical product supplied to enable developers to access and produce data recorded in that format. \n\nThe CGNS system is designed to facilitate the exchange of data between sites and applications, and to help stabilize the archiving of aerodynamic data.  The data are stored in a compact, binary format and are accessible through a complete and extensible library of functions.  The [[application programming interface]] (API) is cross-platform and can be easily implemented in [[C (programming language)|C]], [[C++]], [[Fortran]] and [[Fortran 90]] applications. A MEX interface [http://code.google.com/p/mexcgns mexCGNS] also exists for calling the CGNS API in [[high-level programming language]]s [[MATLAB]] and [[GNU Octave]]. [[Object oriented]] interface [http://cgnspp.sourceforge.net/ CGNS++] and [[Python (programming language)|Python]] module [https://pycgns.github.io/ pyCGNS] exist. \n\nThe principal target of CGNS is data normally associated with [[compressible]] [[viscous]] flow (i.e., the [[Navier-Stokes equations]]), but the standard is also applicable to subclasses such as [[Euler equations|Euler]] and potential flows. The CGNS standard includes the following types of data. \n* Structured, unstructured, and hybrid grids\n* Flow solution data, which may be nodal, cell-centered, face-centered, or edge-centered\n* Multizone interface connectivity, both abutting and overset\n* Boundary conditions\n* Flow equation descriptions, including the equation of state, viscosity and thermal conductivity models, turbulence models, multi-species chemistry models, and electromagnetics\n* Time-dependent flow, including moving and deforming grids\n* Dimensional units and nondimensionalization information\n* Reference states\n* Convergence history\n* Association to [[Computer-aided design|CAD]] geometry definitions\n* User-defined data \n\nMuch of the standard and the software is applicable to computational field physics in general. Disciplines other than fluid dynamics would need to augment the data definitions and storage conventions, but the fundamental database software, which provides platform independence, is not specific to fluid dynamics.\n\nCGNS is self-describing, allowing an application to interpret the structure and contents of a file without any outside information. CGNS can make use of either two different low-level data formats:\n* an internally developed and supported method called Advanced Data Format (ADF), based on a common file format system previously in use at McDonnell Douglas\n* [[HDF5]], a widely used hierarchical data format\n\n==Tools and Guides==\nIn addition to the CGNS library itself, the following tools and guides are available from [https://github.com/CGNS/CGNS Github]:\n* CGNSTools - Includes ADFVIEWER, a browser and editor for CGNS files\n* Users Guide code - small practical example CGNS programs written in both Fortran and C\n* F77 Examples - example computer programs written in Fortran that demonstrate all CGNS functionality\n* [http://www.hdfql.com HDFql] enables users to manage CGNS/HDF5 files through a high-level language (similar to SQL) in C, C++, Java, Python, C#, Fortran and R.\n\n==See also==\n* [[Common Data Format]] (CDF)\n<!-- * [[CGNS]] ([[Computational fluid dynamics|CFD]] General Notation System) -->\n* [[EAS3]] (Ein-Ausgabe-System)\n* [[FITS]] (Flexible Image Transport System)\n* [[GRIB]] (GRIdded Binary)\n* [[Hierarchical Data Format]] (HDF)\n* [[NetCDF]] (Network Common Data Form)\n* [[Tecplot]] binary files\n* [[XMDF]] (eXtensible Model Data Format)\n\n==External links==\n* [https://cgns.github.io/ CGNS home page]\n* [https://github.com/meshkit/cgns4m MEX interface of CGNS for MATLAB and Octave]\n* [https://pycgns.github.io/ pyCGNS]\n\n[[Category:Computer file formats]]\n[[Category:Computational fluid dynamics]]\n[[Category:C libraries]]"
    },
    {
      "title": "Code Saturne",
      "url": "https://en.wikipedia.org/wiki/Code_Saturne",
      "text": "{{Infobox software\n| name                   = Code_Saturne\n| developer              = [[Électricité de France]]\n| latest_release_version = 5.0.9\n| latest_release_date    = {{Start date and age|2018|09|26}}\n| operating_system       = [[Linux]], [[Mac OS X]], [[Unix-like]], [[Windows]]\n| programming_language   = [[Fortran]] and [[C (programming language)|C]], scripts in [[Python (programming language)|Python]], GUI uses [[PyQt]]\n| platform               = [[Personal computers]], [[Cluster (computing)|clusters]], [[supercomputers]]\n| genre                  = \n| license                = [[GNU General Public License]]\n| website                = Official English website: {{URL|code-saturne.org}}\n}}\n\n'''Code_Saturne''' is a general-purpose [[computational fluid dynamics]] free computer [[software suite|software package]]. Developed since 1997 at [[Électricité de France]] R&D, Code_Saturne is distributed under the [[GNU GPL]] licence.\nIt is based on a co-located [[Finite volume method|finite-volume]] approach that accepts meshes with any type of cell (tetrahedral, hexahedral, prismatic, pyramidal, polyhedral...) and any type of grid structure (unstructured, block structured, hybrid, conforming or with hanging nodes...).\n\nIts basic capabilities enable the handling of either incompressible or expandable flows with or without heat transfer and turbulence (mixing length, 2-equation models, v2f, [[Reynolds stresses|Reynolds stress models]], [[Large eddy simulation]]...).\nDedicated modules are available for specific physics such as [[thermal radiation|radiative heat transfer]], [[combustion]] (gas, coal, heavy fuel oil, ...), magneto-hydro dynamics, [[compressible flow]]s, [[Multiphase flow|two-phase flows]] ([[Lagrangian and Eulerian coordinates|Euler-Lagrange approach]] with two-way coupling), extensions to specific applications (e.g. for atmospheric environment).\n\n== Code Saturne install ==\n\nCode_Saturne, may be installed on a [[Linux]] or other [[Unix-like]] system by downloading and building it. No system files are changed, so administrator privileges are not required if the code is installed in a user's directory. Packages for Code_Saturne are also available on [[Debian]] and [[Ubuntu (operating system)|Ubuntu]]. Alternatively, CAE Linux (latest version [http://caelinux.com/CMS/index.php?option=com_content&view=article&id=40:new-release-caelinux-2011&catid=1:news&Itemid=29 CAE Linux 2011]), which is based on Ubuntu 10.04 LTS, includes Code_Saturne pre-installed.\n\nA port to [[Microsoft Windows|Windows]] systems, (built with [[Cygwin]]) is now also available.\n\n== Interoperability ==\n\nCode Saturne supports multiple mesh formats. The following formats, from open source or commercial tools, are currently supported by Code Saturne:\n\nSupported mesh input formats [http://code-saturne.org/cms/sites/default/files/user-3.0.pdf (source)]:\n* [http://www.distene.com/fr/create/simail.html SIMAIL] (NOPO) – (INRIA/Distene)\n* [[I-DEAS]] universal\n* [http://www.code-aster.org/outils/med/ MED]\n* [[CGNS]]\n* [http://www.ceisoftware.com/ EnSight] 6\n* [http://www.ceisoftware.com/ EnSight] Gold\n* [[ANSYS|GAMBIT]] neutral\n* [[Gmsh]]\n* [[CD-adapco#STAR-CCM+|STAR-CCM+]]\n\nSupported post-processing output formats\n* [http://www.ceisoftware.com/ EnSight] Gold\n* [http://www.code-aster.org/outils/med/ MED]\n* [[CGNS]]\n\n== Alternative software ==\n* [[Advanced Simulation Library]] (open source software AGPL)<ref>[http://asl.org.il/ Advanced Simulation Library Homepage]</ref>\n* [[ANSYS]] CFX (proprietary software)\n* [[ANSYS]] Fluent (proprietary software)\n* [[COMSOL Multiphysics]]\n* <span class=\"plainlinks\">[http://www.featool.com FEATool Multiphysics]</span><ref>[http://www.featool.com FEATool Multiphysics homepage]</ref>\n* [[Gerris (software)|Gerris Flow Solver]] (GPL)\n* [[OpenFOAM]] (GPL)\n* [http://www.palabos.org Palabos Flow Solver] (AGPL)\n* [[CD-adapco#STAR-CCM+|STAR-CCM+]] (proprietary software)\n* [[SU2 code]] (LGPL)\n\n== See also ==\n{{Portal|Free and open-source software}}\n* [[Salome (software)|SALOME]]\n\n==References==\n{{Reflist}}\n\n== External links ==\n* {{en icon}} [http://code-saturne.org Official English website]\n* {{fr icon}} [http://innovation.edf.com/recherche-et-communaute-scientifique/logiciels/code-saturne/presentation-45341.html Official french website]\n* {{fr icon}} [http://wiki.mandriva.com/fr/Code_Saturne Code Saturne Installation on Mandriva Linux]\n* {{en icon}} [http://research.edf.com/fichiers/fckeditor/Commun/Innovation/logiciels/code_saturne/CodeSaturneGeneral-2008-09-26.pdf Code_Saturne Overview (pdf, 2 pages)]\n* {{en icon}} [http://research.edf.com/fichiers/fckeditor/Commun/Innovation/logiciels/code_saturne/CodeSaturneOpenSrc-2008-09-26.pdf Overview of EDF's Open Source initiative (pdf, 2 pages)]\n* {{en icon}} code-saturne.blogspot.com : Independent user's Blog about SALOME, Code_Saturne, ParaView and Numerical Modelling\n* {{en icon}} [http://www.caelinux.com CAE Linux] : LiveDVD with Code_Saturne, ''[[Code_Aster]]'' and the Salomé platform\n* {{en icon}} [http://saturne.cfdtm.org Website at the University of Manchester]\n\n{{CAE software}}\n\n{{DISPLAYTITLE:Code_Saturne}}\n\n[[Category:Computational fluid dynamics]]\n[[Category:Free science software]]\n[[Category:Engineering software that uses Qt]]\n[[Category:Computer-aided design software for Linux]]\n[[Category:Computer-aided engineering software for Linux]]"
    },
    {
      "title": "Combustion models for CFD",
      "url": "https://en.wikipedia.org/wiki/Combustion_models_for_CFD",
      "text": "'''Combustion models for CFD''' refers to combustion models for [[computational fluid dynamics]]. [[Combustion]] is defined as a chemical reaction in which a hydrocarbon fuel reacts with an oxidant to form products, accompanied with the release of energy in the form of heat. Being the integral part of various engineering applications like: [[internal combustion engine]]s, [[aircraft engine]]s, [[rocket engine]]s, [[furnace]]s, and [[power station combustor]]s, combustion manifests itself as a wide domain during the design, analysis and performance characteristics stages of the above-mentioned applications.<ref name=\"one\">“An introduction to Computational Fluid Dynamics-- the finite volume method” H.K. Versteeg and W.Malalasekara Pearson Education limited.p.357</ref> With the added complexity of chemical kinetics and achieving reacting flow mixture environment, proper modeling physics has to be incorporated during [[Computational fluid dynamics|computational fluid dynamic (CFD)]] simulations of combustion. Hence the following discussion presents a general outline of the various adequate models incorporated with the Computational fluid dynamic code to model the process of combustion.<ref name=\"two\">An introduction to Computational Fluid Dynamics-- the finite volume method” H.K. Versteeg and W. Malalasekera Longman Group limited.p.210</ref>\n\n==Overview==\nComputational fluid dynamics modeling of combustion calls upon the proper selection and implementation of a model suitable to faithfully represent the complex physical and chemical phenomenon associated with any combustion process. The model should be competent enough to deliver information related to the species concentration, their volumetric generation or destruction rate and changes in the parameters of the system like enthalpy, temperature and mixture density. The model should be capable of solving the general transport equations for fluid flow and heat transfer as well as the additional equations of combustion chemistry and [[chemical kinetics]] incorporated into that as per the simulating environment desired<ref name=\"one\" />\n\n==Critical considerations in combustion phenomenon==\nThe major consideration during any general combustion process includes the mixing time scale and the reacting time scale elapsed for the process. The flame type and the type of mixing of flow streams of the constituents also have to be taken into account. Apart from that as far as the kinetic complexity of the reaction is concerned, the reaction proceeds in multiple steps and what appears as a simple one line reaction actually completes after a series of reactions.<ref name=\"one\" /><ref name=\"two\" /> Also the transport equations for mass fractions of all the species as well as the enthalpy generated during the reaction have to be solved. Hence even the simplest combustion reaction involves very tedious and rigorous calculation if all the intermediate steps of the combustion process, all transport equations and all flow equations have to be satisfied simultaneously. All these factors will have a significant effect on the computational speed and time of the simulation. But with proper simplifying assumptions Computational fluid dynamic modeling of combustion reaction can be done without substantial compromise on the accuracy and convergence of the solution.<ref name=\"two\" /> The basic models used for the same are covered in the following paragraphs.\n\n==Simple chemical reacting system model==\nThis model takes into consideration only the final concentration of species and takes into account only the global nature of combustion process where the reaction proceeds infinitely fast as a single step process without much stress on the detailed kinetics involved.<ref name=\"one\" /> The reactants are assumed to react in stoichiometric proportions. The model also deduces a linear relationship between the mass fractions of fuel, oxidant and the non dimensional variable mixture fraction.<ref name=\"two\" /> The model also takes into account an additional assumption that the mass diffusion coefficients of all species are equal.<ref name=\"six\">http://www.cham.co.uk/phoenics/d_polis/d_lecs/general/combust.htm#2</ref> Owing to this additional assumption the model only solves one extra partial differential equation for mixture fraction and after solving the transport equation for the mixture fraction the corresponding mass fractions for fuel and oxidant are calculated. This model can very well be applied to a combustion environment where laminar diffusion effects are dominant and the combustion proceeds via non premixed fuel and oxidant streams diffusing into each other giving rise to a laminar flame.<ref name=\"one\" />\n== Eddy break–up model ==\n{{main|Eddy break-up model for combustion}}\n[[File:Combustor-Temp-Plane.png|300px|right|thumb|Simulation of can combustor using eddy dissipation model.]]\n\nThis model is used when [[turbulent mixing]] of the constituents has to be taken into consideration. The k/Ɛ turbulent time scale is used to calculate the reaction rate. A comparison between the turbulent dissipation rates of the fuel, oxidant and products is done and the minimum amongst all is taken as the rate of the reaction. The transport equations for the mass fractions of the constituents are solved using this rate of reaction.<ref name=\"one\" /> Apart from this a mean enthalpy equation is also solved and temperature, density and viscosity are calculated accordingly. The model can also be implemented when finite rate kinetically controlled reaction is to be simulated. In such situation while deciding the rate of the reaction the Arrhenius kinetic rate expression is also taken into account and the rate of reaction is taken as minimum amongst the turbulent dissipation rates of all the constituents and the Arrhenius kinetic rate expression.<ref name=\"two\" /> Since turbulent mixing governs the characteristics of this model, there exists a limit to the quality of the combustion simulation depending upon the type of the turbulent model implemented to represent the flow. The model can also be modified to account for mixing of fine structures during the turbulent reaction. This modification of the model results in the eddy dissipation model which consider the mass fraction of fine structures in its calculations.<ref name=\"one\" />\n\n==Laminar flamelet model==\n{{main|Laminar flamelet model}}\nThis model approximates the turbulent flame as a series of laminar flamelet regions concentrated just around the stoichiometric surfaces of the reacting mixture.<ref name=\"one\" /> This model exploits the use of experimental data for determining relations between the variables considered like mass fraction, temperature etc. The nature and type of dependence of the variables is predicted through experimental data obtained during laminar diffusion flame experiment and laminar flamelet relationship is deduced based on the same. These relationships are then used to solve the transport equations for species mass fraction and mixture composition.<ref name=\"two\" /> The model can very well be implemented for situations where concentration of minor species in the combustion is to be computed like quantifying the generation of pollutants.<ref name=\"one\" /> A simple enhancement to the model results in the flamelet time scale model which takes finite rate kinetics effect into consideration. The flamelet time scale model produces steady laminar flamelet solution when reaction proceeds very fast and captures the finite rate effects when reaction chemistry is dominant.<ref name=\"three\">9-rao-rutland.pdf---“A Flamelet Time Scale combustion model for turbulent combustion in KIVA” Shrikanth Rao and Christopher J. Rutland( Engine Research Center, UW Madison.)</ref>\n\n==Presumed probability distribution function model==\nThis model takes into account a statistical approach for calculating the variables like species mass fractions, temperature and density while the mixture composition is calculated at the grids.<ref name=\"two\" /> Then these all variables are calculated as functions of the mixture fraction around a presumed probability distribution function.<ref name=\"one\" /><ref name=\"five\">Pope_NACM_91.pdf—“combustion modeling using probability density function methods” S.B.Pope.</ref> The model can produce satisfactory results for turbulent reactive flows where convection effects due to mean and fluctuating components of velocity are dominant.<ref name=\"four\">Pope_ACAC_97.pdf---“Turbulence Combustion Modelling: fluctuations and chemistry (advanced computation and analysis of combustion: 310-320)” S.B.Pope (Sibley School of Mechanical and Aerospace Engineering Cornell University,Ithaca NY).</ref> The model can be extended for adiabatic as well as non adiabatic conditions.\n\n== Conditional moment closure ==\n\nConditional moment closure (CMC) is an advanced combustion model. The basic idea is to model the chemical source based on [[Conditional expectation|conditional averages]]. The model was first introduced for non-premixed flows and hence the conditioning is done in the mixture fraction.<ref name=\"Cant_Mastorakos_2007\">Cant, R.S. & Mastorakos, E. ''An Introduction to Turbulent Reacting Flows''. Imperial College Press, London. 2007.</ref>\n\n==Other models==\nThe following are some of the other relevant models used for computational fluid dynamic modeling of combustion.\n\n* The [[chemical equilibrium model]]\n* The [[Flamelet generated manifold]] model\n* The [[flame surface density model]]\n* The [[large eddy simulation model]]\n\nThe chemical equilibrium model considers the effect of intermediate reactions during turbulent combustion.<ref name=\"one\" /> The concentration of species is calculated when the combustion reaction reaches equilibrium state. The species concentration is calculated as a function of mixture fraction by deploying certain equilibrium calculation programs available to serve the purpose. The conditional closure model solves the transport equations for the mean components of the flow properties without considering the fluctuating composition of the reaction mixture.<ref name=\"four\" />\n\n==References==\n<references />\n\n[[Category:Computational fluid dynamics]]\n[[Category:Combustion engineering]]"
    },
    {
      "title": "Computational aeroacoustics",
      "url": "https://en.wikipedia.org/wiki/Computational_aeroacoustics",
      "text": "{{lead too short|date=February 2013}}\n\n'''Computational aeroacoustics''' is a branch of [[aeroacoustics]] that aims to analyze the generation of [[noise]] by [[turbulence|turbulent]] flows through numerical methods.\n\n==History==\nThe origin of '''Computational Aeroacoustics''' can only very likely be dated back to the middle of the 1980s, with a publication of Hardin and Lamkin<ref>Hardin, J.C. and Lamkin, S. L., \"Aeroacoustic Computation of Cylinder Wake Flow,\" AIAA Journal, 22(1):51-57, 1984</ref> who claimed, that <blockquote>\n\"''[...] the field of computational fluid mechanics has been advancing rapidly in the past few years and now offers the hope that \"computational aeroacoustics,\" where noise is computed directly from a first principles determination of continuous velocity and vorticity fields, might be possible, [...]''\"\n</blockquote>\nLater in a publication 1986<ref>Hardin, J. C. and Lamkin, S. L., \"Computational aeroacoustics - Present status and future promise,\" IN: Aero- and hydro-acoustics; Proceedings of the Symposium, Ecully, France, July 3–6, 1985 (A87-13585 03-71). Berlin and New York, Springer-Verlag, 1986, p. 253-259.</ref> the same authors introduced the abbreviation CAA. The term was initially used for a low Mach number approach (Expansion of the acoustic perturbation field about an incompressible flow) as it is described under [[Computational Aeroacoustics#EIF|EIF]]. Later in the beginning 1990s the growing CAA community picked up the term and extensively used it for any kind of numerical method describing the noise radiation from an aeroacoustic source or the propagation of sound waves in an inhomogeneous flow field. Such numerical methods can be far field integration methods (e.g. FW-H<ref>Ffowcs Williams, \"The Noise from Turbulence Convected at High Speed\", ''Philosophical Transactions of the Royal Society'', Vol. A255, 1963, pp. 496-503</ref><ref>Ffowcs Williams, J. E., and Hawkings, D. L., \"Sound Generated by Turbulence and Surfaces in Arbitrary Motion\", ''Philosophical Transactions of the Royal Society'', Vol. A264, 1969, pp. 321-342</ref>)  as well as direct numerical methods optimized for the solutions (e.g.<ref>C. K. W. Tam, and J. C. Webb, \"Dispersion-Relation-Preserving Finite Difference Schemes for Computational Acoustics\", ''Journal of Computational Physics'', Vol. 107, 1993, pp. 262-281</ref>) of a mathematical model describing the aerodynamic noise generation and/or propagation. With the rapid development of the computational resources this field has undergone spectacular progress during the last three decades.\n\n==Methods==\n===Direct numerical simulation (DNS) Approach to CAA===\nThe compressible [[Navier-Stokes equation]] describes both the flow field, and the aerodynamically generated acoustic field. Thus both may be solved for directly. This requires very high numerical resolution due to the large differences in the length scale present between the acoustic variables and the flow variables. It is computationally very demanding and unsuitable for any commercial use.\n\n===Hybrid Approach===\nIn this approach the computational domain is split into different regions, such that the governing acoustic or flow field can be solved with different equations and numerical techniques. This would involve using two different numerical solvers, first a dedicated [[Computational fluid dynamics]] (CFD) tool and secondly an acoustic solver. The flow field is then used to calculate the acoustical sources. Both steady state (RANS, SNGR (Stochastic Noise Generation and Radiation), ...) and transient (DNS, LES, DES, URANS, ...) fluid field solutions can be used. These acoustical sources are provided to the second solver which calculates the acoustical propagation. Acoustic propagation can be calculated using one of the following methods :\n# Integral Methods\n## Lighthill's analogy\n## Kirchhoff integral\n## FW-H\n# LEE\n# Pseudospectral\n# EIF\n# APE\n\n====Integral methods====\nThere are multiple methods, which are based on a known solution of the acoustic wave equation to compute the acoustic far field of a sound source. Because a general solution for wave propagation in the free space can be written as an integral over all sources, these solutions are summarized as integral methods. The acoustic sources have to be known from some different source (e.g. a Finite Element simulation of a moving mechanical system or a fluid dynamic CFD simulation of the sources in a moving medium). The integral is taken over all sources at the retarded time (source time), which is the time at that the source is sent out the signal, which arrives now at a given observer position. Common to all integral methods is, that they cannot account for changes in the speed of sound or the average flow speed between source and observer position as they use a theoretical solution of the wave equation. When applying Lighthill's theory <ref name=\"Lighthill1952\">Lighthill, M. J., \"On Sound Generated Aerodynamically, i\", ''Proc. Roy. Soc. A'', Vol. 211, 1952, pp 564-587</ref><ref name=\"Lighthill1954\">Lighthill, M. J., \"On Sound Generated Aerodynamically, ii\", ''Proc. Roy. Soc. A'', Vol. 222, 1954, pp 1-32</ref> to the Navier Stokes equations of Fluid mechanics, one obtains volumetric sources, whereas the other two analogies provide the far field information based on a surface integral. Acoustic analogies can be very efficient and fast, as the known solution of the wave equation is used. One far away observer takes as long as one very close observer. Common for the application of all analogies is the integration over a large number of contributions, which can lead to additional numerical problems (addition/subtraction of many large numbers with result close to zero.) Furthermore, when applying an integral method, usually the source domain is limited somehow. While in theory the sources outside have to be zero, the application can not always fulfill this condition. Especially in connection with CFD simulations, this leads to large cut-off errors. By damping the source gradually to zero at the exit of  the domain or adding some additional terms to correct this end-effect, these cut-off errors can be minimized.\n\n=====Lighthill's analogy=====\nAlso called '[[Acoustic analogy|Acoustic Analogy]]'. To obtain Lighthill's aeroacoustic analogy the governing Navier-Stokes equations are rearranged. The left hand side is a wave operator, which is applied to the density perturbation or pressure perturbation respectively. The right hand side is identified as the acoustic sources in a fluid flow, then. As Lighthill's analogy follows directly from the Navier-Stokes equations without simplification, all sources are present. Some of the sources are then identified as turbulent or laminar noise. The far-field sound pressure is then given in terms of a volume integral over the domain containing the sound source. The source term always includes physical sources and such sources, which describe the propagation in an inhomogeneous medium.\n\nThe wave operator of Lighthill's analogy is limited to constant flow conditions outside the source zone. No variation of density, speed of sound and Mach number is allowed. Different mean flow conditions are identified as strong sources with opposite sign by the analogy, once an acoustic wave passes it. Part of the acoustic wave is removed by one source and a new wave is radiated to fix the different wave speed. This often leads very large volumes with strong sources. Several modifications to Lighthill's original theory have been proposed to account for the sound-flow interaction or other effects. To improve Lighthill's analogy different quantities inside the wave operator as well as different wave operators are considered by following analogies. All of them obtain modified source terms, which sometimes allow a more clear sight on the \"real\" sources. The acoustic analogies of Lilley,<ref>Lilley, G. M., \"On the noise from air jets\",AGARD CP 131, 13.1-13.12</ref> Pierce,<ref>Pierce, A. D., \"Wave equation for the sound in fluids with unsteady inhomogeneous flow\", J. Acoust. Soc. Am., 87:2292-2299, 1990</ref> Howe<ref>Howe, M. S., \"Contributions to the theory of aerodynamic sound, with application to excess jet noise and the theory of the flute\", J. Fluid Mech., 71:625-673, 1975</ref> and Möhring<ref>Mohring, W. A well posed acoustic analogy based on a moving acoustic medium. 2010, arXiv preprint arXiv:1009.3766.</ref> are only some examples for aeroacoustic analogies based on Lighthill's ideas. All acoustic analogies require a volume integration over a source term.\n\nThe major difficulty with the acoustic analogy, however, is that the sound source is not compact in supersonic flow. Errors could be encountered in calculating the sound field, unless the computational domain could be extended in the downstream direction beyond the location where the sound source has completely decayed. Furthermore, an accurate account of the retarded time-effect requires keeping a long record of the time-history of the converged solutions of the sound source, which again represents a storage problem. For realistic problems, the required storage can reach the order of 1 [[terabyte]] of data.\n\n=====Kirchhoff integral=====\n\n[[Gustav Kirchhoff|Kirchhoff]] and [[Hermann von Helmholtz|Helmholtz]] showed, that the radiation of sound from a limited source region can be described by enclosing this source region by a control surface - the so-called Kichhoff surface. Then the sound field inside or outside the surface, where no sources are allowed and the wave operator on the left hand side applies, can be produced as a superposition of monopoles and dipoles on the surface. The theory follows directly from the wave equation. The source strength of monopoles and dipoles on the surface can be calculated if the normal velocity (for monopoles) and the pressure (for dipoles) on the surface are known respectively. A modification of the method allows even to calculate the pressure on the surface based on the normal velocity only. The normal velocity could be given by a FE-simulation of a moving structure for instance. However, the modification to avid the acoustic pressure on the surface to be known leads to problems, when considering an enclosed volume at its resonant frequencies, which is a major issue of the implementations of their method. The Kirchhoff integral method finds for instance application in [[Boundary element method]]s (BEM). A non-zero flow velocity is accounted by considering a moving frame of reference with the outer flow speed, in which the acoustic wave propagation takes place. Repetitive applications of the method can account for obstacles. First the sound field on the surface of the obstacle is calculated and then the obstacle is introduced by adding sources on its surface to cancel the normal velocity on the surface of the obstacle. Variations of the average flow field (speed of sound, density and velocity) can be taken into account by a similar method (e.g. dual reciprocity BEM).\n\n=====FW-H=====\nThe integration method of [[John Ffowcs Williams|Ffowcs Williams]] and Hawkings is based on Lighthill's acoustic analogy. However, by some mathematical modifications under the assumption of a limited source region, which is enclosed by a control surface (FW-H surface), the volume integral is avoided. Surface integrals over monopole and dipole sources remain. Different from the Kirchhoff method, these sources follow directly from the Navier-Stokes equations through Lighthill's analogy. Sources outside the FW-H surface can be accounted by an additional volume integral over quadrupole sources following from the Lighthill Tensor. However, when considering the same assumptions as Kirchhoffs linear theory, the FW-H method equals the Kirchhoff method.\n\n====Linearized Euler Equations====\n\nConsidering small disturbances superimposed on a uniform mean flow of density <math>\\rho_0</math>, pressure <math>p_0</math> and velocity on x-axis <math>u_0</math>, the Euler equations for a two dimensional model is presented as:\n\n:<math>\\frac{\\partial\\mathbf{U}}{\\partial t} + \\frac{\\partial\\mathbf{F}}{\\partial x} +\n\\frac{\\partial\\mathbf{G}}{\\partial y} = \\mathbf{S}</math>,\n\nwhere\n\n:<math> \\mathbf{U} = \n  \\begin{bmatrix}\n    \\rho \\\\\n    u    \\\\\n    v    \\\\\n    p \\\\\n  \\end{bmatrix} \\ , \\ \\mathbf{F} =\n  \\begin{bmatrix} \n    \\rho_0 u + \\rho u_0\\\\\n    u_0 u + p/\\rho_0  \\\\\n    u_0 v  \\\\\n    u_0 p + \\gamma p_0 u  \\\\\n  \\end{bmatrix} \\ , \\ \\mathbf{G} =\n  \\begin{bmatrix} \n    \\rho_0 v\\\\\n    0  \\\\\n    p/\\rho_0  \\\\\n    \\gamma p_0 v \\\\\n  \\end{bmatrix},\n</math>\n\nwhere <math>\\rho</math>, <math>u</math>, <math>v</math> and <math>p</math> are the acoustic field variables, <math>\\gamma</math> the ratio of specific heats <math>c_p/c_v</math>, for air at 20&nbsp;°C <math>c_p/c_v = 1.4</math>, and the source term <math>\\mathbf{S}</math> on the right-side represents distributed unsteady sources. \nThe application of LEE can be found in engine noise studies.<ref>X. X. Chen, X. Huang and X. Zhang, \"Sound Radiation from a Bypass Duct with Bifurcations\", AIAA Journal, Vol. 47, No. 2, 2009. pp.429-436.</ref>\n\nFor high [[Mach number]] flows in compressible regimes, the acoustic propagation may be influenced by non-linearities and the LEE may no longer be the appropriate mathematical model.\n\n====Pseudospectral====\nA Fourier pseudospectral time-domain method can be applied to wave propagation problems pertinent to computational aeroacoustics. The original algorithm of the Fourier pseudo spectral time domain method works for periodical problems without the interaction with physical boundaries. A slip wall boundary condition, combined with buffer zone technique to solve some non-periodical aeroacoustic problems has been proposed.<ref>X. Huang and X. Zhang, \"A Fourier Pseudospectral Method for Some Computational Aeroacoustics Problems\", International Journal of Aeroacoustics, Vol 5, No 3, 2006. pp.279-294.</ref>  Compared to other computational methods, pseudospectral method is preferred for its high-order accuracy.\n\n====EIF====\nExpansion about Incompressible Flow\n\n====APE====\nAcoustic Perturbation Equations\n\nRefer to the paper \"Acoustic Perturbation Equations Based on Flow Decomposition via Source Filtering\" by R.Ewert and W.Schroder.<ref>{{Cite journal|last=Ewert|first=R.|last2=Schröder|first2=W.|date=July 2003|title=Acoustic perturbation equations based on flow decomposition via source filtering|url=https://linkinghub.elsevier.com/retrieve/pii/S0021999103001682|journal=Journal of Computational Physics|volume=188|issue=2|pages=365–398|doi=10.1016/S0021-9991(03)00168-2}}</ref>\n\n== See also ==\n* [[Aeroacoustics]]\n* [[Acoustic theory]]\n\n==References==\n{{Reflist|30em}}\n\n==Sources==\n*Lighthill, M. J., \"A General Introduction to Aeroacoustics and Atmospheric Sounds\", '' ICASE Report 92-52, NASA Langley Research Centre, Hampton, VA'', 1992\n\n==External links==\n*[http://www.grc.nasa.gov/WWW/microbus/cese/aeroex.html Examples in Aeroacoustics from NASA]\n*[http://acoustique.ec-lyon.fr/caawebuk.php Computational Aeroacoustics at the Ecole Centrale de Lyon]\n*[http://www.mech.kuleuven.be/mod/aeroacoustics/ Computational Aeroacoustics at the University of Leuven]\n*[http://www.cfd.tu-berlin.de/index.php?sec=research&subsec=acoustics&lang=english Computational Aeroacoustics at Technische Universität Berlin]\n*[https://web.archive.org/web/20110719095633/http://www.cfd.tu-berlin.de/Lehre/CAA/script/CAA_2008.pdf A CAA lecture script of Technische Universität Berlin]\n\n[[Category:Computational fluid dynamics]]\n[[Category:Acoustics]]\n[[Category:Aerodynamics]]\n[[Category:Mechanics]]\n[[Category:Computational fields of study]]"
    },
    {
      "title": "Computational Fluid Dynamics for Phase Change Materials",
      "url": "https://en.wikipedia.org/wiki/Computational_Fluid_Dynamics_for_Phase_Change_Materials",
      "text": "{{Orphan|date=December 2014}}\n\n[[Computational fluid dynamics|Computational Fluid Dynamics (CFD)]] modeling and simulation for [[Phase-change material|phase change materials (PCMs)]] is a technique to analyze the performance and behavior of PCMs. The CFD models have been successful in studying and analyzing the air quality, natural ventilation and stratified ventilation, air flow initiated by buoyancy forces and temperature space for the systems integrated with PCMs. Simple shapes like flat plates, cylinders or annular tubes,fins, macro- and micro-encapsulations with containers of different shape are often modeled in CFD software's to study.\n\nTypically the CFD models generally include [[Reynolds-averaged Navier–Stokes equations|Reynold’s Averaged Navier-Stokes equation (RANS)]] modeling and [[Large eddy simulation|Large Eddy Simulation (LES)]]. Conservation equations of mass, momentum and energy [[Navier–Stokes equations|(Navier – Stokes)]] are linearised, discretised, and applied to finite volumes to obtain a detailed solution for field distributions of air pressure, velocity and temperature for both indoor spaces integrated with PCMs.\n\n==Governing Equations==\n\n===Mass Equation===\n\n:<math> {\\partial \\rho \\over \\partial t} + \\nabla \\cdot (\\rho \\mathbf{u}) = S_m</math>\n\nwhere\n*''ρ'' is fluid [[density]],\n*''t'' is time,\n*'''u''' is the [[flow velocity]] [[vector field]]\n*'''S_m''' is a Constant.\n\n===Energy Equation===\n:<math>\n\\begin{align}\n\n{\\partial(\\rho{\\mathbf H})\\over\\partial t}+\n{\\partial \\over\\partial x_j}{(\\rho*u_j*c_p*{\\mathbf T})}= {\\partial \\over\\partial x_j} (\\lambda \\cdot {\\partial{\\mathbf T}\\over\\partial x_j})+\\mathbf{S_E}\n\n\\end{align}\n</math>\n\nwhere\n*''ρ'' is the fluid [[mass density]],\n*'''S_E''' is the source term.\n\n===Navier Stokes equation===\n<math>\\rho\\left(\\frac{\\partial u_i}{\\partial t}+u_j\\frac{\\partial u_i}{\\partial x_j} \\right)=-\\frac{\\partial p}{\\partial x_i}+\\mu\\frac{\\partial^2 u_i}{\\partial x_j\\partial x_j}+f_i </math>\n\nHere '''f''' represents \"other\" [[body force]]s (per unit volume), such as [[gravity]] or [[centrifugal force]].  The [[shear stress]] term <math>\\nabla \\cdot \\boldsymbol{\\mathsf{T}}</math> becomes <math>\\mu \\nabla^2 \\mathbf{v}</math>, where <math>\\nabla^2</math> is the [[vector Laplacian]].\n\n=== Boussinesq eddy-viscosity approximation ===\n:<math>-\\overline{\\upsilon_i^\\prime \\upsilon_j^\\prime} = 2\\nu_tS_{ij}-\\frac{2}{3}K\\delta_{ij}</math>\nwhere\n*<math>S_{ij}</math> is the [[Reynolds-averaged Navier–Stokes equations#Derivation of RANS equations|mean rate of strain tensor]]\n*<math>\\nu_t</math> is the turbulence eddy viscosity\n*<math>K = \\frac{1}{2}\\overline{\\upsilon_i' \\upsilon_i'}</math> is the [[turbulence kinetic energy]]\n*and <math>\\delta_{ij}</math> is the [[Kronecker delta]].\n\n==Assumptions==\ncommonly used assumptions are\n*Incompressible fluid,\n*Boussinesq approximation (density is considered constant, except in the gravity forces term).\n*Constant thermo-physical properties (properties of solid and liquid states are assumed to be equal)\n\n==Phase Change Model==\nTwo main thermal characteristics of phase change are the enthalpy-temperature relationship and temperature hysteresis. PCMs tend to have varying enthalpy temperature relationships due to the fact that they are blends of different materials, but pure PCMs have a more localized relationship, which can be approximated by single values for the enthalpy and phase change temperature.\n\nHysteresis is the phenomenon which causes the PCM to melt and freezes in different temperature ranges and with different enthalpies,which results in a different temperature-enthalpy curve for melting and freezing. Hysteresis is related to the chemical and kinetic properties of the material.\n\nThe commonly used enthalpy-porosity model in commercial CFD codes assumes, a linear enthalpy-temperature relationship and ignores hysteresis.[8]\n\nThe alternate is to use enthalpy-porosity method. When used to simulate PCM sails and a PCM plate-fin unit it produce reasonable temperature prediction in global space temperature terms. However there are inaccuracies in transient simulations where time dependent PCM and local wall and air temperatures are of interest. This is over come by use of source terms that considers hysteresis and varying enthalpy-temperature relationship. [9][10]\n\n[[CFD-DEM model]] are also used sometimes. Phase motion of discrete solids or particles is obtained by the Discrete Element Method (DEM) which applies Newton's laws of motion to every particle and the flow of continuum fluid is described by the local averaged Navier–Stokes equations that can be solved by the traditional Computational Fluid Dynamics (CFD).[http://www.cfdem.com/ CFDEMcoupling (DCS Computing GmbH)] is one such open source toolbox for CFD-DEM coupling.\n==Process==\nThe Governing equations are discretized using an explicit Finite Volume Method. The velocity-pressure coupling is resolved by adopting a Fractional Step Method. The adoption of the enthalpy method allows working with a fixed grid instead of an interface tracking method.\n\nThe momentum source term intended to model the presence of solid is only needed in the control volumes that contain solid and liquid, not in the pure solid containing volumes.\n\nThe final form of the source term coefficient('''S''')depends on the approximation adopted for the behavior of the flow in the “mushy zone” (where mixed solid and liquid states are present). However, in the case of constant phase change temperature, the solid-liquid interface should be of infinitesimal width (although it cannot be thinner than one control volume width in our simulations); therefore,the formulation used for the source term is not very important in a physical sense, as long as it manages to bring the velocity to zero in mostly solid control volumes and to vanish if the volume contains pure liquid.[11]\n\n== Applications ==\n*'''CFD applications for latent thermal energy storage in PCM'''\nThe various CFD codes[1-3]  has been employed for the modeling and simulation of the PCM system to understand the heat transfer mechanism, solidification and melting process, distribution of temperature profile and prediction of the air flow. Various commercial packages have been coupled with the CFD analysis to appreciate the feasibility of evaluating the behavior of PCM integrated system.\n\n*'''CFD modeling in PCM in mobilized thermal energy storage'''\nThe simulated heat transfer behavior of the PCM in Mobilized Thermal Energy Storage, during the charging process can be successfully conducted by CFD modeling [4] The Volume-Of-Fluid(VOF) method is employed to solve for the temperature distribution in the multiphase, 2-dimensional pressure-based model. It accounts for the heat transfer mechanism, melting time, and the influence of the structure in charging process using Fluent 12.1. The governing equations employed are mass conversion and continuity equations.\n\n*'''CFD analysis on selection of geometry and type of PCM to be used'''\nIntegral, quasi-1D calculations have been reported [5] mainly for conduction-dominated problem using CFD simulation. It was reported that out of three geometries (cubic, cylindrical and spherical), the spherical capsule will have the maximum heat for the heat transfer fluid. Also it is concluded that salt hydrates based PCMs are the better choice over organic PCMs.\n\n*'''CFD analysis on PCM in shell and tube latent thermal heat storage system'''\n\nThe systems are developed in such manner that phase change materials are in the shell portion of the module and passage for the flow of air through the tubes. Conjugate steady state CFD heat transfer analysis has been carried out [6] to analyze the flow and temperature variation of heat transfer fluid in the system. It paves the way for selection and assessment of the geometrical and flow parameters, PCM solidification characteristics for the given boundary conditions\n\nThe comparative analysis, to further enhance the effectiveness of shell and tube PCMs has also been accomplished via CFD analysis[7]. Various CFD models with different configuration such as pins embedded on a tube with heat transfer fluid (HTF) flowing in it, with PCM surrounding the tube, fins embedded instead of pins and different configurations of fins on the tube are analyzed, by employing ANSYS code.\n\n==References==\n*[1] N. Tay, F. Bruno, M. Belusko. Experimental validation of a CFD model for tubes in a phase change thermal energy storage system. International Journal of Heat and Mass Transfer. 55 (2012) 574-85.\n*[2] G. Zhou, Y. Zhang, Q. Zhang, K. Lin, H. Di. Performance of a hybrid heating system with thermal storage using shape-stabilized phase-change material plates. Applied Energy. 84 (2007) 1068-77.\n*[3] C. Arkar, S. Medved. Influence of accuracy of thermal property data of a phase change material on the result of a numerical model of a packed bed latent heat storage with spheres. Thermochimica Acta. 438 (2005) 192-201.\n*[4] A. Hesaraki, J. Yan, H. Li. CFD modeling of heat charging process in a direct-contact container: for mobilized thermal energy storage. LAP LAMBERT Academic Publishing2012.\n*[5] E.B. Retterstøl. Thermal energy storage for environmental energy supply.  (2012).\n*[6] V. Antony Aroul Raj, R. Velraj. Heat transfer and pressure drop studies on a PCM-heat exchanger module for free cooling applications. International Journal of Thermal Sciences. 50 (2011) 1573-82.\n*[7] N. Tay, F. Bruno, M. Belusko. Comparison of pinned and finned tubes in a phase change thermal energy storage system using CFD. Applied Energy. 104 (2013) 79-86.\n*[8]Mehling H, Cabeza LF, Heat and cold storage with PCM. 1st Ed. Springer-Verlag Heidelberg; 2008\n*[9]Ye WB, Zhu DS, Wang N. Numerical simulation on phase-change thermal storage/ release in a plate-fin unit, Applied Thermal Engineering 31 (2011), pp.&nbsp;3871–3884\n*[10]Gowreesunker BL, Tassou SA, Kolokotroni M. Improved simulation of phase change processes in applications where conduction is the dominant heat transfer mode, Energy and Buildings 47 (2012),pp.&nbsp;353–359\n*[11]P. A. Galione and et al.,NUMERICAL SIMULATIONS OFTHERMAL ENERGY STORAGE SYSTEMS WITH PHASE CHANGE MATERIALS\n\n\n\n[[Category:Computational fluid dynamics]]\n[[Category:Phase transitions]]"
    },
    {
      "title": "CONSELF",
      "url": "https://en.wikipedia.org/wiki/CONSELF",
      "text": "{{Infobox software\n| name                   = CONSELF\n| logo                   = LOGOConself.png\n| logo alt               = \n| screenshot             = ConselfScreenshot.png\n| screenshot alt         = \n| caption                = \n| collapsible            = \n| author                 = \n| developer              = CONSELF SRL\n| released               = {{Start date and age|2015}}\n| discontinued           = \n| latest release version = \n| latest release date    = <!-- {{Start date and age|YYYY|MM|DD|df=yes/no}} -->\n| latest preview version = \n| latest preview date    = <!-- {{Start date and age|YYYY|MM|DD|df=yes/no}} -->\n| programming language   = \n| operating system       = \n| platform               = Web browser\n| size                   = \n| language               = \n| language count         = <!-- Number only -->\n| language footnote      = \n| genre                  = [[Computer-aided engineering]]\n| license                = \n| alexa                  = \n| website                = https://conself.com/\n| standard               = \n| AsOf                   = \n}}\n\n'''CONSELF''' is a [[computer-aided engineering]] (CAE) platform used by engineers for design purposes. The platform, which highly relies on [[cloud computing]], is developed by CONSELF SRL since its first release in October 2015.<ref>{{Cite web|url=https://www.prurgent.com/2015-10-14/pressrelease396411.htm|title=CONSELF™ Computational Fluid Dynamics solution now available directly from your browser!|last=|first=|date=October 2015|website=prurgent.com|archive-url=|archive-date=|dead-url=|access-date=}}</ref> In March 2016 a new release of the platform defined guided workflows for the users<ref>{{Cite web|url=https://www.prurgent.com/2016-03-03/pressrelease404901.htm|title=CONSELF® Cloud CFD v 2.0 released|last=|first=|date=March 2016|website=prurgent.com|archive-url=|archive-date=|dead-url=|access-date=}}</ref> with focus on turbomachinery, fire scenarios and flows with dispersed solid particles.\nThrough the platform it is possible to run both [[Computational fluid dynamics|Computational Fluid Dynamics]]<ref>{{cite web|url=https://ilpositivismo.com/conself-fluidodinamica-computazionale/|title=CONSELF: la fluidodinamica diventa user-friendly|last=|first=|publisher=ilpositivismo.com|date=4 March 2016|access-date=|language=Italian|trans-title=CONSELF: fluid-dynamics becomes user-friendly}}</ref> and [[Finite Element Analysis]].<ref>{{Cite web|url=http://www.eurekamagazine.co.uk/design-engineering-news/conself-introduces-pay-per-use-cloud-simulation-platform/149000/|title=CONSELF introduces 'pay-per-use' cloud simulation platform|last=Austin-Morgan|first=Tom|date=December 2016|website=eurekamagazine.co.uk|archive-url=|archive-date=|dead-url=|access-date=}}</ref> Among the solvers and libraries used by CONSELF platform, a number of [[open-source software|open-source]] technologies are included, such as:\n\n* [[Finite element method|FEA]]: [[Code_Aster]]\n* [[Computational fluid dynamics|CFD]]:  [[OpenFOAM]]\n\nThe accuracy of the application is guaranteed by a close cooperation with Italian universities<ref>{{cite journal |last1=Giovagnorio |first1=Ilaria |last2= |first2= |date=July 2017 |title=The environmental elements of foundations in Roman cities: A theory of the architect Gaetano Vinaccia |url=https://doi.org/10.1016/j.scs.2017.03.002 |journal=Sustainable Cities and Society |volume=32 |issue= |pages=42–55 |doi= |access-date= }}</ref> and production of academic papers and research studies. Because of its level of innovation and thanks to the high number of industrial applications, the platform has been rewarded in Italy by national industrial association [[General Confederation of Italian Industry|CONFINDUSTRIA]].<ref>{{cite web|url=http://www.confindustria.pd.it/confindustria/padova/gate.nsf/istituzionale/documento?openform&id=F266FF7C8D1F42F3C1257E6C004A0210|title=Rebound: vince Conself, galleria del vento virtuale per la progettazione industriale.|publisher=confindustria.pd.it|last=Sanseverinati|first=Sandro|date=17 June 2015|access-date=|language=Italian|trans-title=Rebound: CONSELF wins, virtual wind tunnel for industrial design}}</ref><ref>{{cite web|url=http://mattinopadova.gelocal.it/padova/cronaca/2015/06/17/news/conself-vince-con-una-galleria-del-vento-1.11632152|title=Conself vince con una galleria del vento|last=|first=|date=17 June 2015|publisher=mattinopadova.it|access-date=|language=Italian|trans-title=Conself wins thanks to its wind tunnel}}</ref><ref>{{cite web|url=http://barbaraganz.blog.ilsole24ore.com/2015/06/17/startup-che-puntano-dritte-allindustria-a-padova-vince-la-galleria-del-vento-virtuale/|title=Startup che puntano dritte all’industria: a Padova vince la galleria del vento virtuale|publisher=ilsole24ore.com|last=Ganz|first=Barbara|date=17 June 2015|access-date=|language=Italian|trans-title=Startup towards the heart of industries: in Padua wins the virtual wind tunnel}}</ref>\n\n== Features ==\n\nThe simulation platform is currently capable of running both CFD and FEA simulations, using hardware resources provided on a pay-per-use basis. Going into the details of the simulation capabilities and, considering the two major operative fields, CONSELF gives the following features:\n\n* '''[[Mesh generation]]'''\n** Tetrahedral and hexahedral meshing algorithms\n** [[Boundary layer]] definition for CFD analysis\n* '''Finite Element Analysis solvers'''\n** Single body simulation\n** Static analysis<ref>{{Cite web|url=https://conself.com/blog/stress-analysis-static-linear-elastic-simulations/|title=Stress static analysis|last=|first=|date=May 2016|website=|archive-url=|archive-date=|dead-url=|access-date=}}</ref>\n** [[Modal analysis]]<ref>{{Cite web|url=http://www.engineering.com/DesignSoftware/DesignSoftwareArticles/ArticleID/15012/CONSELF-Cloud-Simulation-29-Release-Offers-FEA-and-CFD-in-a-Browser.aspx|title=CONSELF Cloud Simulation 2.9 Release Offers FEA and CFD in a Browser|last=|first=|date=June 2017|website=engineering.com|archive-url=|archive-date=|dead-url=|access-date=}}</ref>\n** Isotropic linear elastic material model\n** Geometrical non-linear behaviour (large-displacements)<ref>{{Cite web|url=https://conself.com/blog/mechanical-model-in-fem-analysis-what-should-i-choose/|title=Large displacement|last=|first=|date=July 2017|website=|archive-url=|archive-date=|dead-url=|access-date=}}</ref>\n* '''Computational Fluid Dynamics solvers'''\n** Incompressible/Compressible single material flow\n** Multiphase non compressible flows<ref>{{Cite web|url=https://conself.com/blog/v2-5-0-release-note/|title=Multiphase solver|last=|first=|date=August 2016|website=|archive-url=|archive-date=|dead-url=|access-date=}}</ref>\n** Passive scalar transport for [[HVAC]]\n** Single Reference Frame (SRF) simulation for [[Turbomachinery]]<ref>{{Cite web|url=https://conself.com/blog/v2-5-0-release-note/|title=SRF Turbomachinery App|last=|first=|date=August 2016|website=|archive-url=|archive-date=|dead-url=|access-date=}}</ref>\n** Flow with particles<ref>{{Cite web|url=https://conself.com/blog/v2-0-0-release-note/|title=Flow with particles App|last=|first=|date=March 2015|website=|archive-url=|archive-date=|dead-url=|access-date=}}</ref>\n\n== File format ==\nCONSELF is currently able to interact with a number of 3D modelling generated file formats such as: [[ISO 10303-21|STEP]], [[IGES]], [[STL (file format)|STL]] formats. In addition, the geometry can be directly imported from their partner CAD platform, namely [[Onshape]].<ref>{{Cite web|url=https://www.onshape.com/cad-blog/onshape-partner-spotlight-conself|title=ONSHAPE PARTNER SPOTLIGHT: CONSELF PROVIDES CFD ANALYSIS IN A WEB BROWSER|last=|first=|date=September 2016|website=|archive-url=|archive-date=|dead-url=|access-date=}}</ref>\nAs output files CONSELF is 100% compatible with opensource viewer [[ParaView]].\n\n== References ==\n{{reflist}}\n\n[[Category:Cloud platforms]]\n[[Category:Computational fluid dynamics]]\n[[Category:Finite element method]]\n[[Category:Solid mechanics]]\n[[Category:Computer-aided engineering software for Linux]]\n[[Category:Computer-aided engineering software]]\n[[Category:Finite element software]]\n[[Category:Fluid dynamics]]\n[[Category:Simulation software]]"
    },
    {
      "title": "Coolfluid",
      "url": "https://en.wikipedia.org/wiki/Coolfluid",
      "text": "{{Infobox Software\n| name                   = COOLFluiD\n| logo                   = [[Image:coolfluid_logo.png|150px]]\n| screenshot             = \n| caption                = \n| author                 = \n| developer              = von Karman Institute and others\n| released               = \n| latest release version = 2014.9\n| latest release date    = 23 09 2014\n| operating system       = [[Unix]]/[[Linux]]/[[Microsoft Windows|Windows]]/[[Mac OS X]]\n| genre                  = \n| license                = [LGPLv3]\n| website                = [https://github.com/andrealani/COOLFluiD/wiki COOLFluiD on GitHub]\n}}\n\n'''COOLFluiD''' is a component based scientific computing environment that handles [[High performance computing|high-performance computing]] problems with focus on complex [[computational fluid dynamics]] (CFD) involving [[multiphysics]] phenomena.\n\nIt features a ''Collaborative Simulation Environment'' where multiple physical models and multiple discretization  methods are implemented as components within the environment. These components form a [[component-based]] architecture where they serve as building blocks of customized applications.\n\n==Capabilities==\n\n'''Kernel'''\n* Component based architecture\n* Dynamic loading of external [[plugins]]\n* Interpolation and integration on arbitrary elements\n* Transparent MPI parallelization \n* Parallel writing and reading from solution files\n* Support for XML case files\n* Unstructured 2D/3D hybrid meshes in many formats\n\n'''Numerical Methods'''\n* Cell Center [[finite volume]] solver\n* [[Residual (numerical analysis)|Residual]] distribution solver\n* High order [[finite element]] solver\n* Spectral Finite Volume solver\n* Spectral Finite Difference solver\n* [[Discontinuous Galerkin method]] solver\n* Residual Distribution solver (dedicated to [[incompressible flow]])\n\n'''Physical Models'''\n* Compressible Euler and [[Navier-Stokes]] Equations\n** Perfect and Real Gas (from low Mach to hypersonic)\n** Chemical reacting mixtures\n** Thermal and Chemical non-equilibrium flows\n* Incompressible [[Navier-Stokes]]\n* [[Computational aeroacoustics#Linearized_Euler_Equations |Linearized Euler]] (for [[Aeroacoustics]])\n* Ideal [[Magnetohydrodynamics]]\n* Structural Elasticity\n* Multi-ion [[Electrochemistry]]\n* [[Heat transfer]]\n* Multiple Scalar Advection models\n\n==External links==\n\n* [https://github.com/andrealani/COOLFluiD/wiki New COOLFluiD website on GitHub]\n* [http://www.vki.ac.be VKI] is the research institute responsible for the majority of the developments.\n\n[[Category:Computational fluid dynamics]]\n[[Category:Fluid dynamics]]"
    },
    {
      "title": "CTAG",
      "url": "https://en.wikipedia.org/wiki/CTAG",
      "text": "'''CTAG''' is a [[computational fluid dynamics]] model for the behaviour of [[air pollutants]] on and near roadways.<ref>{{cite web|title=Comprehensive Turbulent Aerosol Dynamics and Gas Chemistry Model (CTAG)|publisher=Cornell University}}</ref>\n\nCTAG stands for Comprehensive Turbulent Aerosol Dynamics and Gas Chemistry, is an environmental [[turbulent]] reacting flow [[Scientific modelling|model]] designed to simulate the transport and transformation of air pollutants in complex environments. It is developed by the Energy and Environmental Research Laboratory ( EERL) at [[Cornell University]].\n\nCTAG’s [[Plume (hydrodynamics)|plume]] transport model designed for on-road and near-road applications is called CFD-VIT-RIT.<ref>{{cite journal|doi=10.1021/es9014844 | volume=43 | title=Modeling Near-Road Air Quality Using a Computational Fluid Dynamics Model, CFD-VIT-RIT | year=2009 | journal=Environmental Science & Technology | pages=7778–7783 | last1 = Wang | first1 = Y. Jason | last2 = Zhang | first2 = K. Max}}</ref> CTAG has been applied to investigate the plume dispersion near different highway configurations, chemical evolution of [[nitrogen oxides]] near roadways,<ref>{{cite journal|doi=10.1016/j.atmosenv.2010.09.050 | volume=45 | title=Modeling the chemical evolution of nitrogen oxides near roadways | year=2011 | journal=Atmospheric Environment | pages=43–52 | last1 = Jason Wang | first1 = Yan | last2 = DenBleyker | first2 = Allison | last3 = McDonald-Buller | first3 = Elena | last4 = Allen | first4 = David | last5 = Zhang | first5 = K. Max}}</ref> spatial variations of air pollutants in highway-building environments,<ref>{{cite journal | last1 = Tong | first1 = Z. | last2 = Wang | first2 = Y. | last3 = Patel | first3 = M | last4 = Kinney | first4 = P. | last5 = Chillrud | first5 = S | last6 = Zhang | first6 = K. M. | year = 2012 | title = Modeling roadside black carbon concentrations in a highway-building environment | journal = Environmental Science & Technology | volume = 46 | issue = 1| pages = 312–319 | doi=10.1021/es201938v| pmc = 3258341 }}</ref> and effects of vegetation barriers on near-road air quality.<ref>{{cite journal | last1 = Steffens | first1 = J. T. | last2 = Wang | first2 = Y. | last3 = Zhang | first3 = K. M. | year = 2012 | title = Exploration of effects of a vegetation barrier on the dispersion of pollutants in a near road environment | journal = Atmospheric Environment | volume = 50 | issue = | pages = 120–128 | doi=10.1016/j.atmosenv.2011.12.051}}</ref>\n\n== References ==\n{{reflist}}\n\n==External links==\n* [http://energy.mae.cornell.edu/ EERL]\n\n[[Category:Computational fluid dynamics]]"
    },
    {
      "title": "Detached eddy simulation",
      "url": "https://en.wikipedia.org/wiki/Detached_eddy_simulation",
      "text": "'''Detached eddy simulation''' ('''DES''') is a modification of a [[Reynolds-averaged Navier–Stokes equations|RANS]] model in which the model switches to a subgrid scale formulation in regions fine enough for [[Large eddy simulation|LES]] calculations. Regions near [[solid]] boundaries and where the [[turbulent]] length scale is less than the maximum grid dimension are assigned the [[Reynolds-averaged Navier–Stokes equations|RANS]] mode of solution. As the turbulent length scale exceeds the grid dimension, the regions are solved using the LES mode. Therefore, the grid resolution is not as demanding as pure LES, thereby considerably cutting down the cost of the [[supercomputer|computation]]. Though DES was initially formulated for the [[Spalart–Allmaras turbulence model|Spalart-Allmaras model]],<ref>{{cite conference | last = Spalart| first = P.R. | title = Comments on the feasibility of LES for wing and on a hybrid RANS/LES approach | conference = 1st ASOSR CONFERENCE on DNS/LES. Arlington, TX |date=August 1997 }}</ref> it can be implemented with other RANS models (Strelets, 2001), by appropriately modifying the length scale which is explicitly or implicitly involved in the RANS model. So while Spalart-Allmaras model based DES acts as LES with a wall model, DES based on other models (like two equation models) behave as a hybrid RANS-LES model. Grid generation is more complicated than for a simple RANS or LES case due to the RANS-LES switch. DES is a non-zonal approach and provides a single smooth [[velocity]] field across the RANS and the LES regions of the solution.<ref>[http://arc.aiaa.org/doi/abs/10.2514/6.2003-269 Kotapati, R. B and Squires, K. D. “Prediction of a prolate spheroid undergoing a pitch up maneuver,” In AIAA Paper 2003-0269 41st Aerospace Sciences Meeting and Exhibit, January, 2003.]</ref><ref>[http://arc.aiaa.org/doi/abs/10.2514/6.2004-259 Kotapati, R. B, Squires, K. D, and Forsythe, J. R. “Prediction of the Flow over an Airfoil at Maximum Lift”, In AIAA paper 2004- 0259 42nd Aerospace Sciences Meeting and Exhibit, January 2004.]</ref>\n\n==References==\n{{reflist}}\n\n==External links==\n*[http://www.cfd-online.com/Wiki/Detached_eddy_simulation_(DES) CFD wiki article on DES technique]\n* [http://www.totalsimulation.co.uk/wp/automotive-cfd-optimisation/ Article comparing RANS and DES for Automotive Applications.]\n\n[[Category:Computational fluid dynamics]]\n[[Category:Turbulence models]]"
    },
    {
      "title": "Dissipative particle dynamics",
      "url": "https://en.wikipedia.org/wiki/Dissipative_particle_dynamics",
      "text": "'''Dissipative particle dynamics''' ('''DPD''') is a stochastic simulation technique for simulating the dynamic and rheological properties of simple and complex fluids. It was initially devised by Hoogerbrugge and Koelman<ref name=\"HoogerbruggeKoelman1992\">{{cite journal|last1=Hoogerbrugge|first1=P. J|last2=Koelman|first2=J. M. V. A|title=Simulating Microscopic Hydrodynamic Phenomena with Dissipative Particle Dynamics|journal=Europhysics Letters (EPL)|volume=19|issue=3|year=1992|pages=155–160|issn=0295-5075|doi=10.1209/0295-5075/19/3/001}}</ref><ref name=\"KoelmanHoogerbrugge1993\">{{cite journal|last1=Koelman|first1=J. M. V. A|last2=Hoogerbrugge|first2=P. J|title=Dynamic Simulations of Hard-Sphere Suspensions Under Steady Shear|journal=Europhysics Letters (EPL)|volume=21|issue=3|year=1993|pages=363–368|issn=0295-5075|doi=10.1209/0295-5075/21/3/018}}</ref> to avoid the lattice artifacts of the so-called [[Cellular automaton|lattice gas automata]] and to tackle hydrodynamic time and space scales beyond those available with [[molecular dynamics]] (MD). It was subsequently reformulated and slightly modified by [[P. Español]]<ref name=\"EspañolWarren1995\">{{cite journal|last1=Español|first1=P|last2=Warren|first2=P|title=Statistical Mechanics of Dissipative Particle Dynamics|journal=Europhysics Letters (EPL)|volume=30|issue=4|year=1995|pages=191–196|issn=0295-5075|doi=10.1209/0295-5075/30/4/001}}</ref> to ensure the proper thermal equilibrium state. A series of new DPD algorithms with reduced computational complexity and better control of transport properties are presented.<ref name=\"GogaRzepiela2012\">{{cite journal|last1=Goga|first1=N.|last2=Rzepiela|first2=A. J.|last3=de Vries|first3=A. H.|last4=Marrink|first4=S. J.|last5=Berendsen|first5=H. J. C.|title=Efficient Algorithms for Langevin and DPD Dynamics|journal=Journal of Chemical Theory and Computation|volume=8|issue=10|year=2012|pages=3637–3649|issn=1549-9618|doi=10.1021/ct3000876}}</ref> The algorithms presented in this article choose randomly a pair particle for applying DPD thermostating thus reducing the computational complexity.\n\nDPD is an off-lattice mesoscopic simulation technique which involves a set of particles moving in continuous space and discrete time. Particles represent whole molecules or fluid regions, rather than single atoms, and atomistic details are not considered relevant to the processes addressed. The particles' internal degrees of freedom are integrated out and replaced by simplified pairwise dissipative and random forces, so as to conserve momentum locally and ensure correct hydrodynamic behaviour. The main advantage of this method is that it gives access to longer time and length scales than are possible using conventional MD simulations. Simulations of polymeric fluids in volumes up to 100&nbsp;nm in linear dimension for tens of microseconds are now common.\n\n==Equations==\nThe total non-bonded force acting on a DPD particle ''i'' is given by a sum over all particles ''j'' that lie within a fixed cut-off distance, of three pairwise-additive forces:\n\n: <math> f_i =\\sum_{j \\ne i}(F^C_{ij} + F^D_{ij} + F^R_{ij}) </math>\n\nwhere the first term in the above equation is a conservative force, the second a\ndissipative force and the third a random force. The conservative force acts to give beads a chemical identity, while the dissipative and random forces together form a thermostat that keeps the mean temperature of the system constant. A key property of all of the non-bonded forces is that they conserve momentum locally, so that hydrodynamic modes of the fluid emerge even for small particle numbers. Local momentum conservation requires that the random force between two interacting beads be antisymmetric. Each pair of interacting particles therefore requires only a single random force calculation. This distinguishes DPD from [[Brownian dynamics]] in which each particle experiences a random force independently of all other particles.  Beads can be connected into ‘molecules’ by tying them together with soft (often Hookean) springs.    The most common applications of DPD keep the [[particle number]], volume and temperature constant, and so take place in the NVT ensemble. Alternatively, the pressure instead of the volume is held constant, so that the simulation is in the NPT ensemble.\n\n==Parallelization==\nIn principle, simulations of very large systems, approaching a cubic micron for milliseconds, are possible using a parallel implementation of DPD running on multiple processors in a [[Beowulf cluster|Beowulf]]-style cluster. Because the non-bonded forces are short-ranged in DPD, it is possible to parallelize a DPD code very efficiently using a spatial domain decomposition technique. In this scheme, the total simulation space is divided into a number of cuboidal regions each of which is assigned to a distinct processor in the cluster. Each processor is responsible for integrating the equations of motion of all beads whose centres of mass lie within its region of space. Only beads lying near the boundaries of each processor's space require communication between processors. In order to ensure that the simulation is efficient, the crucial requirement is that the number of particle-particle interactions that require inter-processor communication be much smaller than the number of particle-particle interactions within the bulk of each processor's region of space. Roughly speaking, this means that the volume of space assigned to each processor should be sufficiently large that its surface area (multiplied by a distance comparable to the force cut-off distance) is much less than its volume.\n\n== Applications ==\nA wide variety of complex hydrodynamic phenomena have been simulated using DPD, the list here is necessarily incomplete. The goal of these simulations often is to relate the macroscopic [[Non-Newtonian fluid|non-Newtonian]] flow properties of the fluid to its microscopic structure. Such DPD applications range from modelling the rheological properties of concrete<ref>[http://math.nist.gov/mcsd/savg/parallel/dpd/#id1063308 James S. Sims and Nicos S. Martys: Modelling the Rheological Properties of Concrete]</ref> to simulating liposome formation in biophysics<ref>[http://www.lce.hut.fi/research/polymer/dpd.shtml Petri Nikunen, Mikko Karttunen, and Ilpo Vattulainen: Modelling Liposome formation in biophysics] {{webarchive |url=https://web.archive.org/web/20070722102732/http://www.lce.hut.fi/research/polymer/dpd.shtml |date=July 22, 2007 }}</ref> to other recent three-phase phenomena such as dynamic wetting.<ref>B. Henrich, C. Cupelli, M. Moseler, and M. Santer\": An adhesive DPD wall model for dynamic wetting, Europhysics Letters 80 (2007) 60004, p.1</ref>\n\n==Further reading==\nThe full trace of the developments of various important aspects of the DPD methodology since it was first proposed in the early 1990s can be found in \"Dissipative Particle Dynamics: Introduction, Methodology and Complex Fluid Applications – A Review\".<ref>{{cite journal|last=Moeendarbary |display-authors=etal |year=2009|title=Dissipative Particle Dynamics: Introduction, Methodology and Complex Fluid Applications - A Review|journal=International Journal of Applied Mechanics|volume=1|issue=4|pages=737–763|doi=10.1142/S1758825109000381|bibcode = 2009IJAM...01..737M }}</ref>\n\nThe state-of-the-art in DPD was captured in a [[CECAM]] workshop in 2008.<ref>[http://www.cecam.org/workshop-0-188.html Dissipative Particle Dynamics: Addressing deficiencies and establishing new frontiers], CECAM workshop, July 16–18, 2008, Lausanne, Switzerland.</ref> Innovations to the technique presented there include DPD with energy conservation; non-central frictional forces that allow the fluid viscosity to be tuned; an algorithm for preventing bond crossing between polymers; and the automated calibration of DPD interaction parameters from atomistic [[molecular dynamics]].\n\n== References ==\n<references/>\n\n== Available packages==\nSome available simulation packages that can (also) perform DPD simulations are:\n* [http://www.culgi.com CULGI]: The Chemistry Unified Language Interface, Culgi B.V., The Netherlands\n* [http://www.cse.scitech.ac.uk/ccg/software/DL_MESO/index.shtml DL_MESO]: Open-source mesoscale simulation software.\n* [http://www.apmaths.uwo.ca/~mkarttu/dpdmacs.shtml DPDmacs]\n* [http://espressomd.org/ ESPResSo]: Extensible Simulation Package for the Research on Soft Matter Systems - Open-source\n* [https://web.archive.org/web/20080112071055/http://www.onezero.ca/ Fluidix]: The Fluidix simulation suite available from OneZero Software.\n* [http://gpiutmd.iut.ac.ir/index.php GPIUTMD]: Graphical processors for Many-Particle Dynamics\n* [https://web.archive.org/web/20140503151537/http://md.chem.rug.nl/~ngoga/ Gromacs-DPD]: A modified version of Gromacs including DPD.\n* [http://codeblue.umich.edu/hoomd-blue/index.html HOOMD-blue]: Highly Optimized Object-oriented Many-particle Dynamics—Blue Edition\n* [http://lammps.sandia.gov/ LAMMPS]\n* [[Materials Studio]]: Materials Studio - Modeling and simulation for studying chemicals and materials, Accelrys Software Inc.\n* [http://sympler.org SYMPLER]: A freeware SYMbolic ParticLE simulatoR from the University of Freiburg.\n* [http://sunlightdpd.sourceforge.net/ SunlightDPD]: Open-source (GPL) DPD software.\n\n==External links==\n* [https://web.archive.org/web/20080905183355/http://matdl.org/matdlwiki/index.php/softmatter%3ADissipative_Particle_Dynamics_Simulation_%28DPD%29 DPD simulation technique by MatDL (Materials Digital Library Pathway)] ([[MatDL]])\n\n{{Physics-footer}}\n\n{{DEFAULTSORT:Dissipative Particle Dynamics}}\n[[Category:Condensed matter physics]]\n[[Category:Soft matter]]\n[[Category:Computational fluid dynamics]]\n[[Category:Non-Newtonian fluids]]"
    },
    {
      "title": "Donor-acceptor scheme",
      "url": "https://en.wikipedia.org/wiki/Donor-acceptor_scheme",
      "text": "The '''donor-acceptor scheme''' is a numerical scheme for treating the [[volume of fluid method]] in the field of [[computational fluid dynamics]]. Originally introduced by Ramshaw and Trapp in 1976<ref>{{cite journal | first1 = J.D.  | last1 = Ramshaw | first2 = J.  | last2 = Trapp | title = A numerical technique for low-speed homogeneous two-phase flow with sharp interfaces | journal = Journal of Computational Physics | year = 1976 | volume = 21  | pages = 438–458|bibcode = 1976JCoPh..21..438R |doi = 10.1016/0021-9991(76)90039-5 }}</ref> and extend by Hirt and Nichols in their VOF article from 1981,<ref name=Hirt81>{{cite journal | first1 = C.W.  | last1 = Hirt | first2 = B.D.  | last2 = Nichols | title = Volume of luid (VOF) method for the dynamics of free boundaries | journal = Journal of Computational Physics | year = 1981 | volume = 39 | issue = 1 | doi = 10.1016/0021-9991(81)90145-5 | pages = 201–225|bibcode = 1981JCoPh..39..201H }}</ref> the donor-acceptor scheme revolves around the idea of including data from the downwind cell (acceptor cell) of a cell face to predict the volume fraction transported through it during a time step. In addition to this information from the acceptor scheme, information of the availability of the fluids from the upwind cell (donor cell) is required. This approach, known as controlled downwinding, is necessary in order to avoid non-physical volume fraction values smaller than zero or larger than unity. The donor-acceptor scheme has since its introduction served as a basis for compressive differencing schemes and higher order schemes used to treat the [[advection]] of the fraction function in the volume of fluid method.\n\n==Overview==\n\n{{Empty section|date=April 2015}}\n\n==See also==\n[[Volume of fluid method]]\n\n==References==\n{{Reflist}}\n\n[[Category:Computational fluid dynamics]]"
    },
    {
      "title": "Exa Corporation",
      "url": "https://en.wikipedia.org/wiki/Exa_Corporation",
      "text": "{{Infobox company\n |name= Exa Corporation\n |logo= Exa Corporation logo.gif\n |type= Public\n |traded_as= {{NASDAQ|EXA}}\n |founded= November 21, 1991\n| founder = Kim Molvig\n|industry= [[Computer-aided engineering]]\n | products = {{unbulleted list|[[PowerFLOW]]|[[PowerTHERM]]|[[PowerCOOL]]|[[PowerACOUSTICS]]|[[PowerCASE]]|[[PowerDELTA]]|[[PowerVIZ]]|[[PowerINSIGHT]]|[[PowerREALITY]]|[[ExaCLOUD]]}}\n| homepage = {{URL|exa.com}}\n}}\n\n'''Exa Corporation''' is a developer and distributor of [[computer-aided engineering]] (CAE) software. Its main product is '''[http://exa.com/product/simulation-tools/powerflow-cfd-simulation PowerFLOW]''', a [[Lattice Boltzmann methods|lattice-boltzmann]] derived implementation of [[computational fluid dynamics]] (CFD), which can very accurately simulate [[Internal flow|internal]] and [[External flow|external]] flows in low-[[Mach number|Mach]] regimes. PowerFLOW is used extensively in the international automotive and transportation industries.\n\n==History==\nExa was founded in November, 1991.<ref name=\"S1\">{{Cite web |title= Prospectus |work= Form S-1 Amendment 5 |author= Exa Corporation |date= June 18, 2012 |publisher= US Securities and Exchange Commission |url= https://www.sec.gov/Archives/edgar/data/890264/000119312512273272/d214313ds1a.htm |accessdate= November 13, 2013 }}</ref> \nExa raised about $2.4 million in a  series of [[venture capital]] investments from April 1993 though 1994 from [[Fidelity Ventures]] and individuals.<ref>{{Cite web |title= Exa Corporation Series A Preferred Stock and Warrant Purchase Agreement |work= Form S-1 Exhibit 4.3 |author= Exa Corporation |date= April 30, 1993 |publisher= US Securities and Exchange Commission |url= https://www.sec.gov/Archives/edgar/data/890264/000119312511208397/dex43.htm |accessdate= November 13, 2013 }}</ref>\nMore funding was obtained in 1994, 1996, 1998 and 2005, including Boston Capital Ventures as an investor.\nIn 1999, Stephen A. Remondi became chief executive.<ref name=\"S1\" />\n\nThe company filed for an [[initial public offering]] in June 2012.<ref name=\"S1\" /> On September 28th, 2017, [[Dassault]] Systèmes announced the signing of a definitive merger agreement to acquire Exa, valuing the company at about 400 million USD.<ref>https://www.3ds.com/press-releases/single/dassault-systemes-to-acquire-exa-corporation/\"</ref>\n\nFor fiscal year 2012, Exa recorded total revenues, [[net income]] and Adjusted [[EBITDA]] of $45.9 million, $14.5 million and $7.1 million, respectively.<ref name=\"S1\" /> Since generating its first commercial revenue in 1994, Exa's annual revenue had increased for 18 consecutive years.<ref name=\"S1\" /> The company was profitable in fiscal years 2011 and 2012 after recording net losses in the three preceding fiscal years.<ref name=\"S1\" /> Exa's total revenues and Adjusted EBITDA in fiscal year 2012 increased 21% and 51%, respectively, compared with fiscal year 2011.<ref name=\"S1\" /> Exa reported $61.4 million in total revenue for the full year fiscal 2015.<ref name=\"S2\">{{Cite web |title= Exa Reports Fourth Quarter and Fiscal 2015 Financial Results |author= Exa Corporation |date= March 19, 2015 |url= http://investor.exa.com/releasedetail.cfm?ReleaseID=902568 |accessdate= May 7, 2015 }}</ref>  The company's total revenue is expected to be in the range of $64.7 million to $67.0 million for the full year fiscal 2016.<ref name=\"S2\" />\n\nThe Exa corporate headquarters are located in [[Burlington, Massachusetts|Burlington]], [[Massachusetts]]. The company also has U.S. offices in [[Livonia, Michigan|Livonia]], [[Michigan]] and [[Brisbane, California|Brisbane]], [[California]], along with offices in [[Europe]] and [[Asia]]. Exa's European headquarters are located in [[Paris]], [[France]], and it also has European offices in [[Germany]], [[Italy]] and the [[United Kingdom]]. Exa's Asia headquarters are located in [[Japan]], and its Asia offices are based out of [[China]], [[India]] and [[South Korea]]. Exa employs over 350 people worldwide.\n\n==<ref>{{Cite web|url=http://exa.com/product/simulation-tools/powerflow-cfd-simulation|title=Engineering & Design Simulations with PowerFLOW {{!}} Exa Corporation|website=exa.com|access-date=2016-07-08}}</ref> References==\n{{Reflist|2}}\n\n==Further reading==\n*  Miller, R.; Strumolo, G.; Russ, S.; Madin, M.; Affes, H.; Slike, J.; Chu, D. (1999). ''A Comparison of Experimental and Analytical Steady State Intake Port Flow Data Using Digital Physics.'' [[Society of Automotive Engineers]].\n*  Lietz, Robert; Pien, William; Remondi, Stephen (2000). ''A CFD Validation Study for Automotive Aerodynamics.'' [[Society of Automotive Engineers]].\n*  Gaylard (2001). ''Comparison of A Conventional RANS and a Lattice Gas Dynamics Simulation - A Case Study in High Speed Rail Aerodynamics.'' In: Rhodes, Norman. Computational Fluid Dynamics in Practice. Oxford, UK.\n*  Succi, Sauro (2001). ''The Lattice Boltzmann Equation for Fluid Dynamics and Beyond.'' [[Oxford University Press]].\n*  Chen, Hudong; Kandasamy, Satheesh; Orszag, Steven; Shock, Rick; Succi, Sauro; Yakhot, Victor (2003). ''Extended Boltzmann Kinetic Equation for Turbulent Flows.'' [http://www.sciencemag.org Science Magazine]. Vol. 301\n*  [http://papers.sae.org/2009-26-0057/ Kotapati, R., Keating, A., Kandasamy, S., Duncan, B., Shock, R. and Chen, H., \"The Lattice-Boltzmann-VLES Method for Automotive Fluid Dynamics Simulation, a Review,\" SAE Technical Paper 2009-26-0057, 2009, doi:10.4271/2009-26-0057.]\n*  [http://www.worldscientific.com/doi/abs/10.1142/S0129183113400214 RUPESH B. KOTAPATI, RICHARD SHOCK, and HUDONG CHEN, \"LATTICE-BOLTZMANN SIMULATIONS OF FLOWS OVER BACKWARD-FACING INCLINED STEPS,\"  Int. J. Mod. Phys. C 25, 1340021 (2014) [14 pages] DOI: 10.1142/S0129183113400214.\n\n==External links==\n*{{Official website|exa.com}}\n\n[[Category:Computational fluid dynamics]]\n[[Category:Computer companies of the United States]]\n[[Category:Companies established in 1992]]\n[[Category:Companies listed on NASDAQ]]\n[[Category:Simulation software]]\n[[Category:Computer-aided engineering software]]"
    },
    {
      "title": "FEATool Multiphysics",
      "url": "https://en.wikipedia.org/wiki/FEATool_Multiphysics",
      "text": "{{Infobox Software\n| name                   = FEATool Multiphysics\n| logo                   =\n| screenshot             = Banner-featool-multiphysics-matlab-fem-toolbox.png\n| caption                = FEATool Multiphysics Toolbox with MATLAB GUI\n| developer              = Precise Simulation\n| latest release version = [https://www.featool.com/news 1.10]\n| latest release date    = {{Start date|2019|04|17|df=yes}}\n| programming language   = [[MATLAB]]\n| operating system       = [[Unix]]/[[Linux]]/[[Windows]]/[[MacOS|Mac]]/[[Web_browser|Web browser]]\n| genre                  = [[Computer-aided engineering|Computer-aided engineering (CAE)]], [[multiphysics]], [[finite-element_analysis|finite element analysis (FEA)]], [[simulation software]]\n| website                = {{URL|www.featool.com}}<ref>{{cite web|url=https://www.featool.com/ |title=FEATool Multiphysics homepage}}</ref>\n}}\n'''FEATool Multiphysics''' (\"Finite Element Analysis Toolbox for [[Multiphysics]]\") is a physics, [[Finite_element_method|finite element analysis (FEA)]], and [[Partial_differential_equation|PDE]] simulation toolbox for [[MATLAB]]<ref>{{cite web|url=https://www.engineering.com/Library/ArticlesPage/tabid/85/ArticleID/12636/categoryId/23/FEM-Multiphysics-Simulation-for-MATLAB.aspx|title=FEM Multiphysics Simulation for MATLAB!? (engineer.com)}}</ref>. FEATool Multiphysics features the ability to model fully coupled [[heat transfer]], [[Computational_fluid_dynamics|fluid dynamics]], [[chemical engineering]], [[structural mechanics]], [[Computational_electromagnetics|electromagnetics]], as well as user-defined and custom PDE problems in 1D, 2D ([[Cylindrical_coordinate_system|axisymmetry]]), or 3D, all within a simple graphical user interface ([[Graphical_user_interface|GUI]]) or as convenient MATLAB m-code script files<ref>{{cite web|url=https://www.engineering.com/CAM/ArticleID/12636/FEM-Multiphysics-Simulation-for-MATLAB.aspx|title=Engineering - FEM Multiphysics Simulation for MATLAB (engineering.com)}}</ref>. Having specifically been designed to have a low learning curve and to be able to be used without requiring reading documentation, FEATool has been employed and used in academic research,<ref>{{cite web|url=https://www.jics.utk.edu/files/images/csure-reu/2014/Su-Cope/Report.pdf |title=Modeling the Effects of Increased Glucose Concentration on Intraocular Pressure CSURE 2014 Summer Program}}</ref> teaching,<ref>{{cite web|url=http://www.ce.memphis.edu/7117/notes/notes.html|title=the Department of Civil Engineering at the University of Memphis CIVIL 7117 course notes}}</ref><ref>{{cite web|url=http://www.math.lamar.edu/faculty/maesumi/syllabi.html|title=Department of Mathematics at Lamar University course notes}}</ref> and industrial engineering simulation contexts<ref>{{cite web|url=https://www.researchgate.net/project/FEATool-Multiphysics/update/5a8adc7db53d2f0bba52d896 |title=Topology Optimization Modeling with MATLAB and FEATool Multiphysics}}</ref>.\n\n==Distinguishing features==\n\nFEATool Multiphysics is a fully integrated physics and PDE simulation environment where the modeling process is subdivided into six steps; preprocessing ([[CAD]] and [[Constructive_solid_geometry|geometry modeling]]), [[mesh generation|mesh and grid generation]], physics and PDE specification, boundary condition specification, [[solver|solution]], and postprocessing and visualization<ref>{{cite web|url=https://www.featool.com|title=FEATool Multiphysics online documentation suite}}</ref>.\n\n{| class=\"wikitable\"\n! 1. Geometry Mode\n! 2. Grid Mode\n! 3. Multiphysics Mode\n|-\n| [[File:01-geometry-cad-mode-featool-multiphysics-matlab-gui.png|thumb|Geometry generation and CAD import]]\n| [[File:02-grid-mesh-generation-mode-featool-multiphysics-matlab-gui.png|thumb|Automatic mesh and grid generation]]\n| [[File:03-equation-subdomain-mode-featool-multiphysics-matlab-gui.png|thumb|Subdomain, equation, and coefficient specification]]\n|-\n! 4. Boundary Mode\n! 5. Solve Mode\n! 6. Post Mode\n|-\n| [[File:04-boundary-mode-featool-multiphysics-matlab-gui.png|thumb|Boundary condition specification]]\n| [[File:05-solve-mode-featool-multiphysics-matlab-gui.png|thumb|Solution of PDE systems]]\n| [[File:06-postprocessing-visualization-mode-featool-multiphysics-matlab-gui.png|thumb|Postprocessing and visualization of results]]\n|}\n\n===Easy to use GUI===\nThe FEATool graphical user interface (GUI) shown above has been specifically designed to be very easy to use and quickly get started with<ref>{{cite web|url=https://medium.com/multiphysics/designing-easy-to-use-simulation-and-technical-software-a229aa3a596e#.5vedo5end |title=Designing Easy To Use Simulation and Technical Software}}</ref>. Specifically, because of the full integration of CAD and simulation tools users can quickly and easily switch between pre-processing, analysis, and post-processing modes to change simulation parameters, modify geometry and meshes, to solution evaluation and visualization. In this way FEATool can make up for the MATLAB performance overhead by saving users time with problem set up and analysis.<ref>{{cite web |url=http://newyorkcityhightech.com/what-is-multiphysics-cae-simulation/ |title=What is Multiphysics CAE Simulation? |access-date=2017-03-23 |archive-url=https://web.archive.org/web/20170324000702/http://newyorkcityhightech.com/what-is-multiphysics-cae-simulation/# |archive-date=2017-03-24 |dead-url=yes |df= }}</ref>\n\n===OpenFOAM CFD solver interface===\nFEATool has introduced a multi-simulation feature whereby interfaces to popular academic and open-source solvers are developed. This feature enables these solvers to be used from the familiar FEATool GUI and CLI saving time and effort of learning the internals and syntax of the solvers themselves.\n\nThe CFD solver interface allows fluid dynamics problems to be solved with the finite volume CFD solver [[OpenFOAM]]<ref>{{cite web|url=https://www.openfoam.com/|title=OpenFOAM® - Official home of The Open Source Computational Fluid Dynamics (CFD) Toolbox|last=OpenCFD|website=www.openfoam.com|deadurl=no|archiveurl=https://web.archive.org/web/20160922032819/http://www.openfoam.com/|archivedate=22 September 2016|df=dmy-all}}</ref>. Using the interface automatically converts incompressible Navier-Stokes FEATool models to compatible OpenFOAM mesh, boundary, and control dictionary files, runs OpenFOAM simulations, and afterwards imports and interpolates the resulting solutions back into FEATool. In this way more advanced, larger, and parallel CFD models, for example including turbulence, can be simulated without leaving the FEATool interface.\n\n===FEniCS multiphysics solver interface===\nSimilar to the OpenFOAM solver interface, FEATool also features a fully integrated interface to the [[FEniCS_Project|FEniCS]] general FEM and multiphysics solver<ref>{{cite web|title=The FEniCS Project page|url=https://www.fenicsproject.org|work=The FEniCS Project|accessdate=28 July 2016}}</ref>. Using the FEATool-FEniCS interface, as both codes feature PDE definition languages, multiphysics problems can automatically be translated and converted to FEniCS [[Python_(programming_language)|Python]] definition files, after which system calls to the FEniCS solver is made, and the resulting solution re-imported.\n\n===Fully scriptable CLI interface===\nGUI operation is recorded as equivalent MATLAB functions, and therefore in addition to binary formats, FEATool simulation models can also be saved and exported as fully scriptable and editable MATLAB compatible [[MATLAB#Syntax|m-script]] files<ref>{{cite web|url=https://www.digitaleng.news/de/editors-pick-featool-multiphysics-1-4/ |title=Digital Engineering Editor's Pick: FEATool Multiphysics 1.4 (digitaleng.news)}}</ref>. The short MATLAB script below illustrates how a complete flow around a cylinder [[computational fluid dynamics|computational fluid dynamics (CFD)]] benchmark problem can be defined and solved with the FEATool m-script functions (including geometry, grid generation, problem definition, solving, and postprocessing all in a few lines of code)<ref>{{cite journal|title=Benchmark computations of laminar flow around a cylinder |journal=Flow Simulation with High-Performance Computers II, Notes on Numerical Fluid Dynamics |volume=52 |issue=3 |pages=547–566 |year=1996|doi = 10.1002/fld.1650030305|last1 = De Vahl Davis|first1 = G.}}</ref><ref>{{cite thesis|url=https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.38.533&rep=rep1&type=pdf |title=On higher order methods for the stationary incompressible Navier-Stokes equations |type=PhD |year=1998 |publisher=University of Heidelberg}}</ref><ref>{{cite journal|title=Higher-order finite element discretizations in a benchmark problem for incompressible flows |journal=International Journal for Numerical Methods in Fluids |volume=37 |issue=8 |pages=885–903 |year=2001|doi = 10.1002/fld.195|last1 = John|first1 = Volker|last2=Matthies |first2=Gunar |citeseerx=10.1.1.42.8087 }}</ref>. Specifically, custom [[Partial differential equation | partial differential equations (PDE)]] and expressions can simply be entered and evaluated as string expressions as-is, without need for further compilation or writing custom functions<ref>{{cite web|url=https://www.featool.com/doc/tutorials.html#ex_ce1 |title=Black-Scholes custom equation and PDE modeling tutorial}}</ref>.\n\n<source lang = \"matlab\">\n% Geometry and mesh generation.\nfea.sdim = { 'x' 'y' };\nfea.geom.objects = { gobj_rectangle( 0, 2.2, 0, 0.41, 'R1' ), ...\n                     gobj_circle( [0.2 0.2], 0.05, 'C1' ) };\nfea = geom_apply_formula( fea, 'R1-C1' );\nfea.grid = gridgen( fea, 'hmax', 0.02 );\n\n\n% Problem definition (incompressible Navier-Stokes equations multiphysics mode).\nfea = addphys( fea, @navierstokes );\n\n% Prescribe fluid viscosity (density is default 1).\nfea.phys.ns.eqn.coef{2,end} = { 0.001 };\n\n% Boundary conditions (Non-specified boundaries are\n% per default prescribed no-slip zero velocity walls).\n\n% Inflow (bc type 2) at boundary 4.\nfea.phys.ns.bdr.sel(4) = 2;\n\n% Outflow (bc type 3, zero pressure) at boundary 2.\nfea.phys.ns.bdr.sel(2) = 3;\n\n% Parabolic inflow profile x-velocity expression.\nfea.phys.ns.bdr.coef{2,end}{1,4} = '4*0.3*y*(0.41-y)/0.41^2';\n\n\n% Check, parse, and solve problem.\nfea = parsephys( fea );\nfea = parseprob( fea );\nfea.sol.u = solvestat( fea );\n\n% Alternatively solve with OpenFOAM\n% fea.sol.u = openfoam( fea );\n\n\n% Postprocessing and visualization.\npostplot( fea, 'surfexpr', 'sqrt(u^2+v^2)', ...\n               'arrowexpr', {'u' 'v'} )\n\np_cyl_front = evalexpr( 'p', [0.15; 0.2], fea );\np_cyl_back  = evalexpr( 'p', [0.25; 0.2], fea );\ndelta_p_computed  = p_cyl_front - p_cyl_back\ndelta_p_reference = 0.117520\n</source>\n\n===External mesh generator interfaces===\nSimilar to the external solver interfaces, FEATool features built-in support for the [[Gmsh]]<ref>{{cite web|url=https://medium.com/multiphysics/comparison-of-open-source-mesh-generators-distmesh-gmsh-and-triangle-3c1df9c08b75 |title=Comparison of open source mesh generators (DistMesh, Gmsh, and Triangle)}}</ref> and Triangle<ref>{{cite book|title=Triangle: Engineering a 2D quality mesh generator and Delaunay triangulator |journal=Applied Computational Geometry Towards Geometric Engineering |volume=1148 |pages=203–222 |year=1996|doi = 10.1007/BFb0014497|series = Lecture Notes in Computer Science|last1 = Shewchuk|first1 = Jonathan Richard|isbn=978-3-540-61785-3 |citeseerx=10.1.1.62.1901 }}</ref> mesh generators. If requested instead of the built-in DistMesh<ref>{{cite journal|title=A Simple Mesh Generator in MATLAB |journal=SIAM Review |volume=46 |issue=2 |pages=329–345 |year=2004|doi = 10.1137/S0036144503429121|last1 = Persson|first1 = Per-Olof|last2=Strang |first2=Gilbert }}</ref> FEM mesh generation algorithm, FEATool will convert and export appropriate Gridgen2D, Gmsh, or Triangle input data files, call the mesh generators through external system calls, and re-import the resulting grids into FEATool.\n\n===Other distinguishing features===\n* Fully cross platform MATLAB interoperability including other toolboxes.\n* Extensive FEM basis function library (linear and high order conforming P<sub>1</sub>-P<sub>5</sub>, and non-conforming FEM discretizations).\n* Support for structured and un-structured line interval, triangles, quadrilaterals, tetrahedral, and hexahedral mesh elements.\n* 15 pre-defined equations and multiphysics modes in 1D, 2D Cartesian and cylindrical coordinates, as well as full 3D.\n* Support for custom user defined PDE equations.\n* Mesh and geometry import, export, and conversion between [[OpenFOAM]], Dolfin/[[FEniCS_Project|FEniCS]] XML, GiD,<ref>{{cite web|url=https://www.gidhome.com |title=GiD - The personal pre and post processor homepage}}</ref> [[Gmsh]], GMV,<ref>{{cite web |url=https://www-xdiv.lanl.gov/XCM/gmv/GMVHome.html |title=GMV - The General Mesh Viewer homepage |access-date=2018-07-23 |archive-url=https://web.archive.org/web/20130926190332/http://www-xdiv.lanl.gov/XCM/gmv/GMVHome.html# |archive-date=2013-09-26 |dead-url=yes |df= }}</ref> Triangle (PSLG), and plain [[ASCII]] grid formats.<ref>{{cite web|url=https://www.featool.com/get-featool |title=FEATool Multiphysics technical specifications}}</ref>\n* Online postprocssing and image export with [[ParaView]] Glance, [[Plotly]], and social sharing of results.\n\n==See also==\n* [[Multiphysics]]\n* [[Computer-aided engineering | Computer-aided engineering (CAE)]]\n* [[Continuum_mechanics|Continuum mechanics]]\n* [[Finite element method | Finite element method (FEM)]]\n\n==References==\n{{Reflist}}\n\n==External Links and Resources==\n* [https://www.featool.com/ FEATool Multiphysics website]\n* [https://www.featool.com/model-showcase Multiphysics showcase models and tutorials]\n* [https://www.featool.com/articles FEA blog and technical articles]\n* [https://www.featool.com/doc/quickstart.html FEATool Multiphysics quick start guide]\n* [https://www.featool.com/doc FEATool Multiphysics online documentation]\n\n{{Numerical analysis software}}\n{{CAE software}}\n\n[[Category:Computational fluid dynamics]]\n[[Category:Computer-aided engineering software]]\n[[Category:Continuum mechanics]]\n[[Category:Finite element software]]\n[[Category:Finite element software for Linux]]\n[[Category:Scientific simulation software]]\n[[Category:Physics software]]"
    },
    {
      "title": "Finite volume method for one-dimensional steady state diffusion",
      "url": "https://en.wikipedia.org/wiki/Finite_volume_method_for_one-dimensional_steady_state_diffusion",
      "text": "[[Finite volume method]] in [[computational fluid dynamics]] is a discretization technique for [[partial differential equations]] that arise from physical conservation laws. These equations can be different in nature, e.g. [[elliptic partial differential equation|elliptic]], [[parabolic partial differential equation|parabolic]], or [[hyperbolic partial differential equation|hyperbolic]]. First well-documented \nuse was by Evans and Harlow (1957) at Los Alamos. The general equation for steady diffusion can be easily be derived from the general transport equation for property ''Φ'' by deleting transient and convective terms.<ref>{{cite web|author= |url=http://www.efunda.com/formulae/fluids/navier_stokes.cfm |title=Navier-Stokes Equations in Fluid Mechanics |publisher=Efunda.com |date= |accessdate=2013-10-29}}</ref>\n\nGeneral Transport equation can be define as\n\n<math>\\frac{\\partial \\rho \\phi }{\\partial t} + \\operatorname{div}(\\rho \\phi \\upsilon) = \\operatorname{div}(\\Gamma \\operatorname{grad}  \\phi) + S_\\phi</math>\n\nwhere,<br />\n<math>\\rho</math> is [[density]] and <math> \\phi </math> is conservative form of all fluid flow,<br />\n<math>\\Gamma</math> is the Diffusion coefficient<ref>{{cite web|url=http://www.life.illinois.edu/crofts/bioph354/diffusion1.html |title=Diffusion – useful equations |publisher=Life.illinois.edu |date= |accessdate=2013-10-29}}</ref> and <math>S</math> is the Source term.<ref>{{cite web|url=http://www.physics.drexel.edu/~valliere/PHYS405/DiffusionEquation/diffusion.html |title=SSCP: Programming Strategies |publisher=Physics.drexel.edu |date= |accessdate=2013-10-29}}</ref><br />\n<math>\\operatorname{div}(\\rho \\phi \\upsilon)</math> is Net rate of flow of  <math> \\phi </math> out of fluid element([[convection]]), <br />\n<math>\\operatorname{div}(\\Gamma \\operatorname{grad}  \\phi) </math> is Rate of increase of <math> \\phi </math> due to [[diffusion]], <br />\n<math> S_\\phi</math> is Rate of increase of <math>\\phi</math> due to sources.\n\n<math>\\frac{\\partial \\rho \\phi }{\\partial t} </math> is Rate of increase of <math> \\phi </math> of fluid element(transient),\n\nConditions under which the transient and convective terms goes to zero:\n* [[Steady State]]\n* Low [[Reynolds Number]]\n\nFor one-dimensional steady state diffusion, General Transport equation reduces to:\n\n::<math>\\operatorname{div}(\\Gamma\\operatorname{grad}\\phi)+ S_\\phi=0</math>\nor,\n::<math>\\frac {d}{dx} (\\Gamma\\operatorname{grad}\\phi) +S_\\phi=0</math>\n<br />\n \n<big>'''The following steps comprehend one-dimensional steady state diffusion'''</big> - <br>\n<br />\n \nSTEP 1<br />\n'''Grid Generation'''\n\n* Divide the domain in equal parts of small domain.\n* Place nodal points midway in between each small domain.<br />[[File:Dividing in small domains and assigning nodal points.jpg|thumb|Dividing small domains and assingning nodal points (Figure 1)]]\n* Create control volume using these nodal points.\n[[File:Control volume and control volume & boundary faces.jpg|thumb|Control volume and control volume & boundary faces (Figure 2)]]\n* Create control volume near the edge in such a way that the physical boundaries coincide with control volume boundaries.(Figure 1)\n* Assume a general nodal point 'P' for a general [[control volume]].Adjacent nodal points in east and west are identified by E and W respectively.The west side face of the control volume is referred to by 'w' and east side control volume face by 'e'.(Figure 2)\n[[File:The steady state diffusion in one-dimensional domain.jpg|thumb|Steady state one-dimensional diffusion (Figure 3)]]\n* The distance between WP, wP, Pe and PE are identified by <math>\\delta x_{WP}</math>,<math>\\delta x_{wP}</math>,<math>\\delta x_{Pe}</math> and <math>\\delta x_{PE}</math> respectively.(Figure 4)\n\nSTEP 2<br>\n'''[[Discretization]]'''<br />\n[[File:Control volume width.jpg|thumb|Control volume width (Figure 4)]]\n* The crux of Finite volume method is to integrate governing equation all over control volume, known discretization.\n* Nodal points used to discretize equations.\n* At nodal point P control volume is defined as (Figure 3)\n<br />\n<math>\\int_{\\Delta V} \\frac{d}{dx}\\left (\\Gamma \\frac{d \\phi}{dx}\\right ) dV + \\int_{\\Delta V} S dV = \\left (\\Gamma A \\frac{d \\phi}{dx}\\right )_e - \\left (\\Gamma A \\frac{d \\phi}{dx}\\right )_w + \\overrightarrow{S} \\Delta V= 0</math> <br>\n<br />\nwhere\n\n<math>A</math> is Cross-sectional Area [[Cross section (geometry)]] of control volume face,<math> \\Delta V</math> is Volume,<math> \\overrightarrow{S} </math>is average value of source S over control volume\n\n*It states that diffusive flux [[Fick's laws of diffusion]]<math>\\phi</math> from east face minus west face leads to generation of flux in control volume.\n*<math> \\phi </math> diffusive coefficient and <math> \\frac{d \\phi}{dx} </math> is required in order to interpreter useful conclusion.\n*Central differencing technique [http://www.phy.davidson.edu/fachome/dmb/py200/centraldiff.htm] is used to derive <math> \\phi </math> diffusive coefficient.\n<br />\n<math>\\Gamma_w = \\frac{\\Gamma_W + \\Gamma_P}{2}</math> <br>\n<br />\n<math>\\Gamma_w = \\frac{\\Gamma_P + \\Gamma_E}{2}</math>\n\n*<math>\\frac {d \\phi}{dx}</math> gradient from east to west is calculated with help of nodal points.(Figure 4)\n<br />\n <math>\\left ( \\frac{d\\phi }{dx} \\right )_e=\\frac{\\phi_E - \\phi_P}{\\delta x_{PE}}</math> <br>\n <math>\\left ( \\frac{d\\phi }{dx} \\right )_w=\\frac{\\phi_P - \\phi_W}{\\delta x_{WP}}</math>\n\n*In practical situation source term can be linearize\n<br />\n<math>\\overrightarrow{S} \\Delta V= S_u + S_p\\phi_p</math>\n\n* Merging above equations leads to\n \n<math>\\Gamma_e A_e\\left ( \\frac{\\phi_E - \\phi_P}{\\delta x_{PE}}\\right ) - \\Gamma_w A_w\\left ( \\frac{\\phi_P - \\phi_W}{\\delta x_{PE}}\\right ) + (S_u + S_p\\phi_p)</math>\n\n* Re-arranging\n<br />\n<math>\\left ( \\frac{\\Gamma_e}{\\delta x_{PE}} A_e + \\frac{\\Gamma_w}{\\delta x_{WP}} A_w - S_p \\right )\\phi_P = \\left ( \\frac{\\Gamma_w}{\\delta x_{WP}} A_w \\right ) \\phi_W + \\left ( \\frac{\\Gamma_e}{\\delta x_{WP}} A_e \\right ) \\phi_E + S_u</math>\n\n* Compare and identify above equation with\n<br />\n<math> a_P\\phi_P = a_W\\phi_W + a_E\\phi_E + S_u </math><br />\n<br />\nwhere <br>\n<br />\n{| class=\"wikitable\"\n|-\n! <math>a_W</math> !! <math>a_E</math> !! <math>a_P</math>\n|-\n| <math> \\frac{\\Gamma_w}{\\delta x_{WP}} A_w </math>  || <math>\\frac{\\Gamma_e}{\\delta x_{PE}} A_e</math> ||<math> a_W + a_E - S_P </math>\n|}\n\nSTEP 3:<br />\n'''Solution of equations'''\n* Discretized equation must be set up at each of the nodal points in order to solve the problem.\n* The resulting system of linear algebraic equation [[Linear equation]] is then solved to obtain distribution of the property <math>\\phi</math> at the nodal points by any form of matrix solution technique.\n* The matrix of higher order [http://www.sosmath.com/matrix/determ1/determ1.html] can be solved in [[MATLAB]].\n\nThis method can also be applied to a 2D situation. See [[Finite volume method for two dimensional diffusion problem]].\n\n==References==\n* Patankar, Suhas V. (1980), Numerical Heat Transfer and Fluid Flow, Hemisphere.\n* Hirsch, C. (1990), Numerical Computation of Internal and External Flows, Volume 2: Computational Methods for Inviscid and Viscous Flows, Wiley.\n* Laney, Culbert B.(1998), Computational Gas Dynamics, Cambridge University Press.\n* LeVeque, Randall(1990), Numerical Methods for Conservation Laws, ETH Lectures in Mathematics Series, Birkhauser-Verlag.\n* Tannehill, John C., et al., (1997), Computational Fluid mechanics and Heat Transfer, 2nd Ed., Taylor and Francis.\n* Wesseling, Pieter(2001), Principles of Computational Fluid Dynamics, Springer-Verlag.\n* Carslaw, H. S. and Jager, J. C. (1959). Conduction of Heat in Solids. Oxford: Clarendon Press\n* Crank, J. (1956). The Mathematics of Diffusion. Oxford: Clarendon Press\n* Thambynayagam, R. K. M (2011). The Diffusion Handbook: Applied Solutions for Engineers: McGraw-Hill\n* {{reflist}}\n\n== External links ==\n* [[Finite difference]]\n* http://opencourses.emu.edu.tr/course/view.php?id=27&lang=en\n* http://www.nptel.iitm.ac.in/courses/112105045/\n* http://ingforum.haninge.kth.se/armin/CFD/dirCFD.htm\n* [[Diffusion equation]]\n* [[Computational fluid dynamics]]\n* [[Convection–diffusion equation]]\n* [http://www.math.uci.edu/~chenlong/226/FVM.pdf Finite volume method, Cheng Long]\n* [http://www.scholarpedia.org/article/Finite_volume_method Finite volume method, Robert Eymard et al. (2010), Scholarpedia,5(6):9835]\n\n== See also ==\n* [[Heat equation]]\n* [[Fokker-Planck equation]]\n* [[Fick's law of diffusion]]: [[Fick's law of diffusion#Second law|Fick's Second Law]]\n* [[Maxwell-Stefan equation]]\n\n[[Category:Computational fluid dynamics]]"
    },
    {
      "title": "Finite volume method for three-dimensional diffusion problem",
      "url": "https://en.wikipedia.org/wiki/Finite_volume_method_for_three-dimensional_diffusion_problem",
      "text": "'''Finite volume method''' (FVM) is a numerical method. FVM in [[computational fluid dynamics]] is used to solve the [[partial differential equation]] which arises from the [[physical conservation law]] by using [[discretisation]]. [[Convection]] is always followed by [[diffusion]] and hence where convection is considered we have to consider combine effect of convection and diffusion. But in places where [[fluid flow]] plays a non-considerable role we can neglect the convective effect of the flow. In this case we have to consider more simplistic case of only diffusion. The general equation for steady convection-diffusion can be easily derived from the [[general transport equation]] for property <math>\\phi</math> by deleting transient.\n\nGeneral transport equation is defined as:\n\n<math>\\frac{\\partial \\rho \\phi }{\\partial t} + \\operatorname{div}(\\rho \\phi \\upsilon) = \\operatorname{div}(\\Gamma \\operatorname{grad}  \\phi) + S_\\phi</math> …………………………………………….1\n\nWhere,\n\n<math>\\phi</math> is a conservative form of all fluid flow,\t\n\n<math>\\rho</math> is density,\n\n<math>\\operatorname{div}(\\rho \\phi \\upsilon)</math> is a net rate of flow of <math>\\phi</math> out of fluid element represents convective term,\n\n<math>\\frac{\\partial \\rho \\phi }{\\partial t} </math> is a transient term,\n\n<math>\\operatorname{div}(\\Gamma \\operatorname{grad}  \\phi) </math> is a rate of change <math>\\phi</math>  of due to diffusion,\n\n<math> S_\\phi</math> is a rate of increase of <math>\\phi</math> due  to source.\n\nDue to steady state condition transient term becomes zero and due to absence of convection convective term becomes zero, therefore steady state three- dimensional convection and diffusion equation becomes:\n\n<math>\\operatorname{div}(\\Gamma \\operatorname{grad}  \\phi) + S_\\phi = 0 </math>………………………………………………………….2\n\nTherefore,\n\n<math>\\frac{\\partial}{\\partial x}\\left (\\Gamma \\frac{\\partial \\phi}{\\partial x}\\right )+\\frac{\\partial}{\\partial y}\\left (\\Gamma \\frac{\\partial \\phi}{\\partial y}\\right )+\\frac{\\partial}{\\partial z}\\left (\\Gamma \\frac{\\partial \\phi}{\\partial z}\\right )+S_\\phi = 0 </math>…………………………………………………………………….3\n\nFlow should also satisfy continuity equation therefore,\n\n<math>\\nabla \\cdot (\\rho \\mathbf{u}) = 0</math> ………………………………………………………………………………………………………4\n\n==To solve the problem we will follow following general steps==\n[[File:3D Discretization.JPG|thumb|400px|center|3D Discretization]]\nGrid formation:\n\n1. Divide the domain into discrete control volume.\n\n2. Place the nodal point between end points defining the physical boundaries. Boundaries/ faces of the control volume are created midway between adjacent nodes.\n\n3. Set up the control volume near the edge of domain such that physical as well as control volume boundaries will coincide with each other.\n\n4. Considering a general nodal point P accompanied by six neighboring nodal point ‘E’ (which represent east), ‘W’ (which represent west), ‘N’ (which represent north), ‘S’ (which represent south), ‘T’ (which represent Top), ‘B’ (which represent bottom). In the considered control volume east side face is referred by ‘e’, west side face is referred by ‘w’, north side face is referred by ‘n’, south side face is referred by ‘s’, top side face is referred by ‘t’, bottom side face is referred by ‘b’.\n\n5. Now the distance between nodes W and P, between nodes P and E, between nodes P and N, between nodes S and P, between nodes P and T, between nodes B and P are denoted as <math> {\\delta x_{WP}} , {\\delta x_{PE}} , {\\delta x_{PN}} , {\\delta x_{SP}} , {\\delta x_{PT}} , {\\delta x_{BP}} </math>respectively.\n\nDiscretisation:\n\nOn integration of equation 3 in one dimension over the general control volume gives:\n\n [<math>\\left ( \\Gamma A \\frac{d\\phi }{dx} \\right )_e - \\left ( \\Gamma A \\frac{d\\phi }{dx} \\right )_w] + [\\left ( \\Gamma A \\frac{d\\phi }{dx} \\right )_n - \\left ( \\Gamma A \\frac{d\\phi }{dx} \\right )_s] + [\\left ( \\Gamma A \\frac{d\\phi }{dx} \\right )_t - \\left ( \\Gamma A \\frac{d\\phi }{dx} \\right )_b] + \\overrightarrow{S} \\Delta V = 0</math>\n\nNow using central differencing method we can rewrite above equation as\n\n[<math>\\Gamma_eA_e\\left ( \\frac{\\phi_E - \\phi_P}{\\delta x_{PE}}\\right ) - \\Gamma_wA_w\\left ( \\frac{\\phi_P - \\phi_W}{\\delta x_{PE}}\\right )] + [\\Gamma_nA_n\\left ( \\frac{\\phi_E - \\phi_P}{\\delta x_{PE}}\\right ) - \\Gamma_s A_s\\left ( \\frac{\\phi_P - \\phi_W}{\\delta x_{PE}}\\right )] +  [\\Gamma_tA_t\\left ( \\frac{\\phi_E - \\phi_P}{\\delta x_{PE}}\\right ) - \\Gamma_bA_b\\left ( \\frac{\\phi_P - \\phi_W}{\\delta x_{PE}}\\right )] + (S_u + S_p\\phi_p) = 0 </math>\n\nThis can be rearranged to give the discretised equation for interior nodes:\n\n<math>a_P\\phi_P = a_W\\phi_W + a_E\\phi_E + a_S\\phi_S + a_N\\phi_N + a_B\\phi_B + a_T\\phi_T + S_u</math>\n\nWhere\n{| class=\"wikitable\"\n|-\n! <math>a_W</math> !! <math>a_E</math> !! <math>a_S</math> !! <math>a_N</math> !! <math>a_B</math> !! <math>a_T</math> !! <math>a_P</math>\n|-\n| <math> \\frac{\\Gamma_w}{\\delta x_{WP}} A_w</math>  || <math>\\frac{\\Gamma_e}{\\delta x_{PE}} A_e</math> || <math>\\frac{\\Gamma_s}{\\delta x_{SP}} A_s</math> ||  <math>\\frac{\\Gamma_n}{\\delta x_{PN}} A_n</math> ||  <math>\\frac{\\Gamma_b}{\\delta x_{BP}} A_w</math> ||<math>\\frac{\\Gamma_t}{\\delta x_{PT}} A_t</math> || <math>a_W + a_E + a_S + a_N + a_B + a_T - S_P </math>\n|}\n\nSolution of equation:\n\n1.\tFor solving the one- dimensional convection- diffusion problem we have to express equation (8) at all the grid nodes.\n\n2.\tNow obtained set of algebraic equations is then solved to obtain the distribution of the transported property <math>\\phi</math>.\n\n==See also==\n*[[Finite volume method]]\n*[[Computational fluid dynamics]]\n*[[Finite volume method for one-dimensional steady state diffusion]]\n*[[Convection]]\n*[[Control volume]]\n*[[Central differencing scheme]]\n\n==External links==\n*http://mathworld.wolfram.com/FiniteVolumeMethod.html\n* [http://www.cmi.univ-mrs.fr/~herbin/PUBLI/bookevol.pdf The finite volume method] by R. Eymard, T Gallouët and R. Herbin, update of the article published in Handbook of Numerical Analysis, 2000\n*https://web.archive.org/web/20140210101323/http://s6.aeromech.usyd.edu.au/aero/cvanalysis/integral_approach.pdf\n*http://www.phy.davidson.edu/fachome/dmb/py200/centraldiff.htm\n*http://opencourses.emu.edu.tr/course/view.php?id=27&lang=en\n\n==References==\n{{Reflist}}\n<ref>Date Anil- Introduction to Computational Fluid Dynamics</ref>\n<ref>Lomax, Pulliam- Fundamentals of Computational Fluid Dynamics</ref>\n<ref>Fletcher C.A.J- Computational techniques for fluid dynamics</ref>\n<ref>J. Ferziger, M.  Peric - Computational Methods for Fluid Dynamics</ref>\n<ref>H. Versteeg, W. Malalasekra  -  An Introduction To Computational Fluid Dynamics</ref>\n<ref>J. Blazek - Computational Fluid Dynamics - Principles and Applications</ref><ref>T. Chung  - Computational Fluid Dynamics</ref>\n<ref>Hoffmann - Computational Fluid Dynamics</ref>\n<ref>Anderson J D- Computational fluid dynamics - The basics with applications</ref>\n<ref>Tannehill Anderson Pletcher- Computational Fluid Mechanics And Heat Transfer</ref>\n\n\n\n[[Category:Computational fluid dynamics]]\n[[Category:Mathematical problems]]"
    },
    {
      "title": "Finite volume method for two dimensional diffusion problem",
      "url": "https://en.wikipedia.org/wiki/Finite_volume_method_for_two_dimensional_diffusion_problem",
      "text": "\nThe methods used for solving two dimensional [[Diffusion]] problems are similar to those used for one dimensional problems. The general equation for steady diffusion can be easily derived from the general transport equation for property ''Φ'' by deleting transient and convective terms<ref>{{cite web|author= |url=http://www.efunda.com/formulae/fluids/navier_stokes.cfm |title=Navier-Stokes Equations in Fluid Mechanics |publisher=Efunda.com |date= |accessdate=2013-10-29}}</ref>\n\n<math>\\frac{\\partial{}}{\\partial{}x}\\left(\\Gamma{}\\frac{\\partial{}\\phi{}}{\\partial{}x}\\right)+\\frac{\\partial{}}{\\partial{}y}\\left(\\Gamma{}\\frac{\\partial{}\\phi{}}{\\partial{}y}\\right)+S=0</math>\n\nwhere,<br />\n<math>\\Gamma</math> is the Diffusion coefficient<ref>{{cite web|url=http://www.life.illinois.edu/crofts/bioph354/diffusion1.html |title=Diffusion – useful equations |publisher=Life.illinois.edu |date= |accessdate=2013-10-29}}</ref> and <math>S</math> is the Source term.<ref>{{cite web|url=http://www.physics.drexel.edu/~valliere/PHYS405/DiffusionEquation/diffusion.html |title=SSCP: Programming Strategies |publisher=Physics.drexel.edu |date= |accessdate=2013-10-29}}</ref><br />\n\nA portion of the two dimensional [[Polygon mesh|grid]] used for [[Discretization]] is shown below:\n\n[[File:Cfd graph.jpg|thumb|Graph of 2 dimensional plot]]\n\nIn addition to the east (E) and west (W) neighbors, a general grid node P , now also has north (N) and south (S) neighbors. The same notation is used\nhere for all faces and cell dimensions as in one dimensional analysis. When the above equation is formally integrated over the [[Control volume]], we obtain\n\n<math>\\int_{\\Delta{v}}\\frac{\\partial{}}{\\partial{}x}\\left(\\Gamma{}\\frac{\\partial{}\\phi{}}{\\partial{}x}\\right)dx.dy+\\int_{\\Delta{v}}\\frac{\\partial{}}{\\partial{}y}\\left(\\Gamma{}\\frac{\\partial{}\\phi{}}{\\partial{}y}\\right)dx.dy+\\int_{\\Delta{v}}S_{\\phi{}}dV=0</math>\n\nUsing the divergence theorem, the equation can be rewritten as :\n\n<math>\n\\left[{\\Gamma{}}_eA_e\\left(\\frac{\\partial{}\\phi{}}{\\partial{}x}\\right)_{e}-{\\Gamma{}}_wA_w\\left(\\frac{\\partial{}\\phi{}}{\\partial{}x}\\right)_{w}\\right]+\\left[{\\Gamma{}}_nA_n\\left(\\frac{\\partial{}\\phi{}}{\\partial{}y}\\right)_{n}-{\\Gamma{}}_sA_s\\left(\\frac{\\partial{}\\phi{}}{\\partial{}y}\\right)_{s}\\right]+\\bar{S}\\Delta{}V=0\n\n</math>\n\nThis equation represents the balance of generation of the property φ in a [[Control volume]] and the [[Flux|fluxes]] through its cell faces. The derivatives can by represented as follows by using [[Taylor series]] approximation:\n\n<math>\n{{\\Gamma{}}_wA_w\\left(\\frac{\\partial{}\\phi{}}{\\partial{x}}\\right)}_w=\n{\\Gamma{}}_wA_w\\frac{({\\phi{}}_p-{\\phi{}}_w)}{{\\delta{}x}_{WP}}\n</math>\n\nFlux across the east face =\n\n<math>\n{{\\Gamma{}}_eA_e\\left(\\frac{\\partial{}\\phi{}}{\\partial{x}}\\right)}_e=\n{\\Gamma{}}_eA_e\\frac{({\\phi{}}_e-{\\phi{}}_p)}{{\\delta{}x}_{PE}}\n</math>\n\nFlux across the south face =\n\n<math>\n{{\\Gamma{}}_sA_s\\left(\\frac{\\partial{}\\phi{}}{\\partial{y}}\\right)}_s=\n{\\Gamma{}}_sA_s\\frac{({\\phi{}}_p-{\\phi{}}_s)}{{\\delta{}y}_{SP}}\n</math>\n\nFlux across the north face =\n\n<math>\n{{\\Gamma{}}_nA_n\\left(\\frac{\\partial{}\\phi{}}{\\partial{y}}\\right)}_n=\n{\\Gamma{}}_nA_n\\frac{({\\phi{}}_n-{\\phi{}}_p)}{{\\delta{}y}_{PN}}\n</math>\n\nSubstituting these expressions in equation (2) we obtain \n\n<math>\n{\\Gamma{}}_eA_e\\frac{({\\phi{}}_e-{\\phi{}}_p)}{{\\delta{}x}_{PE}} - {\\Gamma{}}_wA_w\\frac{({\\phi{}}_p-{\\phi{}}_w)}{{\\delta{}x}_{WP}} + {\\Gamma{}}_nA_n\\frac{({\\phi{}}_n-{\\phi{}}_p)}{{\\delta{}y}_{PN}} - {\\Gamma{}}_sA_s\\frac{({\\phi{}}_p-{\\phi{}}_s)}{{\\delta{}y}_{SP}}+ \\bar{S}\\Delta{}V=0\n</math>\n\nWhen the source term is represented in linearized form <math> \\bar{S}\\Delta{}V = S_u + S_p*S_{\\varphi}</math> ,\nthis equation can be rearranged as,\n\n<math>\\left[\n\\frac{{\\Gamma{}}_eA_e}{{\\delta{}x}_{PE}}\n + \\frac{{\\Gamma{}}_wA_w}{{\\delta{}x}_{WP}}\n + \\frac{{\\Gamma{}}_nA_n}{{\\delta{}y}_{PN}}\n + \\frac{{\\Gamma{}}_sA_s}{{\\delta{}y}_{SP}}\n- S_p\\right] \\phi{}_P </math> = \n<math> \n\\frac{{\\Gamma{}}_eA_e}{{\\delta{}x}_{PE}}\\phi{}_E\n + \\frac{{\\Gamma{}}_wA_w}{{\\delta{}x}_{WP}}\\phi{}_W\n + \\frac{{\\Gamma{}}_nA_n}{{\\delta{}x}_{PN}}\\phi{}_N\n + \\frac{{\\Gamma{}}_sA_s}{{\\delta{}x}_{SP}}\\phi{}_S\n+ S_u  </math>\n\n\nThis equation can now be expressed in a general [[Discretization|discretized]] equation form for internal nodes, i.e.,\n\n<math>a_P \\phi{}_P= a_W \\phi{}_W + a_E \\phi{}_E + a_S \\phi{}_S + a_N \\phi{}_N + S_u</math>\n\nWhere,\n\n{| class=\"wikitable\"\n|-\n! <math>a_W</math> !! <math>a_E</math> !! <math>a_S</math> !! <math>a_N</math> !! <math>a_P</math>\n|-\n|<math>\\frac{{\\Gamma{}}_wA_w}{{\\delta{}x}_{WP}}\n</math>  || <math>\\frac{{\\Gamma{}}_eA_e}{{\\delta{}x}_{PE}}\n</math> || <math>\\frac{{\\Gamma{}}_sA_s}{{\\delta{}x}_{SP}}\n</math> || <math>\\frac{{\\Gamma{}}_nA_n}{{\\delta{}x}_{PN}}\n</math> || <math>a_W+a_E+a_S+a_N-S_p</math>\n|}\n\n\nThe face areas in y two dimensional case are :\n <math> A_{w} = A_{e} = \\Delta{}y </math> \nand\n <math> A_{n} = A_{s} = \\Delta{}x</math>.\n\nWe obtain the distribution of the property <math>\\varphi{}</math> i.e. a given two dimensional situation by writing [[Discretization|discretized]] equations of the form of equation (3) at each grid node of the subdivided domain. At the boundaries where the temperature or fluxes are known the discretized equation are modified to incorporate the [[Boundary value problem|boundary conditions]]. The boundary side coefficient is set to zero (cutting the link with the boundary) and the flux crossing this boundary is introduced as a source which is appended to any existing <math>s_{u} </math> and <math> S_{p}</math> terms. Subsequently the resulting set of equations is solved to obtain the two dimensional distribution of the property <math>\\varphi{}</math>\n\n==References==\n* Patankar, Suhas V. (1980), Numerical Heat Transfer and Fluid Flow, Hemisphere.\n* Hirsch, C. (1990), Numerical Computation of Internal and External Flows, Volume 2: Computational Methods for Inviscid and Viscous Flows, Wiley.\n* Laney, Culbert B.(1998), Computational Gas Dynamics, Cambridge University Press.\n* LeVeque, Randall(1990), Numerical Methods for Conservation Laws, ETH Lectures in Mathematics Series, Birkhauser-Verlag.\n* Tannehill, John C., et al., (1997), Computational Fluid mechanics and Heat Transfer, 2nd Ed., Taylor and Francis.\n* Wesseling, Pieter(2001), Principles of Computational Fluid Dynamics, Springer-Verlag.\n* Carslaw, H. S. and Jager, J. C. (1959). Conduction of Heat in Solids. Oxford: Clarendon Press\n* Crank, J. (1956). The Mathematics of Diffusion. Oxford: Clarendon Press\n* Thambynayagam, R. K. M (2011). The Diffusion Handbook: Applied Solutions for Engineers: McGraw-Hill\n{{reflist}}\n\n== External links ==\n* http://opencourses.emu.edu.tr/course/view.php?id=27&lang=en\n* http://www.nptel.iitm.ac.in/courses/112105045/\n* http://ingforum.haninge.kth.se/armin/CFD/dirCFD.htm\n* [[Diffusion equation]]\n* [[Computational fluid dynamics]]\n* [[Convection–diffusion equation]]\n* [http://www.math.uci.edu/~chenlong/226/FVM.pdf Finite volume method, Cheng Long]\n* [http://www.scholarpedia.org/article/Finite_volume_method Finite volume method, Robert Eymard et al. (2010), Scholarpedia,5(6):9835]\n\n== See also ==\n*[[Computational fluid dynamics]]\n* [[Finite difference]]\n* [[Heat equation]]\n* [[Fokker-Planck equation]]\n* [[Fick's law of diffusion]]: [[Fick's law of diffusion#Second law|Fick's Second Law]]\n* [[Maxwell-Stefan equation]]\n*[[Diffusion equation]]\n\n[[Category:Computational fluid dynamics]]"
    },
    {
      "title": "Finite volume method for unsteady flow",
      "url": "https://en.wikipedia.org/wiki/Finite_volume_method_for_unsteady_flow",
      "text": "Unsteady flows are characterized as flows in which the properties of the fluid are time dependent. It gets reflected in the governing equations as the time derivative of the properties are absent.\nFor Studying [[Finite-volume method]] for unsteady flow there is some governing equations\n<ref>{{cite web|url=https://books.google.com/books+finite+volume+method+for+unsteady+flows |accessdate=November 10, 2013 }}{{dead link|date=June 2016|bot=medic}}{{cbignore|bot=medic}}</ref>>\n\n==Governing Equation==\nThe conservation equation for the transport of a scalar in unsteady flow has the general form as <ref>An Introduction to Computational Fluid Dynamics H. K. Versteeg and W Malalasekra Chapter 8 page 168</ref>\n\n<math>\\frac{\\partial \\rho \\phi }{\\partial t} + \\operatorname{div}(\\rho \\phi \\upsilon) = \\operatorname{div}(\\Gamma \\operatorname{grad}  \\phi) + S_\\phi</math>\n\n<math>\\rho</math> is [[density]] and <math> \\phi </math> is conservative form of all fluid flow,<br />\n<math>\\Gamma</math> is the Diffusion coefficient and <math>S</math> is the Source term.\n<math>\\operatorname{div}(\\rho \\phi \\upsilon)</math> is Net rate of flow of  <math> \\phi </math> out of fluid element([[convection]]), <br />\n<math>\\operatorname{div}(\\Gamma \\operatorname{grad}  \\phi) </math> is Rate of increase of <math> \\phi </math> due to [[diffusion]], <br />\n<math> S_\\phi</math> is Rate of increase of <math>\\phi</math> due to sources.\n\n<math>\\frac{\\partial \\rho \\phi }{\\partial t} </math> is Rate of increase of <math> \\phi </math> of fluid element(transient),\n\nThe first term of the equation reflects the unsteadiness of the flow and is absent in case of steady flows. The finite volume integration of the governing equation is carried out over a control volume and also over a finite time step ∆t.\n\n<math>\\int\\limits_{cv} \\!\\!\\!\\int_t^ {t+\\Delta t} (\\frac{\\partial \\rho \\phi }{\\partial t} \\,dt)\\,dV + \\int_t^ {t+\\Delta t}\\!\\!\\!\\int\\limits_A (n.{\\rho \\phi u} \\,dA)\\,dt = \\int_t^ {t+\\Delta t}\\!\\!\\!\\int\\limits_A (n.(\\Gamma \\operatorname{grad}  \\phi)\\,dA)\\,dt +\\int_t^ {t+\\Delta t} \\!\\!\\!\\int\\limits_{cv} S_\\phi\\,dV\\,dt </math>\n\nThe [[control volume]] integration of the [[steady state|steady]] part of the equation is similar to the [[steady state]] governing equation’s integration. We need to focus on the integration of the unsteady component of the equation. To get a feel of the integration technique, we refer to the one-dimensional unsteady [[heat conduction]] equation.<ref>An Introduction to COmputational Fluid Dynamics H. K. Versteeg and W Malalasekera Chapter 8 page 169</ref>\n\n<math> \\rho c \\frac{\\partial T} {\\partial t} = \\frac{\\partial \\frac{ k \\partial T} {\\partial x}} {\\partial x} + S </math>\n\n<math>\\int_t^ {t+\\Delta t} \\!\\!\\!\\int\\limits_{cv} \\rho c \\frac{\\partial T} {\\partial t}\\,dV\\,dt = \\int_t^ {t+\\Delta t} \\!\\!\\!\\int\\limits_{cv} \\frac{\\partial \\frac{ k \\partial T} {\\partial x}} {\\partial x}\\,dV\\,dt + \\int_t^ {t+\\Delta t} \\!\\!\\!\\int\\limits_{cv} S\\,dV\\,dt</math>\n\n<math>\\int_e^w \\!\\!\\!\\int_t^ {t+\\Delta t} (\\rho c \\frac{\\partial T} {\\partial t}\\,dt)\\,dV = \\int_t^ {t+\\Delta t} [ (k A \\frac{\\partial T} {\\partial x})_e - (k A \\frac{\\partial T} {\\partial x})_w]\\,dt + \\int_t^ {t+\\Delta t} \\bar S\\Delta V \\,dt </math>\n\nNow, holding the assumption of the [[temperature]] at the node being prevalent in the entire control volume, the left side of the equation can be written as <ref name=\"sciencedirect\">{{cite journal|url=http://www.sciencedirect.com/science/article/pii/S002199910096546X|title=A Second-Order Time-Accurate Finite Volume Method for Unsteady Incompressible Flow on Hybrid Unstructured Grids|accessdate=2015-07-08 | doi=10.1006/jcph.2000.6546|volume=162|issue=2|journal=Journal of Computational Physics|pages=411–428|date=2000-08-10|last1=Kim|first1=Dongjoo|last2=Choi|first2=Haecheon}}</ref>\n\n<math>\\int\\limits_{cv} \\!\\!\\!\\int_t^ {t+\\Delta t} (\\rho c \\frac{\\partial T} {\\partial t}\\,dt)\\,dV = \\rho c(T_P - {T_P}^O) \\Delta V </math>\n\nBy using a [[first order]] backward differencing scheme, we can write the right hand side of the equation as\n\n<math> \\rho c (T_P - {T_P}^0) \\Delta V = \\int_t^{t+\\Delta t} [( K_e A \\frac {T_E - T_P} {\\delta x_{PE}}) - ( K_w A \\frac {T_P - T_W} { \\delta x_{WP}})] \\,dt + \\int_t^{t+\\Delta t} \\bar S\\Delta V \\,dt </math>\n\nNow to evaluate the right hand side of the equation we use a weighting parameter <math> \\theta </math> between 0 and 1, and we write the integration of <math> T_P </math>\n\n<math> I_T = \\int_t^{t+\\Delta t} T_P \\,dt = [ \\theta T_P - (1 - \\theta ) {T_P}^0 ] \\Delta t </math>\n\nNow, the exact form of the final discretised equation depends on the value of <math> \\Theta </math>. As the variance of <math> \\Theta </math> is 0< <math> \\Theta </math> <1, the scheme to be used to calculate <math> T_P </math> depends on the value of the <math> \\Theta </math>\n\n== Different Schemes ==\n1. '''Explicit Scheme''' in the explicit scheme the source term is linearised as <math> b = S_u + {S_P}{T_P}^0 </math>. We substitute <math> \\theta = 0 </math> to get the explicit discretisation i.e.:<ref>An Introduction to Computational Fluid Dynamics H. K. Versteeg and W Malalasekera Chapter 8 page 171</ref>\n\n<math> a_P T_P = a_w {T_w}^0 + a_e {T_e}^0 + [ {a_P}^0 - ( a_w + a_e - S_P )] {T_P}^0 + S_u </math>\n\nwhere <math> a_P = {a_P}^0 </math>. One thing worth noting is that the right side contains values at the old time step and hence the left side can be calculated by forward matching in time. The scheme is based on backward differencing and its Taylor series truncation error is first order with respect to time. All coefficients need to be positive. For constant k and uniform grid spacing, <math> \\delta x_{PE} =  \\delta x_{WP} = \\Delta x </math> this condition may be written as\n\n<math> \\rho c \\frac { \\Delta x } { \\Delta t } > \\frac {2K} { \\Delta x } </math>\n\nThis inequality sets a stringent condition on the maximum time step that can be used and represents a serious limitation on the scheme. It becomes very expensive to improve the spatial accuracy because the maximum possible time step needs to be reduced as the square of <math> \\Delta x </math> <ref>http://opencourses.emu.edu.tr/mod/resource/view.php?id=489 topic 7</ref>\n\n2. '''Crank Nicholson scheme''' : the crank Nicholson scheme results from setting <math> \\theta = \\frac {1}{2}</math>. The discretised unsteady heat conduction equation becomes\n\n<math> a_P T_P = a_E [ \\frac {T_E + {T_E}^0} {2}] + a_W [ \\frac {T_W + {T_W}^0} {2}] + [ {a_P}^0 - \\frac {a_E} {2} - \\frac {a_W} {2}] {T_P}^0 + b </math>\n\nWhere <math> a_P = \\frac {a_W + a_E} {2} + {a_P}^0 - \\frac {S_P} {2} </math>\n\nSince  more  than  one  unknown  value  of  T  at  the  new  time  level  is  present  in  equation the  method  is  implicit  and  simultaneous  equations  for  all  node  points  need  to  be  solved  at each time step. Although  schemes  with <math> \\frac {1}{2} < \\theta < 1 </math> including  the  Crank-Nicolson  scheme, are unconditionally  stable  for  all  values  of  the  time  step it  is  more  important  to ensure that all coefficients are positive for physically realistic and bounded results. This is the case if the coefficient of <math> {T_P}^0</math> satisfies the following condition\n\n<math> {a_P}^0 = [ \\frac {a_E + a_W} {2} ]</math>\n\nwhich leads to\n\n<math> \\Delta t < \\rho c \\frac { \\Delta x^2} {K} </math>\n\nthe crank Nicholson is based on central differencing and hence is second order accurate in time. The  overall accuracy  of a computation  depends  also on the  spatial differencing  practice, so the  Crank-Nicolson  scheme  is  normally  used  in  conjunction  with  spatial  central differencing\n\n3. '''Fully implicit Scheme''' when the value of Ѳ is set to 1 we get the fully implicit scheme. The discretised equation is:\n<ref>http://opencourses.emu.edu.tr/course/view.php?id=27&lang=en topic 7</ref>\n\n<math> a_P T_P = a_W T_W + a_E T_E + {a_P}^0 {T_P}^0 + S_u </math>\n\n<math> a_P = {a_P}^0 + a_W + a_E - S_P </math>\n\nBoth  sides  of  the  equation  contain  temperatures  at  the  new  time  step, and  a  system  of  algebraic equations must be solved at each time level. The  time  marching  procedure starts  with  a  given  initial  field  of  temperatures  <math> T^0 </math>. The system of equations is solved after selecting time step <math> \\Delta t </math>. Next the solution <math> T </math> is assigned to <math> T^0 </math> and the procedure is repeated to progress the solution by a further time step. It  can  be  seen  that  all  coefficients  are  positive, which  makes  the  implicit  scheme  unconditionally stable  for  any  size  of  time  step. Since  the  accuracy  of  the  scheme  is  only  first-order  in  time, small time steps are needed to ensure the accuracy of results. The  implicit  method  is  recommended  for  general  purpose  transient  calculations  because  of  its robustness and unconditional stability\n\n==References==\n{{reflist}}\n\n[[Category:Computational fluid dynamics]]"
    },
    {
      "title": "FLACS",
      "url": "https://en.wikipedia.org/wiki/FLACS",
      "text": "{{primary sources|date=July 2013}}\n{{Infobox Software\n|name = FLACS\n|screenshot = \n|caption = \n|developer = [[GexCon AS]]\n|latest_release_version = 10.1\n|operating_system = [[Microsoft Windows]], [[Linux]]\n|genre = [[Computational fluid dynamics]] software\n|license = [[Proprietary software]]\n|website = [http://www.gexcon.com/flacs-software www.flacs.com]\n}}\n\n'''FLACS''' ('''FL'''ame '''AC'''celeration '''S'''imulator) is a commercial [[Computational Fluid Dynamics]] (CFD) software used extensively for [[explosion]] modeling and [[atmospheric dispersion modeling]] within the field of industrial safety and [[risk assessment]]. Main application areas of FLACS are in [[petrochemical]], [[process manufacturing]], [[food processing]], [[wood processing]], metallurgical, and [[nuclear safety]] industries.\n\nFLACS has dedicated modules to simulate [[gas explosion]],<ref>http://www.bakerrisk.com/services/consequence-and-risk-analysis/computational-fluid-dynamics/flacs-explosion-analysis/</ref><ref>http://www.safetec.no/article.php?id=118</ref><ref>http://www.forskningsradet.no/prognett-renergi/Nyheter/Nyhet/1253965946984?lang=no</ref> [[dust explosion]] and explosions involving chemical explosives like [[TNT]]. FLACS is also extensively used to simulate flammable and toxic gas dispersion.<ref>[[Pipeline and Hazardous Materials Safety Administration]] approval of FLACS for [[LNG]] studies in USA  http://gexcon.com/images/uploads/files/issue13_FLACS_Newsletter_2011.pdf</ref><ref>http://www.gl-nobledenton.com/en/consulting/flacs-capability-expansion.php</ref> It was applied in the investigation of many high profile accidents such as [[Buncefield fire]],<ref>Buncefield explosion study https://www.youtube.com/watch?v=fDVdipBgKSY</ref><ref>{{cite web |url=http://www.buncefieldinvestigation.gov.uk/ |title=Archived copy |accessdate=2013-07-15 |deadurl=yes |archiveurl=https://web.archive.org/web/20130520204238/http://buncefieldinvestigation.gov.uk/ |archivedate=2013-05-20 |df= }}</ref> [[Piper Alpha]], [[TWA Flight 800]],<ref>Sandia report on modeling TWA-800 tank explosion http://www.galcit.caltech.edu/resources/search_galcit?q=flacs</ref> and the [[Petrobras 36]] platform.\n\n==History==\nFLACS software development started in-house in the early 1980s under the sponsorship program, Gas Explosion Safety (GSP), funded by the oil companies [[BP]], [[Elf Aquitaine]], [[Esso]], [[Mobil]], [[Norsk Hydro]] and [[Statoil]]. FLACS-86 was released to GSP sponsors in 1986. Continuous research and development from then onwards resulted in many commercial releases. In 2006, FLACS v8.1 was released to customers. Till then FLACS was developed for [[Unix]] and [[Linux]] platforms. In 2008, however, FLACS v9.0 was released for [[Microsoft Windows]] platform. FLACS v9.1 and FLACS-Wind was developed in 2010. A fully parallelized FLACSv10.0 (using [[OpenMP]]) with a new solver for incompressible flows was released in 2012. FLACSv10.0 also constitutes a Homogeneous Equilibrium Model (HEM) for [[two-phase flow]] calculations.\n\n== Related software==\n* [[ANSYS CFX|CFX]] (proprietary software)\n* [[Fire Dynamics Simulator]] (GPL)\n* [[OpenFOAM]] (GPL)\n* [[Kameleon FireEx KFX|KFX]] DNV GL\n\n==See also==\n* [[Computational fluid dynamics]]\n* [[Computer simulation]]\n* [[Gas explosion]]\n* [[Dust explosion]]\n* [[Atmospheric dispersion modeling]]\n\n== References ==\n{{reflist}}\n\n==External links==\n* [http://www.gexcon.com/flacs-software FLACS official website]\n* [http://www.gexcon.com/ GexCon AS] (FLACS developers)\n\n[[Category:Computational fluid dynamics]]"
    },
    {
      "title": "Flow Science, Inc.",
      "url": "https://en.wikipedia.org/wiki/Flow_Science%2C_Inc.",
      "text": "{{Infobox company\n| name = Flow Science, Inc.\n| logo = \n| type = Private\n| predecessor = \n| successor = \n| foundation = 1980\n| founder = Dr. C.W. \"Tony\" Hirt\n| location_city = Santa Fe, New Mexico, USA\n| num_locations = 5\n| location_country = United States\n| key_people = Dr. Amir Isfahani, President & CEO\n| industry = Computational Fluid Dynamics Software\n| products = FLOW-3D, FLOW-3D/MP, FLOW-3D CAST, FLOW-3D CLOUD, FlowSight\n| services = CFD consultation and services\n| revenue = \n| operating_income = \n| net_income = \n| owner = \n| num_employees = \n| parent = \n| divisions = \n| subsid = Flow Science Deutschland, Flow Science Japan, Flow Science China, Flow Science India and Flow Science Latin America\n| homepage = [https://www.flow3d.com www.flow3d.com]\n| footnotes = \n| intl = \n}}\n\n'''Flow Science, Inc.''' is a developer of software for [[computational fluid dynamics]], also known as CFD, a branch of [[fluid mechanics]] that uses numerical methods and algorithms to solve and analyze problems that involve fluid flows. \n\n==History==\n\nThe firm was founded by Dr. C. W. \"Tony\" Hirt, previously a scientist at   [[Los Alamos National Laboratory]] (LANL). Hirt was known for having pioneered the [[volume of fluid method]] (VOF) for tracking and locating the free surface or fluid-fluid interface. T Hirt<ref>Nichols, B.D. and Hirt, C.W. “Methods for Calculating Multi-Dimensional Transient Free Surface Flows Past Bodies,” Proceedings First International Conference Numerical Ship Hydrodynamics, Gaithersburg, MD, October 20–23, 1975.</ref> <ref>Hirt, C.W.; Nichols, B.D. (1981), \"[http://www.sciencedirect.com/science/article/pii/0021999181901455 Volume of fluid (VOF) method for the dynamics of free boundaries],\" Journal of Computational Physics 39 (1): 201–225, 1981.</ref> left LANL and founded Flow Science in 1980 to develop CFD software for industrial and scientific applications using the VOF method .<ref>Bloomberg Business Week, “[http://investing.businessweek.com/research/stocks/private/person.asp?personId=114764972&privcapId=23722522&previousCapId=23722522&previousTitle=Flow%20Science,%20Inc. C. W. Hirt Executive Profile].”</ref> \n   \nThe company is located in [[Santa Fe, New Mexico]]. The company opened an office in Japan in June 2011,<ref>“[http://www.jetro.org/content/956 Flow Science Opens Office in Japan, President Affirms Positive Market Outlook after Quake],” JETRO Spotlight United States, June 11, 2011.</ref> and an office in Germany in 2012.<ref>\"[https://www.cfd-online.com/Forum/news.cgi/read/59026 Flow Science Deutschland GmbH Formed to Represent FLOW-3D Software],\" CFD Online News and Announcements, June 4, 2012.</ref>\n\n==Products==\n\nThe company's products include FLOW-3D, a CFD software analyzing various physical flow processes; FLOW-3D CAST, a software product for metal casting users; FLOW-3D/MP, a CFD high performance computing product; and FLOW-3D CLOUD, a cloud computing service installed on [[Penguin Computing]] On Demand (POD). FLOW-3D software uses a fractional areas/volumes approach called FAVOR for defining problem geometry, and a free-gridding technique for mesh generation.<ref>Pamela J. Waterman, “[https://www.digitalengineering247.com/article/zeroing-in-on-cfd-solutions/ Zeroing in on CFD Solutions],” Desktop Engineering, August 30, 2009.</ref> \n\n''Desktop Engineering Magazine, ''in a review of FLOW-3D Version 10.0, said: “Key enhancements include fluid structure interaction (FSI) and thermal stress evolution (TSE) models that use a combination of conforming finite-element and structured finite-difference meshes. You use these to simulate and analyze the deformations of solid components as well as solidified fluid regions and resulting stresses in response to pressure forces and thermal gradients.”<ref>Anthony J. Lockwood, “Editors Pick: Flow Science Release FLOW-3D Version 10.0”, Desktop Engineering, August 9, 2011.</ref>\n\nKey improvements of FLOW-3D Version 11.0 included increased meshing capabilities, solution sub-domains, an improved core gas model and improved surface tension model. FLOW-3D v11.0 also included a new visualization tool, FlowSight.<ref>\"[https://www.foundrymag.com/new-products/new-visualization-tool-drives-flow-3d-version-11]\" Foundry Magazine, May 30, 2014.</ref>\n\n==Applications==\n\nBlue Hill Hydraulics used FLOW-3D software to update the design of a fish ladder on [[Mt. Desert Island]], Maine, that helps alewife migrate to the fresh water spawning habitat. T.<ref>John E. Richardson, “[http://www.deskeng.com/articles/aaaejd.htm CFD Saves the Alewife],” Desktop Engineering, July 2, 2007.</ref> \n\n[[AECOM|AECOM Technology Corporation]] studied emergency overflows from the Powell Butte Reservoir and demonstrated that the existing energy dissipation structure was not capable of handling {{convert|170|e6USgal|m3}} per day, the maximum expected overflow rate. The FLOW-3D simulation demonstrated that problem could be solved by increasing the height of the wing walls by exactly one foot.<ref>Liaqat A. Khan, “[http://ascelibrary.org/proceedings/resource/2/ascecp/414/41173/155_1?isAuthorized=no Computational Fluid Dynamics Modeling of Emergency Overflows through an Energy Dissipation Structure of a Water Treatment Plant],” Proceedings of the 2011 World Environmental and Water Resources Congress, American Society of Civil Engineers.</ref> \n\nResearchers from the CAST Cooperative Research Centre and M. Murray Associates developed flow and thermal control methods for the high pressure die casting of thin-walled aluminum components with thicknesses of less than 1&nbsp;mm. FLOW-3D simulation predicted the complex structure of the metal flow in the die and subsequent casting solidification.<ref>Thang Nguyen, Vu Nguyen, Morris Murray, Gary Savage, John Carrig, “[http://www.scientific.net/MSF.690.107 Modeling Die Filling in Ultra-Thin Aluminium Castings],” Materials Science Forum, Volume 690, 2011.</ref> \n\nResearchers at [[DuPont]] used FLOW-3D to optimize coating processes for a solution-coated [[Active-matrix OLED|active-matrix organic light-emitting diode]] (AMOLED) display technology.<ref>Reid Chesterfield, Andrew Johnson, Charlie Lang, Matthew Stainer, and Jonathan Ziebarth, “[http://www2.dupont.com/OLED/en_US/assets/downloads/pdf/frontline_technology_AMOLED.pdf Solution-Coating Technology for AMOLED Displays],” Information Display Magazine, January 2011.</ref> \n\n[[Eastman Kodak Company]] researchers rapidly developed an inkjet printer technology using  FLOW 3-D simulation technology for   predicting the performance of  printhead designs .<ref>Christopher N. Delametter, “[http://www.cfdreview.com/article.pl?sid=08/12/12/1448242&mode=nested Virtual Prototyping Accelerates MEMS/Inkjet Product Development],” CFD Review, December 12, 2008.</ref> \n\nA research team composed of members from Auburn University, Lamar University and RJR Engineering used Flow Science’s TruVOF method as a virtual laboratory to evaluate performance of highway pavement and drainage inlets with different geometries.  <ref>Xing Fang, Shoudong Jiang, Shoeb Alam, “[http://www.eng.auburn.edu/~xzf0001/Papers/CurbInlet_2010.pdf Numerical Simulations of Efficiency of Curb-Opening Inlets],” Journal of Hydraulic Engineering, American Society of Civil Engineers, January 2010.</ref> \n\nResearchers at Albany Chicago LLC and the University of Wisconsin – Milwaukee used FLOW-3D in conjunction with a one-dimensional algorithm to analyze the slow-shot and fast-shot die casting processes in order to reduce the number of iterations required to achieve desired process parameters.<ref>A. Riekher, H. Gerber, K.M. Pillai, T.-C. Jen, “Application of a One-Dimensional Numerical Simulation to Optimize Process Parameters of a Thin-Wall Casting in High Pressure Die Casting,” Die Casting Engineer, May 2009.</ref>\n\n==References==\n<!--- See http://en.wikipedia.org/wiki/Wikipedia:Footnotes on how to create references using <ref></ref> tags which will then appear here automatically -->\n{{Reflist}}\n\n<!-- Categories -->\n[[Category:Companies based in Santa Fe, New Mexico]]\n[[Category:Computational fluid dynamics]]\n[[Category:Software companies based in New Mexico]]"
    },
    {
      "title": "Fluid animation",
      "url": "https://en.wikipedia.org/wiki/Fluid_animation",
      "text": "{{redirect|Fluid Simulation|computer simulations of fluid dynamics|computational fluid dynamics}}\n[[File:Waterincup.gif|frame|An example of a liquid animation generated through simulation]]\n\n'''Fluid animation''' refers to [[computer graphics]] techniques for generating realistic animations of fluids such as water and smoke.<ref>{{cite book|last1=Bridson|first1=Robert|title=Fluid Simulation for Computer Graphics|publisher=CRC Press|edition=2nd|url=https://www.crcpress.com/Fluid-Simulation-for-Computer-Graphics-Second-Edition/Bridson/9781482232837}}</ref> Fluid animations are typically focused on emulating the qualitative visual behavior of a fluid, with less emphasis placed on rigorously correct physical results, although they often still rely on approximate solutions to the [[Euler equations (fluid dynamics)|Euler equations]] or [[Navier–Stokes equations]] that govern real fluid physics. Fluid animation can be performed with different levels of complexity, ranging from time-consuming, high-quality animations for films or visual effects, to simple and fast animations for real-time animations like computer games.<ref>{{cite journal|last1=Mastin|first1=Gary A.|last2=Watterberg|first2=Peter A.|last3=Mareda|first3=John F.|title=Fourier Synthesis of Ocean Scenes|journal=IEEE Computer Graphics and Applications|date=March 1987|volume=7|issue=3|pages=16–23|url=http://www-evasion.imag.fr/people/Fabrice.Neyret/images/fluids-nuages/waves/Jonathan/articlesCG/fourier-synthesis-of-ocean-scenes-87.pdf|doi=10.1109/MCG.1987.276961}}</ref>\n\n== Relationship to computational fluid dynamics ==\n\nFluid animation differs from [[computational fluid dynamics]] (CFD) in that fluid animation is used primarily for visual effects, whereas computational fluid dynamics is used to study the behavior of fluids in a scientifically rigorous way.\n\n== Development ==\n\nThe development of fluid animation techniques based on the Navier–Stokes equations began in 1996, when Nick Foster and Dimitris Metaxas<ref>{{Cite journal|last=Foster|first=Nick|last2=Metaxas|first2=Dimitri|date=1996-09-01|title=Realistic Animation of Liquids|journal=Graphical Models and Image Processing|volume=58|issue=5|pages=471–483|doi=10.1006/gmip.1996.0039|citeseerx=10.1.1.331.619}}</ref> implemented solutions to 3D Navier-Stokes equations in a computer graphics context, basing their work on a scientific CFD paper by Harlow and Welch from 1965.<ref>{{Cite journal|last=Harlow|first=Francis H.|last2=Welch|first2=J. Eddie|date=1965-12-01|title=Numerical Calculation of Time‐Dependent Viscous Incompressible Flow of Fluid with Free Surface|url=http://scitation.aip.org/content/aip/journal/pof1/8/12/10.1063/1.1761178|journal=Physics of Fluids|volume=8|issue=12|pages=2182–2189|doi=10.1063/1.1761178|issn=0031-9171}}</ref> Up to that point, a variety of simpler methods had primarily been used, including ad-hoc particle systems,<ref>{{Cite journal|last=Reeves|first=W. T.|date=1983-04-01|title=Particle Systems—a Technique for Modeling a Class of Fuzzy Objects|journal=ACM Trans. Graph.|volume=2|issue=2|pages=91–108|doi=10.1145/357318.357320|issn=0730-0301|citeseerx=10.1.1.517.4835}}</ref> lower dimensional techniques such as height fields,<ref>{{Cite book|last=Kass|first=Michael|last2=Miller|first2=Gavin|date=1990-01-01|title=Rapid, Stable Fluid Dynamics for Computer Graphics|journal=Proceedings of the 17th Annual Conference on Computer Graphics and Interactive Techniques|series=SIGGRAPH '90|location=New York|publisher=ACM|pages=49–57|doi=10.1145/97879.97884|isbn=978-0897913447}}</ref> and semi-random turbulent noise fields.<ref>{{Cite book|last=Stam|first=Jos|last2=Fiume|first2=Eugene|date=1993-01-01|title=Turbulent Wind Fields for Gaseous Phenomena|journal=Proceedings of the 20th Annual Conference on Computer Graphics and Interactive Techniques|series=SIGGRAPH '93|location=New York|publisher=ACM|pages=369–376|doi=10.1145/166117.166163|isbn=978-0897916011}}</ref> In 1999, Jos Stam published the \"Stable Fluids\"<ref>{{Cite book|last=Stam|first=Jos|date=1999-01-01|title=Stable Fluids|journal=Proceedings of the 26th Annual Conference on Computer Graphics and Interactive Techniques|series=SIGGRAPH '99|location=New York|publisher=ACM Press/Addison-Wesley Publishing Co.|pages=121–128|doi=10.1145/311535.311548|isbn=978-0201485608}}</ref> method, which exploited a [[semi-Lagrangian scheme|semi-Lagrangian]] advection technique and implicit integration of viscosity to provide unconditionally stable behaviour. This allowed for much larger time steps and therefore faster simulations. This general technique was extended by Ronald Fedkiw and co-authors to handle more realistic smoke<ref>{{Cite book|last=Fedkiw|first=Ronald|last2=Stam|first2=Jos|last3=Jensen|first3=Henrik Wann|date=2001-01-01|title=Visual Simulation of Smoke|journal=Proceedings of the 28th Annual Conference on Computer Graphics and Interactive Techniques|series=SIGGRAPH '01|location=New York|publisher=ACM|pages=15–22|doi=10.1145/383259.383260|isbn=978-1581133745|citeseerx=10.1.1.29.2220}}</ref> and fire,<ref>{{Cite book|last=Nguyen|first=Duc Quang|last2=Fedkiw|first2=Ronald|last3=Jensen|first3=Henrik Wann|date=2002-01-01|title=Physically Based Modeling and Animation of Fire|journal=Proceedings of the 29th Annual Conference on Computer Graphics and Interactive Techniques|series=SIGGRAPH '02|location=New York|publisher=ACM|pages=721–728|doi=10.1145/566570.566643|isbn=978-1581135213}}</ref> as well as complex 3D water simulations using variants of the [[level-set method]].<ref>{{Cite book|last=Foster|first=Nick|last2=Fedkiw|first2=Ronald|date=2001-01-01|title=Practical Animation of Liquids|journal=Proceedings of the 28th Annual Conference on Computer Graphics and Interactive Techniques|series=SIGGRAPH '01|location=New York, NY, USA|publisher=ACM|pages=23–30|doi=10.1145/383259.383261|isbn=978-1581133745|citeseerx=10.1.1.21.932}}</ref><ref>{{Cite book|last=Enright|first=Douglas|last2=Marschner|first2=Stephen|last3=Fedkiw|first3=Ronald|date=2002-01-01|title=Animation and Rendering of Complex Water Surfaces|journal=Proceedings of the 29th Annual Conference on Computer Graphics and Interactive Techniques|series=SIGGRAPH '02|location=New York|publisher=ACM|pages=736–744|doi=10.1145/566570.566645|isbn=978-1581135213|citeseerx=10.1.1.19.6229}}</ref>\n\nSome notable academic researchers in this area include Jerry Tessendorf, [[James F. O'Brien]], [[Ron Fedkiw]], Mark Carlson, [[Greg Turk]], [[Robert Bridson]], Ken Museth and [[Jos Stam]].{{citation needed|date=June 2016}}\n\n== Software ==\n\nMany 3D computer graphics programs implement fluid animation techniques. [[RealFlow]] is a standalone commercial package that has been used to produce visual effects in movies, television shows, commercials, and games.{{citation needed|date=June 2016}} RealFlow implements a fluid-implicit particle (FLIP) solver, a hybrid grid, and a [[particle method]] that allows for advanced features such as foam and spray.  [[Autodesk Maya|Maya]] and [[Houdini (software)|Houdini]] are two other 3D computer graphics programs that enable fluid animation. [[Blender (software)|Blender]] is an [[open-source software|open-source]] 3D computer graphics program that utilizes a particle-based [[Lattice Boltzmann methods|Lattice Boltzmann method]] for animating fluids.<ref>{{Cite web|url=https://wiki.blender.org/index.php/Doc:2.4/Manual/Physics/Fluid|title=Doc:2.4/Manual/Physics/Fluid - BlenderWiki|website=wiki.blender.org|access-date=2016-11-04}}</ref>\n\n== See also ==\n\n{{portal|Computer graphics}}\n* [[RealFlow]]\n* [[Autodesk Maya|Maya]]\n* [[Houdini (software)|Houdini]]\n* [[Blender (software)|Blender]]\n\n==References==\n{{Reflist}}\n\n== External links ==\n\n* [http://www.realflow.com/ RealFlow Homepage]\n* [http://www.blender.org Blender Homepage]\n* [http://www.cs.berkeley.edu/b-cam/ Berkeley Computer Animation Homepage]\n\n[[Category:3D computer graphics]]\n[[Category:Computational fluid dynamics]]"
    },
    {
      "title": "Flux-corrected transport",
      "url": "https://en.wikipedia.org/wiki/Flux-corrected_transport",
      "text": "'''Flux-corrected transport (FCT)''' is a [[Conservation law (physics)|conservative]] [[shock capturing|shock-capturing scheme]] for solving [[Euler equations (fluid dynamics)|Euler equation]]s and other [[hyperbolic equation]]s which occur in [[gas dynamics]], [[aerodynamics]], and [[magnetohydrodynamics]]. It is especially useful for solving problems involving [[Shock (mechanics)|shock]] or contact discontinuities. An FCT algorithm consists of two stages, a transport stage and a flux-corrected anti-diffusion stage. The numerical errors introduced in the first stage (i.e., the transport stage) are corrected in the anti-diffusion stage. \n\n==References==\n* Jay P. Boris and David L. Book, \"[http://coaps.fsu.edu/pub/eric_back/OCP5930/Papers/Boris_Book_Flux_Corrected_Transport.pdf Flux-corrected transport, I: SHASTA, a fluid transport algorithm that works]\", ''J. Comput. Phys.'' '''11''', pp. 38 (1973).\n\n==External links==\n\n[http://rsmas.miami.edu/personal/miskandarani/Courses/MPO662/Zalesak/FCT-JCPv31.pdf Fully multidimensional flux-corrected transport algorithms for fluids]\n\n==See also==\n* [[Computational fluid dynamics]]\n* [[Computational magnetohydrodynamics]]\n* [[Shock capturing methods]]\n* [[Volume of fluid method]]\n\n[[Category:Computational fluid dynamics]]\n\n\n{{fluiddynamics-stub}}"
    },
    {
      "title": "Gamma-Re Transition Model",
      "url": "https://en.wikipedia.org/wiki/Gamma-Re_Transition_Model",
      "text": "'''Gamma-Re (γ-Re) transition model''' is a two equation [[Mathematical model|model]] used in [[Computational Fluid Dynamics]] (CFD) to modify turbulent transport equations to simulate [[laminar flow|laminar]], laminar-to-turbulent and turbulence states in a fluid flow. The Gamma-Re model does not intend to model the physics of the problem but attempts to fit a wide range of experiments and transition methods into its formulation. The transition model calculated an [[intermittency]] factor that creates (or [[extinguish|extinguishes]]) turbulence by slowly introducing turbulent production at the laminar-to-turbulent transition location.\n\n[[File:Gamma-Theta Intermittency Values of a Turbomachinery Blade.png|thumb|right|Intermittency Value on a Turbomachinery blade]]<ref>[http://elib.uni-stuttgart.de/opus/volltexte/2006/2801/pdf/Kap01_05_1.pdf]; R.B. Langtry. A Correlation-Based Transition Model using Local Variables for Unstructured Parallelized CFD Code. University of Stuttgart, PhD Thesis. May 31, 2006</ref>\n\n==Principle==\nThe goal of developing the gamma-Re (<math> \\gamma - \\mathrm{Re}_{\\theta_t} </math>) transition model was to develop a transition model based on local variables which could be easily implemented into modern [[Computational fluid dynamics|CFD]] code with unstructured grids and massive parallel execution. The majority of earlier transition models such as the <math> e^{n} </math> model needs to know the structure of the boundary layer and the integration along it; both concepts are hard to implement in three dimensions along many subdivisions of a grid. Another key insight to the formulation of this model is that the Reynolds vorticity number can be related to the Reynolds transition onset number so there is a local way to determine the transition location. The gamma-Re transition model has two equations and is based on the two-equation turbulence models in the context of [[turbulence modeling]].  This way both local and global trends can be modelled.  The intermittency or gamma determines the percentage of time the flow is turbulent (0 = fully laminar, 1 = fully turbulent).  The intermittency acts on the production term of the turbulent kinetic energy transport equation in the [[SST (Menter’s Shear Stress Transport)|SST]] model to simulate laminar/turbulence flows.\n\n==Standard Gamma-Theta model==\n\nFor intermittency  <math> \\gamma </math>\n:<math>\\frac{ \\partial (\\rho \\gamma) }{\\partial t} + \\frac{\\partial(\\rho U_j \\gamma)}{ \\partial x_j} = P_{\\gamma} - E_{\\gamma} + \\frac{\\partial}{\\partial x_j}\\left[\\left(\\mu+\\frac{\\mu_f}{\\sigma_f}\\right)\\frac{\\partial \\gamma}{\\partial x_j} \\right]</math>\n\nFor Transition Momentum Thickness Reynolds Number  <math>Re_{\\theta}</math>\n:<math> \\frac{ \\partial (\\rho \\overline{Re_{\\theta t}}) }{\\partial t} + \\frac{\\partial(\\rho U_j  \\overline{Re_{\\theta t}})}{ \\partial x_j} = P_{\\theta t} + \\frac{\\partial}{\\partial x_j}\\left[\\sigma_{\\theta t}(\\mu + \\mu_t )\\frac{\\partial \\overline{Re_{\\theta t}}}{\\partial x_j} \\right]</math>\n\n==Modification to SST Turbulence Model==\n\n{{Empty section|date=November 2014}}\n\n==Applications==\n\n{{Empty section|date=November 2014}}\n\n==Other models==\nFollowing are some more models which are usually employed.\n{{div col}}\nen\nlow-Reynolds Number\n{{div col end}}\n\n==References==\n{{Reflist}}\n\n==Notes==\n\n\n\n[[Category:Computational fluid dynamics]]\n[[Category:Scientific modeling]]"
    },
    {
      "title": "Generalized Environmental Modeling System for Surfacewaters",
      "url": "https://en.wikipedia.org/wiki/Generalized_Environmental_Modeling_System_for_Surfacewaters",
      "text": "{{Multiple issues|\n{{notability|Products|date=March 2016}}\n{{more footnotes|date=March 2016}}\n}}\n{{Infobox software\n| name                   = Generalized Environmental Modeling System for Surfacewaters\n| logo                   = <!-- Image name is enough -->\n| logo alt               = \n| screenshot             = <!-- Image name is enough -->\n| caption                = \n| screenshot alt         = \n| collapsible            = \n| author                 = Edward M. Buchak, John Edinger, Venkat Kolluru\n| developer              = ERM\n| released               = {{Start date and age|1980}}\n| discontinued           = \n| latest release version = \n| latest release date    = <!-- {{Start date and age|YYYY|MM|DD|df=yes/no}} -->\n| latest preview version = \n| latest preview date    = <!-- {{Start date and age|YYYY|MM|DD|df=yes/no}} -->\n| status                 = Active\n| programming language   = \n| operating system       = \n| platform               = \n| size                   = \n| genre                  = \n| license                = [[Freeware]] / [[Public domain software]]\n| alexa                  = \n| website                = {{URL|http://www.gemss.com/|gemss.com}}\n| standard               = \n| AsOf                   = \n}}\n'''Generalized Environmental Modeling System for Surfacewaters''' or '''GEMSS''' is a [[public domain software]]<ref>[http://www.gemss.com/gemss.html GEMSS] on gmmss.com ''\"The model is in the public domain, available on request, and has been used worldwide.\"''</ref> application published by ERM. It has been used for hydrological studies throughout the world.<ref name=\"bortone p24\">Bortone, p.24</ref>\n\n==History==\nGEMSS has been used for ultimate heat sink analyses at [[Comanche Peak Nuclear Power Plant]], and [[Arkansas Nuclear One]]. In [[Pennsylvania]] it has been applied at [[PPL Corporation | PPL Corporation's]] [[Brunner Island Steam Electric Station]] on the lower [[Susquehanna River]], [[Exelon | Exelon’s]] Cromby and [[Limerick Generating Station|Limerick]] Generating Stations on the [[Schuylkill River]], and at several other electric power facilities. River applications for electric power facilities have been made on the Susquehanna (Brunner Island), the [[Missouri River|Missouri]](Labadie Power Station), the Delaware (Mercer and Gilbert Generating Station), the Connecticut ([[Connecticut Yankee Nuclear Power Plant]]), and others.\n\nApplications of GEMSS and its individual component modules have been accepted by regulatory agencies in the U.S. and Canada.{{citation needed|date=March 2016}} It is the sole hydrodynamic model listed in the model selection tool database{{which|date=March 2016}} for hydrodynamic and chemical fate models that can perform 1-D, 2-D, and 3-D time-variable modeling for most waterbody types, consider all state variables and include the near- and far-fields. GEMSS can also provide GUI’s, grid generation, and GIS linkage tools and has strong documentation.<ref name=\"water quality models fitzpatrick\">Fitzpatrick, J., et al.</ref>\n\n==Features==\nGEMSS includes a grid generator and editor, control file generator, 2-D and 3-D post processing viewers, and an animation tool. It uses a [[database]] approach to store and access model results. The database approach is also used for field data; as a result, the GEMSS viewers can be used to display model results, field data or both, a capability useful for understanding the behavior of the prototype as well as for calibrating the model. The field data analysis features can be used independently using GEMSS modeling capability.\n\n===Modeling techniques===\nA GEMSS application requires two types of data: (1) spatial data (primarily the waterbody shoreline and [[bathymetry]], but also locations, elevations, and configurations of man-made structures) and (2) temporal data (time-varying [[boundary value|boundary condition]] data defining tidal elevation, inflow rate and temperature, inflow constituent concentration, outflow rate, and meteorological data.<ref name=\"bortone p24\"/> All [[deterministic model]]s, including GEMSS, require uninterrupted time-varying boundary condition data. There can be no long gaps in the datasets and all required datasets must be available during the span of the proposed simulation period.\n\nFor input to the model, the spatial data is encoded primarily in two input files: the control and bathymetry files. These files are [[georeferencing|geo-referenced]]. The temporal data is encoded in many files, each file representing a set of time-varying boundary conditions, for example, meteorological data for surface heat exchange and [[wind shear]], or inflow rates for a [[tributary]] stream. Each record in the boundary condition files is stamped with a year-month-day-hour-minute address. The data can be subjected to [[quality assurance]] procedures by using GEMSS to plot, then to visually inspect individual data points, trends and outliers. The set of input files and the GEMSS executable constitute the model application.\n\n==Notes==\n{{reflist|30em}}\n\n==References==\n*{{cite book |date=December 28, 2004 |chapter= |script-chapter= |trans-chapter= |chapter-url= |chapter-format= |editor1-last=Bortone |editor1-first=Stephen A. |title= |script-title=''Estuarine Indicators'' |series=CRC Marine Science |edition=1st |location=[[Boca Raton, Florida]] |publisher=[[CRC Press]] |pages= 20, 23–26, 28–30 |url=https://books.google.com/books?id=I1XMBQAAQBAJ&pg=PA20|isbn=0849328225}}\n*{{cite journal |last1=Fitzpatrick |first1=J. |last2=Imhoff |first2=J. |last3=Burgess |first3=E. |last4=Brashear |first4=R. |year=2001 |title=Water Quality Models: A Survey and Assessment |url=https://www.werf.org/downloads/pdfs/D13209_tools/Final%20Report.pdf |format=PDF |publisher=Water Environment Research Foundation |postscript=No. WERF Project 99-WSM-5, D13209WW}}\n\n==Further reading==\n*{{cite book |last1=Kolluru|first1=Venkat S. |last2=Fichera |first2=Mike |orig-year=2003 |chapter=Development and Application of Combined 1-D and 3-D Modeling System for TMDL Studies |editor1-last=Spaulding  |editor1-first=Malcolm L. |title=Estuarine and Coastal Modelling: Proceedings of the Eighth International Conference |url=http://ascelibrary.org/doi/abs/10.1061/40734%28145%298 |publisher= [[American Society of Civil Engineers]] |publication-date=September 28, 2004 |pages= 108–127 |doi=10.1061/40734(145)8 |isbn= 0784407347 |subscription=yes }}\n*{{cite book |last3=Kolluru|first3=Venkat S. |last2=Boatman|first2=Charles D. |last=Edinger |first1= John Eric|orig-year=2003 |chapter=Influence of Multi Algae Groups in the Calibration of a Water Quality Model |editor1-last=Spaulding  |editor1-first=Malcolm L. |title=Estuarine and Coastal Modelling: Proceedings of the Eighth International Conference |publisher= [[American Society of Civil Engineers]] |publication-date=September 28, 2004 |pages= 388–406 |isbn= 0784407347 }}\n*Lauzon, Prakash, Salzsauler and Vandenberg. \"Use of water quality models for design and evaluation of pit lakes.\" Mine Pit Lakes: Closure and Management. Australian Center for Geomechanics. Pages 63 to 81.\n*U. S. Army Engineer Waterways Experiment Station, Environmental Laboratory, Hydraulics Laboratory. \"CE-QUAL-W2: A Numerical Two-Dimensional, Laterally Averaged Model of Hydrodynamics and Water Quality\" (August 1986) User's Manual. Instruction Report E-86-5. Final Report.\n*Durand, Kruk, Kempa, Tjomsland. \"Vistula Water Quality Modeling\" (2011) Pages 165 to 180.\n*Cvetkovic and Dargahi. 2014. \"Hydrodynamic and Transport Characterization of the Baltic Sea 2000-2009\" (July 2014). TRITA-LWR Report 2014:03. KTH Royal Institute of Technology, Stockholm. {{ISBN|9789175952154}}.\n*Kim and Park. \"Multidimensional Hydrodynamic and Water Temperature Modeling of Han River System\" (2012) Journal of Korean Society on Water Environment. Volume 28. Number 6. Pages 866 to 881.\n*Na and Park. \"A Hydrodynamic and Water Quality Modeling Study of Spatial and Temporal Patterns of Phytoplankton Growth in a Stratified Lake with Buoyant Incoming Flow\" (2006) Ecological Modelling 199. Pages 298 to 314.\n*Na and Park. \"A Hydrodynamic Modeling Study to Determine the Optimum Water Intake Location in Lake Paldang, Korea\" (2005) Journal of the American Water Resources Association. Volume 41. Issue 6. Pages 1315 to 1332.\n*HydroGeoLogic and Aqua Terra. \"Selection of Water Quality Components for Eutrophication-Related Total Maximum Daily Load Assessments - Task 4: Documentation of Review and Evaluation of Eutrophication Models and Components\". (June 1999) EPA Contract Number 68 C6 0020. Work Assignment Number 2 04.\n\n[[Category:Computational fluid dynamics]]\n[[Category:Environmental science software]]\n[[Category:Integrated hydrologic modelling]]\n[[Category:Public-domain software]]"
    },
    {
      "title": "Gerris (software)",
      "url": "https://en.wikipedia.org/wiki/Gerris_%28software%29",
      "text": "{{Infobox Software\n | name                     = Gerris\n | logo                     = Gerris logo.png\n | screenshot               = Gerris sourceforge.jpeg\n | caption                  = Air flow around RV Tangaroa\n | released                 = {{Start date and age|2001}}\n | status                   = Active\n | programming language     = [[C (programming language)|C]]\n | operating system         = [[Unix]], [[Linux]]\n | genre                    = CFD\n | licence                  = [[GNU General Public License|GPL]]\n | website                  = {{URL|gfs.sourceforge.net}}\n}}\n\n'''Gerris''' is [[computer software]] in the field of [[computational fluid dynamics]] (CFD). Gerris was released as [[free and open-source software]], subject to the requirements of the [[GNU General Public License]] (GPL), version 2 or any later.\n\n== Scope ==\n[[File:Gerris website.png|thumb|right|Banner of the Gerris website]]\n''Gerris'' solves the [[Navier–Stokes equations]] in 2 or 3 dimensions, allowing to model industrial fluids (aerodynamics, internal flows, etc.) or for instance, the mechanics of [[droplets]], thanks to an accurate formulation of multiphase flows (including surface tension). Actually, the latter field of study is the reason why the software shares the same name as the [[Gerris|insect genus]].\n\n''Gerris'' also provides features relevant to geophysical flows:\n# ocean tide<ref>{{cite journal |last1=Msadek |first1=R. |title=Hydrodynamic tidal model of Cook Strait |journal=Technical Report, National Institute of Water and Atmospheric Research |year=2005 }}</ref>\n# tsunamis<ref>{{cite journal |last1=Popinet |first1=S. |title=Adaptive modelling of long-distance wave propagation and fine-scale flooding during the Tohoku tsunami |journal=Natural Hazards and Earth System Sciences |volume=12 |issue=4 |year=2012 |pages=1213–1227 |doi=10.5194/nhess-12-1213-2012}}</ref><ref>{{cite journal |last1=Popinet |first1=S. |title=Quadtree-adaptive tsunami modelling |journal=Ocean Dynamics |volume=61 |issue=9 |year=2011 |pages=1261–1285 |doi=10.1007/s10236-011-0438-z|citeseerx=10.1.1.374.7506 }}</ref>\n# river flow<ref>{{cite journal |last1=Hyunuk |first1=A. |first2=Y. |last2=Soonyoung |title=Well-balanced shallow water flow simulation on quadtree cut cell grids |journal=Advances in Water Resources |volume=39 |year=2012 |pages=60–70 |doi=10.1016/j.advwatres.2012.01.003}}</ref>\n# eddies in the ocean<ref>{{cite journal |last1=Popinet |first1=S. |first2=G. |last2=Rickard |title=A tree-based solver for adaptive ocean modelling |journal=Ocean Modelling |volume=16 |issue=3–4 |year=2007 |pages=224–249 |doi=10.1016/j.ocemod.2006.10.002}}</ref>\n# sea state (surface waves)<ref>{{cite journal |last1=Tsai |first1=C.-C. |first2=T.-H. |last2=Hou |first3=S. |last3=Popinet |title=Wind wave prediction of tropical cyclones by a quadtree-adaptive model |journal=Coastal Engineering |volume=77 |year=2013 |pages=108–119 |doi=10.1016/j.coastaleng.2013.02.011}}</ref><ref>{{cite journal |last1=Popinet |first1=S. |first2=R.M. |last2=Gorman |first3=G.J. |last3=Rickard |first4=H.L. |last4=Tolman |title=A quadtree-adaptive spectral wave model |journal=Ocean Modelling |volume=34 |issue=1–2 |year=2010 |pages=36–49 |doi=10.1016/j.ocemod.2010.04.003|citeseerx=10.1.1.374.5299 }}</ref>\n\nFlow types #1 to #3 were studied using the [[Shallow water equations|shallow-water]] solver included in ''Gerris'', case #4 brings in the [[Primitive equations|primitives equations]] and application #5 relies on the ''spectral'' equations for generation/propagation/dissipation of swell (and/or wind sea): for this purpose ''Gerris'' makes use of the source terms from WaveWatchIII.<ref>[http://polar.ncep.noaa.gov/waves/wavewatch/wavewatch.shtml WaveWatchIII]</ref>\n\nLastly, one can note that the (non-hydrostatic) Navier–Stokes solver was also used in the ocean to study:\n* fluvial plumes<ref>{{cite journal |last1=O'Callaghan |first1=J. |first2=G. |last2=Rickard |first3=S. |last3=Popinet |first4=C. |last4=Stevens |title=Response of buoyant plumes to transient discharges investigated using an adaptive solver |journal=Journal of Geophysical Research |volume=115 |year=2010 |pages=C11025 |doi=10.1029/2009jc005645}}</ref>\n* internal waves<ref>{{cite journal |last1=Rickard |first1=G. |first2=J. |last2=O'Callaghan |first3=S. |last3=Popinet |title=Numerical simulations of internal solitary waves interacting with uniform slopes using an adaptive model |journal=Ocean Modelling |volume=30 |year=2009 |pages=16–28 |doi=10.1016/j.ocemod.2009.05.008}}</ref>\n* hydrothermal convection<ref>{{cite journal |last1=Tao |first1=Y. |first2=S. |last2=Rosswog |first3=M. |last3=Brüggen |title=A simulation modeling approach to hydrothermal plumes and its comparison to analytical models |journal=Ocean Modelling |volume=61 |year=2013 |pages=68–80 |doi=10.1016/j.ocemod.2012.10.001}}</ref>\n\nOn the contrary ''Gerris'' does not allow (in its current status) the modeling of compressible fluids (supersonic flows).\n\n== Numerical scheme ==\nSeveral methods can be used to provide a numerical solution to [[partial differential equation]]s:\n* [[finite differences]]\n* [[Finite-volume method|finite volumes]]\n* [[Finite element method|finite elements]]\n''Gerris'' belongs to the ''finite volumes'' family of CFD models.\n\n== Type of grid ==\nMost models use meshes which are either structured (Cartesian or curvilinear grids) or unstructured (triangular, tetrahedral, etc.). ''Gerris'' is quite different on this respect: it implements a deal between structured and unstructured meshes by using a tree data structure,{{efn|''quadtree'' en 2D, ''octree'' en 3D}} allowing to refine locally (and dynamically) the (finite-volume) description of the pressure and velocity fields. Indeed the grid evolves in the course of a given simulation owing to criteria defined by the user (''e.g.'' dynamic refinement of the grid in the vicinity of sharp gradients).\n\n== Turbulent closure ==\n''Gerris'' mainly aims at [[Direct numerical simulation|DNS]]; the range of [[Reynolds number|Reynolds]] available to the user thus depends on the computing power they can afford (although the auto-adaptive mesh allows one to focus the computing resources on the coherent structures). According to the ''Gerris'' FAQ<ref>[http://gfs.sourceforge.net/wiki/index.php/FAQ ''Gerris'' (Frequently Asked Questions)]</ref> the implementation of turbulence models will focus on the [[Large eddy simulation|LES]] family rather than [[Reynolds-averaged Navier–Stokes equations|RANS]] approaches.\n\n== Programming language, library dependencies, included tools ==\n''Gerris'' is developed in C using the libraries [[GLib|Glib]] (object orientation, dynamic loading of modules, etc.) and GTS.<ref>[http://gts.sourceforge.net/ GTS]</ref> The latter brings in facilities to perform geometric computations such as triangulation of solid surfaces and their intersection with fluid cells. Moreover ''Gerris'' is fully compliant with [[Message Passing Interface|MPI]] parallelisation (including dynamic load balancing).\n\n''Gerris'' does not need a meshing tool since the local (and time dependent) refinement of the grid is on charge of the solver itself. As far as solid surfaces are concerned, several input formats are recognized:\n* analytic formulas in the parameter file\n* GTS triangulated files; note that the ''Gerris'' distribution includes a tool to translate the STL format (exported by various CAD software) into GTS triangulated surfaces\n* bathymetric/topographic database in [[K-d tree|KDT]] format; a tool is also provided to generate such a database from simple ASCII listings\n\nAmong the various ways to output ''Gerris'' results, let us just mention here:\n* Graphical output in PPM format: images can then be converted in (nearly) any format using [[ImageMagick]], and MPEG movies can be generated thanks to [[FFmpeg]] (among others).\n* Simulation files (''.gfs''), which are actually parameters files concatenated with fields issued from the simulation; these files can then be (i) re-used as parameter files (defining new initial conditions), or (ii) processed with ''Gfsview''.\n* ''Gfsview'', a display software shipped with ''Gerris'', able to cope with the tree structure of the ''Gerris'' grid (a data structure which is not efficiently operated by general visualization software{{efn|However, ''Gerris'' also provides a module exporting its results in Esri Grid format.}}).\n\n== Licence ==\nCFD software, as any software, can be developed in various \"realms\":\n* Business;\n* Academic;\n* Open Source.\nAs far as CFD is concerned, a thorough discussion of these software development paths can be found in the statement by Zaleski.<ref>{{cite web |url=http://www.lmm.jussieu.fr/~zaleski/OpenCFD.html |title=Science and Fluid Dynamics should have more open sources |work=Institut Jean le Rond d'Alembert |author=Stéphane Zaleski |year=2001 |accessdate=12 May 2013 }}</ref>\n\nIt is noteworthy that ''Gerris'' was distributed as [[free and open-source software]] right from the onset of the project.<ref>{{cite journal |last1=Popinet |first1=S. |title=Gerris: a tree-based adaptive solver for the incompressible Euler equations in complex geometries |journal=Journal of Computational Physics |volume=190 |issue=2 |year=2003 |pages=572–600 |doi=10.1016/s0021-9991(03)00298-5|citeseerx=10.1.1.12.5063 }}</ref><ref>{{cite journal |last1=Popinet |first1=S. |title=Free Computational Fluid Dynamics |journal=Cluster World |volume=2 |year=2004 |pages=2–8}}</ref>\n\n== See also ==\n{{Portal|Free and open-source software|Physics}}\nOther computing software are freely available in the field of fluid mechanics. Here are some of them (if the development was not initialized under a free license, the year when it moved to ''Open Source'' is mentioned in parenthesis):\n\n=== Industrial fluids ===\n* [[Advanced Simulation Library]] (2015)\n* [[Code Saturne]] (2007)\n* [[FEATool Multiphysics]] (2013)\n* [[OpenFOAM]] (2004)\n* [[SU2 code]] (2012)\n\n=== Geophysical fluids ===\n* [[Princeton Ocean Model|POM]] (1999)\n* ROMS<ref>[http://www.myroms.org/ ROMS]</ref>\n* GOTM<ref>[http://www.gotm.net/ GOTM]</ref>\n* [[TELEMAC|Telemac]] (2010, 2011 for Mascaret<ref>[http://www.opentelemac.org/ Telemac-Mascaret]</ref>)\n* Delft3D<ref>[http://oss.deltares.nl/web/delft3d Delft3D]</ref> (2011)\n\n==Notes==\n{{noteslist}}\n\n==References==\n{{reflist}}\n\n{{CAE software}}\n\n[[Category:Free software]]\n[[Category:Computational fluid dynamics]]\n[[Category:Computer-aided engineering software for Linux]]\n[[Category:Scientific simulation software]]"
    },
    {
      "title": "Grid classification",
      "url": "https://en.wikipedia.org/wiki/Grid_classification",
      "text": "Grid or Mesh is defined as smaller shapes formed after discretisation of geometric domain. Mesh or Grid can be in 3- [[dimension]] and 2-dimension. Meshing has applications in fields of Geography, designing, CFD ([[Computational Fluid Dynamics]]).<ref>{{cite book|last=Patankar|first=Suhas V.|authorlink=Suhas Patankar|title=Numerical Heat Transfer and Fluid FLow|year=1980|publisher=Hemisphere Publishing Corporation\n|isbn=0891165223}}</ref> and many more places. The 2-dimensional meshing includes simple [[polygon]], polygon with holes, multiple domain and curved domain. In 3 dimensions there are three types of inputs. They are simple [[polyhedron]], geometrical polyhedron and multiple polyhedrons. Before defining the mesh type it is necessary to understand elements (their shape and size).\n\n==Elements==\nThe shape of the elements is of great importance in solving the CFD problems. They are typically based on [[aspect ratio]] i.e. the aspect ratio of element decide whether a particular element would be good to use or we should go for another element with different aspect ratio. For example, if the aspect ratio is large the speed of solver reduces while if this ratio is small the solver speed increases. Large aspect ratio has another limitation of leading to [[interpolation]] [[error]]s. But if the results vary with direction then we use large aspect ratio.\n\n==Fluid flow equation and coordinate system==\n[[File:Model 1.jpg|thumb|Fig 1 a. 2-D model of flow around cylinder]] [[File:Cartesian Coordinate.jpg|thumb|Fig 1 b. Representation of 2-D model of flow around cylinder using cartesian grid.]]\n\nMost of the [[fluid]] flow equations are easily solved by discretizing procedures using the Cartesian coordinate system.<ref>Marshall, D., and Ruffin, S.M., \" An Embedded Boundary Cartesian Grid Scheme for Viscous Flows using a New Viscous Wall Boundary Condition Treatment,” AIAA Paper 2004-0581, presented at the AIAA 42nd Aerospace Sciences Meeting, January 2004.</ref> In this system the implementation of [[finite volume method]] is simpler and easier to understand. But most of the engineering problems deal with complex geometries that don’t work well in the Cartesian coordinate system. When the '''boundary region of the flow''' doesn’t coincide with the coordinate lines of the structured grid then we can solve the problem by '''geometry approximation'''. '''Figure 1a. and 1b.''' shows how a cylinder can be approximated with the Cartesian coordinate system.\n\nThe curve geometry of cylinder in Cartesian coordinate system is approximated by using stepwise approximation. But this method requires large time and is very tedious to work with. Other than this problem there is one more problem which is the cells inside the solid part of the cylinder, which are called dead cells, are not involved in the calculations so they should be removed,otherwise they would consume extra space in computer or other resources. Stepwise approximation is not smooth and thus leads to significant error, though the grid can be refined by using a fine mesh to cover the wall region but this leads to waste of computer memory resources.\nTherefore, there are limitation in using CFD methods based on simple Coordinate system (Cartesian or Cylindrical) as these systems fails while modeling of complex geometries like that of an aerofoil, furnaces, gas turbine combustors, IC-engine etc.\n\n===Classification of grids in CFD===\n[[File:Orthogonal grid.JPG|thumb|Fig.2 Non-Orthogonal Grids]]\n\n[[File:Non-orthogonal grid.JPG|thumb|Fig.3 Orthogonal Grids]]\n\na) '''Structured curvilinear grid arrangements''' (Vertices having similar neighborhood).\n\nb) '''Unstructured grid arrangements''' (Vertices having variation in neighborhood).\n\n'''Structured Curvilinear grids'''\n\n1) Grid points are identified at the intersection of co-ordinate line.\n\n2) There are fixed number of neighboring grids for Interior grid.\n\n3) They can be arranged into an array and can be named by indices I, J, K f (In three dimensions).\n\nThese are also known as '''body fitted grids''' and works on the principle of mapping the flow domain onto computational domain with simple shape.The mapping is quite tedious if it involves Complex geometry. In order to model this type of geometry we divide the flow region into various smaller sub domains. All these regions are meshed separately and joined up correctly with the neighbors. This type of arrangement is known as Block Structured Grid. This type of system is more flexible than the previous one. Two-dimensional structured mesh use quadrilaterals elements while three dimension meshes use hexahedra.\nThere are two types of Body fitted Co-ordinate grids\n\na) Orthogonal curvilinear coordinate.\n\nb) Non – orthogonal coordinate.\nIn orthogonal mesh the grid lines are perpendicular to intersection. This is shown in '''figure 3'''.\n\n'''Figure 2''' shows Non-Orthogonal Grids.The figure shows the grid lines do not intersect at 90 degree angle. In both these cases the domain boundaries coincide with the co ordinate lines therefore all the geometrical details can be incorporated .Grids can be refined easily to capture important flow features.\n\n===Comparison between Cartesian and curvilinear grids===\nComparison between Cartesian and Curvilinear grids shows that in Cartesian grid cells are wasted in dealing with objects. The distribution of function is very fine in curvilinear grid. The resources required in curvilinear grids are less as compared to Cartesian grids thus saving lots of memory. Therefore, we can say that coarse grids are able to capture flow details efficiently.\n\n===Disadvantages of curvilinear grids===\nDifficulties associated with the curvilinear grids are related to equations.<ref>{{cite book|last=Versteeg|first=H.K.|title=An introduction to computational fluid dynamics : the finite volume method|year=2007|publisher=Prentice Hall|location=Harlow|isbn=9780131274983|edition=2nd |author2=Malalasekera, W.}}</ref><br /> While in Cartesian system the equation can be solved easily with less difficulty but in curvilinear coordinate system it is difficult to solve the complex equations. Difference between various techniques lies in the fact that what type of grid arrangement is required and the dependent variable that is required in momentum equation. To generate meshes so that it includes all the geometrical features mapping is very important. In mapping Physical geometry is mapped with computational geometry.\nThere are difficulties which we face in generating the body fitted grids in geometries like IC engine combustion chamber. For example, the Valve mapping in [[Internal Combustion Engine]] is done very carefully so that the region of one type is mapped carefully with another type of regions. There are regions where dense mesh is done deliberately to accommodate complex features. But this results in unnecessary grid resolution which leads to local variation of solution domain.\n\n===Block structured grid===\n[[File:Block structured grid.JPG|thumb|Fig.4 Block Structured Grid]]\nIn this type of grid the domain is divided into different regions. Each region has different type of [[mesh]] structure. It is also possible that different co-ordinate system can be used for different regions. This makes the grids far more flexible. This also makes the refinement in the region where the geometry is to be captured more precisely. '''Figure 4''' shows the use of block grid technique. The advantages of this technique are that its generation is easy, the equations that we work with are easily discretized and curved boundaries are easily accommodated. Different blocks can be handled with required degree of fineness in mesh.\n\n===Unstructured grids===\n[[File:Unstructured Grid.jpg|thumb|Fig 5. Hybrid Grid]]\n\nIn far more complex geometries it is logical to use large number of blocks and therefore it leads to unstructured grids.<ref>Karmna, Steve L. Jr., \"SPLITFLOW: A 3D Unstructured Cartesian Prismatic Grid CFD Code for Complex Geometries,\" AIAA paper 95-0343, presented at the 33rd Aerospace Sciences Meeting and Exhibit, Reno Nevada, January 1995.</ref> These are widely accepted in CFD because this gives us far more flexibility and computer resources are also efficiently utilized. In this case two-dimensional structured mesh uses triangle elements while three-dimensional uses tetrahedral elements.\nThese are combination of small structured mesh arranged in unstructured pattern. In this type of grid each single cell is treated as a block. There is no structure of coordinate lines that is given by the grid. The advantage of this type of grids is that mesh can be refined wherever needed.This is based on the fact since the control volume can be of any shape therefore restriction on number of adjacent cell is lifted.This uses various combinations of cell shapes. [[Hybrid grid|Hybrid]] grid can also be used. Hybrid grids are those in which mixture of triangular and quadrilateral elements are used to construct grids. In three dimension combination of [[tetrahedral]] and hexahedral elements results in hybrid grid. Example of hybrid grid is shown in '''figure 5'''.\nUnstructured grids reduces the time which is required for meshing and [[map (mathematics)|map]]ping. Therefore, grid generation is faster and easy. Various automatic techniques especially those associated with [[Finite Element Method]] also utilize unstructured grids. Mesh refinement and adaption is easy in unstructured grids.\n\n==Mesh improvement==\nThis is done by two techniques namely smoothing and flipping. In mesh smoothing the location of mesh vertices are adjusted. While in Flipping the diagonals of triangulated quadrilateral are exchanged. Flipping improves the quality measure of triangles.\n\n==References==\n{{reflist}}\n\n==See also==\n* [[Types of mesh]] inn computational solutions of partial differential equations\n* [[Lattice graph]]\n\n[[Category:Computational fluid dynamics]]\n[[Category:Finite element method]]"
    },
    {
      "title": "Hemodynamics",
      "url": "https://en.wikipedia.org/wiki/Hemodynamics",
      "text": "'''Hemodynamics''' [[American and British English spelling differences#ae and oe|or]] '''haemodynamics''' is the [[Fluid dynamics|dynamics]] of '''blood flow'''. The [[circulatory system]] is controlled by [[homeostasis|homeostatic]] mechanisms, such as [[hydraulic circuit]]s are controlled by [[control system]]s. [[Haemodynamic response|Hemodynamic response]] continuously monitors and adjusts to conditions in the body and its environment. Thus hemodynamics explains the [[physical law]]s that govern the flow of blood in the [[blood vessel]]s.\n\nBlood flow ensures the transportation of [[nutrient]]s, [[hormone]]s, metabolic wastes, [[Oxygen|O<sub>2</sub>]] and [[CO2|CO<sub>2</sub>]] throughout the body to maintain cell-level [[metabolism]], the regulation of the [[pH]], [[osmotic pressure]] and temperature of the whole body, and the protection from microbial and mechanical harms.<ref name=\"Principles of Anatomy & Physiology\">{{cite book |title=Principles of Anatomy & Physiology |edition=13th |last1=Tortora |first1=Gerard J. |last2=Derrickson |first2=Bryan |year=2012 |publisher=John Wiley & Sons |isbn=978-0-470-56510-0 |chapter=The Cardiovascular System: The Blood |pages=729–732}}</ref>\n\nBlood is a [[non-Newtonian fluid]], best studied using [[rheology]] rather than hydrodynamics. Blood vessels are not rigid tubes, so classic hydrodynamics and fluids mechanics based on the use of classical viscometers are not capable of explaining hemodynamics.<ref>{{cite book |title=Biology and Mechanics of Blood Flows, Part II: Mechanics and Medical Aspects |last1=Fieldman |first1=Joel S. |last2=Phong |first2=Duong H. |last3=Saint-Aubin |first3=Yvan |last4=Vinet |first4=Luc |year=2007 |publisher=Springer |isbn=978-0-387-74848-1 |chapter=Rheology |pages=119–123}}</ref>\n\nThe study of the blood flow is called [[hemodynamics]]. The study of the properties of the blood flow is called [[hemorheology]].\n\n==Blood==\n{{main|Blood}}\nBlood is a complex liquid. [[Blood]] is composed of [[Blood plasma|plasma]] and [[Blood#Constituents of human blood|formed elements]]. The plasma contains 91.5% water, 7% [[proteins]] and 1.5% other solutes. The formed elements are [[platelet]]s, [[white blood cell]]s and [[red blood cell]]s, the presence of these formed elements and their interaction with plasma molecules are the main reasons why blood differs so much from ideal Newtonian fluids.<ref name=\"Principles of Anatomy & Physiology\"/>\n\n===Viscosity of plasma===\nNormal blood [[Blood plasma|plasma]] behaves like a Newtonian fluid at physiological rates of shear. Typical values for the [[viscosity]] of normal human plasma at 37&nbsp;°C is 1.4&nbsp;mN·s/m<sup>2</sup>.<ref>{{cite journal |url=http://jap.physiology.org/content/jap/19/1/117.full.pdf |title=Human blood under normothermic and hypothermic conditions |last=Rand |first=Peter |date=31 May 1963 |journal=Journal of Applied Physiology |accessdate=16 September 2014 |doi= |pmid=}}</ref> The viscosity of normal plasma varies with temperature in the same way as does that of its solvent water; a 5&nbsp;°C increase of temperature in the physiological range reduces plasma viscosity by about 10%.\n\n===Osmotic pressure of plasma===\nThe osmotic pressure of solution is determined by the number of particles present and by the [[temperature]]. For example, a 1 molar solution of a substance contains {{val|6.022|e=23}} molecules per liter of that substance and at 0&nbsp;°C it has an osmotic pressure of {{cvt|2.27|MPa|atm}}. The osmotic pressure of the [[Blood plasma|plasma]] affects the mechanics of the circulation in several ways. An alteration of the osmotic pressure difference across the membrane of a blood cell causes a shift of water and a change of cell volume. The changes in shape and flexibility affect the mechanical properties of whole blood. A change in plasma [[osmotic pressure]] alters the hematocrit, that is, the volume concentration of red cells in the whole blood by redistributing water between the intravascular and extravascular spaces. This in turn affects the mechanics of the whole blood.<ref name=\"autogenerated3\"/>\n\n===Red blood cells===\nThe [[red blood cell]] is highly flexible and biconcave in shape. Its membrane has a [[Young's modulus]] in the region of 106&nbsp;[[Pascal (unit)|Pa]]. Deformation in red blood cells is induced by shear stress. When a suspension is sheared, the red blood cells deform and spin because of the velocity gradient, with the rate of deformation and spin depending on the shear-rate and the concentration.\nThis can influence the mechanics of the circulation and may complicate the measurement of blood [[viscosity]]. It is true that in a steady state flow of a viscous fluid through a rigid spherical body immersed in the fluid, where we assume the [[inertia]] is negligible in such a flow, it is believed that the downward [[gravitational]] force of the particle is balanced by the viscous drag force. From this force balance the speed of fall can be shown to be given by [[Stokes' law]] \n \n:<math>U_s = \\frac{2}{9}\\frac{\\left(\\rho_p - \\rho_f\\right)}{\\mu} g\\, a^2</math><ref name=\"autogenerated3\"/>\nWhere ''a'' is the particle radius, ''ρ<sub>p</sub>'', ''ρ<sub>f</sub>'' are the respectively particle and fluid density ''μ'' is the fluid viscosity, ''g'' is the gravitational acceleration. From the above equation we can see that the [[sedimentation velocity]] of the particle depends on the square of the radius. If the particle is released from rest in the [[fluid]], its sedimentation velocity ''U<sub>s</sub>'' increases until it attains the steady value called the terminal velocity (U), as shown above.\n\n===Hemodilution===\nHemodilution is the dilution of the concentration of red blood cells and plasma constituents by partially substituting the blood with [[colloid]]s or [[Volume expander|crystalloids]]. It is a strategy to avoid exposure of patients to the potential hazards of [[Blood transfusion|homologous]] blood transfusions.\n\nHemodilution can be normovolemic, which implies the dilution of normal blood constituents by the use of expanders. During acute normovolemic hemodilution, (ANH) blood subsequently lost during surgery contains proportionally fewer red blood cells per millimetre, thus minimizing intraoperative loss of the whole blood. Therefore, blood lost by the patient during surgery is not actually lost by the patient, for this volume is purified and redirected into the patient.\n\nOn the other hand, hypervolemic hemodilution (HVH) uses acute preoperative volume expansion without any blood removal. In choosing a fluid, however, it must be assured that when mixed, the remaining blood behaves in the microcirculation as in the original blood fluid, retaining all its properties of [[viscosity]].<ref>{{cite web |url=http://journals.lww.com/anesthesiology/Abstract/2001/03000/Efficacy_of_Acute_Normovolemic_Hemodilution.13.aspx |publisher=the journal of American society of anesthsiologist inc |title=Efficacy of Acute Normovolemic hemodilution, Accessed as a Function of Blood lost |accessdate=5 April 2011}}</ref>\n\nIn presenting what volume of ANH should be applied one study suggests a mathematical model of ANH which calculates the maximum possible RCM savings using ANH, given the patients weight ''H<sub>i</sub>'' and ''H<sub>m</sub>''. (See below for a glossary of the terms used.)\n\nTo maintain the normovolemia, the withdrawal of autologous blood must be simultaneously replaced by a suitable hemodilute. Ideally, this is achieved by isovolemia exchange transfusion of a plasma substitute with a colloid [[osmotic pressure]] (OP). A [[colloid]] is a fluid containing particles that are large enough to exert an oncotic pressure across the micro-vascular membrane.\nWhen debating the use of colloid or crystalloid, it is imperative to think about all the components of the starling equation:\n:<math>\\ Q = K ( [P_c - P_i]S - [P_c - P_i] )</math>\nTo identify the minimum safe hematocrit desirable for a given patient the following equation is useful:\n:<math>\\ BL_s = EBV \\ln \\frac{H_i}{H_m} </math>\nwhere EBV is the estimated [[blood]] volume; 70&nbsp;mL/kg was used in this model and ''H<sub>i</sub>'' (initial hematocrit) is the patient’s initial hematocrit.\nFrom the equation above it is clear that the volume of blood removed during the ANH to the ''H<sub>m</sub>'' is the same as the ''BL<sub>s</sub>''.\nHow much blood is to be removed is usually based on the weight, not the volume. The number of units that need to be removed to hemodilute to the maximum safe hematocrit (ANH) can be found by \n:<math>ANH = \\frac {BL_s}{450}</math>\nThis is based on the assumption that each unit removed by hemodilution has a volume of 450&nbsp;mL (the actual volume of a unit will vary somewhat since completion of collection ais dependent on weight and not volume).\nThe model assumes that the hemodilute value is equal to the ''H<sub>m</sub>'' prior to surgery, therefore, the re-transfusion of blood obtained by hemodilution must begin when SBL begins.\nThe RCM available for retransfusion after ANH (RCMm) can be calculated from the patient's ''H<sub>i</sub>'' and the final hematocrit after hemodilution(''H<sub>m</sub>'')\n:<math> RCM = EVB \\times (H_i - H_m) </math>\nThe maximum SBL that is possible when ANH is used without falling below Hm(BLH) is found by assuming that all the blood removed during ANH is returned to the patient at a rate sufficient to maintain the hematocrit at the minimum safe level\n:<math> BL_H = \\frac {RCM_H} {H_m}</math>\nIf ANH is used as long as SBL does not exceed ''BL<sub>H</sub>'' there will not be any need for blood transfusion. We can conclude from the foregoing that ''H'' should therefore not exceed ''s''.\nThe difference between the ''BL<sub>H</sub>'' and the ''BL<sub>s</sub>'' therefore is the incremental surgical blood loss (''BL<sub>i</sub>'') possible when using ANH.\n:<math>\\ {BL_i} = {BL_H} - {BL_s} </math>\nWhen expressed in terms of the RCM \n:<math> {RCM_i} = {BL_i} \\times {H_m} </math>\nWhere ''RCM<sub>i</sub>'' is the red cell mass that would have to be administered using homologous blood to maintain the ''H<sub>m</sub>'' if ANH is not used and blood loss equals BLH.\n\nThe model used assumes ANH used for a 70&nbsp;kg patient with an estimated blood volume of 70&nbsp;ml/kg (4900&nbsp;ml). A range of ''H<sub>i</sub>'' and ''H<sub>m</sub>'' was evaluated to understand conditions where hemodilution is necessary to benefit the patient.<ref name=\"autogenerated1\">{{cite book |chapter-url=http://ieeexplore.ieee.org/Xplore/login.jsp?reason=login&url=stamp%2Fstamp.jsp%3Ftp%3D%26arnumber%3D1018881 |publisher=IEEE |title=Hemodilution:Modelling and clinincal Aspects |volume=1 |pages=177–179 |doi=10.1109/IEMBS.2001.1018881 |chapter=Hemodilution: Modeling and clinical aspects |year=2001 |last1=Kaya |first1=M. |last2=Li |first2=J.K.-J. |isbn=978-0-7803-7211-5 }}</ref><ref>{{cite journal |url=http://www.anesthesia-analgesia.org/content/80/1/108.full.pdf+html |title=maximum blood savings by acute Normovolemic hemodilution |journal=Anesthesia & Analgesia |volume=80 |issue=1 |pages=108 |accessdate=5 April 2011|date=January 1995 |last1=Feldman |first1=Jeffrey M. |last2=Roth |first2=Jonathan V. |last3=Bjoraker |first3=David G. }}</ref>\n\n====Result====\nThe result of the model calculations are presented in a table given in the appendix for a range of ''H<sub>i</sub>'' from 0.30 to 0.50 with ANH performed to minimum hematocrits from 0.30 to 0.15. Given a ''H<sub>i</sub>'' of 0.40, if the ''H<sub>m</sub>'' is assumed to be 0.25.then from the equation above the RCM count is still high and ANH is not necessary, if BL<sub>s</sub> does not exceed 2303&nbsp;ml, since the hemotocrit will not fall below H<sub>m</sub>, although five units of blood must be removed during hemodilution. Under these conditions, to achieve the maximum benefit from the technique if ANH is used, no homologous blood will be required to maintain the ''H<sub>m</sub>'' if blood loss does not exceed 2940&nbsp;ml. In such a case ANH can save a maximum of 1.1 packed red blood cell unit equivalent, and homologous blood transfusion is necessary to maintain ''H<sub>m</sub>'', even if ANH is used.\nThis model can be used to identify when ANH may be used for a given patient and the degree of ANH necessary to maximize that benefit.\n\nFor example, if ''H<sub>i</sub>'' is 0.30 or less it is not possible to save a red cell mass equivalent to two units of homologous PRBC even if the patient is hemodiluted to an ''H<sub>m</sub>'' of 0.15. That is because from the RCM equation the patient RCM falls short from the equation giving above.\nIf ''H<sub>i</sub>'' is 0.40 one must remove at least 7.5 units of blood during ANH, resulting in an ''H<sub>m</sub>'' of 0.20 to save two units equivalence. Clearly, the greater the ''H<sub>i</sub>'' and the greater the number of units removed during hemodilution, the more effective ANH is for preventing homologous blood transfusion. The model here is designed to allow doctors to determine where ANH may be beneficial for a patient based on their knowledge of the ''H<sub>i</sub>'', the potential for SBL, and an estimate of the ''H<sub>m</sub>''. Though the model used a 70&nbsp;kg patient, the result can be applied to any patient. To apply these result to any body weight, any of the values BLs, BLH and ANHH or PRBC given in the table need to be multiplied by the factor we will call T\n:<math> T = \\frac  {\\text{patient's weight in kg}} {70} </math>\nBasically, the model considered above is designed to predict the maximum RCM that can save ANH.\n\nIn summary, the efficacy of ANH has been described mathematically by means of measurements of surgical blood loss and blood volume flow measurement. This form of analysis permits accurate estimation of the potential efficiency of the techniques and shows the application of measurement in the medical field.\n\n== Blood flow==\n===Cardiac output===\n[[File:Diagram of human circulatory system.gif|thumb|upright=1.8|Diagram of the circulatory system]]\n\nThe heart is the driver of the circulatory system, pumping blood through rhythmic contraction and relaxation. The rate of blood flow out of the heart (often expressed in L/min) is known as the cardiac output (CO).\n\nBlood being pumped out of the heart first enters the [[aorta]], the largest artery of the body. It then proceeds to divide into smaller and smaller arteries, then into [[arterioles]], and eventually [[capillaries]], where oxygen transfer occurs. The capillaries connect to [[venules]], and the blood then travels back through the network of veins to the [[right heart]]. The micro-circulation — the arterioles, capillaries, and venules —constitutes most of the area of the vascular system and is the site of the transfer of O<sub>2</sub>, [[glucose]], and [[enzyme substrate]]s into the cells. The venous system returns the de-oxygenated blood to the right heart where it is pumped into the [[lungs]] to become oxygenated and CO<sub>2</sub> and other gaseous wastes exchanged and expelled during breathing. Blood then returns to the left side of the heart where it begins the process again.\n\nIn a normal circulatory system, the volume of blood returning to the heart each minute is approximately equal to the volume that is pumped out each minute (the cardiac output).<ref name=brs>{{cite book |last1=Costanzo |first1=Linda S. |title=Physiology |date=2003 |publisher=Lippincott Williams and Wilkins |location=Philadelphia |isbn=978-0781739191 |pages=73–113 |edition=3rd|series=Board Review Series }}</ref> Because of this, the velocity of blood flow across each level of the circulatory system is primarily determined by the total cross-sectional area of that level.  This is mathematically expressed by the following equation:\n\n: v = Q/A\nwhere \n* v = velocity (cm/s)\n* Q = blood flow (ml/s)\n* A = cross sectional area (cm<sup>2</sup>)\n\n=== Turbulence ===\nBlood flow is also affected by the smoothness of the vessels, resulting in either turbulent (chaotic) or laminar (smooth) flow. Smoothness is reduced by the buildup of fatty deposits on the arterial walls.\n\nThe Reynold’s number (denoted NR or Re) is a relationship that helps determine the behavior of a fluid in a tube, in this case blood in the vessel.\n\nThe equation for this dimensionless relationship is written as:<ref name=\"Munson 2009 725\"/>\n:<math>NR=\\frac{\\rho v L}{\\mu}</math>\n:* ''ρ'': density of the blood\n:* ''v'': mean velocity of the blood\n:* ''L'': characteristic dimension of the vessel, in this case diameter\n:* ''μ'': viscosity of blood\n\nThe Reynold’s number is directly proportional to the velocity and diameter of the tube. Note that NR is directly proportional to the mean velocity as well as the diameter. A Reynold’s number of less than 2300 is laminar fluid flow, which is characterized by constant flow motion, whereas a value of over 4000, is represented as turbulent flow.<ref name=\"Munson 2009 725\"/> Due to its smaller radius and lowest velocity compared to other vessels, the Reynold’s number at the capillaries is very low, resulting in laminar instead of turbulent flow.<ref>{{cite journal|last=Fung|first=Yuan-cheng|author2=Zweifach, B.W.|title=Microcirculation: Mechanics of Blood Flow in Capillaries|journal=Annual Review of Fluid Mechanics|year=1971|volume=3|pages=189–210|doi=10.1146/annurev.fl.03.010171.001201|bibcode=1971AnRFM...3..189F}}</ref>\n\n===Velocity===\nOften expressed in cm/s. This value is inversely related to the total cross-sectional area of the blood vessel and also differs per cross-section, because in normal condition the blood flow has [[Laminar flow|laminar characteristics]]. For this reason, the blood flow velocity is the fastest in the middle of the vessel and slowest at the vessel wall. In most cases, the mean velocity is used.<ref name=\"TortoraDerrickson\">{{cite book |title=Principles of Anatomy & Physiology |edition=13th |last1=Tortora |first1=Gerard J. |last2=Derrickson |first2=Bryan |year=2012 |publisher=John Wiley & Sons |isbn=978-0470-56510-0 |chapter=The Cardiovascular System: Blood Vessels and Hemodynamics |page=816}}</ref> There are many ways to measure blood flow velocity, like videocapillary microscoping with frame-to-frame analysis, or [[Laser Doppler velocimetry|laser Doppler anemometry]].<ref>{{cite journal |doi=10.1006/mvre.1996.0054 |title=Capillary Blood Cell Velocity in Human Skin Capillaries Located Perpendicularly to the Skin Surface: Measured by a New Laser Doppler Anemometer |year=1996 |last1=Stücker |first1=M. |last2=Bailer |first2=V. |last3=Reuther |first3=T. |last4=Hoffman |first4=K. |last5=Kellam |first5=K. |last6=Altmeyer |first6=P. |journal=Microvasc Research |volume=52 |issue=2 |pages=188–192 |pmid=8901447}}</ref>\nBlood velocities in [[arteries]] are higher during [[Systole (medicine)|systole]] than during [[diastole]]. One parameter to quantify this difference is the '''pulsatility index''' (PI), which is equal to the difference between the peak systolic velocity and the minimum diastolic velocity divided by the mean velocity during the [[cardiac cycle]]. This value decreases with distance from the heart.<ref>{{cite book |title=Principles of Anatomy & Physiology |edition=13th |last1=Tortora |first1=Gerard J. |last2=Derrickson |first2=Bryan |year=2012 |publisher=John Wiley & Sons |isbn=978-0470-56510-0 |agency=Laminar flow analysis |chapter=The Cardiovascular System: Blood Vessels and Hemodynamics |page=817}}</ref>\n\n:<math>PI = \\frac{v_{systole} - v_{diastole}}{v_{mean}}</math>\n\n{| class=\"wikitable\"\n|+ Relation between blood flow velocity and total cross-section area in human\n|-\n!Type of blood vessels\n!Total cross-section area\n!Blood velocity in cm/s\n|-\n| Aorta || 3–5&nbsp;cm<sup>2</sup> || 40&nbsp;cm/s\n|-\n| Capillaries || 4500–6000&nbsp;cm<sup>2</sup> || 0.03&nbsp;cm/s<ref>{{cite book |title=Human anatomy & physiology |edition=9th |last1=Marieb |first1=Elaine N. |last2=Hoehn |first2=Katja |year=2013 |publisher=Pearson Education |isbn=978-0-321-74326-8 |chapter=The Cardiovascular System:Blood Vessels |page=712}}</ref>\n|-\n| Vena cavae inferior and superior || 14&nbsp;cm<sup>2</sup> || 15&nbsp;cm/s\n|-\n|}\n\n==Blood vessels==\n===Vascular resistance===\n{{main article|Vascular resistance}}\nResistance is also related to vessel radius, vessel length, and blood viscosity.\n\nIn a first approach based on fluids, as indicated by the [[Hagen–Poiseuille equation]].<ref name=\"Munson 2009 725\">{{cite book|vauthors = Munson BR, Young DF, Okiishi TH, Huebsch WW|title=Fundamentals of Fluid Mechanics|year=2009|publisher=John Wiley &Sons, Inc.|location=New Jersey|isbn=978-0-470-26284-9|page=725|edition=Sixth}}</ref> The equation is as follows:\n\n:<math>\\Delta P = \\frac{8 \\mu l Q}{\\pi r^4}</math>\n:* ∆''P'': pressure drop/gradient\n:* ''µ'': viscosity\n:* ''l'': length of tube. In the case of vessels with infinitely long lengths, l is replaced with diameter of the vessel.\n:* ''Q'': flow rate of the blood in the vessel\n:* ''r'': radius of the vessel\n\nIn a second approach, more realistic of the [[Vascular resistance#Regulation|vascular resistance]] and coming from experimental observations on blood flows, according to Thurston,<ref name=\"ReferenceA\">GB Thurston, Viscosity and viscoelasticity of blood in small diameter tubes, Microvasular Research 11, 133 146, 1976</ref> there is a plasma release-cell layering at the walls surrounding a plugged flow. It is a fluid layer in which at a distance δ, viscosity η is a function of δ written as η(δ), and these surrounding layers do not meet at the vessel centre in real blood flow. Instead, there is the plugged flow which is hyperviscous because holding high concentration of RBCs. Thurston assembled this layer to the flow resistance to describe blood flow by means of a viscosity η(δ) and thickness δ from the wall layer.\n\nThe blood resistance law appears as R adapted to blood flow profile :\n\n:<math>R = c L \\eta(\\delta) / (\\pi \\delta r^3) </math> <ref name=\"ReferenceA\"/>\nwhere\n\n* R = resistance to blood flow\n* c = constant coefficient of flow\n* L = length of the vessel\n* η(δ) = [[viscosity]] of blood in the wall plasma release-cell layering\n* r = radius of the blood vessel\n* δ = distance in the plasma release-cell layer\n\nBlood resistance varies depending on blood viscosity and its plugged flow (or sheath flow since they are complementary across the vessel section) size as well, and on the size of the vessels.\nAssuming steady, laminar flow in the vessel, the blood vessels behavior is similar to that of a pipe. For instance if p1 and p2 are pressures are at the ends of the tube, the pressure drop/gradient is:<ref>{{cite journal | author = Womersley JR | title = Method for the calculation of velocity, rate of flow and viscous drag in arteries when the pressure gradient is known | journal = Journal of Physiology | volume = 127 | issue = 3 | pages = 553–63 | year = 1955 | pmid = 14368548 | pmc = 1365740 | doi=10.1113/jphysiol.1955.sp005276}}</ref>\n:<math>\\frac{p_1 - p_2}{l} = \\Delta P</math>\n\nThe larger arteries, including all large enough to see without magnification, are conduits with low [[vascular resistance]] (assuming no advanced [[atherosclerosis|atherosclerotic]] changes) with high flow rates that generate only small drops in pressure. The smaller arteries and arterioles have higher resistance, and confer the main blood pressure drop across major arteries to capillaries in the circulatory system.\n\n[[File:Blausen 0092 BloodPressureFlow.png|thumb|Illustration demonstrating how vessel narrowing, or vasoconstriction, increases blood pressure.|upright=1.5]]\n\nIn the arterioles blood pressure is lower than in the major arteries. This is due to bifurcations, which cause a drop in pressure. The more bifurcations, the higher the total cross-sectional area, therefore the pressure across the surface drops. This is why{{citation needed|reason=Arteries have a cross-sectional aea of 20 cm2, arterioles of 40 cm2 and cappilaries of 2500 cm2. (source: Guyton & Hall medical physiology) Thus, if we were to go by this reasoning, the highest pressure drop would be in the capillaries, but we know that the highest pressure drop is in the arterioles. The previous sentence, unless there is a direct quote from somewhere, isn't really a reason for the highest pressure drop in the circulatory system. This needs clarification|date=April 2015}} the arterioles have the highest pressure-drop. The pressure drop of the arterioles is the product of flow rate and resistance: ∆P=Q xresistance. The high resistance observed in the arterioles, which factor largely in the ∆''P'' is a result of a smaller radius of about 30&nbsp;µm.<ref>{{cite book|last=Sircar|first=Sabyasach|title=Principles of Medical Physiology|year=2008|publisher=vistasta Publishing|location=India|isbn=978-1-58890-572-7}}</ref> The smaller the radius of a tube, the larger the resistance to fluid flow.\n\nImmediately following the arterioles are the capillaries. Following the logic observed in the arterioles, we expect the blood pressure to be lower in the capillaries compared to  the arterioles. Since pressure is a function of force per unit area, (''P''&nbsp;=&nbsp;''F''/''A''), the larger the surface area, the lesser the pressure when an external force acts on it. Though the radii of the capillaries are very small, the network of capillaries have the largest surface area in the vascular network. They are known to have the largest surface area (485&nbsp;mm^2) in the human vascular network. The larger the total cross-sectional area, the lower the mean velocity as well as the pressure.<ref name=\"Fung 1997 571\"/>\n\nSubstances called [[vasoconstrictor]]s can reduce the size of blood vessels, thereby increasing blood pressure. [[Vasodilator]]s (such as [[nitroglycerin]]) increase the size of blood vessels, thereby decreasing arterial pressure.\n\nIf the blood viscosity increases (gets thicker), the result is an increase in arterial pressure. Certain [[medical conditions]] can change the viscosity of the blood. For instance, anemia (low [[red blood cell]] concentration), reduces viscosity, whereas increased red blood cell concentration increases viscosity. It had been thought that [[aspirin]] and related \"[[blood thinner]]\" drugs decreased the viscosity of blood, but instead studies found that they act by reducing the tendency of the blood to clot.<ref>{{cite journal |vauthors=Rosenson RS, Wolff D, Green D, Boss AH, Kensey KR | title = Aspirin. Aspirin does not alter native blood viscosity | journal = J. Thromb. Haemost. | volume = 2 | issue = 2 | pages = 340–1 | date = February 2004 | pmid = 14996003 | doi = 10.1111/j.1538-79333.2004.0615f.x | url =  }}</ref>\n\n=== Wall tension ===\n\n[[File:Circumferential stress.svg|thumb|Components of [[cylinder stress]].]]\n\nRegardless of site, blood pressure is related to the [[wall tension]] of the vessel according to the [[Young–Laplace equation]] (assuming that the thickness of the vessel wall is very small as compared to the diameter of the [[Lumen (anatomy)|lumen]]):\n:<math> \\sigma_\\theta = \\dfrac{Pr}{t} \\ </math>\nwhere\n* ''P'' is the blood pressure\n* ''t'' is the wall thickness\n* ''r'' is the inside radius of the cylinder.\n* <math> \\sigma_\\theta \\! </math> is the [[cylinder stress]] or \"hoop stress\".\nFor the thin-walled assumption to be valid the vessel must have a wall thickness of no more than about one-tenth (often cited as one twentieth) of its radius.\n\nThe [[cylinder stress]], in turn, is the average [[force]] exerted circumferentially (perpendicular both to the axis and to the radius of the object) in the cylinder wall, and can be described as:\n:<math> \\sigma_\\theta = \\dfrac{F}{tl} \\ </math>\nwhere:\n* ''F'' is the [[force]] exerted circumferentially on an area of the cylinder wall that has the following two lengths as sides:\n* ''t'' is the radial thickness of the cylinder\n* ''l'' is the axial length of the cylinder\n\n===Stress===\nWhen force is applied to a material it starts to deform or move. As the force needed to deform a material (e.g. to make a fluid flow) increases with the size of the surface of the material A.,<ref name=\"autogenerated3\">{{cite book |last1=Caro |first1=C.G. |last2=Pedley |first2=T.J. |last3=Schroter |first3=R.C. |last4=Seed |first4=W.A. |publisher=Oxford University Press |title=The Mechanics of Circulation |year=1978 |pages=3–60, 151–176 |isbn=978-0-19-263323-1}}</ref> the magnitude of this force F is proportional to the area A of the portion of the surface. Therefore, the quantity (F/A) that is the force per unit area is called the stress. The shear stress at the wall that is associated with blood flow through an artery depends on the artery size and geometry and can range between 0.5 and 4 [[Pascal (unit)|Pa]].<ref>{{cite journal |title=Measuring Wall Shear Stress Using Velocity-Encoded MRI |last=Potters |date=13 February 2014 |journal=Current Cardiovascular Imaging Reports |doi=10.1007/s12410-014-9257-1 |pmid= |volume=7|issue = 4}}</ref> \n:<math>\\sigma = \\frac{F}{A}</math>.\nUnder normal conditions, to avoid atherogenesis, thrombosis, smooth muscle proliferation and endothelial apoptosis, shear stress maintains its magnitude and direction within an acceptable range. In some cases occurring due to blood hammer, shear stress reaches larger values. While the direction of the stress may also change by the reverse flow, depending on the hemodynamic conditions. Therefore, this situation can lead to atherosclerosis disease.<ref>{{cite journal |last1=Tazraei |first1=P. |last2=Riasi |first2=A. |last3=Takabi |first3=B. |title=The influence of the non-Newtonian properties of blood on blood-hammer through the posterior cerebral artery |journal=Mathematical Biosciences |date=2015 |volume=264 |pages=119–127 |doi=10.1016/j.mbs.2015.03.013|pmid=25865933 }}</ref>\n[[File:Laminar shear.svg|thumb|right|320px|Laminar shear of fluid between two plates. <math>v=u, \\tau=\\sigma</math>. Friction between the fluid and the moving boundaries causes the fluid to shear (flow). The force required for this action per unit area is the stress. The relation between the stress (force) and the shear rate (flow velocity) determines the viscosity.]]\n\n=== Capacitance ===\n{{main article|Capacitance of blood vessels}}\nVeins are described as the \"capacitance vessels\" of the body because over 70% of the blood volume resides in the venous system. Veins are more compliant than arteries and expand to accommodate changing volume.<ref>{{cite book|last1=Lough|first1=Mary|title=Hemodynamic Monitoring: Evolving technologies and clinical practice|date=2015-04-15|publisher=Elsevier Mosby|location=St. Louis, Missouri|isbn=978-0-323-08512-0|page=25|edition=1}}</ref>\n\n== Blood pressure ==\nThe blood pressure in the circulation is principally due to the pumping action of the heart.<ref name = 'Caro'>{{cite book |author=Caro, Colin G. |title=The Mechanics of The Circulation|publisher=Oxford University Press |location=Oxford [Oxfordshire] |year=1978 |isbn=978-0-19-263323-1}}</ref> The pumping action of the heart generates pulsatile blood flow, which is conducted into the arteries, across the micro-circulation and eventually, back via the venous system to the heart. During each heartbeat, systemic arterial blood pressure varies between a maximum ([[Systole (medicine)|systolic]]) and a minimum ([[diastolic]]) pressure.<ref>{{cite web | url = http://healthlifeandstuff.com/2010/06/normal-blood-pressure-range-adults/ | title = Normal Blood Pressure Range Adults | publisher = Health and Life | access-date = 2016-02-06 | archive-url = https://web.archive.org/web/20160318195914/http://healthlifeandstuff.com/2010/06/normal-blood-pressure-range-adults | archive-date = 2016-03-18 | dead-url = yes | df =  | date = 2010-06-07 }}</ref> In physiology, these are often simplified into one value, the [[mean arterial pressure|mean arterial pressure (MAP)]], which is calculated as follows:\n\n:MAP ≈ {{frac|2|3}}(BP<sub>dia</sub>) + {{frac|1|3}}(BP<sub>sys</sub>)\n\nwhere:\n*MAP = Mean Arterial Pressure\n*BP<sub>dia</sub> = Diastolic blood pressure\n*BP<sub>sys</sub> = Systolic blood pressure\n\nDifferences in mean blood pressure are responsible for blood flow from one location to another in the circulation. The rate of mean blood flow depends on both blood pressure and the resistance to flow presented by the blood vessels. Mean blood pressure decreases as the [[Circulatory system|circulating blood]] moves away from the [[heart]] through arteries and [[capillaries]] due to [[Viscosity|viscous]] losses of energy. Mean blood pressure drops over the whole circulation, although most of the fall occurs along the small arteries and [[arteriole]]s.<ref name='Klabunde2005p93-4'>{{cite book | last = Klabunde | first = Richard | title = Cardiovascular Physiology Concepts | publisher = Lippincott Williams & Wilkins | year = 2005 | pages = 93–4 | isbn = 978-0-7817-5030-1 }}</ref> Gravity affects blood pressure via [[Fluid statics|hydrostatic]] forces (e.g., during standing), and valves in veins, [[breathing]], and pumping from contraction of skeletal muscles also influence blood pressure in veins.<ref name = 'Caro'/>\n\nThe relationship between pressure, flow, and resistance is expressed in the following equation:<ref name=\"brs\" />\n\n:Flow = Pressure/Resistance\n\nWhen applied to the circulatory system, we get:\n\n: CO = (MAP – RAP)/TPR\nwhere\n* CO = cardiac output (in L/min)\n* MAP = mean arterial pressure (in mmHg), the average pressure of blood as it leaves the heart\n* RAP = right atrial pressure (in mmHg), the average pressure of blood as it returns to the heart\n* TPR = [[total peripheral resistance]] (in mmHg * min/L)\n\nA simplified form of this equation assumes right atrial pressure is approximately 0:\n\n:CO ≈ MAP/TPR\n\nThe ideal blood pressure in the [[brachial artery]], where standard blood pressure cuffs measure pressure, is <120/80&nbsp;mmHg. Other major arteries have similar levels of blood pressure recordings indicating very low disparities among major arteries. In the innominate artery, the average reading is 110/70&nbsp;mmHg, the right subclavian artery averages 120/80 and the abdominal aorta is 110/70&nbsp;mmHg.<ref name=\"Fung 1997 571\">{{cite book|last=Fung|first=Yuan-cheng|title=Biomechanics:Circulation|year=1997|publisher=Springer|location=New York|isbn=978-0-387-94384-8|page=571}}</ref> The relatively uniform pressure in the arteries indicate that these blood vessels act as a pressure reservoir for fluids that are transported within them.\n\nPressure drops gradually as blood flows from the major arteries, through the arterioles, the capillaries until blood is pushed up back into the heart via the venules, the veins through the vena cava with the help of the muscles. At any given pressure drop, the flow rate is determined by the resistance to the blood flow. In the arteries, with the absence of diseases, there is very little or no resistance to blood. The vessel diameter is the most principal determinant to control resistance. Compared to other smaller vessels in the body, the artery has a much bigger diameter (4&nbsp; mm), therefore the resistance is low.<ref name=\"Fung 1997 571\"/>\n\nThe ''arm–leg (blood pressure) gradient'' is the difference between the blood pressure measured in the arms and that measured in the legs. It is normally less than 10&nbsp;mm Hg,<ref name=Markham>{{cite journal |vauthors=Markham LW, Knecht SK, Daniels SR, Mays WA, Khoury PR, Knilans TK | title = Development of exercise-induced arm-leg blood pressure gradient and abnormal arterial compliance in patients with repaired coarctation of the aorta | journal = Am. J. Cardiol. | volume = 94 | issue = 9 | pages = 1200–2 | date = November 2004 | pmid = 15518624 | doi = 10.1016/j.amjcard.2004.07.097 | url =  }}</ref> but may be increased in e.g. [[coarctation of the aorta]].<ref name=Markham/>\n\n==Clinical significance==\n===Monitoring===\n[[File:Maquet Flow-I anesthesia machine.jpg|thumb|An [[anesthetic machine]] with integrated systems for monitoring of several hemodynamic parameters, including [[blood pressure]] and [[heart rate]].]]\nHemodynamic [[Monitoring (medicine)|monitoring]] is the observation of hemodynamic parameters over time, such as [[blood pressure]] and [[heart rate]]. Blood pressure can be monitored either invasively through an inserted blood pressure transducer assembly (providing continuous monitoring), or noninvasively by repeatedly measuring the blood pressure with an inflatable [[blood pressure cuff]].\n\n==Glossary==\n<ref name=\"autogenerated1\"/>\n;ANH:Acute Normovolemic Hemodilution \n;ANH<sub>u</sub>:Number of Units During ANH \n;BL<sub>H</sub>:Maximum Blood Loss Possible When ANH Is Used Before Homologous Blood Transfusion Is Needed\n;BL<sub>I</sub>:Incremental Blood Loss Possible with ANH.(BL<sub>H</sub> – BL<sub>s</sub>) \n;BL<sub>s</sub>:Maximum blood loss without ANH before homologous blood transfusion is required \n;EBV:Estimated Blood Volume(70&nbsp;mL/kg) \n;Hct:Haematocrit Always Expressed Here As A Fraction \n;H<sub>i</sub>:Initial Haematocrit \n;H<sub>m</sub>:Minimum Safe Haematocrit \n;PRBC:Packed Red Blood Cell Equivalent Saved by ANH \n;RCM:Red cell mass. \n;RCM<sub>H</sub>:Cell Mass Available For Transfusion after ANH \n;RCM<sub>I</sub>:Red Cell Mass Saved by ANH \n;SBL:Surgical Blood Loss\n\n==Etymology and pronunciation==\nThe word ''hemodynamics'' ({{IPAc-en|ˌ|h|iː|m|ə|d|aɪ|ˈ|n|æ|m|ɪ|k|s|,_|-|m|oʊ|-}}{{refn|{{OxfordDictionaries.com|accessdate=2016-01-20|haemodynamic}}}}) uses [[classical compound|combining forms]] of ''[[wikt:hemo-#Prefix|hemo-]]'' (actually the term comes from the ancient Greek ''haima'', that means blood) and ''[[dynamics (mechanics)|dynamics]]'', thus \"the [[fluid dynamics|dynamics]] of [[blood]]\". The vowel of the ''hemo-'' syllable is variously written according to the [[American and British English spelling differences#ae and oe|ae/e variation]].\n\n==See also==\n{{col div|colwidth=30em}}\n*[[Blood hammer]]\n*[[Blood pressure]]\n*[[Cardiac output]]\n*[[Cardiovascular System Dynamics Society]]\n*[[Electrical cardiometry]]\n*[[Esophogeal doppler]]\n*[[Hemodynamics of the Aorta]]\n*[[Impedance cardiography]]\n*[[Photoplethysmograph]]\n*[[Windkessel effect]]\n{{colend}}\n\n== Notes and references ==\n{{reflist|30em}}\n\n== Bibliography ==\n* Berne RM, Levy MN. Cardiovascular physiology. 7th Ed Mosby 1997\n* Rowell LB. Human Cardiovascular Control. Oxford  University press 1993\n* Braunwald E (Editor). Heart Disease: A Textbook of Cardiovascular Medicine. 5th Ed. W.B.Saunders 1997\n* Siderman S, Beyar R, Kleber AG. Cardiac Electrophysiology, Circulation and Transport. Kluwer Academic Publishers 1991\n* [http://www.americanheart.org American Heart Association]\n* Otto CM, Stoddard M, Waggoner A, Zoghbi WA. Recommendations for Quantification of Doppler Echocardiography: A Report from the Doppler Quantification Task Force of the Nomenclature and Standards Committee of the American Society of Echocardiography. J Am Soc Echocardiogr 2002;15:167-184\n* Peterson LH, The Dynamics of Pulsatile Blood Flow, Circ. Res. 1954;2;127-139\n* [https://www.ncbi.nlm.nih.gov/pubmed/12024086 Hemodynamic Monitoring], Bigatello LM, George E., Minerva Anestesiol, 2002 Apr;68(4):219-25\n* Claude Franceschi; Paolo Zamboni Principles of Venous Hemodynamics Nova Science Publishers 2009-01 ISBN Nr 1606924850/9781606924853\n* WR Milnor: Hemodynamics, Williams & Wilkins, 1982\n* B Bo Sramek: Systemic Hemodynamics and Hemodynamic Management, 4th Edition, ESBN 1-59196-046-0\n\n==External links==\n*[http://hemodynamicsociety.org/ Hemodynamic Society]\n*[http://www.learnhemodynamics.com Learn hemodynamics]\n*[http://www.e-piv.com/links/ Educational Particle Image Velocimetry (e-PIV) - resources and demonstrations]{{dead link|date=December 2017 |bot=InternetArchiveBot |fix-attempted=yes }}\n{{Library resources box \n|by=no \n|onlinebooks=no \n|others=no \n|about=yes \n|label=Hemodynamics}}\n\n{{Pathology}}\n{{Hemodynamics}}\n{{Cardiovascular physiology}}\n\n[[Category:Fluid mechanics]]\n[[Category:Computational fluid dynamics]]\n[[Category:Cardiovascular physiology]]\n[[Category:Exercise physiology]]\n[[Category:Blood]]"
    },
    {
      "title": "HPP model",
      "url": "https://en.wikipedia.org/wiki/HPP_model",
      "text": "[[Image:HPP small.gif|thumb|Small scale demonstration of the square lattice HPP model (click the picture for animated version).]]\n\nThe '''HPP model''' is a fundamental [[lattice gas automaton]] for the simulation of gases and liquids. It was a precursor to the [[lattice Boltzmann methods]]. From lattice gas automata, it is possible to derive the macroscopic [[Navier-Stokes equation]]s.<ref>Succi, section 2.3 describes the process</ref> Interest in lattice gas automaton methods levelled off in the early 1990s, due to rising interest in the lattice Boltzmann methods.<ref>Succi, section 2.6</ref>\n\n== History ==\nThe HPP model was first introduced in papers published in 1973 and 1976 by Hardy, Pomeau and de Pazzis, whose initials give the model its name. The model can be used as a simple model for both the movement of gases and fluid.<ref>Gershenfeld, pp. 103</ref>\n\n== Model ==\n[[File:HppModelExamples.jpg|thumb|Visual examples of the four rules governing the HPP Model.]]In this model the lattice takes the form of a two-dimensional square grid, with particles capable of moving to any of the four adjacent grid points which share a common edge, and particles cannot move diagonally. This means each grid point can only have one of sixteen possible interactions.\n\n* Particles exist only on the grid points, never on the edges or surface of the lattice.\n* Each particle has an associated direction (from one grid point to another immediately adjacent grid point).\n* Each lattice grid cell can only contain a maximum of one particle for each direction, i.e., contain a total of between zero and four particles.\n \nThe following rules also govern the model:\n# A single particle moves in a fixed direction until it experiences a collision.\n# Two particles experiencing a head-on collision are deflected perpendicularly.\n# Two particles experience a collision which isn't head-on simply pass through each other and continue in the same direction.\n# Optionally, when a particles collides with the edges of a lattice it can rebound.\n\nThe HPP models follows a two-stage update process.\n\n=== Collision Step ===\n\nIn this step the above rules, 2., 3. and 4. are checked and applied if any collisions have occurred. This results in head-on collision particles changing direction, pass-through collisions continuing unchanged, or non-colliding particles simple remaining the same.\n\n=== Transport Step ===\n\nThe second step consists of each particle moving one lattice step in the direction they are currently travelling, which could have been changed by the above Collision Step.\n\n== Shortcomings ==\nThe model is badly flawed, as momentum is always conserved in both the horizontal and vertical lanes. No energy is ever removed from the model, either by collisions or movement, so it will continue indefinitely.\n\nThe HPP model lacked [[rotational invariance]], which made the model highly [[Anisotropy|anisotropic]]. This means for example, that the vortices produced by the HPP model are square-shaped.<ref>Succi, footnote p. 22</ref>\n\n==Notes==\n{{reflist|2}}\n\n==References==\n*{{cite book|author=Sauro Succi|title=The Lattice Boltzmann Equation, for fluid dynamics and beyond|publisher=Oxford Science Publications|year=2001|isbn=0-19-850398-9}} (Chapter 2 on Lattice gas Cellular Automata)\n*{{cite book|author=Neil Gershenfeld|title=The Nature of Mathematical Modeling|publisher=Cambridge University Press|year=1998|isbn=978-0521570954}}\n\n[[Category:Computational fluid dynamics]]"
    },
    {
      "title": "Kameleon FireEx KFX",
      "url": "https://en.wikipedia.org/wiki/Kameleon_FireEx_KFX",
      "text": "{{Infobox Software\n|name = Kameleon FireEx KFX\n|screenshot =\n|caption =\n|developer = [http://www.computit.no Computational Industry Technologies AS, ComputIT]\n|latest_release_version = KFX2010 V1.3\n|latest_release_date = \n|operating_system = [[Linux]]\n|genre = [[Computational fluid dynamics]] software\n|license = [[Commercial software]]\n|website = [http://www.computit.no/?module=Articles;action=Article.publicShow;ID=347 http://www.computit.no/?module=Articles;action=Article.publicShow;ID=347]\n}}\n\n'''Kameleon FireEx KFX''', often only referred to as '''KFX''', is a commercial [[Computational Fluid Dynamics]] (CFD) program with main focus on gas dispersion and fire simulation.\n\nKFX uses the [[Turbulence modelling#Common models|k-epsilon model]] for turbulence modelling, the [[Eddy Dissipation Concept]] (EDC) for combustion modelling, and a radiation model based on the Discrete Transfer Method (DTM) by Lockwood and Shah.\n\n== External links ==\n* [http://www.cfd-online.com/Wiki/Standard_k-epsilon_model Standard k-epsilon model on CFD-wiki]\n* F.C. Lockwood and N.G. Shah, \"A new radiation solution method for incorporation in general combustion prediction procedures\", 18th Symposium (International) on Combustion, The Combustion Institute, Pittsburgh, PA, pp.&nbsp;1405–1414 (1981), {{doi|10.1016/S0082-0784(81)80144-0}}.\n\n[[Category:Computational fluid dynamics]]\n[[Category:Simulation software]]\n\n\n{{simulation-software-stub}}"
    },
    {
      "title": "KIVA (software)",
      "url": "https://en.wikipedia.org/wiki/KIVA_%28software%29",
      "text": "{{Infobox Software\n| name                   = KIVA\n| screenshot             = Kiva Simulation.jpg\n| caption                = KIVA simulation of an experimental engine with [[Double overhead camshaft|DOHC]] quasi-symmetric pent-roof combustion chamber and 4 valves.\n| logo                   = \n| developer              = [[Los Alamos National Laboratory]]\n| released               = {{Start date and age|1985}}\n| latest_release_version = KIVA-4mpi\n| latest_release_date    = {{Start date and age|2009}}\n| latest_preview_version =\n| latest_preview_date    =\n| operating_system       = [[Linux]], [[Unix]], [[Windows]]\n| language               = [[Fortran]] \n| genre                  = [[Physics software|Physics]]\n| license                = [[Proprietary software|Proprietary]]\n| website                = {{url|www.lanl.gov/orgs/t/t3/codes/kiva.shtml}}\n}}\n\n'''KIVA''' is a family of [[Fortran]]-based [[Computational Fluid Dynamics]] [[software]] developed by [[Los Alamos National Laboratory]] (LANL). The software predicts complex fuel and air flows as well as [[Ignition system|ignition]], [[combustion]], and pollutant-formation processes in engines. The KIVA models have been used to understand combustion chemistry processes, such as auto-ignition of fuels, and to optimize [[diesel engine]]s for high efficiency and low emissions. [[General Motors]] has used KIVA in the development of direct-injection, stratified charge gasoline engines as well as the fast burn, homogeneous-charge gasoline engine.<ref name=\"energy1\">{{cite web|url=http://www1.eere.energy.gov/vehiclesandfuels/pdfs/success/modeling_combustion_processes.pdf |format=PDF |title=Modeling of Combustion Processes Improves Engine Efficiency\n|website=Eere.energy.gov |accessdate=2016-09-27}}</ref> [[Cummins]] reduced development time and cost by 10%–15% using KIVA to develop its high-efficiency 2007 [[Cummins B Series engine#B6.7|ISB 6.7-L diesel engine]] that was able to meet 2010 emission standards in 2007. At the same time, the company realized a more robust design and improved fuel economy while meeting all environmental and customer constraints.<ref name=\"energy2\">{{cite web|url=http://www1.eere.energy.gov/vehiclesandfuels/pdfs/adv_combustion_goals.pdf |format=PDF |title=Vehicle Technologies Program : Advanced Combustion Engine R&D: Goals, Strategies, and Top Accomplishments |website=Eere.energy.gov |accessdate=2016-09-27}}</ref>\n\n==History==\nLANL's Computational Fluid Dynamics expertise hails from the very beginning of the [[Manhattan Project]] in the 1940s. When the nation found itself in the midst of the first energy crisis in the 1970s, this core Laboratory capability transformed into KIVA, an [[internal combustion engine]] modeling tool designed to help make automotive engines more fuel-efficient and cleaner-burning. A \"[[kiva]]\" is actually a round [[Pueblo]] ceremonial chamber that is set underground and entered from above by means of a ladder through its roof; drawing  on LANL's  southwestern heritage, an analogy is made with the typical [[engine cylinder]] in which the entrance and exit of gases is achieved through valves set in the cylinder.<ref>Amsden, D. C., Amsden, and A. A., The KIVA Story: A Paradigm of Technology Transfer, IEEE Transactions on Professional Communication Journal, 36, (4), 190-195, December 1993</ref>\n\nThe first public release of KIVA was made in 1985 through the National Energy Software Center (NESC) at [[Argonne National Laboratory]], which served at the time as the official distribution hub for [[United States Department of Energy|Department of Energy]]-sponsored software.  Distribution of KIVA continued through the Energy Science and Technology Software Center (ESTSC) in [[Oak Ridge, Tennessee|Oak Ridge]], [[Tennessee]] until 2008, when distribution of multiple versions of KIVA returned to LANL's [[Technology Transfer]] Division (TT).<ref>{{cite web|url=http://www.lanl.gov/orgs/tt/pdf/techs/kiva.pdf |title=Archived copy |accessdate=2011-10-24 |deadurl=yes |archiveurl=https://web.archive.org/web/20111026114241/http://www.lanl.gov/orgs/tt/pdf/techs/kiva.pdf |archivedate=2011-10-26 |df= }}</ref> KIVA is used by hundreds of institutions [[world]]wide, including the [[Big Three (automobile manufacturers)|Big Three U.S. auto makers]],<ref name=\"energy1\"/><ref>{{cite web|url=http://www.ornl.gov/info/ornlreview/v30n3-4/engine.htm |title=Computational Engine Modeling |publisher=Ornl.gov |date= |accessdate=2012-12-11}}</ref><ref>{{cite web|url=http://www-personal.umich.edu/~hgim/PDF/CST06-KIVA.pdf |title=Microsoft Word - cst_paper_revised_FINAL.doc |website=Personal.umich.edu |format=PDF |date= |accessdate=2016-09-27}}</ref> [[Cummins]],<ref name=\"energy2\"/> [[Caterpillar Inc.|Caterpillar]],<ref>{{cite web|url=http://www.transportation.anl.gov/pdfs/EE/286.pdf |title=Energy Systems &#124; Argonne National Laboratory |website=Transportation.anl.gov |date= |accessdate=2016-09-27}}</ref> and various federal laboratories.<ref name=\"energy1\"/><ref>{{cite web|url=http://www1.eere.energy.gov/vehiclesandfuels/pdfs/merit_review_2011/adv_combustion/ace006_steeper_2011_o.pdf |format=PDF |title=Automotive HCCI Engine Research |website=Eere.energy.gov |accessdate=2016-09-27}}</ref>\n\n==Overview==\n[[Fuel economy in automobiles|Fuel economy]] is heavily dependent upon [[engine efficiency]], which in turn depends to a large degree on how fuel is burned within the cylinders of the engine. Higher in-cylinder pressures and temperatures lead to increased fuel economy, but they also create more difficulty in controlling the [[combustion]] process. Poorly controlled and incomplete combustion can cause higher levels of emissions and lower [[engine]] efficiencies.\n\nIn order to [[mathematical optimization|optimize]] combustion processes, engine designers have traditionally undertaken manual engine modifications, conducted testing, and analyzed the results. This iterative process is painstakingly slow, costly, and does not lend itself to identifying the optimal engine design specifications. In response to these problems, Los Alamos National Laboratory scientists developed KIVA, an advanced [[computational fluid dynamics]] (CFD) modeling code that accurately simulates the in-cylinder processes of engines.\n\nKIVA, a transient, [[three-dimensional]], [[Multiphase flow|multiphase]], [[Multi-component reaction|multicomponent]] code for the analysis of chemically reacting flows with sprays has been under development at LANL for decades. The code uses an [[Arbitrary Lagrangian Eulerian]] (ALE) methodology on a staggered [[Lattice graph|grid]], and discretizes space using the [[finite volume method]]. The code uses an implicit time-advancement with the exception of the [[Material derivative|advective]] terms that are cast in an explicit but second-order [[Monotonic function|monotonicity]]-preserving manner. Also, the [[convection]] calculations can be subcycled in the desired regions to avoid restricting the time step due to [[Courant–Friedrichs–Lewy condition|Courant]] conditions.\n\nKIVA’s functionality extends from low speeds to [[supersonic]] flows for both [[laminar flow|laminar]] and [[turbulent]] regimes. Transport and [[chemical reactions]] for an arbitrary number of species and their chemical reactions is provided. A [[stochastic]] particle method is used to calculate evaporating liquid sprays, including the effects of [[droplet]] collisions, [[Flocculation|agglomeration]], and [[aerodynamic]] breakups.\n\nAlthough specifically designed for simulating [[internal combustion engines]], the modularity of the code facilitates easy modifications for solving a variety of [[hydrodynamics]] problems involving chemical reactions. The versatility and range of features have made KIVA programs attractive to a variety of non-engine applications as well; these range from convection towers to modeling [[silicon dioxide]] [[condensation]] in high pressure [[oxidation]] chambers. Other applications have included the analysis of flows in automotive [[catalytic converters]], power plant smokestack cleaning, [[Pyrolysis|pyrolytic]] treatment of [[biomass]], design of [[fire suppression systems]], [[Pulse detonation engine|Pulsed Detonation Engines]] (PDEs), stationary burners, aerosol dispersion, and design of heating, ventilation, and [[air conditioning]] systems. The code has found a widespread application in the automotive industry.\n\n==Versions==\n\n===KIVA-3V===\n[[File:Fuel impingement in an engine cylinder modeled with KIVA-3V.gif|right|thumb|233px|Fuel impingement in an engine cylinder modeled with KIVA-3V.]]KIVA-3V is the most mature version of KIVA still maintained and distributed through LANL; it is an improved version of the earlier [[Federal Laboratory Consortium]] Excellence in Technology Transfer Award-winning KIVA3 (1993), extended to model vertical or canted valves in the cylinder head of a gasoline or diesel engine.<ref>{{cite web|author=Office of Science |url=http://science.energy.gov/about/honors-and-awards/flc/1993-awards/ |title=1993 Awards &#124; U.S. DOE Office of Science (SC) |publisher=Science.energy.gov |date=2012-06-21 |accessdate=2012-12-11}}</ref> KIVA3, in turn, was based on the earlier KIVA2 (1989) and used the same numerical solution procedure and solved the same types of equations.<ref name=\"autogenerated1\">{{cite web|url=http://www.osti.gov/estsc/details.jsp?rcdid=547 |title=ESTSC - Find the latest in U.S. Department of Energy Software |publisher=Osti.gov |date=1999-11-29 |accessdate=2012-12-11}}</ref>\n\nKIVA-3V uses a block-structured mesh with connectivity defined through indirect addressing. The departure from a single rectangular structure in logical space allows complex geometries to be modeled with significantly greater efficiency because large regions of deactivated cells are no longer necessary. Cell-face boundary conditions permit greater flexibility and simplification in the application of boundary conditions. KIVA-3V also contains a number of significant improvements over its predecessors. New features enhanced the robustness, efficiency, and usefulness of the overall program for engine modeling. Automatic restart of the cycle with a reduced timestep in case of iteration limit or temperature overflow effectively reduced code crashes. A new option provided automatic deactivation of a port region when it is closed from the cylinder and reactivation when it communicates with the cylinder. Extensions to the particle-based liquid wall film model made the model more complete and a split injection option was also added. A new subroutine monitors the liquid and gaseous fuel phases and energy balance data and emissions are monitored and printed. In addition, new features were added to the LANL-developed grid generator, K3PREP, and the KIVA graphics post processor, K3POST.<ref name=\"autogenerated1\"/>\n\n===KIVA-4===\nKIVA-4 is maintained and distributed through LANL. While KIVA-4 maintains the full generality of KIVA-3V, it adds the capability of computing with unstructured grids. Unstructured grids can be generated more easily than structured grids for complex geometries. The unstructured grids may be composed of a variety of elements including [[hexahedra]], [[prism (geometry)|prism]]s, [[pyramids]], and [[tetrahedra]]. However, the numerical accuracy diminishes when the grid is not composed of hexahedra. KIVA-4 was developed to work with the many geometries accommodated within KIVA-3V, which includes 2D [[axisymmetric]], 2D [[Plane (geometry)|planar]], 3D axisymmetric sector geometries, and full 3D geometries. KIVA-4 also features a multicomponent fuel evaporation algorithm. Many of the numerical algorithms in KIVA-3V generalize properly to unstructured meshes; however, fundamental changes were needed in the solution of the pressure equation and the fluxing of momentum. In addition, KIVA-4 loops over cell faces to compute [[diffusion]] terms.<ref>Torres, D.J. and Trujillo, M.F., KIVA-4: An unstructured ALE code for compressible gas flow with sprays, Journal of Computational Physics, 2006, vol. 219, pp. 943-975.</ref>\n\n===KIVA-4mpi===\nRecently, LANL researchers developed KIVA-4mpi, a parallel version of KIVA-4, and the most advanced version of KIVA maintained and distributed by LANL. KIVA-4mpi also solves chemically reacting, turbulent, multi-phase viscous flows, but does this on multiple computer processors with a distributed computational domain (grid). KIVA-4mpi internal combustion engine modeling capabilities are the same as that of KIVA-4, and are based on the KIVA-4 unstructured grid code.  The software is well suited for modeling internal combustion engines on multiple processors using the [[message passing interface]] (MPI).<ref>David Torres, Yuanhong Li and Song-Charng Kong, Partitioning Strategies for Parallel KIVA-4 Engine Simulations, Computers and Fluids, 2009</ref> On August 9, 2011, LANL honored the authors of KIVA-4mpi with the Distinguished Copyright Award for demonstrating a breadth of commercial applications, potential to create economic value, and the highest level of technical excellence.<ref>{{cite web|url=http://www.lanl.gov/news/releases/awards_recognize_outstanding_innovation_in_tech_transfer.html|title=Awards recognize outstanding innovation in Technology Transfer |accessdate=October 24, 2011 |deadurl=yes |archiveurl=https://web.archive.org/web/20111021051725/http://www.lanl.gov/news/releases/awards_recognize_outstanding_innovation_in_tech_transfer.html |archivedate=October 21, 2011 }}</ref>\n\n===KIVA-EXEC===\nKIVA-EXEC is a free, reduced-functionality executable-only trial version of KIVA-4. KIVA-EXEC has all the performance of Los Alamos National Laboratory’s premier KIVA-4 code, but with a 45K cell limitation.<ref>{{cite web|author=Los Alamos National Laboratory &bull; Established 1943 |url=http://www.lanl.gov/orgs/tt/license/software/kiva/index.php |title=KIVA-4: Los Alamos National Laboratory |publisher=Lanl.gov |date= |accessdate=2012-12-11}}</ref> KIVA-EXEC is perfect for beginners who do not need or intend to modify the source code.<ref>{{cite web|author=Los Alamos National Laboratory &bull; Est 1943 |url=http://www.lanl.gov/orgs/tt/license/software/11.shtml |title=LANL &#124; TT &#124; License &#124; Software &#124; 2010 |publisher=Lanl.gov |date= |accessdate=2012-12-11}}</ref>\n\n==KIVA videos==\n*KIVA4 slant valve<ref>{{cite web|url=http://www.lanl.gov/orgs/t/kiva_files/kiva4slantvalue_wvel.avi |title=Archived copy |accessdate=2011-10-24 |deadurl=yes |archiveurl=https://web.archive.org/web/20111031014030/http://www.lanl.gov/orgs/t/kiva_files/kiva4slantvalue_wvel.avi |archivedate=2011-10-31 |df= }}</ref>\n*Cubit scalloped bowl<ref>{{cite web|url=http://www.lanl.gov/orgs/t/kiva_files/Cubit_scalluped_bowl_uvel.mov |title=Archived copy |accessdate=2011-10-24 |deadurl=yes |archiveurl=https://web.archive.org/web/20111031013903/http://www.lanl.gov/orgs/t/kiva_files/Cubit_scalluped_bowl_uvel.mov |archivedate=2011-10-31 |df= }}</ref>\n*4 Valve KIVA-4 mpi<ref>{{cite web|url=http://www.lanl.gov/orgs/t/kiva_files/4valve.avi |title=Archived copy |accessdate=2011-10-24 |deadurl=yes |archiveurl=https://web.archive.org/web/20111031014524/http://www.lanl.gov/orgs/t/kiva_files/4valve.avi |archivedate=2011-10-31 |df= }}</ref>\n*4 Valve FEARCE, 2018 new FEM based LANL T-3 software (David Carrington and Jiajia Waters )\n\n==Alternative software==\n* [[Advanced Simulation Library]] (open source: AGPL)<ref>{{cite web|url=http://asl.org.il/ |title=Advanced Simulation Library |publisher=ASL |date= |accessdate=2016-09-27}}</ref>\n* [[COMSOL Multiphysics]]\n* CLAWPACK<ref>{{cite web|url=http://depts.washington.edu/clawpack |title=Clawpack |website=Depts.washington.edu |date=2013-01-21 |accessdate=2016-09-27}}</ref>\n* [[Code Saturne]] (GPL)\n* [[Coolfluid]] (LGPLv3)<ref>{{cite web|author=andrealani |url=https://github.com/andrealani/COOLFluiD/wiki/ |title=Home · andrealani/COOLFluiD Wiki · GitHub |website=Github.com |date= |accessdate=2016-09-27}}</ref>\n* [[deal.II]]<ref>[http://www.dealii.org] {{webarchive|url=https://web.archive.org/web/20120608055415/http://www.dealii.org/ |date=2012-06-08 }}</ref>\n* [[FEATool Multiphysics]]<ref>{{cite web|url=http://www.featool.com |title=FEATool Multiphysics - Matlab FEM Finite Element Physics Simulation Toolbox |website=Featool.com |date= |accessdate=2016-09-27}}</ref>\n* FreeCFD{{citation needed|date=August 2015}}\n* [[Gerris (software)|Gerris Flow Solver]]<ref>{{cite web|url=http://gfs.sf.net/ |title=Gerris Flow Solver |website=Gfs.sf.net |accessdate=2016-09-27}}</ref>\n* [[Nektar++]]<ref>{{cite web|url=http://www.nektar.info|title=Nektar++ – Spectral/hp Element Framework|website=Nektar.info|access-date=2016-06-14}}</ref>\n* OpenFVM<ref>{{cite web|url=http://sourceforge.net/projects/openfvm/ |title=OpenFVM download |website=SourceForge.net |date= |accessdate=2016-09-27}}</ref>\n* [[SU2 code]] (LGPL)<ref>{{cite web|author= |url=http://su2.stanford.edu/ |title=SU2, the open-source CFD code |doi=10.1016/j.compfluid.2016.02.003 |website=Su2.stanford.edu |date= |accessdate=2016-09-27}}</ref>\n\n==References==\n{{Reflist|30em}}\n\n==External links==\n*[http://www.lanl.gov/projects/feynman-center/deploying-innovation/intellectual-property/software-tools/kiva/download.php Free, personal-use Linux-compatible (Red Hat recommended) KIVA-EXEC download]\n*[http://www.lanl.gov/projects/feynman-center/deploying-innovation/intellectual-property/software-tools/kiva/index.php KIVA-4 User’s Manual]\n*[http://www.lanl.gov/projects/feynman-center/deploying-innovation/intellectual-property/software-tools/kiva/index.php KIVA-3V manual (0.4MB, searchable within READER.)] \n*[http://www.lanl.gov/projects/feynman-center/deploying-innovation/intellectual-property/software-tools/kiva/index.php KIVA-3V manual (1.5MB, searchable within READER.)] \n*[http://www.lanl.gov/projects/feynman-center/deploying-innovation/intellectual-property/software-tools/kiva/index.php KIVA-3 manual (2.2 MB, searchable within READER.)]\n*[http://www.lanl.gov/projects/feynman-center/deploying-innovation/intellectual-property/software-tools/kiva/index.php KIVA-II manual (9.0MB, scanned document, not searchable.)]\n*[http://www.lanl.gov/org/padste/adtsc/theoretical/fluid-dynamics-solid-mechanics/index.php Los Alamos National Laboratory’s Fluid Dynamics and Solid Mechanics Group]\n*[http://www.lanl.gov/partnerships/ Los Alamos National Laboratory Technology Transfer Division]\n\n{{CAE software}}\n\n{{DEFAULTSORT:KIVA}}\n[[Category:Fortran software]]\n[[Category:Physics software]]\n[[Category:Industrial software]]\n[[Category:Computational fluid dynamics]]\n[[Category:Finite element software for Linux]]"
    },
    {
      "title": "Lagrangian and Eulerian specification of the flow field",
      "url": "https://en.wikipedia.org/wiki/Lagrangian_and_Eulerian_specification_of_the_flow_field",
      "text": "{{Use American English|date = February 2019}}\n{{Short description|computational fluid dynamics tools}}\n{{dablink| This article is about the continuum mechanics.  For the use of generalized coordinates in classical mechanics, see [[generalized coordinates]], [[Lagrangian mechanics]] and [[Hamiltonian mechanics]]}}\n__NOTOC__\nIn [[classical field theory|classical field theories]], the '''Lagrangian specification of the field''' is a way of looking at fluid motion where the observer follows an individual [[fluid parcel]] as it moves through space and time.<ref name=Batchelor>Batchelor (1973) pp. 71–73.</ref><ref name=Lamb>Lamb (1994) §3–§7 and §13–§16.</ref> Plotting the position of an individual parcel through time gives the [[Streamlines, streaklines, and pathlines|pathline]] of the parcel. This can be visualized as sitting in a boat and drifting down a river.\n\nThe '''Eulerian specification of the flow field''' is a way of looking at fluid motion that focuses on specific locations in the space through which the fluid flows as time passes.<ref name=Batchelor/><ref name=Lamb/> This can be visualized by sitting on the bank of a river and watching the water pass the fixed location. \n\nThe Lagrangian and Eulerian specifications of the flow field are sometimes loosely denoted as the '''Lagrangian and Eulerian frame of reference'''. However, in general both the Lagrangian and Eulerian specification of the flow field can be applied in any observer's [[frame of reference]], and in any [[coordinate system]] used within the chosen frame of reference.\n\nThese specifications are reflected in [[computational fluid dynamics]], where \"Eulerian\" simulations employ a fixed [[Types of mesh|mesh]] while \"Lagrangian\" ones (such as [[Meshfree methods |meshfree simulations]]) feature simulation nodes that may move following the [[velocity field]].\n\n\n\n==Description==\n\nIn the ''Eulerian specification'' of a [[Field (physics)|field]], it is represented as a function of position '''x''' and time ''t''. For example, the [[flow velocity]] is represented by a function \n\n:<math>\\mathbf{u}\\left(\\mathbf{x}, t\\right).</math>\n\nOn the other hand, in the ''Lagrangian specification'', individual fluid parcels are followed through time. The fluid parcels are labelled by some (time-independent) vector field '''x<sub>0</sub>'''. (Often, '''x<sub>0</sub>''' is chosen to be the center of mass of the parcels at some initial time ''t<sub>0</sub>''. It is chosen in this particular manner to account for the possible changes of the shape over time. Therefore the center of mass is a good parameterization of the flow velocity '''u''' of the parcel.)<ref name=Batchelor/> In the Lagrangian description, the flow is described by a function\n\n:<math>\\mathbf{X}\\left(\\mathbf{x}_0,t\\right),</math>\n\ngiving the position of the particle labeled '''x<sub>0</sub>''' at time ''t''.\n\nThe two specifications are related as follows:<ref name=Lamb/>\n\n:<math>\\mathbf{u}\\left(\\mathbf{X}(\\mathbf{x}_0,t),t \\right) = \\frac{\\partial \\mathbf{X}}{\\partial t}\\left(\\mathbf{x}_0,t \\right),</math>\n\nbecause both sides describe the velocity of the particle labeled '''x<sub>0</sub>''' at time ''t''.\n\nWithin a chosen coordinate system, '''x<sub>0</sub>''' and '''x''' are referred to as the '''Lagrangian coordinates''' and '''Eulerian coordinates''' of the flow.\n\n==Material derivative==\n{{Main|Material derivative}}\nThe Lagrangian and Eulerian specifications of the [[kinematics]] and [[dynamics (physics)|dynamics]] of the flow field are related by the [[material derivative]] (also called the Lagrangian derivative, convective derivative, substantial derivative, or particle derivative).<ref name=Batchelor/>\n\nSuppose we have a flow field '''u''', and we are also given a generic field with Eulerian specification '''F'''('''x''',''t''). Now one might ask about the total rate of change of '''F''' experienced by a specific flow parcel. This can be computed as\n\n:<math>\\frac{\\mathrm{D}\\mathbf{F}}{\\mathrm{D}t} = \\frac{\\partial \\mathbf{F}}{\\partial t} + \\left(\\mathbf{u}\\cdot \\nabla  \\right) \\mathbf{F},</math>\n\nwhere &nabla; denotes the [[gradient]] with respect to '''x''', and the operator '''u'''&sdot;&nabla; is to be applied to each component of '''F'''. This tells us that the total rate of change of the function '''F''' as the fluid parcels moves through a flow field described by its Eulerian specification '''u''' is equal to the sum of the local rate of change and the convective rate of change of '''F'''. This is a consequence of the [[chain rule]] since we are differentiating the function '''F'''('''X'''('''x<sub>0</sub>''',''t''),''t'') with respect to ''t''.\n\n[[Conservation law]]s for a unit mass have a Lagrangian form, which together with mass conservation produce Eulerian conservation; on the contrary, when fluid particles can exchange a quantity (like energy or momentum), only Eulerian conservation laws exist.<ref>{{harvtxt|Falkovich|2011}}</ref>\n\n==See also==\n\n* [[Conservation form]]\n* [[Contour advection]]\n* [[Equivalent latitude]]\n* [[Generalized Lagrangian mean]]\n* [[Lagrangian particle tracking]]\n* [[Semi-Lagrangian scheme]]\n* [[Streamlines, streaklines, and pathlines]]\n* [[Trajectory (fluid mechanics)]]\n* [[Stochastic_Eulerian_Lagrangian_method]]\n\n==Notes==\n{{reflist}}\n\n==References==\n* {{cite book| ISBN=978-3-319-59694-5 |last1=Badin|first1=G.|last2=Crisciani|first2=F.| title=Variational Formulation of Fluid and Geophysical Fluid Dynamics - Mechanics, Symmetries and Conservation Laws - | publisher=Springer| year=2018 | pages=218 | doi= 10.1007/978-3-319-59695-2}}\n*{{citation\n | first=G.K. | last=Batchelor | authorlink=George Batchelor\n | title=An introduction to fluid dynamics\n | publisher=Cambridge University Press\n | year=1973\n | isbn=978-0-521-09817-5\n}}\n*{{citation\n | first=Lev | last=Landau| authorlink=Lev Landau\n | first2=E.M.| last2=Lifshitz| author2link=Evgeny Lifshitz\n | title=Fluid Mechanics, 2nd Edition (Course of Theoretical Physics, Volume 6)\n | publisher= Butterworth-Heinemann\n | year=1987\n | isbn=978-0750627672\n}}\n*{{citation\n | first=H. | last=Lamb | authorlink=Horace Lamb\n | title=Hydrodynamics\n | edition=6th\n | publisher=Cambridge University Press\n | year=1994\n | origyear=1932\n | isbn=978-0-521-45868-9\n}}\n*{{citation \n | last=Falkovich | first=Gregory \n | year=2011 \n | title=Fluid Mechanics (A short course for physicists)\n | publisher=Cambridge University Press \n | isbn=978-1-107-00575-4 \n}}\n\n[[Category:Fluid dynamics]]\n[[Category:Aerodynamics]]\n[[Category:Computational fluid dynamics]]"
    },
    {
      "title": "Lagrangian particle tracking",
      "url": "https://en.wikipedia.org/wiki/Lagrangian_particle_tracking",
      "text": "{{Refimprove|date=August 2012}}\n\nIn [[computational fluid dynamics]], the '''Lagrangian particle tracking''' (or in short '''LPT''' method) is a numerical technique for tracking [[Continuum mechanics#Lagrangian description|Lagrangian]] particles within an [[Continuum mechanics#Eulerian description|Eulerian]] phase. It is also commonly referred to as Discrete Particle Simulation (DPS). Some simulation cases for which this method is applicable are: sprays, small bubbles, dust particles, and is especially optimal for dilute multiphase flows with large [[Stokes number]].<ref>{{cite book\n|title = Computational Techniques for Multiphase Flows\n|author = Guan Heng Yeoh, Jiyuan Tu\n|publisher = Elsevier\n|year = 2009\n|pages = 643\n|isbn = 0080467334\n|url = https://books.google.com/books?id=uDQ2MFj6m4AC&dq=lagrangian+particle+tracking&source=gbs_navlinks_s}}</ref>{{Better source|reason=citation to the subject index of a book which barely discusses LPT methodssays does not suffice|date=August 2012}}\n\n==See also==\n*[[Lagrangian and Eulerian specification of the flow field]]\n\n==References==\n{{reflist}}\n\n[[Category:Computational fluid dynamics]]\n\n\n{{fluiddynamics-stub}}"
    },
    {
      "title": "Lambda2 method",
      "url": "https://en.wikipedia.org/wiki/Lambda2_method",
      "text": "The '''Lambda2 method''', or '''Lambda2 vortex criterion''', is a [[vortex core line]] detection [[algorithm]] that can adequately identify [[vortex|vortices]] from a three-dimensional fluid [[Flow velocity|velocity field]].<ref>J. Jeong and F. Hussain. On the Identification of a Vortex. ''J. Fluid Mechanics'', 285:69-94, 1995.</ref> The Lambda2 method is [[Galilean invariance|Galilean invariant]], which means it produces the same results when a uniform velocity field is added to the existing velocity field or when the field is [[Translation (geometry)|translated]].\n\n== Description ==\nThe [[flow velocity]] of a fluid is a [[vector field]] which is used to mathematically describe the motion of a continuum. \nThe length of the flow velocity vector is the flow speed and is a scalar. The flow velocity <math>\\mathbf{u}</math> of a fluid is a vector field\n\n:<math> \\mathbf{u}=\\mathbf{u}(x, y, z, t),</math>\n\nwhich gives the [[velocity]] of an ''[[fluid parcel|element of fluid]]'' at a position <math>(x, y, z)\\,</math> and time <math> t.\\,</math>\nThe Lambda2 method determines for any point <math>\\mathbf{u}</math> in the fluid whether this point is part of a vortex core. A vortex is now defined as a connected region for which every point inside this region is part of a vortex core.\n\nUsually one will also obtain a large number of small vortices when using the above definition. In order to detect only ''real'' vortices, a threshold can be used to discard any vortices below a certain size (e.g. volume or number of points contained in the vortex).\n== Definition ==\nThe Lambda2 method consists of several steps. First we define the gradient velocity tensor <math>\\mathbf{J}</math>;\n\n<math>\n\\mathbf{J} \\equiv \\nabla \\vec{u} =\n\\begin{bmatrix}\n\\partial_x u_x & \\partial_y u_x & \\partial_z u_x  \\\\\n\\partial_x u_y & \\partial_y u_y & \\partial_z u_y  \\\\\n\\partial_x u_z & \\partial_y u_z & \\partial_z u_z \n\\end{bmatrix},\n</math>\n\nwhere <math>\\vec{u}</math> is the velocity field.\nThe gradient velocity tensor is then decomposed into its [[Symmetric matrix|symmetric]] and [[Skew-symmetric matrix|antisymmetric]] parts:\n\n<math>\\mathbf{S} = \\frac{\\mathbf{J} + \\mathbf{J}^\\text{T}}{2}</math> and  <math>\\mathbf{\\Omega} = \\frac{\\mathbf{J} - \\mathbf{J}^\\text{T}}{2},</math>\n\nwhere T is the [[Transpose|transpose operation]]. Next the three [[eigenvalue]]s of\n<math>\\mathbf{S}^2 + \\mathbf{\\Omega}^2</math> are calculated so that for each\npoint in the velocity field <math>\\vec{u}</math>  there are three corresponding eigenvalues; <math>\\lambda_1</math>, <math>\\lambda_2</math> and <math>\\lambda_3</math>. The eigenvalues are ordered in such a way that <math>\\lambda_1 \\geq  \\lambda_2 \\geq  \\lambda_3</math>.\nA point in the velocity field is part of a vortex core only if at least two of its eigenvalues are negative i.e. if <math>\\lambda_2 < 0</math>. This is what gave the Lambda2 method its name.\n\nUsing the Lambda2 method, a vortex can be defined as a connected region where <math>\\lambda_2</math> is negative. However, in situations where several vortices exist, it can be difficult for this method to distinguish between individual vortices\n<ref>Jiang, Ming, Raghu Machiraju, and David Thompson. \"Detection and Visualization of Vortices\" ''The Visualization Handbook'' (2005): 295.</ref>\n. The Lambda2 method has been used in practice to, for example, identify [[vortex ring]]s present in the blood flow inside the [[human heart]]\n<ref>ElBaz, Mohammed SM, et al. \"Automatic Extraction of the 3D Left Ventricular Diastolic Transmitral Vortex Ring from 3D Whole-Heart Phase Contrast MRI Using Laplace-Beltrami Signatures.\" ''Statistical Atlases and Computational Models of the Heart. Imaging and Modelling Challenges.'' Springer Berlin Heidelberg, 2014. 204-211.</ref>\n\n== References ==\n{{reflist}}\n\n[[Category:Vortices]]\n[[Category:Computational fluid dynamics]]"
    },
    {
      "title": "Large eddy simulation",
      "url": "https://en.wikipedia.org/wiki/Large_eddy_simulation",
      "text": "[[Image:LES Turbulent Velocity Field.png|300px|right|thumb|Large eddy simulation of a turbulent gas velocity field.]]\n\n'''Large eddy simulation (LES)''' is a mathematical model for [[turbulence]] used in [[computational fluid dynamics]]. It was initially proposed in 1963 by [[Joseph Smagorinsky]] to simulate atmospheric air currents,<ref name=\"Smagorinsky_1963\">{{Cite journal\n| last=Smagorinsky\n| first=Joseph\n| title=General Circulation Experiments with the Primitive Equations\n| journal=Monthly Weather Review\n|date=March 1963\n| volume=91\n| issue=3\n| pages=99–164|bibcode = 1963MWRv...91...99S |doi = 10.1175/1520-0493(1963)091<0099:GCEWTP>2.3.CO;2 }}</ref> and first explored by Deardorff (1970).<ref name=\"Deardorff_1970\">{{Cite journal\n|last=Deardorff\n|first=James\n|title=A numerical study of three-dimensional turbulent channel flow at large Reynolds numbers\n|journal=[[Journal of Fluid Mechanics]]\n|year=1970\n|volume=41\n|issue=2\n|pages=453–480|bibcode = 1970JFM....41..453D |doi = 10.1017/S0022112070000691 }}</ref>  LES is currently applied in a wide variety of engineering applications, including combustion,<ref name=\"Pitsch_2006\">{{Cite journal\n|last=Pitsch\n|first=Heinz\n|title=Large-Eddy Simulation of Turbulent Combustion\n|journal=Annual Review of Fluid Mechanics\n|year=2006\n|volume=38\n|issue=1\n|pages=453–482|bibcode = 2006AnRFM..38..453P |doi = 10.1146/annurev.fluid.38.050304.092133 |url=http://caltechconf.library.caltech.edu/145/1/Abstract1.pdf\n}}</ref> acoustics,<ref name=\"Wagner_2007\">{{cite book\n|last1=Wagner\n|first1=Claus\n|last2=Hüttl\n|first2=Thomas\n|last3=Sagaut\n|first3=Pierre\n|title=Large-Eddy Simulation for Acoustics\n|publisher=Cambridge University Press\n|year=2007\n|isbn=978-0-521-87144-0\n}}</ref> and simulations of the atmospheric boundary layer.<ref name=\"Sullivan_1994\">{{cite journal\n|last1=Sullivan\n|first1=Peter P.\n|last2=McWilliams\n|first2=James C.\n|last3=Moeng\n|first3=Chin-Hoh\n|title=A subgrid-scale model for large-eddy simulation of planetary boundary-layer flows\n|journal=Boundary-Layer Meteorology\n|year=1994\n|volume=71\n|number=3\n|issn=0006-8314\n|pages=247–276\n|doi=10.1007/BF00713741 |bibcode = 1994BoLMe..71..247S |citeseerx=10.1.1.463.6006\n}}</ref>\n\nThe simulation of turbulent flows by numerically solving the [[Navier–Stokes equations]] requires resolving a very wide range of time and length scales, all of which affect the flow field.  Such a resolution can be achieved with [[direct numerical simulation]] (DNS), but DNS is computationally expensive, and its cost prohibits simulation of  practical engineering systems with complex geometry or flow configurations, such as turbulent jets, pumps, vehicles, and landing gear.\n\nThe principal idea behind LES is to reduce the computational cost by ignoring the smallest length scales, which are the most computationally expensive to resolve, via [[Filter (signal processing)|low-pass filtering]] of the [[Navier–Stokes equations]].  Such a low-pass filtering, which can be viewed as a time- and spatial-averaging, effectively removes small-scale information from the numerical solution.  This information is not irrelevant, however, and its effect on the flow field must be modeled, a task which is an active area of research for problems in which small-scales can play an important role, such as near-wall flows <ref name=\"piomelli-02\">{{cite journal|author1=Piomelli, Ugo |author2=Elias Balaras |title= Wall-layer models for large-eddy simulations.|journal=Annual Review of Fluid Mechanics|year=2002|volume=34|pages=349–374 |doi=10.1146/annurev.fluid.34.082901.144919|bibcode=2002AnRFM..34..349P}}</ref><ref name=\"spalart-09\">{{cite journal|last=Spalart, P. R. |title= Detached-eddy simulation. |journal=Annual Review of Fluid Mechanics|year=2009|volume=41|issue= 1 |doi=10.1146/annurev.fluid.010908.165130|pages=181–202|bibcode = 2009AnRFM..41..181S }}</ref>\n, reacting flows,<ref name=\"Pitsch_2006\" /> and multiphase flows.<ref name=\"fox-12\">{{cite journal|last=Fox, R. O. |title= Large-eddy-simulation tools for multiphase flows. |journal=Annual Review of Fluid Mechanics|year=2012|volume=44|issue= 1 |doi=10.1146/annurev-fluid-120710-101118|pages=47–76|bibcode=2012AnRFM..44...47F}}</ref>\n\n== Filter definition and properties ==\n\n{{Main|Filter (large eddy simulation)}}\n\n[[File:DNS Velocity Field.png|thumb|right|300px|A velocity field produced by a [[Direct numerical simulation|direct numerical simulation (DNS)]] of [[homogeneous isotropic turbulence|homogeneous decaying turbulence]].  The domain size is <math>L^3</math>.]]\n[[File:DNS Filtered Velocity Field Small.png|thumb|right|300px|The same DNS velocity field filtered using a [[Filter (large eddy simulation)#Box filter|box filter]] and <math>\\Delta=L/32</math>.]]\n[[File:DNS Filtered Velocity Field Large.png|thumb|right|300px|The same DNS velocity field filtered using a [[Filter (large eddy simulation)#Box filter|box filter]] and <math>\\Delta=L/16</math>.]]\nAn [[Filter (large eddy simulation)|LES filter]] can be applied to a spatial and temporal field <math>\\phi(\\boldsymbol{x},t)</math> and perform a spatial filtering operation, a temporal filtering operation, or both.  The filtered field, denoted with a bar, is defined as:<ref name=\"Pope_2000\">{{cite book|title=Turbulent Flows|year=2000|publisher=Cambridge University Press |author=Pope, S. B.}}</ref><ref name=\"Sagaut_2006\">{{cite book\n|author=Sagaut, Pierre\n|title=Large Eddy Simulation for Incompressible Flows\n|publisher=Springer\n|year=2006\n|edition=Third\n|isbn=978-3-540-26344-9 }}</ref>\n\n:<math>\n\\overline{\\phi(\\boldsymbol{x},t)} = \\displaystyle{\n\\int_{-\\infty}^{\\infty}} \\int_{-\\infty}^{\\infty} \\phi(\\boldsymbol{r},\\tau) G(\\boldsymbol{x}-\\boldsymbol{r},t - \\tau) d\\tau d \\boldsymbol{r}\n</math>\n\nwhere <math>G</math> is the filter convolution kernel.  This can also be written as:\n\n:<math>\n\\overline{\\phi} = G \\star \\phi .\n</math>\n\nThe filter kernel <math>G</math> has an associated cutoff length scale <math>\\Delta</math> and cutoff time scale <math>\\tau_{c}</math>.  Scales smaller than these are eliminated from <math>\\overline{\\phi}</math>.  Using the above filter definition, any field <math>\\phi</math> may be split up into a filtered and sub-filtered (denoted with a prime) portion, as\n\n:<math>\n\\phi = \\bar{\\phi} + \\phi^{\\prime} .\n</math>\n\nIt is important to note that the [[Filter (large eddy simulation)|large eddy simulation filtering operation]] does not satisfy the properties of a [[Reynolds operator]].\n\n== Filtered governing equations ==\n\nThe governing equations of LES are obtained by filtering the [[partial differential equations]] governing the flow field <math>\\rho \\boldsymbol{u}(\\boldsymbol{x},t)</math>.  There are differences between the incompressible and compressible LES governing equations, which lead to the definition of a new filtering operation.\n\n=== Incompressible flow ===\n\nFor incompressible flow, the [[Continuity equation#Fluid dynamics|continuity equation]] and Navier–Stokes equations are filtered, yielding the filtered incompressible continuity equation,\n\n:<math>\n\\frac{ \\partial \\bar{u_i} }{ \\partial x_i } = 0\n</math>\n\nand the filtered Navier–Stokes equations,\n\n:<math>\n\\frac{ \\partial \\bar{u_i} }{ \\partial t }\n+ \\frac{ \\partial }{ \\partial x_j } \\left( \\overline{ u_i u_j } \\right) \n= - \\frac{1}{\\rho} \\frac{ \\partial \\overline{p} }{ \\partial x_i } \n+ \\nu \\frac{\\partial}{\\partial x_j} \\left( \\frac{ \\partial \\bar{u_i} }{ \\partial x_j } + \\frac{ \\partial \\bar{u_j} }{ \\partial x_i } \\right)\n= - \\frac{1}{\\rho} \\frac{ \\partial \\overline{p} }{ \\partial x_i } \n+ 2 \\nu \\frac{\\partial}{\\partial x_j} S_{ij},\n</math>\n\nwhere <math>\\bar{p}</math> is the filtered pressure field and <math>S_{ij}</math> is the rate-of-strain tensor.  The [[nonlinear]] filtered advection term <math>\\overline{u_i u_j}</math> is the chief cause of difficulty in LES modeling.  It requires knowledge of the unfiltered velocity field, which is unknown, so it must be modeled.  The analysis that follows illustrates the difficulty caused by the nonlinearity, namely, that it causes interaction between large and small scales, preventing separation of scales.\n\nThe filtered advection term can be split up, following Leonard (1974),<ref name=\"Leonard_1974\">{{cite book\n|last=Leonard\n|first=A.\n|year=1974\n|title=Energy cascade in large-eddy simulations of turbulent fluid flows\n|journal=Advances in Geophysics A\n|volume=18\n|pages=237–248\n|doi=10.1016/S0065-2687(08)60464-1|bibcode = 1975AdGeo..18..237L |series=Advances in Geophysics\n|isbn=9780120188185\n}}</ref> as:\n\n:<math>\n\\overline{u_i u_j} = \\tau_{ij}^{r} + \\overline{u}_i \\overline{u}_j\n</math>\n\nwhere <math>\\tau_{ij}^{r}</math> is the residual stress tensor, so that the filtered Navier Stokes equations become\n\n:<math>\n\\frac{ \\partial \\bar{u_i} }{ \\partial t }\n+ \\frac{ \\partial }{ \\partial x_j } \\left( \\overline{u}_i \\overline{u}_j \\right) \n= - \\frac{1}{\\rho} \\frac{ \\partial \\overline{p} }{ \\partial x_i } \n+ 2 \\nu \\frac{\\partial}{\\partial x_j} \\bar{S}_{ij}\n- \\frac{ \\partial \\tau_{ij}^{r} }{ \\partial x_j }\n</math>\n\nwith the residual stress tensor <math>\\tau_{ij}^{r}</math> grouping all unclosed terms.  Leonard decomposed this stress tensor as <math>\\tau_{ij}^{r} = L_{ij} + C_{ij} + R_{ij}</math> and provided physical interpretations for each term.  <math>L_{ij}</math>, the Leonard tensor, represents interactions among large scales, <math>R_{ij}</math>, the Reynolds stress-like term, represents interactions among the sub-filter scales (SFS), and <math>C_{ij}</math>, the Clark tensor,<ref name=\"Clark\">{{cite journal\n|last1=Clark\n|first1=R.\n|last2=Ferziger\n|first2=J.\n|last3=[[William Craig Reynolds|Reynolds]]\n|first3=W.\n|year=1979\n|title=Evaluation of subgrid-scale models using an accurately simulated turbulent flow\n|journal=[[Journal of Fluid Mechanics]]\n|volume=91\n|pages=1–16|bibcode = 1979JFM....91....1C |doi = 10.1017/S002211207900001X }}</ref> represents cross-scale interactions between large and small scales.<ref name=\"Leonard_1974\"/>  Modeling the unclosed term <math>\\tau_{ij}^{r}</math> is the task of SFS models (also referred to as sub-grid scale, or SGS, models).  This is made challenging by the fact that the sub-filter scale stress tensor <math>\\tau_{ij}^{r}</math> must account for interactions among all scales, including filtered scales with unfiltered scales.\n\nThe filtered governing equation for a passive scalar <math>\\phi</math>, such as mixture fraction or temperature, can be written as\n\n:<math>\n\\frac{ \\partial \\overline{\\phi} }{ \\partial t }\n+ \\frac{\\partial}{\\partial x_j} \\left( \\overline{u}_j \\overline{\\phi} \\right)\n= \\frac{\\partial \\overline{J_{\\phi}} }{\\partial x_j} \n+ \\frac{ \\partial q_j }{ \\partial x_j }\n</math>\n\nwhere <math>J_{\\phi}</math> is the diffusive flux of <math>\\phi</math>, and <math>q_j</math> is the sub-filter flux for the scalar <math>\\phi</math>.  The filtered diffusive flux <math>\\overline{J_{\\phi}}</math> is unclosed, unless a particular form is assumed for it (e.g. a gradient diffusion model <math>J_{\\phi} = D_{\\phi} \\frac{ \\partial \\phi }{ \\partial x_i }</math>).  <math>q_j</math> is defined analogously to <math>\\tau_{ij}^{r}</math>,\n\n:<math>\nq_j = \\bar{\\phi} \\overline{u}_j - \\overline{\\phi u_j}\n</math>\n\nand can similarly be split up into contributions from interactions between various scales.  This sub-filter flux also requires a sub-filter model.\n\n====Derivation====\nUsing [[Einstein notation]], the Navier–Stokes equations for an incompressible fluid in Cartesian coordinates are\n: <math> \\frac{\\partial u_i}{\\partial x_i} = 0 </math>\n: <math> \\frac{\\partial u_i}{\\partial t} + \\frac{\\partial u_iu_j}{\\partial x_j}\n= - \\frac{1}{\\rho} \\frac{\\partial p}{\\partial x_i}\n+ \\nu \\frac{\\partial^2 u_i}{\\partial x_j \\partial x_j}.\n</math>\n\nFiltering the momentum equation results in\n: <math> \\overline{\\frac{\\partial u_i}{\\partial t}} + \\overline{\\frac{\\partial u_iu_j}{\\partial x_j}}\n= - \\overline{\\frac{1}{\\rho} \\frac{\\partial p}{\\partial x_i}}\n+ \\overline{\\nu \\frac{\\partial^2 u_i}{\\partial x_j \\partial x_j}}.\n</math>\n\nIf we assume that filtering and differentiation commute, then\n: <math> \\frac{\\partial \\bar{u_i}}{\\partial t} + \\overline{\\frac{\\partial u_iu_j}{\\partial x_j}}\n= - \\frac{1}{\\rho} \\frac{\\partial \\bar{p}}{\\partial x_i}\n+ \\nu \\frac{\\partial^2 \\bar{u_i}}{\\partial x_j \\partial x_j}.\n</math>\n\nThis equation models the changes in time of the filtered variables <math>\\bar{u_i}</math>.  Since the unfiltered variables <math>u_i</math> are not known, it is impossible to directly calculate <math>\\overline{\\frac{\\partial u_iu_j}{\\partial x_j}}</math>.  However, the quantity <math> \\frac{\\partial \\bar{u_i}\\bar{u_j}}{\\partial x_j}</math> is known.  A substitution is made:\n: <math> \\frac{\\partial \\bar{u_i}}{\\partial t} +  \\frac{\\partial \\bar{u_i}\\bar{u_j}}{\\partial x_j}\n= - \\frac{1}{\\rho} \\frac{\\partial \\bar{p}}{\\partial x_i}\n+ \\nu \\frac{\\partial^2 \\bar{u_i}}{\\partial x_j \\partial x_j}\n- \\left(\\overline{ \\frac{\\partial u_iu_j}{\\partial x_j}} -  \\frac{\\partial \\bar{u_i}\\bar{u_j}}{\\partial x_j}\\right).\n</math>\n\nLet <math>\\tau_{ij} = \\overline{u_i u_j} - \\bar{u_i} \\bar{u_j}</math>. The resulting set of equations are the LES equations:\n:<math> \\frac{\\partial \\bar{u_i}}{\\partial t} + \\bar{u_j} \\frac{\\partial \\bar{u_i}}{\\partial x_j}\n= - \\frac{1}{\\rho} \\frac{\\partial \\bar{p}}{\\partial x_i}\n+ \\nu \\frac{\\partial^2 \\bar{u_i}}{\\partial x_j \\partial x_j}\n- \\frac{\\partial\\tau_{ij}}{\\partial x_j}.\n</math>\n\n=== Compressible governing equations ===\n\nFor the governing equations of compressible flow, each equation, starting with the conservation of mass, is filtered.  This gives:\n\n:<math>\n\\frac{\\partial \\overline{\\rho}}{\\partial t} + \\frac{ \\partial \\overline{u_i \\rho} }{\\partial x_i} = 0\n</math>\n\nwhich results in an additional sub-filter term.  However, it is desirable to avoid having to model the sub-filter scales of the mass conservation equation.  For this reason, Favre<ref name=\"Favre_1983\">{{cite journal\n|author=Favre, Alexandre\n|title=Turbulence: space-time statistical properties and behavior in supersonic flows\n|year=1983\n|journal=Physics of Fluids A\n|volume=23\n|issue=10\n|pages=2851–2863\n|doi=10.1063/1.864049|bibcode = 1983PhFl...26.2851F }}</ref> proposed a density-weighted filtering operation, called Favre filtering, defined for an arbitrary quantity <math>\\phi</math> as:\n\n:<math>\n\\tilde{\\phi} = \\frac{ \\overline{\\rho \\phi} }{ \\overline{\\rho} }\n</math>\n\nwhich, in the limit of incompressibility, becomes the normal filtering operation.  This makes the conservation of mass equation:\n\n:<math>\n\\frac{\\partial \\overline{\\rho}}{\\partial t} + \\frac{ \\partial \\overline{\\rho} \\tilde{u_i} }{ \\partial x_i } = 0.\n</math>\n\nThis concept can then be extended to write the Favre-filtered momentum equation for compressible flow.  Following Vreman:<ref name=\"Vreman_1995\">{{cite journal\n|author1=Vreman, Bert\n|author2=Geurts, Bernard\n|author3=Kuerten, Hans\n|journal=[[Applied Scientific Research]]\n|year=1995\n|volume=45\n|issue=3\n|doi=10.1007/BF00849116\n|title=Subgrid-modelling in LES of compressible flow\n|pages=191–203|url=https://research.utwente.nl/en/publications/subgridmodelling-in-les-of-compressible-flow(7c54958d-ebdd-4422-bf9d-c17052984a68).html\n}}</ref>\n\n:<math>\n\\frac{ \\partial \\overline{\\rho} \\tilde{u_i} }{ \\partial t }\n+ \\frac{ \\partial \\overline{\\rho} \\tilde{u_i} \\tilde{u_j} }{ \\partial x_j }\n+ \\frac{ \\partial \\overline{p} }{ \\partial x_i }\n- \\frac{ \\partial \\tilde{\\sigma}_{ij} }{ \\partial x_j }\n= - \\frac{ \\partial \\overline{\\rho} \\tau_{ij}^{r} }{ \\partial x_j }\n+ \\frac{ \\partial }{ \\partial x_j } \\left( \\overline{\\sigma}_{ij} - \\tilde{\\sigma}_{ij} \\right)\n</math>\n\nwhere <math>\\sigma_{ij}</math> is the shear stress tensor, given for a Newtonian fluid by:\n\n:<math>\n\\sigma_{ij} = 2 \\mu(T) S_{ij} - \\frac{2}{3} \\mu(T) \\delta_{ij} S_{kk}\n</math>\n\nand the term <math>\\frac{ \\partial }{\\partial x_j} \\left( \\overline{\\sigma}_{ij} - \\tilde{\\sigma}_{ij} \\right)</math> represents a sub-filter viscous contribution from evaluating the viscosity <math>\\mu(T)</math> using the Favre-filtered temperature <math>\\tilde{T}</math>.  The subgrid stress tensor for the Favre-filtered momentum field is given by\n\n:<math>\n\\tau_{ij}^{r} = \\widetilde{ u_i \\cdot u_j } - \\tilde{u_i} \\tilde{u_j}\n</math>\n\nBy analogy, the Leonard decomposition may also be written for the residual stress tensor for a filtered triple product <math>\\overline{\\rho \\phi \\psi}</math>.  The triple product can be rewritten using the Favre filtering operator as <math>\\overline{\\rho} \\widetilde{\\phi \\psi}</math>, which is an unclosed term (it requires knowledge of the fields <math>\\phi</math> and <math>\\psi</math>, when only the fields <math>\\tilde{\\phi}</math> and <math>\\tilde{\\psi}</math> are known).  It can be broken up in a manner analogous to <math>\\overline{u_i u_j}</math> above, which results in a sub-filter stress tensor <math>\\overline{\\rho} \\left( \\widetilde{\\phi \\psi} - \\tilde{\\phi} \\tilde{\\psi} \\right)</math>.  This sub-filter term can be split up into contributions from three types of interactions: the Leondard tensor <math>L_{ij}</math>, representing interactions among resolved scales; the Clark tensor <math>C_{ij}</math>, representing interactions between resolved and unresolved scales; and the Reynolds tensor <math>R_{ij}</math>, which represents interactions among unresolved scales.<ref name=\"Sagaut_2009\">{{cite book\n|author1=Garnier, E.\n|author2=Adams, N.\n|author3=Sagaut, P.\n|title=Large eddy simulation for compressible flows\n|year=2009\n|publisher=Springer\n|isbn=978-90-481-2818-1\n|doi=10.1007/978-90-481-2819-8|url=http://cds.cern.ch/record/1339029\n}}</ref>\n\n=== Filtered kinetic energy equation ===\n\nIn addition to the filtered mass and momentum equations, filtering the kinetic energy equation can provide additional insight.  The kinetic energy field can be filtered to yield the total filtered kinetic energy:\n\n:<math>\n\\overline{E} = \\frac{1}{2} \\overline{ u_i u_i }\n</math>\n\nand the total filtered kinetic energy can be decomposed into two terms: the kinetic energy of the filtered velocity field <math>E_f</math>,\n\n:<math>\nE_f = \\frac{1}{2} \\overline{u_i}  \\, \\overline{u_i}\n</math>\n\nand the residual kinetic energy <math>k_r</math>,\n\n:<math>\nk_r = \\frac{1}{2} \\overline{ u_i u_i } - \\frac{1}{2} \\overline{u_i} \\, \\overline{u_i} = \\frac{1}{2} \\tau_{ii}^{r}\n</math>\n\nsuch that <math>\\overline{E} = E_f + k_r</math>.\n\nThe conservation equation for <math>E_f</math> can be obtained by multiplying the filtered momentum transport equation by <math>\\overline{u_i}</math> to yield:\n\n:<math>\n\\frac{\\partial E_f}{\\partial t} \n+ \\overline{u_j} \\frac{\\partial E_f}{\\partial x_j} \n+ \\frac{1}{\\rho} \\frac{\\partial \\overline{u_i} \\bar{p} }{ \\partial x_i }\n+ \\frac{\\partial \\overline{u_i} \\tau_{ij}^{r}}{\\partial x_j} \n- 2 \\nu \\frac{ \\partial \\overline{u_i} \\bar{S_{ij}} }{ \\partial x_j }\n= \n- \\epsilon_{f} \n- \\Pi\n</math>\n\nwhere <math>\\epsilon_{f} = 2 \\nu \\bar{S_{ij}} \\bar{S_{ij}}</math> is the dissipation of kinetic energy of the filtered velocity field by viscous stress, and <math>\\Pi = -\\tau_{ij}^{r} \\bar{S_{ij}}</math> represents the sub-filter scale (SFS) dissipation of kinetic energy.\n\nThe terms on the left-hand side represent transport, and the terms on the right-hand side are sink terms that dissipate kinetic energy.<ref name=\"Pope_2000\" />\n\nThe <math>\\Pi</math> SFS dissipation term is of particular interest, since it represents the transfer of energy from large resolved scales to small unresolved scales.  On average, <math>\\Pi</math> transfers energy from large to small scales.  However, instantaneously <math>\\Pi</math> can be positive ''or'' negative, meaning it can also act as a source term for <math>E_f</math>, the kinetic energy of the filtered velocity field.  The transfer of energy from unresolved to resolved scales is called '''backscatter''' (and likewise the transfer of energy from resolved to unresolved scales is called '''forward-scatter''').<ref name=\"Piomelli_1991\">{{cite journal\n|author1=Piomelli, U.\n|author2=Cabot, W.\n|author3=Moin, P.\n|author4=Lee, S.\n|title=Subgrid-scale backscatter in turbulent and transitional flows\n|journal=Physics of Fluids A\n|year=1991\n|volume=3\n|issue=7\n|pages=1766–1771\n|doi=10.1063/1.857956|bibcode = 1991PhFl....3.1766P\n|authorlink3=Parviz Moin }}</ref>\n\n== Numerical methods for LES ==\n\nLarge eddy simulation involves the solution to the discrete filtered governing equations using [[computational fluid dynamics]].  LES resolves scales from the domain size <math>L</math> down to the filter size <math>\\Delta</math>, and as such a substantial portion of high wave number turbulent fluctuations must be resolved.  This requires either [[High-resolution scheme|high-order numerical schemes]], or fine grid resolution if low-order numerical schemes are used.  Chapter 13 of Pope<ref name=\"Pope_2000\" /> addresses the question of how fine a grid resolution <math>\\Delta x</math> is needed to resolve a filtered velocity field <math>\\overline{u}(\\boldsymbol{x})</math>.  Ghosal<ref name=\"Ghosal_1996\">{{cite journal\n|title=An analysis of numerical errors in large-eddy simulations of turbulence\n|author=Ghosal, S.\n|date=April 1996\n|journal=[[Journal of Computational Physics]]\n|volume=125\n|issue=1\n|doi=10.1006/jcph.1996.0088|bibcode = 1996JCoPh.125..187G\n|pages=187–206 }}</ref> found that for low-order discretization schemes, such as those used in finite volume methods, the truncation error can be the same order as the subfilter scale contributions, unless the filter width <math>\\Delta</math> is considerably larger than the grid spacing <math>\\Delta x</math>.  While even-order schemes have truncation error, they are non-dissipative,<ref name=\"Leveque_1992\">{{cite book\n|title=Numerical Methods for Conservation Laws\n|author=Randall J. Leveque\n|year=1992\n|publisher=Birkhäuser Basel\n|edition=2nd\n|isbn=978-3-7643-2723-1}}</ref> and because subfilter scale models are dissipative, even-order schemes will not affect the subfilter scale model contributions as strongly as dissipative schemes.\n\n=== Filter implementation ===\n\nThe filtering operation in large eddy simulation can be implicit or explicit.  Implicit filtering recognizes that the subfilter scale model will dissipate in the same manner as many numerical schemes.  In this way, the grid, or the numerical discretization scheme, can be assumed to be the LES low-pass filter.  While this takes full advantage of the grid resolution, and eliminates the computational cost of calculating a subfilter scale model term, it is difficult to determine the shape of the LES filter that is associated with some numerical issues.  Additionally, truncation error can also become an issue.<ref name=\"Grinstein_2007\">{{cite book\n|title=Implicit large eddy simulation\n|author1=Grinstein, Fernando\n|author2=Margolin, Len\n|author3=Rider, William\n|year=2007\n|publisher=Cambridge University Press\n|isbn=978-0-521-86982-9}}</ref>\n\nIn explicit filtering, an [[Filter (large eddy simulation)|LES filter]] is applied to the discretized Navier–Stokes equations, providing a well-defined filter shape and reducing the truncation error.  However, explicit filtering requires a finer grid than implicit filtering, and the computational cost increases with <math>(\\Delta x)^4</math>. Chapter 8 of Sagaut (2006) covers LES numerics in greater detail.<ref name=\"Sagaut_2006\" />\n\n== Boundary conditions of large eddy simulations ==\nInlet boundary conditions affect the accuracy of LES significantly, and the treatment of inlet conditions for LES is a complicated problem. Theoretically, a good boundary condition for LES should contain the following features:<ref name=\"Li_P\">Li, P., Eckels, S., Mann, G., Zhang, N. A Method of Measuring Turbulent Flow Structures With Particle Image Velocimetry and Incorporating Into Boundary Conditions of Large Eddy Simulations. ASME. J. Fluids Eng. 2018;140(7):071401-071401-11. doi:10.1115/1.4039256.</ref> \n\n(1) providing accurate information of flow characteristics, i.e. velocity and turbulence; \n\n(2) satisfying the Navier-Stokes equations and other physics;\n\n(3) being easy to implement and adjust to different cases. \n\nCurrently, methods of generating inlet conditions for LES are broadly divided into two categories classified by Tabor et al.:<ref>Tabor, G. R., & Baba-Ahmadi, M. H. (2010). Inlet conditions for large eddy simulation: a review. Computers & Fluids, 39(4), 553-567.</ref> \n\nThe first method for generating turbulent inlets is to synthesize them according to particular cases, such as Fourier techniques, principle orthogonal decomposition (POD) and vortex methods. The synthesis techniques attempt to construct turbulent field at inlets that have suitable turbulence-like properties and make it easy to specify parameters of the turbulence, such as turbulent kinetic energy and turbulent dissipation rate. In addition, inlet conditions generated by using random numbers are computationally inexpensive. However, one serious drawback exists in the method. The synthesized turbulence does not satisfy the physical structure of fluid flow governed by Navier-Stokes equations.<ref name=\"Li_P\" /> \n\nThe second method involves a separate and precursor calculation to generate a turbulent database which can be introduced into the main computation at the inlets. The database (sometimes named as ‘library’) can be generated in a number of ways, such as cyclic domains, pre-prepared library, and internal mapping. However, the method of generating turbulent inflow by precursor simulations requires large calculation capacity. \n\nResearchers examining the application of various types of synthetic and precursor calculations have found that the more realistic the inlet turbulence, the more accurate LES predicts results.<ref name=\"Li_P\" />\n\n== Modeling unresolved scales ==\n\nTo discuss the modeling of unresolved scales, first the unresolved scales must be classified. They fall into two groups: '''resolved sub-filter scales''' (SFS), and '''sub-grid scales'''(SGS).\n\nThe resolved sub-filter scales represent the scales with wave numbers larger than the cutoff wave number <math>k_c</math>, but whose effects are dampened by the filter.  Resolved sub-filter scales only exist when filters non-local in wave-space are used (such as a [[Filter (large eddy simulation)#Box filter|box]] or [[Filter (large eddy simulation)#Gaussian filter|Gaussian]] filter).  These resolved sub-filter scales must be modeled using filter reconstruction.\n\nSub-grid scales are any scales that are smaller than the cutoff filter width <math>\\Delta</math>.  The form of the SGS model depends on the filter implementation.  As mentioned in the [[#Numerical Methods for LES|Numerical methods for LES]] section, if implicit LES is considered,  no SGS model is implemented and the numerical effects of the discretization are assumed to mimic the physics of the unresolved turbulent motions.\n\n=== Sub-grid scale models ===\n\nWithout a universally valid description of turbulence,  empirical information must be utilized when constructing and applying SGS models, supplemented with fundamental physical constraints such as [[Galilean invariance]]<ref name=\"Pope_2000\" />\n.<ref name=\"Meneveau_2010\">{{cite journal\n|title=Turbulence: Subgrid-Scale Modeling\n|author1=Meneveau, C.\n|journal=Scholarpedia\n|year=2010\n|volume=5\n|issue=1\n|pages=9489\n|doi=10.4249/scholarpedia.9489\n|bibcode=2010SchpJ...5.9489M\n}}</ref>\nTwo classes of SGS models exist; the first class is '''functional models''' and the second class is '''structural models'''.  Some models may be categorized as both.\n\n==== Functional (eddy–viscosity) models ====\n\nFunctional models are simpler than structural models, focusing only on dissipating energy at a rate that is physically correct.  These are based on an artificial eddy viscosity approach, where the effects of turbulence are lumped into a turbulent viscosity.  The approach treats dissipation of kinetic energy at sub-grid scales as analogous to molecular diffusion.  In this case, the deviatoric part of <math>\\tau_{ij}</math> is modeled as:\n\n:<math>\n\\tau_{ij}^r - \\frac{1}{3} \\tau_{kk} \\delta_{ij} = -2 \\nu_\\mathrm{t} \\bar{S}_{ij}\n</math>\n\nwhere <math>\\nu_\\mathrm{t}</math> is the turbulent eddy viscosity and <math>\\bar{S}_{ij} = \\frac{1}{2} \\left( \\frac{\\partial \\bar{u}_i }{\\partial x_j} + \\frac{\\partial \\bar{u}_j}{ \\partial x_i} \\right)</math> is the rate-of-strain tensor.\n\nBased on dimensional analysis, the eddy viscosity must have units of  <math>\\left[ \\nu_\\mathrm{t} \\right] = \\frac{\\mathrm{m^2}}{\\mathrm{s}}</math>.  Most eddy viscosity SGS models model the eddy viscosity as the product of a characteristic length scale and a characteristic velocity scale.\n\n===== Smagorinsky–Lilly model =====\n\nThe first SGS model developed was the Smagorinsky–Lilly SGS model, which was developed by [[Joseph Smagorinsky|Smagorinsky]]<ref name=\"Smagorinsky_1963\" /> and used in the first LES simulation by Deardorff.<ref name=\"Deardorff_1970\" />  It models the eddy viscosity as:\n\n:<math>\\nu_\\mathrm{t} \n= (C_s \\Delta_g)^2\\sqrt{2\\bar{S}_{ij}\\bar{S}_{ij}} \n= (C_s \\Delta_g)^2 \\left| S \\right|\n</math>\n\nwhere <math>\\Delta_g</math> is the grid size and <math>C_s</math> is a constant.\n\nThis method assumes that the energy production and dissipation of the small scales are in equilibrium - that is, <math>\\epsilon = \\Pi</math>.\n\n===== Germano dynamic model =====\n\nGermano et al.<ref name=\"Germano_1991\">{{cite journal\n|title=A dynamic subgrid‐scale eddy viscosity model\n|author1=Germano, M.\n|author2=Piomelli, U.\n|author3=Moin, P.\n|author4=Cabot, W.\n|journal=[[Physics of Fluids|Physics of Fluids A]]\n|volume=3\n|pages=1760–1765\n|year=1991\n|doi=10.1063/1.857955|bibcode = 1991PhFl....3.1760G\n|issue=7\n|authorlink3=Parviz Moin }}\n</ref> identified a number of studies using the Smagorinsky model that each found different values for the Smagorinsky constant <math>C_s</math> for different flow configurations.  In an attempt to formulate a more universal approach to SGS models, Germano et al. proposed a dynamic Smagorinsky model, which utilized two filters: a grid LES filter, denoted <math>\\overline{\\cdot}</math>, and a test LES filter, denoted <math>\\hat{\\cdot}</math>.  In this case, the resolved turbulent stress tensor <math>\\mathcal{L}_{ij}</math> is defined as\n\n:<math>\n\\mathcal{L}_{ij} = T_{ij}^r - \\hat{\\tau}_{ij}^r\n</math>\n\nwhich is also called the Germano identity.  The quantity <math>T_{ij}^r = \\widehat{\\overline{u_i u_j}} - \\hat{\\bar{u}}_i \\hat{\\bar{u}}_j</math> is the residual stress tensor for the test filter scale, and <math>\\hat{\\tau}_{ij}^r = \\widehat{ \\overline{ u_i u_j }} - \\widehat{ \\overline{u}_i \\overline{u}_j }</math> is the residual stress tensor for the grid filter, then test filtered.\n\n<math>\\mathcal{L}_{ij}</math> represents the contribution to the SGS stresses by length scales smaller than the test filter width <math>\\hat{\\Delta}</math> but larger than the grid filter width <math>\\overline{\\Delta}</math>. The dynamic model then finds the coefficient that best complies with the Germano identity.\nHowever, since the identity is a tensorial equation, it is overdetermined (five equations for one unknown), prompting Lilly\n<ref name=\"Lilly_1992\">{{cite journal\n|title=A proposed modification of the Germano subgrid-scale closure method\n|journal=Physics of Fluids A\n|year=1992\n|volume=4\n|issue=3\n|pages=633–636\n|doi=10.1063/1.858280\n|last1=Lilly\n|first1=D. K.|bibcode = 1992PhFlA...4..633L }}</ref>\nto propose a minimum least-square error method that leads to an equation for <math>C_s</math>:\n\n: <math>\nC_s^2 = \\frac{ \\mathcal{L}_{ij} \\mathcal{M}_{ij} }{ \\mathcal{M}_{ij} \\mathcal{M}_{ij} }\n</math>\n\nwhere\n\n: <math>\\mathcal{M}_{ij} \n= 2 \\overline{\\Delta}^2 \\left( \n\\overline{ \\left| \\hat{S} \\right| \\hat{S}_{ij} } \n- \\alpha^2 \\left| \\overline{\\hat{S}} \\right| \\overline{\\hat{S}}_{ij}\n\\right)</math> and <math>\\alpha = \\hat{\\Delta} / \\overline{\\Delta}.</math>\n\nHowever, this procedure was numerically unstable since the numerator could become negative and large fluctuations in <math>C_s</math> were often observed. Hence, additional averaging of the error in the minimization is often employed, leading to:\n\n: <math>\nC_s^2 = \\frac{ \n\\left\\langle \\mathcal{L}_{ij} \\mathcal{M}_{ij} \\right\\rangle\n}{ \n\\left\\langle \\mathcal{M}_{ij} \\mathcal{M}_{ij} \\right\\rangle\n}\n</math>\n\nThis has made the dynamic model more stable and making the method more widely applicable. Inherent in the procedure is the assumption that the coefficient <math>C_s</math> is invariant of scale (see review\n<ref name=\"MeneveauKatz_2000\">{{cite journal\n|title=Scale-Invariance and Turbulence Models for Large-Eddy Simulation\n|author1=Meneveau, C.\n|author2=Katz, J.\n|journal=Annu. Rev. Fluid Mech.\n|year=2000\n|volume=32\n|issue=1\n|pages=1–32\n|doi=10.1146/annurev.fluid.32.1.1\n|bibcode = 2000AnRFM..32....1M }}</ref>). The averaging can be a spatial averaging over directions of statistical homogeneity (e.g. volume for homogeneous turbulence or wall-parallel planes\nfor channel flow as originally used in Germano et al.<ref name=\"Germano_1991\" />), or time following Lagrangian fluid trajectories\n.<ref name=\"Meneveauetal_1996\">{{cite journal\n|title=A Lagrangian dynamic subgrid-scale model of turbulence\n|author1=Meneveau, C.\n|author2=Lund, T. S.\n|author3=Cabot, W. H.\n|journal=J. Fluid Mech.\n|year=1996\n|volume=319\n|issue=1\n|pages=353–385\n|doi=10.1017/S0022112096007379\n|bibcode = 1996JFM...319..353M |hdl=2060/19950014634\n}}</ref>\n\n==== Structural models ====\n{{empty section|date=August 2013}}\n\n==See also==\n* [[Direct numerical simulation]]\n* [[Fluid mechanics]]\n* [[Galilean invariance]] – an important property of certain types of filters\n* [[Reynolds-averaged Navier–Stokes equations]]\n* [[Turbulence]]\n\n==References==\n{{reflist}}\n\n{{DEFAULTSORT:Large Eddy Simulation}}\n[[Category:Partial differential equations]]\n[[Category:Fluid dynamics]]\n[[Category:Fluid mechanics]]\n[[Category:Turbulence]]\n[[Category:Turbulence models]]\n[[Category:Computational fluid dynamics]]"
    },
    {
      "title": "Lattice Boltzmann methods",
      "url": "https://en.wikipedia.org/wiki/Lattice_Boltzmann_methods",
      "text": "'''Lattice Boltzmann methods (LBM)''' (or '''thermal lattice Boltzmann methods (TLBM)''') is a class of [[computational fluid dynamics]] (CFD) methods for [[fluid simulation]]. Instead of solving the [[Navier–Stokes equations]], the discrete [[Boltzmann equation]] is solved to simulate the flow of a [[Newtonian fluid]] with [[collision]] models such as [[Bhatnagar–Gross–Krook]] (BGK). By simulating streaming and collision processes across a limited number of particles, the intrinsic particle interactions evince a microcosm of viscous flow behavior applicable across the greater mass.\n\n==Algorithm==\nLBM is a relatively new{{When|date=May 2019}} simulation technique for complex fluid systems and has attracted interest from researchers in computational physics.  Unlike the traditional CFD methods, which solve the conservation equations of macroscopic properties (i.e., mass, momentum, and energy) numerically, LBM models the fluid consisting of fictive particles, and such particles perform consecutive propagation and collision processes over a discrete lattice mesh. Due to its particulate nature and local dynamics, LBM has several advantages over other conventional CFD methods, especially in dealing with complex boundaries, incorporating microscopic interactions, and parallelization of the algorithm.{{citation needed|reason=A source for this claim would be nice.|date=September 2013}} A different interpretation of the lattice Boltzmann equation is that of a discrete-velocity [[Boltzmann equation]]. The numerical methods of solution of the system of partial differential equations then give rise to a discrete map, which can be interpreted as the propagation and collision of fictitious particles.\n\nIn the computer algorithm, the collision and streaming step are defined as follows:\n\nCollision step: <math>f_i^t(\\vec{x},t+\\delta_t) = f_i(\\vec{x},t) + \\frac{\\delta_t}{\\tau_f} (f_i^{eq}-f_i)\\,\\!</math>\n\nStreaming step: <math>f_i(\\vec{x}+\\vec{e}_i\\delta_t,t+\\delta_t) =f_i^t(\\vec{x},t+\\delta_t) \\,\\! </math>\n\nHere ''i'' are the directions of momentum and the BGK collision model has been used.\n\n==Advantages==\n\n* The LBM method was designed from scratch to run efficiently on [[Massively parallel (computing)|massively parallel architectures]], ranging from inexpensive embedded [[Field-programmable gate array|FPGAs]] and [[Digital signal processor|DSPs]] up to [[Graphics processing unit|GPUs]] and heterogeneous clusters and supercomputers (even with a slow interconnection network). It enables complex physics and sophisticated algorithms. Efficiency leads to a qualitatively new level of understanding since it allows solving problems that previously could not be approached (or only with insufficient accuracy).\n* The method originates from a molecular description of a fluid and can directly incorporate physical terms stemming from a knowledge of the interaction between molecules. Hence it is an indispensable instrument in fundamental research, as it keeps the cycle between the elaboration of a theory and the formulation of a corresponding numerical model short.\n* Automated data pre-processing and mesh generation in a time that accounts for a small fraction of the total simulation.\n* Parallel data analysis, post-processing and evaluation.\n* Fully resolved multi-phase flow with small droplets and bubbles.\n* Fully resolved flow through complex geometries and porous media.\n* Complex, coupled flow with heat transfer and chemical reactions.\n\n==Limitations==\nDespite the increasing popularity of LBM in simulating complex fluid systems, this novel approach has some limitations. At present, high-Mach number flows in [[aerodynamics]] are still difficult for LBM, and a consistent thermo-hydrodynamic scheme is absent. However, as with Navier–Stokes based CFD, LBM methods have been successfully coupled with thermal-specific solutions to enable heat transfer (solids-based conduction, convection and radiation) simulation capability.  For multiphase/multicomponent models, the interface thickness is usually large and the density ratio across the interface is small when compared with real fluids.  Recently this problem has been resolved by Yuan and Schaefer who improved on models by Shan and Chen, Swift, and He, Chen, and Zhang.  They were able to reach density ratios of 1000:1 by simply changing the [[equation of state]]. It has been proposed to apply Galilean Transformation to overcome the limitation of modelling high-speed fluid flows.<ref>Amir H. Hedjripour, David P. Callaghan & Tom E. Baldock, Generalized transformation of the lattice Boltzmann method for shallow water flows, https://doi.org/10.1080/00221686.2016.1168881</ref>\nNevertheless, the wide applications and fast advancements of this method during the past twenty years have proven its potential in computational physics, including [[microfluidics]]:{{citation needed|date=March 2017}}  LBM demonstrates promising results in the area of high [[Knudsen number]] flows.{{citation needed|date=March 2017}}\n\n==Development from the LGA method==\nLBM originated from the [[lattice gas automata]] (LGA) method, which can be considered as a simplified fictitious molecular dynamics model in which space, time, and particle velocities are all discrete. For example, in the 2-dimensional [[FHP Model]] each lattice node is connected to its neighbors by 6 lattice velocities on a triangular lattice; there can be either 0 or 1 particles at a lattice node moving with a given lattice velocity. After a time interval, each particle will move to the neighboring node in its direction; this process is called the propagation or streaming step. When more than one particle arrives at the same node from different directions, they collide and change their velocities according to a set of collision rules. Streaming steps and collision steps alternate.  Suitable collision rules should conserve the [[particle number]] (mass), momentum, and energy before and after the collision.  LGA suffer from several innate defects for use in hydrodynamic simulations: lack of [[Galilean invariance]] for fast flows, [[statistical noise]] and poor [[Reynolds number]] scaling with lattice size.  LGA are, however, well suited to simplify and extend the reach of [[reaction diffusion]] and [[molecular dynamics]] models.\n\nThe main motivation for the transition from LGA to LBM was the desire to remove the statistical noise by replacing the Boolean particle number in a lattice direction with its ensemble average, the so-called density distribution function. Accompanying this replacement, the discrete collision rule is also replaced by a continuous function known as the collision operator. In the LBM development, an important simplification is to approximate the collision operator with the [[Bhatnagar-Gross-Krook]] (BGK) relaxation term. This lattice BGK (LBGK) model makes simulations more efficient and allows flexibility of the transport coefficients. On the other hand, it has been shown that the LBM scheme can also be considered as a special discretized form of the continuous Boltzmann equation. From [[Chapman-Enskog theory]], one can recover the governing continuity and Navier–Stokes equations from the LBM algorithm. In addition, th also directly available from the density distributions and hence there is no extra [[Poisson equation]] to be solved as in traditional CFD methods.\n\n==Lattices and the D''n''Q''m'' classification==\nLattice Boltzmann models can be operated on a number of different lattices, both cubic and triangular, and with or without rest particles in the discrete distribution function.\n\nA popular way of classifying the different methods by lattice is the D''n''Q''m'' scheme. Here \"D''n''\" stands for \"''n'' dimensions\", while \"Q''m''\" stands for \"''m'' speeds\". For example, D3Q15 is a 3-dimensional lattice Boltzmann model on a cubic grid, with rest particles present. Each node has a crystal shape and can deliver particles to 15 nodes: each of the 6 neighboring nodes that share a surface, the 8 neighboring nodes sharing a corner, and itself.<ref>Succi, p. 68</ref> (The D3Q15 model does not contain particles moving to the 12 neighboring nodes that share an edge; adding those would create a \"D3Q27\" model.)\n\nReal quantities as space and time need to be converted to lattice units prior to simulation. Nondimensional quantities, like the [[Reynolds number]], remain the same.\n\n==Lattice units conversion==\nIn most Lattice Boltzmann simulations <math>\\delta_x\\,\\!</math> is the basic unit for lattice spacing, so if the domain of length <math>L\\,\\!</math> has <math>N\\,\\!</math> lattice units along its entire length, the space unit is simply defined as <math>\\delta_x=L/N\\,\\!</math>. Speeds in lattice Boltzmann simulations are typically given in terms of the speed of sound. The discrete time unit can therefore be given as <math>\\delta_t = \\frac{\\delta_x}{C_s}\\,\\!</math>, where the denominator <math>C_s</math> is the physical speed of sound.<ref>Succi, Appendix D (p. 261-262)</ref>\n\nFor small-scale flows (such as those seen in [[porous media]] mechanics), operating with the true speed of sound can lead to unacceptably short time steps. It is therefore common to raise the lattice [[Mach number]] to something much larger than the real Mach number, and compensating for this by raising the [[viscosity]] as well in order to preserve the [[Reynolds number]].<ref>Succi, chapter 8.3, p. 117-119</ref>\n\n==Simulation of mixtures==\nSimulating multiphase/multicomponent flows has always been a challenge to conventional CFD because of the moving and deformable [[Interface (chemistry)|interfaces]]. More fundamentally, the interfaces between different [[Phase (matter)|phase]]s (liquid and vapor) or components (e.g., oil and water) originate from the specific interactions among fluid molecules. Therefore, it is difficult to implement such microscopic interactions into the macroscopic Navier–Stokes equation. However, in LBM, the particulate kinetics provides a relatively easy and consistent way to incorporate the underlying microscopic interactions by modifying the collision operator. Several LBM multiphase/multicomponent models have been developed. Here phase separations are generated automatically from the particle dynamics and no special treatment is needed to manipulate the interfaces as in traditional CFD methods. Successful applications of multiphase/multicomponent LBM models can be found in various complex fluid systems, including interface instability, [[Liquid bubble|bubble]]/[[droplet]] dynamics, [[wetting]] on solid surfaces, interfacial slip, and droplet electrohydrodynamic deformations.\n\nA lattice Boltzmann model for simulation of gas mixture combustion capable of accommodating significant density variations at low-Mach number regime has been recently proposed.<ref>{{cite journal|last1=Di Rienzo|first1=A. Fabio|last2=Asinari|first2=Pietro|last3=Chiavazzo|first3=Eliodoro|last4=Prasianakis|first4=Nikolaos|last5=Mantzaras|first5=John|title=Lattice Boltzmann model for reactive flow simulations|journal=EPL|date=2012|volume=98|issue=3|doi=10.1209/0295-5075/98/34001|bibcode = 2012EL.....9834001D|pages=34001|url=http://porto.polito.it/2496261/1/REACTIVE_resubmission_fin.pdf}}</ref>\n\nTo this respect, it is worth to notice that, since LBM deals with a larger set of fields (as compared to conventional CFD), the simulation of reactive gas mixtures presents some additional challenges in terms of memory demand as far as large detailed combustion mechanisms are concerned. Those issues may be addressed, though, by resorting to systematic model reduction techniques.<ref>{{cite journal|last1=Chiavazzo|first1=Eliodoro|last2=Karlin|first2=Ilya|last3=Gorban|first3=Alexander|last4=Boulouchos|first4=Konstantinos|title=Coupling of the model reduction technique with the Lattice Boltzmann method for combustion simulations|journal=Combust. Flame|date=2010|volume=157|issue=10|pages=1833–1849|url=http://www.sciencedirect.com/science/article/pii/S0010218010001756|doi=10.1016/j.combustflame.2010.06.009}}</ref><ref>{{cite journal|last1=Chiavazzo|first1=Eliodoro|last2=Karlin|first2=Ilya|last3=Gorban|first3=Alexander|last4=Boulouchos|first4=Konstantinos|title=Efficient simulations of detailed combustion fields via the Lattice Boltzmann method|journal=International Journal of Numerical Methods for Heat & Fluid Flow|date=2012|volume=21|issue=5|doi=10.1108/09615531111135792|pages=494–517}}</ref><ref>{{cite journal|last1=Chiavazzo|first1=Eliodoro|last2=Karlin|first2=Ilya|last3=Gorban|first3=Alexander|last4=Boulouchos|first4=Konstantinos|title=Combustion simulation via Lattice Boltzmann and reduced chemical kinetics|journal=Journal of Statistical Mechanics: Theory and Experiment|date=2009|doi=10.1088/1742-5468/2009/06/P06013|bibcode = 2009JSMTE..06..013C|volume=2009|issue=6|pages=P06013}}</ref>\n\n==Thermal lattice-Boltzmann method==\n\nCurrently (2009), a thermal lattice-Boltzmann method (TLBM) falls into one of three categories: the multi-speed approach,<ref>McNamara, G., Garcia, A., and Alder, B., \"A hydrodynamically correct thermal lattice boltzmann model\", Journal of Statistical Physics, vol. 87, no. 5, pp. 1111-1121, 1997.</ref> the passive scalar approach,<ref>Shan, X., \"[https://arxiv.org/pdf/comp-gas/9612001 Simulation of rayleigh-b'enard convection using a lattice boltzmann method]\", Physical Review E, vol. 55, pp. 2780-2788, The American Physical Society, 1997.</ref> and the thermal energy distribution.<ref>He, X., Chen, S., and Doolen, G.D., \"[https://www.sciencedirect.com/science/article/pii/S0021999198960570 A novel thermal model for the lattice boltzmann method in incompressible limit]\", Journal of Computational Physics, vol. 146, pp. 282-300, 1998.</ref>\n\n==Derivation of Navier–Stokes equation from discrete LBE==\n\nStarting with the discrete lattice Boltzmann equation (also referred to as LBGK equation due to the collision operator used).  We first do a 2nd-order Taylor series expansion about the left side of the LBE.  This is chosen over a simpler 1st-order Taylor expansion as the discrete LBE cannot be recovered.  When doing the 2nd-order Taylor series expansion, the zero derivative term and the first term on the right will cancel, leaving only the first and second derivative terms of the Taylor expansion and the collision operator:\n\n:<math>f_i(\\vec{x}+\\vec{e}_i\\delta_t,t+\\delta_t) = f_i(\\vec{x},t) + \\frac{\\delta_t}{\\tau_f} (f_i^{eq}-f_i).</math>\n\nFor simplicity, write <math>f_i(\\vec{x},t)</math> as <math>f_i</math>.  The slightly simplified Taylor series expansion is then as follows, where \":\" is the colon product between dyads:\n\n:<math>\\frac{\\partial f_i}{\\partial t} + \\vec{e}_i\\cdot \\nabla f_i + \\left( \\frac{1}{2}\\vec{e}_i\\vec{e}_i : \\nabla\\nabla f_i +\\vec{e}_i\\cdot\\nabla\\frac{\\partial f_i}{\\partial t} + \\frac{1}{2}\\frac{\\partial^2 f_i}{\\partial t^2} \\right) = \\frac{1}{\\tau}(f_i^{eq}-f_i).</math>\n\nBy expanding the particle distribution function into equilibrium and non-equilibrium components and using the Chapman-Enskog expansion, where <math>K</math> is the Knudsen number, the Taylor-expanded LBE can be decomposed into different magnitudes of order for the Knudsen number in order to obtain the proper continuum equations:\n\n:<math>f_i = f_i^\\text{eq} + K f_i^\\text{neq},</math>\n:<math>f_i^\\text{neq} = f_i^{(1)} + K f_i^{(2)}+O(K^2).</math>\n\nThe equilibrium and non-equilibrium distributions satisfy the following relations to their macroscopic variables (these will be used later, once the particle distributions are in the \"correct form\" in order to scale from the particle to macroscopic level):\n\n:<math>\\rho = \\sum_i f_i^\\text{eq},</math>\n:<math>\\rho \\vec{u} = \\sum_i f_i^\\text{eq} \\vec{e}_i,</math>\n:<math>0 = \\sum_i f_i^{(k)} \\qquad  \\text{for } k = 1,2,</math>\n:<math>0 = \\sum_i f_i^{(k)} \\vec{e}_i.</math>\n\nThe Chapman-Enskog expansion is then:\n\n:<math>\\frac{\\partial}{\\partial t} = K\\frac{\\partial}{\\partial t_1} + K^2\\frac{\\partial}{\\partial t_2} \\qquad  \\text{for } t_2(\\text{diffusive time-scale})  \\ll t_1(\\text{convective time-scale}),</math>\n:<math>\\frac{\\partial}{\\partial x} = K\\frac{\\partial}{\\partial x_1}.</math>\n\nBy substituting the expanded equilibrium and non-equilibrium into the Taylor expansion and separating into different orders of <math>K</math>, the continuum equations are nearly derived.\n\nFor order <math>K^0</math>:\n\n:<math>\\frac{\\partial f_i^\\text{eq}}{\\partial t_1} + \\vec{e}_i \\nabla_1 f_i^\\text{eq} = -\\frac{f_i^{(1)}}{\\tau}.</math>\n\nFor order <math>K^1</math>:\n\n:<math>\\frac{\\partial f_i^{(1)}}{\\partial t_1} + \\frac{\\partial f_i^\\text{eq}}{\\partial t_2} + \\vec{e}_i \\nabla f_i^{(1)} + \\frac{1}{2}\\vec{e}_i\\vec{e}_i : \\nabla\\nabla f_i^\\text{eq} +\\vec{e}_i \\cdot \\nabla\\frac{\\partial f_i^\\text{eq}}{\\partial t_1} + \\frac{1}{2}\\frac{\\partial^2 f_i^\\text{eq}}{\\partial t_1^2} = -\\frac{f_i^{(2)}}{\\tau}.</math>\n\nThen, the second equation can be simplified with some algebra and the first equation into the following:\n\n:<math>\\frac{\\partial f_i^\\text{eq}}{\\partial t_2} + \\left( 1 - \\frac{1}{2\\tau} \\right) \\left[ \\frac{\\partial f_i^{(1)}}{\\partial t_1} + \\vec{e}_i \\nabla_1 f_i^{(1)} \\right] = -\\frac{f_i^{(2)}}{\\tau}.</math>\n\nApplying the relations between the particle distribution functions and the macroscopic properties from above, the mass and momentum equations are achieved:\n\n:<math>\\frac{\\partial \\rho}{\\partial t} + \\nabla \\cdot \\rho \\vec{u} = 0,</math>\n\n:<math>\\frac{\\partial \\rho\\vec{u}}{\\partial t} + \\nabla \\cdot \\Pi = 0.</math>\n\nThe momentum flux tensor <math>\\Pi</math> has the following form then:\n\n:<math>\\Pi_{xy} = \\sum_{i}\\vec{e}_{ix}\\vec{e}_{iy} \\left[ f_i^{eq} + \\left( 1 - \\frac{1}{2 \\tau} \\right) f_i^{(1)} \\right],</math>\n\nwhere <math>\\vec{e}_{ix}\\vec{e}_{iy}</math> is shorthand for the square of the sum of all the components of <math>\\vec{e}_{i}</math> (i. e. <math>\\textstyle\\left(\\sum_{x}\\vec{e}_{ix}\\right)^2 = \\sum_{x}\\sum_{y}\\vec{e}_{ix}\\vec{e}_{iy}</math>), and the equilibrium particle distribution with second order to be comparable to the Navier–Stokes equation is:\n\n:<math>f_i^\\text{eq} = \\omega_i\\rho \\left( 1 + \\frac{\\vec{e}_i \\vec{u}}{c_{s}^{2}} + \\frac{(\\vec{e}_i \\vec{u})^{2}}{2c_{s}^{4}} - \\frac{\\vec{u}^2}{2c_{s}^{2}} \\right).</math>\n\nThe equilibrium distribution is only valid for small velocities or small [[Mach number]]s.  Inserting the equilibrium distribution back into the flux tensor leads to:\n\n:<math> \\Pi_{xy}^{(0)} = \\sum_{i}\\vec{e}_{ix}\\vec{e}_{iy}  f_i^{eq} = p\\delta_{xy} + \\rho u_x u_y,</math>\n:<math> \\Pi_{xy}^{(1)} = \\left( 1 - \\frac{1}{2 \\tau} \\right) \\sum_{i}\\vec{e}_{ix}\\vec{e}_{iy} f_i^{(1)} = \\nu\\left(\\nabla_x \\left( \\rho \\vec{u}_y \\right) + \\nabla_y \\left( \\rho \\vec{u}_x \\right)\\right).</math>\n\nFinally, the Navier–Stokes equation is recovered under the assumption that density variation is small:\n\n:<math> \\rho \\left( \\frac{\\partial \\vec{u}_{x}}{\\partial t} + \\nabla_{y}\\cdot\\vec{u}_{x}\\vec{u}_{y}\\right) = -\\nabla_{x}p + \\nu\\nabla_{y}\\cdot\\left(\\nabla_x \\left( \\rho \\vec{u}_y \\right) + \\nabla_y \\left( \\rho \\vec{u}_x \\right)\\right).</math>\n\nThis derivation follows the work of Chen and Doolen.<ref>Chen, S., and Doolen, G. D., \"[https://pdfs.semanticscholar.org/65af/ba3daff41d488f11e017bc02ba99854e52b7.pdf Lattice Boltzmann Method for Fluid Flows]\", Annual Review of Fluid Mechanics, vol. 30, p. 329–364, 1998.</ref>\n\n==Mathematical equations for simulations==\nThe continuous Boltzmann equation is an evolution equation for a single particle probability distribution function <math>f(\\vec{x},\\vec{e}_i,t)</math> and the internal energy density distribution function <math>g(\\vec{x},\\vec{e}_i,t)</math> (He et al.) are each respectively:\n\n:<math>\\partial_t f + (\\vec{e}\\cdot \\nabla) f + F\\partial_v f = \\Omega(f),</math>\n:<math>\\partial_t g + (\\vec{e}\\cdot \\nabla) g + G\\partial_v f = \\Omega(g),</math>\n\nwhere <math>g(\\vec{x},\\vec{e}_i,t)</math> is related to <math>f(\\vec{x},\\vec{e}_i,t)</math> by\n\n:<math>g(\\vec{x},\\vec{e}_i,t) = \\frac{(\\vec{e}-\\vec{u})^2}{2}f(\\vec{x},\\vec{e}_i,t),</math>\n\n<math>F</math> is an external force, <math>\\Omega</math> is a collision integral, and <math>\\vec{e}</math> (also labeled by <math>\\vec{\\xi}</math> in literature) is the microscopic velocity.  The external force <math>F</math> is related to temperature external force <math>G</math> by the relation below.  A typical test for one's model is the [[Rayleigh–Bénard convection]] for <math>G</math>.\n\n:<math> F = \\frac{\\vec{G}\\cdot(\\vec{e} - \\vec{u})}{RT}f^\\text{eq},</math>\n:<math> \\vec{G} = \\beta g_0(T - T_{avg})\\vec{k}.</math>\n\nMacroscopic variables such as density <math>\\rho</math>, velocity <math>\\vec{u}</math>, and temperature <math>T</math> can be calculated as the moments of the density distribution function:\n\n:<math> \\rho = \\int f \\, d\\vec{e},</math>\n:<math> \\rho\\vec{u} = \\int \\vec{e}f \\, d\\vec{e},</math>\n:<math> \\frac{\\rho DRT}{2} = \\rho\\epsilon =  \\int g \\, d\\vec{e}.</math>\n\nThe lattice Boltzmann method discretizes this equation by limiting space to a lattice and the velocity space to a discrete set of microscopic velocities (i. e. <math>\\vec{e}_i = (\\vec{e}_{ix},\\vec{e}_{iy})</math>).  The microscopic velocities in D2Q9, D3Q15, and D3Q19 for example are given as:\n\n:<math>\\vec{e}_i = c\\times\n\\begin{cases} \n  (0,0)                        & i = 0 \\\\\n  (1,0),(0,1),(-1,0),(0,-1)    & i = 1,2,3,4 \\\\\n  (1,1),(-1,1),(-1,-1),(1,-1)  & i = 5,6,7,8 \\\\\n\\end{cases}</math>\n\n:<math>\\vec{e}_i = c\\times\n\\begin{cases} \n  (0,0,0)                        & i = 0 \\\\\n  (\\plusmn 1,0,0),(0,\\plusmn 1,0),(0,0,\\plusmn 1)    & i = 1,2,...,5,6 \\\\\n  (\\plusmn1,\\plusmn1,\\plusmn1)  & i = 7,8,...,13,14 \\\\\n\\end{cases}</math>\n\n:<math>\\vec{e}_i = c\\times\n\\begin{cases} \n  (0,0,0)                        & i = 0 \\\\\n  (\\plusmn 1,0,0),(0,\\plusmn 1,0),(0,0,\\plusmn 1)    & i = 1,2,...,5,6 \\\\\n  (\\plusmn1,\\plusmn1,0),(\\plusmn1,0,\\plusmn1),(0,\\plusmn1,\\plusmn1)  & i = 7,8,...,17,18 \\\\\n\\end{cases}</math>\n\nThe single-phase discretized Boltzmann equation for mass density and internal energy density are:\n\n:<math>f_i(\\vec{x}+\\vec{e}_i\\delta_t,t+\\delta_t)-f_i(\\vec{x},t) + F_i = \\Omega(f),</math>\n\n:<math>g_i(\\vec{x}+\\vec{e}_i\\delta_t,t+\\delta_t)-g_i(\\vec{x},t) + G_i = \\Omega(g).</math>\n\nThe collision operator is often approximated by a BGK collision operator under the condition it also satisfies the conservation laws:\n\n:<math>\\Omega(f) = \\frac{1}{\\tau_f} (f_i^\\text{eq} - f_i),</math>\n\n:<math>\\Omega(g) = \\frac{1}{\\tau_g} (g_i^\\text{eq} - g_i).</math>\n\nIn the collision operator <math>f_i^\\text{eq}</math> is the discrete, {{clarify span|equilibrium particle probability distribution function|date=November 2015}}.  In D2Q9 and D3Q19, it is shown below for an incompressible flow in continuous and discrete form where ''D'', ''R'', and ''T'' are the dimension, universal gas constant, and absolute temperature respectively.  The partial derivation for the continuous to discrete form is provided through a simple derivation to second order accuracy.\n\n:<math>f^\\text{eq} = \\frac{\\rho}{(2 \\pi RT)^{D/2}}e^{-\\frac{(\\vec{e}-\\vec{u})^2}{2RT}}</math>\n::<math>= \\frac{\\rho}{(2 \\pi RT)^{D/2}}e^{-\\frac{(\\vec{e})^2}{2RT}}e^{\\frac{\\vec{e}\\vec{u}}{RT}-\\frac{\\vec{u}^2}{2RT}} </math>\n::<math>= \\frac{\\rho}{(2 \\pi RT)^{D/2}}e^{-\\frac{(\\vec{e})^2}{2RT}}\\left(1+\\frac{\\vec{e}\\vec{u}}{RT}+\\frac{(\\vec{e}\\vec{u})^2}{2(RT)^2}-\\frac{\\vec{u}^2}{2RT}+...\\right) </math>\n\nLetting <math>c=\\sqrt{3RT}</math> yields the final result:\n\n:<math>f_i^{eq}=\\omega_i\\rho \\left (1+\\frac{3\\vec{e}_i\\vec{u}}{c^2}+\\frac{9(\\vec{e}_i\\vec{u})^2}{2c^4}- \\frac{3(\\vec{u})^2}{2c^2} \\right)    </math>\n\n:<math>g^{eq}=\\frac{\\rho(\\vec{e}-\\vec{u})^2}{2(2 \\pi RT)^{D/2}}e^{-\\frac{(\\vec{e}-\\vec{u})^2}{2RT}} </math>\n\n:<math>\\omega_i = \n\\begin{cases} \n  4/9    & i = 0 \\\\\n  1/9    & i = 1,2,3,4 \\\\\n  1/36   & i = 5,6,7,8 \\\\\n\\end{cases}</math>\n\n:<math>\\omega_i = \n\\begin{cases} \n  1/3    & i = 0 \\\\\n  1/18    & i = 1,2,...,5,6 \\\\\n  1/36   & i = 7,8,...,17,18 \\\\\n\\end{cases}</math>\n\nAs much work has already been done on a single-component flow, the following TLBM will be discussed.  The multicomponent/multiphase TLBM is also more intriguing and useful than simply one component.  To be in line with current research, define the set of all components of the system (i. e. walls of porous media, multiple fluids/gases, etc.) <math>\\Psi</math> with elements <math>\\sigma_j</math>.\n\n:<math>f_i^{\\sigma}(\\vec{x}+\\vec{e}_i\\delta_t,t+\\delta_t)-f_i^{\\sigma}(\\vec{x},t) + F_i=\\frac{1}{\\tau_f^{\\sigma}} (f_i^{\\sigma,eq}(\\rho^{\\sigma},v^{\\sigma})-f_i^{\\sigma})</math>\n\nThe relaxation parameter,<math>\\tau_f^{\\sigma_j}\\,\\!</math>, is related to the [[kinematic viscosity]],<math>\\nu_f^{\\sigma_j}\\,\\!</math>, by the following relationship:\n\n:<math>\\nu_f^{\\sigma_j} = (\\tau_f^{\\sigma_j}-0.5)c_s^2\\delta_t.</math>\n\nThe [[Moment (mathematics)|moments]] of the <math>f_i\\,\\!</math> give the local conserved quantities. The density is given by\n\n:<math>\\rho=\\sum_{\\sigma}\\sum_i f_i\\,\\!</math>\n\n:<math>\\rho\\epsilon =\\sum_i g_i\\,\\!</math>\n\n:<math>\\rho^{\\sigma}=\\sum_i f_i^{\\sigma}\\,\\!</math>\n\nand the weighted average velocity, <math>\\vec{u'} \\,\\!</math>, and the local momentum are given by\n\n:<math> \\vec{u'}=\\left (\\sum_{\\sigma}\\frac{\\rho^{\\sigma}\\vec{u^{\\sigma}}}{\\tau_f^{\\sigma}}\\right)/\\left(\\sum_{\\sigma}\\frac{\\rho^{\\sigma}}{\\tau_f^{\\sigma}}\\right)   </math>\n\n:<math>\\rho^{\\sigma} \\vec{u^{\\sigma}} = \\sum_i f_i^{\\sigma} \\vec{e}_i.</math>\n\n:<math>v^{\\sigma} = \\vec{u'}+ \\frac{\\tau_f^{\\sigma}}{\\rho^{\\sigma}}\\vec{F}^{\\sigma}</math>\n\nIn the above equation for the equilibrium velocity <math>v^{\\sigma}\\,\\!</math>, the <math>\\vec{F}^{\\sigma}\\,\\!</math> term is the interaction force between a component and the other components.  It is still the subject of much discussion as it is typically a tuning parameter that determines how fluid-fluid, fluid-gas, etc. interact.  Frank et al. list current models for this force term.  The commonly used derivations are Gunstensen chromodynamic model, Swift's free energy-based approach for both liquid/vapor systems and binary fluids, He's intermolecular interaction-based model, the Inamuro approach, and the Lee and Lin approach.<ref>Frank, X., Almeida, G., Perre, P., \"[https://www.sciencedirect.com/science/article/pii/S0301932210000832 Multiphase flow in the vascular system of wood: From microscopic exploration to 3-D Lattice Boltzmann experiments]\", International Journal of Multiphase Flow, vol. 36, pp. 599-607, 2010.</ref>\n\nThe following is the general description for <math>\\vec{F}^{\\sigma}\\,\\!</math> as given by several authors.<ref>Yuan, P., Schaefer, L., \"Equations of State in a Lattice Boltzmann model\", Physics of Fluids, vol. 18, 2006.</ref><ref>Harting, J., Chin, J., Maddalena, V., Coveney, P., \"[https://arxiv.org/pdf/cs/0501021 Large-scale Lattice Boltzmann simulations of complex fluids: advances through the advent of computational Grids]\", ''Philosophical Transactions of the Royal Society A'', vol. 363, pp. 1895–1915 2005.</ref>\n\n<math>\\vec{F}^{\\sigma} = -\\psi^{\\sigma}(\\vec{x})\\sum_{\\sigma_j}H^{\\sigma\\sigma_j}(\\vec{x},\\vec{x}')\\sum_i\\psi^{\\sigma_j}(\\vec{x}+\\vec{e}_i)\\vec{e}_i    \\,\\!</math>\n\n<math>\\psi(\\vec{x})\\,\\!</math> is the effective mass and <math>H(\\vec{x},\\vec{x}')\\,\\!</math> is Green's function representing the interparticle interaction with <math>\\vec{x}'\\,\\!</math> as the neighboring site.  Satisfying <math>H(\\vec{x},\\vec{x}')=H(\\vec{x}',\\vec{x})\\,\\!</math> and where <math>H(\\vec{x},\\vec{x}')>0\\,\\!</math> represents repulsive forces.  For D2Q9 and D3Q19, this leads to\n\n<math>H^{\\sigma\\sigma_j}(\\vec{x},\\vec{x}') = \n\\begin{cases} \n  h^{\\sigma\\sigma_j}    & \\left | \\vec{x}-\\vec{x}' \\right | \\le c \\\\\n  0    & \\left | \\vec{x}-\\vec{x}' \\right | > c \\\\\n\\end{cases} </math>\n\n<math>H^{\\sigma\\sigma_j}(\\vec{x},\\vec{x}') = \n\\begin{cases} \n  h^{\\sigma\\sigma_j}    & \\left | \\vec{x}-\\vec{x}' \\right | = c \\\\\nh^{\\sigma\\sigma_j}/2    & \\left | \\vec{x}-\\vec{x}' \\right |  =\\sqrt{2c} \\\\\n  0    &  \\text{otherwise} \\\\\n\\end{cases} </math>\n\nThe effective mass as proposed by Shan and Chen uses the following effective mass for a ''single-component, multiphase system''.  The [[equation of state]] is also given under the condition of a single component and multiphase.\n\n:<math>\\psi(\\vec{x})=\\psi(\\rho^{\\sigma})=\\rho_0^{\\sigma}\\left[1-e^{(-\\rho^{\\sigma}/\\rho_0^{\\sigma})} \\right]\\,\\!</math>\n\n:<math>p=c_s^2 \\rho+c_0h[\\psi(\\vec{x})]^2\\,\\!</math>\n\nSo far, it appears that <math>\\rho_0^{\\sigma}\\,\\!</math> and <math>h^{\\sigma \\sigma_j}\\,\\!</math> are free constants to tune but once plugged into the system's [[equation of state]](EOS), they must satisfy the thermodynamic relationships at the critical point such that <math>(\\partial P / \\partial {\\rho})_T=(\\partial^2 P / \\partial {\\rho^2})_T=0\\,\\!</math> and <math>p=p_c\\,\\!</math>.  For the EOS, <math>c_0\\,\\!</math> is 3.0 for D2Q9 and D3Q19 while it equals 10.0 for D3Q15.<ref>Yuan, P., Schaefer, L., \"[http://fluidsengineering.asmedigitalcollection.asme.org/article.aspx?articleid=1430274 A Thermal Lattice Boltzmann Two-Phase Flow Model and its Application to Heat Transfer Problems-Part 1.  Theoretical Foundation]\", Journal of Fluid Engineering 142-150, vol. 128, 2006.</ref>\n\nIt was later shown by Yuan and Schaefer<ref>{{cite journal | last1 = Yuan | first1 = P. | last2 = Schaefer | first2 = L. | year = 2006 | title = Equations of State in a Lattice Boltzmann model | url = | journal = Physics of Fluids | volume = 18 | issue = 4| pages = 042101–042101–11| doi=10.1063/1.2187070|bibcode = 2006PhFl...18d2101Y }}</ref> that the effective mass density needs to be changed to simulate multiphase flow more accurately.  They compared the Shan and Chen (SC), Carnahan-Starling (C–S), van der Waals (vdW), Redlich–Kwong (R–K), Redlich–Kwong Soave (RKS), and Peng–Robinson (P–R) EOS.  Their results revealed that the SC EOS was insufficient and that C–S, P–R, R–K, and RKS EOS are all more accurate in modeling multiphase flow of a single component.\n\nFor the popular isothermal Lattice Boltzmann methods these are the only conserved quantities. Thermal models also conserve energy and therefore have an additional conserved quantity:\n\n:<math>\\rho \\theta + \\rho u u =\\sum_i f_i \\vec{e}_i \\vec{e}_i.</math>\n\n==Applications==\n\nDuring the last years, the LBM has proven to be a powerful tool for solving problems at different length scales. The behavior of fluid flow through porous media can be analyzed using the lattice Boltzmann method. LBM has been applied to:\n- Earth sciences (Soil filtration).\n- Energy Sciences (Fuel Cells<ref>{{cite journal|doi=10.1002/er.3348 | volume=39 | issue=11 | title=Compress effects on porosity, gas-phase tortuosity, and gas permeability in a simulated PEM gas diffusion layer | year=2015 | journal=[[International Journal of Energy Research]] | pages=1528–1536 | last1 = Espinoza | first1 = Mayken}}</ref>).\n\n==Further reading==\n* {{cite book|author1=Deutsch, Andreas  |author2=Sabine Dormann|title=Cellular Automaton Modeling of Biological Pattern Formation |publisher=[[Birkhäuser Verlag]]|year=2004|isbn=978-0-8176-4281-5}}\n* {{cite book|author=Succi, Sauro|title=The Lattice Boltzmann Equation for Fluid Dynamics and Beyond|publisher=[[Oxford University Press]]|year=2001|isbn=978-0-19-850398-9}}\n* {{cite book|author=Wolf-Gladrow, Dieter|title=Lattice-Gas Cellular Automata and Lattice Boltzmann Models|publisher=[[Springer Verlag]]|year=2000|isbn=978-3-540-66973-9}}\n* {{cite book|author1=Sukop, Michael C.  |author2=Daniel T. Thorne, Jr.|title=Lattice Boltzmann Modeling: An Introduction for Geoscientists and Engineers|publisher = [[Springer Science+Business Media|Springer]]|year=2007|isbn=978-3-540-27981-5}}\n* {{cite book|author=Jian Guo Zhou|title=Lattice Boltzmann Methods for Shallow Water Flows|publisher = [[Springer Science+Business Media|Springer]]|year=2004|isbn=978-3-540-40746-1}}\n* {{cite book|author=He,X., Chen, S., Doolen, G.|title=A Novel Thermal Model for the Lattice Boltzmann Method in Incompressible Limit|publisher = [[Journal of Computational Physics|Academic Press]]|year=1998}}\n* {{cite book|author1=Guo, Z. L. |author2=Shu, C|title=Lattice Boltzmann Method and Its Applications in Engineering|publisher = [[World Scientific Publishing]]|year=2013}}\n* {{cite book|author1=Huang, H. |author2= M.C. Sukop |author3=X-Y. Lu|title=Multiphase Lattice Boltzmann Methods: Theory and Application|publisher = [[Wiley-Blackwell]]|year=2015|isbn=978-1-118-97133-8}}\n* {{cite book|author1=Krüger, T. |author2=Kusumaatmaja, H. |author3=Kuzmin, A. | author4=Shardt, O. | author5=Silva, G. | author6=Viggen, E. M.|title=The Lattice Boltzmann Method: Principles and Practice|publisher=[[Springer Verlag]]|year=2017|isbn=978-3-319-44647-9}}\n\n==Notes==\n<references/>\n\n==External links==\n* [[OpenLB]] Open source lattice Boltzmann software\n* [http://www.science.uva.nl/research/scs/projects/lbm_web/lbm.html LBM Method]\n* [http://www.frontierlattices.ch/indepth/elbm Entropic Lattice Boltzmann Method (ELBM)]\n* [http://dsfd.org/ dsfd.org: Website of the annual DSFD conference series (1986 -- now) where advances in theory and application of the lattice Boltzmann method are discussed]\n* [http://www.icmmes.org/ Website of the annual ICMMES conference on lattice Boltzmann methods and their applications]\n\n{{DEFAULTSORT:Lattice Boltzmann Methods}}\n[[Category:Computational fluid dynamics]]\n[[Category:Lattice models]]"
    },
    {
      "title": "Lattice gas automaton",
      "url": "https://en.wikipedia.org/wiki/Lattice_gas_automaton",
      "text": "[[File:Gas velocity.gif|thumb|300px|right|HPP simulation of gas flow. The shades of grey of the individual pixels are proportional to the gas particle density (between 0 and 4) at that pixel. The gas is surrounded by a shell of yellow cells that act as reflectors to create a closed space.]]\n\n'''Lattice gas automata''' ('''LGA'''), or '''lattice gas cellular automata''', are a type of [[cellular automaton]] used to simulate fluid flows. They were the precursor to the [[lattice Boltzmann methods]]. From lattice gas automata, it is possible to derive the macroscopic [[Navier-Stokes equation]]s.<ref>Succi, section 2.3 describes the process</ref> Interest in lattice gas automaton methods levelled off in the early 1990s, as the interest in the lattice Boltzmann started to rise.<ref>Succi, section 2.6</ref>\n\n==Basic principles==\nAs a cellular automaton, these models comprise a lattice, where the sites on the lattice can take a certain number of different states. In lattice gas, the various states are particles with certain velocities. Evolution of the simulation is done in discrete time steps. After each time step, the state at a given site can be determined by the state of the site itself and neighboring sites, ''before'' the time step.\n\nThe state at each site is purely [[Boolean function|boolean]]. At a given site, there either ''is'' or ''is not'' a particle moving in each direction. \n\nAt each time step, two processes are carried out, propagation and collision.<ref>Buick, section 3.4</ref>\n\nIn the propagation step, each particle will move to a neighboring site determined by the velocity that particle had. Barring any collisions, a particle with an upwards velocity will after the time step maintain that velocity, but be moved to the neighboring site above the original site. The so-called exclusion principle prevents two or more particles from travelling on the same link in the same direction.\n\nIn the collision step, collision rules are used to determine what happens if multiple particles reach the same site. These collision rules are required to maintain [[mass conservation]], and [[conservation of momentum|conserve the total momentum]]; the [[block cellular automaton]] model can be used to achieve these conservation laws.<ref>{{citation|last=Wolfram|first=Stephen|authorlink=Stephen Wolfram|year=2002|title=[[A New Kind of Science]]|pages=459–464|publisher=Wolfram Media|isbn=1-57955-008-8}}.</ref> Note that the exclusion principle does not prevent two particles from travelling on the same link in ''opposite'' directions, when this happens, the two particles pass each other without colliding.\n\n==Early attempts with a square lattice==\n\n[[Image:HPP small.gif|thumb|Small scale demonstration of the square lattice HPP model.]]\n\nIn papers published in 1973 and 1976, Hardy, Pomeau and de Pazzis introduced the first Lattice Boltzmann model, which is called the [[HPP model]] after the authors. HPP model is a two-dimensional model of fluid particle interactions. In this model, the lattice is square, and the particles travel independently at a unit speed to the discrete time. The particles can move to any of the four sites whose cells share a common edge. Particles cannot move diagonally.\n\nIf two particles collide head-on, for example a particle moving to the left meets a particle moving to the right, the outcome will be two particles leaving the site at right angles to the direction they came in.<ref>Buick, section 3.2.1</ref>\n\nThe HPP model lacked [[rotational invariance]], which made the model highly [[Anisotropy|anisotropic]]. This means for example, that the vortices produced by the HPP model are square-shaped.<ref>Succi, footnote p. 22</ref>\n\n==Hexagonal grids==\nThe hexagonal grid model was first introduced in 1986, in a paper by [[Uriel Frisch]], [[Brosl Hasslacher]] and Yves Pomeau, and this has become known as the FHP model after its inventors. The model has six or seven velocities, depending on which variation is used. In any case, six of the velocities represent movement to each of the neighboring sites. In some models (called FHP-II and FHP-III), a seventh velocity representing particles \"at rest\" is introduced. The \"at rest\" particles do not propagate to neighboring sites, but they are capable of colliding with other particles. The FHP-III model allows all possible collisions that conserve density and momentum.<ref>Buick, section 3.2.2</ref> Increasing the number of collisions raises the [[Reynolds number]], so the FHP-II and FHP-III models can simulate less viscous flows than the six-speed FHP-I model.<ref>Wolf-Gladrow 3.2.6, figure 3.2.3</ref>\n\nThe simple update rule of FHP model proceeds in two stages, chosen to conserve particle number and momentum. The first is collision handling. The collision rules in the FHP model are not [[deterministic]], some input situations produce two possible outcomes, and when this happens, one of them is picked at random. Since [[random number generation]] is not possible through completely computational means, a [[Pseudorandomness|pseudorandom]] process is usually chosen.<ref>Wolf-Gladrow 3.2.1</ref>\n\nAfter the collision step a particle on a link is taken to be leaving the site. If a site has two particles approaching head-on, they scatter. A random choice is made between the two possible outgoing directions that conserve momentum.\n\nThe hexagonal grid does not suffer as large anisotropy troubles as those that plague the HPP square grid model, a fortunate fact that is not entirely obvious, and that prompted Frisch to remark that \"the symmetry gods are benevolent\".<ref>Succi, footnote p. 23</ref>\n\n==Three dimensions==\nFor a three-dimensional grid, the only regular [[polytope]] that fills the whole space is the [[cube]], while the only regular polytopes with a sufficiently large symmetry group are the [[dodecahedron]] and [[icosahedron]] (without the second constraint the model will suffer the same drawbacks as the HPP model). To make a model that tackles three dimensions therefore requires an increase in the number of dimensions, such as in the 1986 model by D'Humières, Lallemand and Frisch, which employed a face-centered [[hypercube]] model.<ref name=\"WG_3D\">Wolf-Gladrow, sections 3.4 - 3.5</ref>\n\n==Obtaining macroscopic quantities==\nThe density at a site can be found by counting the number of particles at each site. If the particles are multiplied with the unit velocity before being summed, one can obtain the [[momentum]] at the site.<ref>Buick, section 3.5.1</ref>\n\nHowever, calculating density, momentum, and velocity for individual sites is subject to a large amount of noise, and in practice, one would average over a larger region to obtain more reasonable results. [[Ensemble average|Ensemble averaging]] is often used to reduce the statistical noise further.<ref>Buick, section 3.8</ref>\n\n==Advantages and disadvantages==\nThe main assets held by the lattice gas model are that the boolean states mean there will be exact computing without any round-off error due to floating-point precision, and that the cellular automata system makes it possible to run lattice gas automaton simulations with [[parallel computing]].<ref>Succi, section 2.4</ref>\n\nDisadvantages of the lattice gas method include the lack of [[Galilean invariance]], and [[statistical noise]].<ref>Succi, section 2.5</ref> Another problem is the difficulty in expanding the model to handle three dimensional problems, requiring the use of more dimensions to maintain a sufficiently symmetric grid to tackle such issues.<ref name=\"WG_3D\"/>\n\n==Notes==\n{{reflist|2}}\n\n==References==\n*{{cite book|author=Sauro Succi|title=The Lattice Boltzmann Equation, for fluid dynamics and beyond|publisher=Oxford Science Publications|year=2001|isbn=0-19-850398-9}} (Chapter 2 is about lattice gas Cellular Automata)\n*James Maxwell Buick (1997). Lattice Boltzmann Methods in Interfacial Wave Modelling. PhD Thesis, University of Edinburgh. (Chapter 3 is about the lattice gas model.) <!--[http://www-personal.une.edu.au/~jbuick/Publications/PDF/Thesis/tot.html Online] --> ([https://web.archive.org/web/20070902011040/http://www-personal.une.edu.au/~jbuick/Publications/PDF/Thesis/tot.html archive.org]) 2008-11-13\n*{{cite book|author=Dieter A. Wolf-Gladrow|title=Lattice-Gas Cellular Automata and Lattice Boltzmann Models|publisher=Springer|year=2000|isbn=3-540-66973-6}}\n\n==External links==\n* {{fr icon}} [http://ygdes.com/memoire/ Master thesis (2000)] – Details on programming and optimising the simulation of the FHP LGA\n* {{pl icon}} {{en icon}} [http://www.ift.uni.wroc.pl/~sebastian.szkoda/msc.html Master thesis (2010)] - Implementation of FHP model in Nvidia CUDA technology.\n\n[[Category:Computational fluid dynamics]]\n[[Category:Cellular automata]]"
    },
    {
      "title": "Computational magnetohydrodynamics",
      "url": "https://en.wikipedia.org/wiki/Computational_magnetohydrodynamics",
      "text": "'''Computational magnetohydrodynamics (CMHD)''' is a rapidly developing branch of [[magnetohydrodynamics]] that uses [[numerical method]]s and algorithms to solve and analyze problems that involve electrically conducting fluids. Most of the methods used in CMHD are borrowed from the well established techniques employed in [[Computational fluid dynamics]]. The complexity mainly arises due to the presence of a [[magnetic field]] and its coupling with the fluid. One of the important issues is to numerically maintain the <math> \\nabla \\cdot {\\mathbf B} = 0</math> (conservation of [[magnetic flux]]) condition, from [[Maxwell's equations]], to avoid the presence of unrealistic effects, namely [[magnetic monopole|magnetic monopoles]], in the solutions.\n\n==Open-source MHD codes==\n*[[Pencil Code]]<br>Compressible resistive MHD, intrinsically divergence free, embedded particles module, finite-difference explicit scheme, high-order derivatives, Fortran95 and C, parallelized up to hundreds of thousands cores. [http://pencil-code.nordita.org/download.php Source code] is available.\n*[http://www.ics.uzh.ch/~teyssier/ramses/RAMSES.html RAMSES]<br> RAMSES is an open source code to model astrophysical systems, featuring self-gravitating, magnetised, compressible, radiative fluid flows. It is based on the [[Adaptive Mesh Refinement]] (AMR) technique on a fully threaded graded octree. RAMSES is written in Fortran 90 and is making intensive use of the [[Message Passing Interface]] (MPI) library.<ref name=\"Teyssier2002\">{{cite journal|last1=Teyssier|first1=R|title=Cosmological hydrodynamics with adaptive mesh refinement. A new high resolution code called RAMSES|journal=Astronomy and Astrophysics|volume=385|pages=337–364|doi=10.1051/0004-6361:20011817|url=http://www.aanda.org/articles/aa/abs/2002/13/aa1593/aa1593.html|accessdate=13 July 2016|arxiv=astro-ph/0111367|bibcode=2002A&A...385..337T|year=2002}}</ref><ref name=\"Gheller\">{{cite journal|last1=Gheller|first1=C|last2=Wang|first2=P|last3=Vazza|first3=F|last4=Teyssier|first4=R|title=Numerical cosmology on the GPU with Enzo and Ramses|journal=Journal of Physics: Conference Series|date=28 September 2015|volume=640|pages=012058|doi=10.1088/1742-6596/640/1/012058|url=http://stacks.iop.org/1742-6596/640/i=1/a=012058|accessdate=1 July 2016|arxiv=1412.0934}}</ref> [https://bitbucket.org/rteyssie/ramses Source code] is available.\n*[http://www.maisondelasimulation.fr/projects/RAMSES-GPU/html/index.html RamsesGPU]<br> RamsesGPU is a MHD Code written in C++, based on the original [http://www.ics.uzh.ch/~teyssier/ramses/RAMSES.html RAMSES] but only for regular grid (no [[Adaptive Mesh Refinement|AMR]]). The code has been designed to run on large clusters of [[Graphics processing unit|GPU]] ([[NVIDIA]] graphics processors), so parallelization relies on [[Message Passing Interface|MPI]] for distributed memory processing, as well as the programing language CUDA for efficient usage of [[Graphics processing unit|GPU]] resources. Static Gravity Fields are supported. Different finite volume methods are implemented. [https://github.com/pkestene/ramsesGPU Source code] is available.\n*[https://trac.princeton.edu/Athena/ Athena]<br>Athena is a grid-based code for astrophysical magnetohydrodynamics (MHD). It was developed primarily for studies of the interstellar medium, star formation, and accretion flows.<ref name=\"Stone\">{{cite journal|last1=Stone|first1=James M.|last2=Gardiner|first2=Thomas A.|last3=Teuben|first3=Peter|last4=Hawley|first4=John F.|last5=Simon|first5=Jacob B.|title=Athena: A New Code for Astrophysical MHD|journal=The Astrophysical Journal Supplement Series|date=September 2008|volume=178|issue=1|pages=137–177|doi=10.1086/588755|arxiv=0804.0402|bibcode=2008ApJS..178..137S}}</ref> [https://trac.princeton.edu/Athena/ Source code] is available.\n*[https://eof-library.com/ EOF-Library]<br> EOF-Library is a software that couples [[Elmer FEM solver|Elmer FEM]] and [[OpenFOAM]] simulation packages. It enables efficient internal field interpolation and communication between the [[Finite element method|finite element]] and the [[Finite volume method|finite volume]] frameworks. Potential applications are MHD, convective cooling of electrical devices, industrial [[Plasma (physics)|plasma physics]] and [[Dielectric heating|microwave heating]] of liquids.<ref>{{Cite journal|last=Vencels|first=Juris|last2=Råback|first2=Peter|last3=Geža|first3=Vadims|date=2019-01-01|title=EOF-Library: Open-source Elmer FEM and OpenFOAM coupler for electromagnetics and fluid dynamics|url=http://www.sciencedirect.com/science/article/pii/S2352711018302164|journal=SoftwareX|volume=9|pages=68–72|doi=10.1016/j.softx.2019.01.007|issn=2352-7110}}</ref>\n\n==Commercial MHD codes==\n*[http://www.txcorp.com/ USim]\n*[http://www.numerex-llc.com/m2.htm MACH2]\n\n==See also==\n* [[Magnetohydrodynamic turbulence]]\n* [[Magnetic flow meter]]\n* [[Plasma modeling]]\n\n==References==\n{{reflist}}\n\n* Brio, M., Wu, C. C.(1988), \"An upwind differencing scheme for the equations of ideal magnetohydrodynamics\", ''Journal of Computational Physics'', '''75''', 400&ndash;422.\n* Henri-Marie Damevin and Klaus A. Hoffmann(2002), \"Development of a Runge-Kutta Scheme with TVD for Magnetogasdynamics\", ''Journal of Spacecraft and Rockets'', '''34''',No.4, 624&ndash;632.\n* Robert W. MacCormack(1999), \"An upwind conservation form method for ideal magnetohydrodynamics equations\", ''AIAA-99-3609''.\n* Robert W. MacCormack(2001), \"A conservation form method for magneto-fluid dynamics\", ''AIAA-2001-0195''.\n\n==Further reading==\n* Toro, E. F. (1999), ''Riemann Solvers and Numerical Methods for Fluid Dynamics'', Springer-Verlag.\n*{{cite journal|last=Ledvina|first=S. A.|author2=Y.-J. Ma|author3=E. Kallio|title=Modeling and Simulating Flowing Plasmas and Related Phenomena|journal=Space Science Reviews|date=2008|volume=139|issue=1–4|pages=143–189|doi=10.1007/s11214-008-9384-6|bibcode = 2008SSRv..139..143L }}\n\n==External links==\n* [https://www.ncbi.nlm.nih.gov/pmc/articles/PMC392293/ NCBI]\n\n[[Category:Computational electromagnetics|Magnetohydrodynamics, Computational]]\n[[Category:Computational fluid dynamics|Magnetohydrodynamics, Computational]]\n[[Category:Computational fields of study]]"
    },
    {
      "title": "Marker-and-cell method",
      "url": "https://en.wikipedia.org/wiki/Marker-and-cell_method",
      "text": "'''The marker-and-cell method''' is commonly used in [[computer graphics]] to discretize functions for fluid and other simulations.<ref name=harlow_welch>{{cite journal|last=Harlow|first=F. H.|author2=J. E. Welch|title=Numerical calculation of time-dependent viscous incompressible flow of fluid with a free surface|journal=[[Physics of Fluids]]|year=1965|volume=8|pages=2182–2189|doi=10.1063/1.1761178}}</ref> It was developed by [[Francis H. Harlow|Francis Harlow]] and his collaborators at the [[Los Alamos National Laboratory]].<ref name=Giessen_Aref>{{cite book|last=Erik van der Giessen and [[Hassan Aref]]|title=Advances in Applied Mechanics|year=2003|publisher=[[Academic Press]]|pages=86|url=https://books.google.com/books?id=KJO52rbX7ygC&pg=PA86&dq=MaC+method+harlow&hl=en&sa=X&ei=SiguT-qjJM_JrAffxrXXDA&ved=0CC8Q6AEwADgK#v=onepage&q=MaC%20method%20harlow&f=false}}</ref>\n\n== See also ==\n*[[Immersed boundary method]]\n*[[Stokesian dynamics]]\n*[[Volume of fluid method]]\n*[[Level-set method]]\n\n==References==\n{{Reflist}}\n\n==External links==\n*[https://www.researchgate.net/publication/228964362_Fluid_flow_for_the_rest_of_us_Tutorial_of_the_marker_and_cell_method_in_computer_graphics Fluid flow for the rest of us], an explanation of fluid simulation (including the MAC grid)\n\n[[Category:Computational fluid dynamics]]\n\n{{compu-graphics-stub}}"
    },
    {
      "title": "MOOSE (software)",
      "url": "https://en.wikipedia.org/wiki/MOOSE_%28software%29",
      "text": "{{Infobox software\n| name                   = MOOSE\n| logo                   = Moose Multiphysics.png\n| screenshot             = MOOSE_Peacock_input.png\n| caption                = The MOOSE [[GUI]] ''Peacock''\n| author                 = Derek Gaston\n| developer              = [[Idaho National Laboratory]] and contributors\n| released               = {{Start date and age|2008|06|10}}\n| operating system       = [[Linux]], [[Mac OS X]], [[Unix]]\n| genre                  = [[Finite element analysis]]\n| license                = [[LGPL]]\n| language               = [[C++]]\n| website                = {{URL|mooseframework.org}}\n}}\n'''MOOSE''' ('''Multiphysics Object Oriented Simulation Environment''') is an [[Object-oriented programming|object-oriented]] [[C++]] finite element framework for the development of tightly coupled [[multiphysics]] solvers from [[Idaho National Laboratory]].<ref name=\"MOSE\">{{cite web\n  | title = MOOSE Framework - Open Source Multiphysics \n  | publisher = Idaho National Laboratory\n  | url = http://mooseframework.org/\n  | accessdate = 2013-03-28 }}</ref> MOOSE makes use of the [[PETSc]] non-linear solver package and libmesh to provide the finite element discretization.\n\nA key design aspect of MOOSE is the decomposition of [[weak formulation|weak form]] [[Residual (numerical analysis)|residual]] equations into separate terms that are each represented by compute kernels. The combination of these kernels into complete residuals describing the problem to be solved is performed at run time. This allows modifications such as toggling of mechanisms and the addition of new physics without recompilation. MOOSE comes with an extensive library of kernels providing residual terms for [[solid mechanics]], [[Navier–Stokes equations]], [[phase field models]] and more.\n\nMOOSE uses [[VTK]].\n\n==Background==\nThe development of MOOSE at [[Idaho National Laboratory]] (INL), beginning in May 2008, has resulted in a unique approach to computational engineering that combines [[computer science]] with a strong underlying mathematical description in a unique way that allows scientists and engineers to develop engineering [[simulation]] tools in a fraction of the time previously required.<ref>[http://www.inl.gov/technicalpublications/Documents/5148644.pdf] {{dead link|date=September 2016}}</ref> The heart of MOOSE is the Kernel. A Kernel is a \"piece\" of [[physics]]. To add new physics to an application built using MOOSE, all that is required is to supply a new Kernel that describes the discrete form of the equation. It's usually convenient to think of a Kernel as a [[Operator (mathematics)|mathematical operator]], such as a [[Laplacian]] or a [[convection]] term in a [[partial differential equation]] (PDE). Kernels may be swapped or coupled together to achieve different application goals. These Kernels, which now number in the hundreds, allow a [[scientist]] or [[engineer]] to develop an application rapidly.\n\nFor a new application, existing Kernels are selected as-is, or modified as necessary, and \"plugged\" in. An [[advection]]-[[diffusion]]-[[reaction (physics)|reaction]] equation is of the same mathematical form no matter what application it is being used for. Typically, only the form of the coefficients or the dependencies on other physics need to be defined; rarely must complete Kernels be constructed from scratch. With MOOSE, only the Kernel development is required from the scientist or engineer ([[Software developer|application developer]]). MOOSE is designed to do everything else for the application developer, such as finite element [[discretization]] of the PDEs, the nonlinear solver, and the parallel [[high performance computing]].\n\nThe idea of naming MOOSE-based applications after [[Idaho]] [[indigenous (ecology)|indigenous]] animal species is loosely based on [[Los Alamos National Laboratory]]'s 1970s – 1990s approach to naming their codes after [[Native Americans in the United States|Native American]] tribes and artifacts, such as APACHE, CONCHAS, and the [[KIVA (software)|KIVA]] series of codes. There are now over twenty MOOSE-based application animals in various stages of development, ranging from recently obtaining preliminary results to being nationally recognized as [[state-of-the-art]] efforts (such as BISON, PEREGRINE, and MARMOT for fuels performance modeling & simulation activities).\n\n==Description==\n[[File:Multiphysics Object-Oriented Simulation Environment (MOOSE).jpg|right|thumb|500px|MOOSE / BISON simulation: A piece of a [[Nuclear fuel|fuel pellet]] has chipped away (center left) due to a manufacturing defect or damage incurred while it was in transit. The damaged pellet surface induces a high-stress state in the adjacent cladding. As a result, the pellets warm up and densify before swelling back out due to [[Nuclear fission product|fission products]] building up inside of them, further stressing the surrounding fuel cladding.]]MOOSE is a development and [[Run-time system|run-time environment]] for the solution of multi-physics systems that involve multiple physical models or multiple simultaneous physical phenomena. The systems are generally represented (modeled) as a system of fully coupled nonlinear partial differential equation systems (an example of a multi-physics system is the thermal feedback effect upon [[Neutron cross section|neutronics cross-sections]] where the cross-sections are a function of the [[heat transfer]]). Inside MOOSE, the Jacobian-Free Newton Krylov (JFNK) method is implemented as a parallel nonlinear solver that naturally supports effective coupling between physics equation systems (or Kernels).<ref>[https://web.archive.org/web/20130319035035/http://www.global-sci.com/galley/ESCO2010-13.pdf ]</ref> The physics Kernels are designed to contribute to the nonlinear residual, which is then minimized inside of MOOSE. MOOSE provides a comprehensive set of [[finite element]] support capabilities (libMesh) and provides for mesh adaptation and [[Parallel computing|parallel execution]]. The framework heavily leverages [[software libraries]] from the [[United States Department of Energy|Department of Energy]] (DOE) and the [[National Nuclear Security Administration]] (NNSA), such as the nonlinear solver capabilities in either the Portable, Extensible Toolkit for Scientific Computation ([[PETSc]]) project or the [[Trilinos]] project.\n\n===ELK (Extended Library of Kernels)===\nELK is a library for common Kernels, boundary conditions and material base classes.<ref>{{cite web|url=https://icme.hpc.msstate.edu/mediawiki/index.php/MOOSE_instructions |title=MOOSE instructions - EVOWiki |publisher=Icme.hpc.msstate.edu |date=2012-04-17 |accessdate=2012-12-11}}</ref>\n\n===YAK (Yet Another Kernel)===\nYAK is a library of common actions, Kernels, boundary conditions, and material base classes for radiation transport applications. YAK is currently linked with RattleSnake (multi-group radiation Sn transport), Pronghorn (multi-group diffusion), and Critter (multi-length scale temperature feedback).\n\n==Applications==\n\n===BISON===\nBISON was the first MOOSE-based application \"animal,\" and is a finite element-based nuclear fuel performance code applicable to a variety of fuel forms including [[light water reactor]] fuel rods, [[TRISO]] fuel particles, and metallic rod and plate fuel.<ref>{{cite journal|url=http://www.sciencedirect.com/science/article/pii/S0022311512000165 |title=Journal of Nuclear Materials - Multidimensional multiphysics simulation of nuclear fuel behavior  |date=2012-01-19 |accessdate=2012-12-11 |doi=10.1016/j.jnucmat.2012.01.012 |volume=423 |issue=1–3 |journal=Journal of Nuclear Materials |pages=149–163|last1=Williamson |first1=R.L. |last2=Hales |first2=J.D. |last3=Novascone |first3=S.R. |last4=Tonks |first4=M.R. |last5=Gaston |first5=D.R. |last6=Permann |first6=C.J. |last7=Andrs |first7=D. |last8=Martineau |first8=R.C. }}</ref><ref>[http://www.inl.gov/technicalpublications/Documents/4363831.pdf] {{dead link|date=September 2016}}</ref><ref>{{cite journal|url=http://www.sciencedirect.com/science/article/pii/S0022311509004450 |title=Journal of Nuclear Materials - Three dimensional coupled simulation of thermomechanics, heat, and oxygen diffusion in UO2 nuclear fuel rods  |accessdate=2012-12-11 |doi=10.1016/j.jnucmat.2009.03.035 |volume=392 |journal=Journal of Nuclear Materials |pages=6–15|year=2009 |last1=Newman |first1=Chris |last2=Hansen |first2=Glen |last3=Gaston |first3=Derek }}</ref> It solves the fully coupled equations of thermomechanics and species diffusion and includes important fuel physics such as fission gas release and material property degradation with burnup. BISON is based on the MOOSE framework<ref>{{cite journal|url=http://www.sciencedirect.com/science/article/pii/S0029549309002635 |title=Nuclear Engineering and Design - MOOSE: A parallel computational framework for coupled systems of nonlinear equations  |date=2009-07-19 |accessdate=2012-12-11 |doi=10.1016/j.nucengdes.2009.05.021 |volume=239 |issue=10 |journal=Nuclear Engineering and Design |pages=1768–1778|last1=Gaston |first1=Derek |last2=Newman |first2=Chris |last3=Hansen |first3=Glen |last4=Lebrun-Grandié |first4=Damien }}</ref> and can therefore efficiently solve problems on either [[two-dimensional]] [[axisymmetric]] or [[three-dimensional]] geometries using standard workstations or large [[high performance computers]]. [[Plasticity (physics)|Plasticity]], irradiation growth, and thermal and irradiation creep models are implemented for clad materials. Models are also available to simulate gap heat transfer, mechanical contact, and the evolution of the gap/[[plenum (physics)|plenum]] pressure with plenum volume, gas temperature, and fission gas addition. BISON is also coupled to a MOOSE-based [[Mesoscopic scale|mesoscale]] phase field material property simulation capability.<ref>{{cite journal|url=http://www.sciencedirect.com/science/article/pii/S0927025611004204 |title=Computational Materials Science - An object-oriented finite element framework for multiphysics phase field simulations  |date=2011-08-28 |accessdate=2012-12-11 |doi=10.1016/j.commatsci.2011.07.028 |volume=51 |journal=Computational Materials Science |pages=20–29|last1=Tonks |first1=Michael R. |last2=Gaston |first2=Derek |last3=Millett |first3=Paul C. |last4=Andrs |first4=David |last5=Talbot |first5=Paul }}</ref><ref>{{cite journal|url=http://www.sciencedirect.com/science/article/pii/S002954931000419X |title=Nuclear Engineering and Design - A coupling methodology for mesoscale-informed nuclear fuel performance codes  |date=2010-07-03 |accessdate=2012-12-11 |doi=10.1016/j.nucengdes.2010.06.005 |volume=240 |issue=10 |journal=Nuclear Engineering and Design |pages=2877–2883|last1=Tonks |first1=Michael |last2=Gaston |first2=Derek |last3=Permann |first3=Cody |last4=Millett |first4=Paul |last5=Hansen |first5=Glen |last6=Wolf |first6=Dieter }}</ref>\n\n===MARMOT===\nMARMOT is a finite element-based phase field code for modeling irradiation-induced [[microstructure]] evolution. MARMOT predicts the effect of [[radiation damage]] on microstructure evolution, including void [[nucleation]] and growth, bubble growth, [[grain boundary]] migration, and gas diffusion and segregation. The phase field equations can be coupled with heat conduction and [[solid mechanics]] from ELK to consider the effect of temperature and stress gradients on the evolution. In addition, MARMOT calculates the effect of the microstructure evolution on various bulk material properties, including [[thermal conductivity]] and [[porosity]]. Once the bulk properties have been calculated, they can be passed to BISON for a fuel performance simulation. This coupling between MARMOT and BISON has been achieved in the hybrid code BARMOT.<ref>{{cite journal | last1 = Tonks | first1 = MR | last2 = Gaston | first2 = D | last3 = Millett | first3 = PC | last4 = Andrs | first4 = D | last5 = Talbot | first5 = P | year = 2012 | title = An object-oriented finite element framework for multiphysics phase field simulations | url = | journal = Computational Materials Science | volume = 51 | issue = | pages = 20–29 | doi=10.1016/j.commatsci.2011.07.028}}</ref><ref>K Chockalingam, MR Tonks, JD Hales, DR Gaston, PC Millett, L Zhang. 2012. Crystal plasticity with Jacobian-Free Newton–Krylov. Computational Mechanics 0178-7675:1–10.</ref><ref>{{cite journal | last1 = Zhang | first1 = L | last2 = Tonks | first2 = MR | last3 = Millett | first3 = PC | last4 = Zhang | first4 = Y | last5 = Chockalingam | first5 = K | last6 = Biner | first6 = B | year = 2012 | title = Phase-field modeling of temperature gradient driven pore migration coupling with thermal conduction | url = | journal = Computational Materials Science | volume = 56 | issue = | pages = 161–165 | doi=10.1016/j.commatsci.2012.01.002}}</ref>\n\n===FALCON===\nFALCON is being developed to enable simulation of the tightly coupled fluid-rock behavior in [[hydrothermal]] and engineered [[geothermal]] system (EGS) [[reservoirs]], targeting the dynamics of fracture stimulation, fluid flow, rock deformation, and heat transport in a single integrated code, with the ultimate goal of providing a tool that can be used to test the viability of EGS in the United States and worldwide.<ref>{{cite web|url=http://www.osti.gov/estsc/details.jsp?rcdid=4850 |title=ESTSC - Find the latest in U.S. Department of Energy Software |publisher=Osti.gov |date= |accessdate=2012-12-11}}</ref><ref>Podgorney, R.K, H. Huang, and D. Gaston, 2010, Massively Parallel Fully Coupled Modeling of Coupled Thermal-Hydro-Mechanical Processes for Enhanced Geothermal System Reservoirs, 35th Stanford Geothermal Workshop, Stanford, CA, February 2010</ref><ref>Gaston, D., L. Guo, H. Huang, R. Johnson, H. Park, R. Podgorney, M. Tonks, and R, Williamson. 2010. Parallel algorithms and software for nuclear, energy, and environmental applications Part I: Multiphysics Algorithms, Communications in Computational Physics</ref> Reliable reservoir performance predictions of EGS systems require accurate and robust modeling for the coupled thermal-hydrological-mechanical processes. Conventionally, these types of problems are solved using [[operator splitting]] methods, usually by coupling a subsurface flow and heat transport simulator with a [[solid mechanics]] simulator via input files.<ref>Gaston, D., L. Guo, H. Huang, R. Johnson, H. Park, R. Podgorney, M. Tonks, and R, Williamson. 2010. Parallel algorithms and software for nuclear, energy, and environmental applications Part II: Multiphysics Software, Communications in Computational Physics</ref><ref>Podgorney, R.K, G. Gunnarsson, and H. Huang, 2011, Numerical Simulation of temperature dependent fluid reinjection behavior, Hellisheidi geothermal field, Southwest Iceland, Geothermal Resources Council 35th Annual Meeting, San Diego, CA, October 23–26, 2011</ref><ref>Huang, H., P. Meakin, Podgorney, R.K, S. Deng, and C. Lu. 2011, Physics-based modeling of fracturing and permeability evolution in engineered geothermal systems, Geothermal Resources Council 35th Annual Meeting, San Diego, CA, October 23–26, 2011</ref><ref>Podgorney, R.K, C. Lu, and H. Huang. 2012, Thermo-hydro-mechncial modeling of working fluid injection and thermal energy extraction in EGS fractures and rock matrix, 37th Stanford Geothermal Workshop, Stanford, CA, February 2012.</ref> FALCON eliminates the need for using operator splitting methods to simulate these systems, and the scalability of MOOSE supported applications allows for simulating these tightly coupled processes at the reservoir scale, allowing for examination of the system as a whole (something the operator splitting methodologies generally cannot do).<ref>Podgorney, R.K, H. Huang, and D. Gaston, 2010, FALCON: A Hybrid Finite Element-Discrete Element Physics Based Model for Simultaneously Solving Fully Coupled Multiphase Fluid Flow, Heat Transport, Rock Deformation, and Fracturing, Geothermal Resources Council 34th Annual Meeting, Sacramento, CA, October 24–27, 2010</ref><ref>Podgorney, R.K, H. Huang, and D. Gaston, 2010, Physics-Based Modeling for Coupled Thermo-Hydro-Mechanical Problems in Geologic Media: An Application for Enhanced Geothermal System, Geological Society of America Annual Meeting, Denver CO, Oct 31-Nov. 3, 2010</ref>\n\n===RAT===\nReActive Transport (RAT) has been developed to solve reactive transport problems in subsurface [[porous media]] that involves highly nonlinearly coupled physical processes of [[fluid flow]], [[solution|solute]] transport, [[biogeochemical]] reactions and media-solution interactions. These problems are common in various subsurface-engineered systems, such as engineered [[environmental remediation]], enhanced geothermal systems and carbon dioxide geological sequestration. Currently, the physics that could be coupled in RAT include: single-phase fluid flow in porous media, [[advection]], dispersion and diffusion transport, aqueous kinetic reaction, aqueous equilibrium reaction, kinetic mineral precipitation/dissolution reaction, and Carmen-Kozeny porosity-permeability relationship.<ref>[http://www.inl.gov/technicalpublications/Documents/5436971.pdf] {{dead link|date=September 2016}}</ref><ref>{{cite journal|title=Reactive Transport Modeling of Induced Calcite Precipitation Reaction Fronts in |publisher=Adsabs.harvard.edu |date= |bibcode=2010AGUFM.H51C0911G}}</ref>\n\nThis software is not to be confused with the Reactor Analysis Tool<ref>{{Cite web|url=https://rat.readthedocs.io/en/latest/overview.html|title=Overview — RAT 1.0 documentation|website=rat.readthedocs.io}}</ref> (RAT) which is a toolkit based on ROOT<ref>{{Cite web|url=https://root.cern.ch/|title=ROOT a Data analysis Framework &#124; ROOT a Data analysis Framework|website=root.cern.ch}}</ref> and GEANT4<ref>{{Cite web|url=https://geant4.web.cern.ch/|title=Overview &#124; geant4.web.cern.ch|website=geant4.web.cern.ch}}</ref> for microphysical simulations of scintillation detectors used in neutrino and dark matter experiments including Braidwood, SNO+, and DEAP-3600.\n\n===RELAP-7===\nRELAP-7 is the next-generation tool in the [[RELAP5-3D|RELAP safety/systems analysis application series]] and is based upon the MOOSE development and [[runtime environment]] framework.<ref>{{cite web|url=http://www.ipd.anl.gov/anlpubs/2012/08/74071.pdf |title=NEAMS Update |date=April 2012 |website=Ipd.anl.gov |accessdate=2016-09-27}}</ref><ref>[http://www.ne.doe.gov/pdfFiles/INL-EXT-11-23452%20LWRS%20Program%20Plan%2001-31-12.pdf ]{{dead link|date=September 2016}}</ref> RELAP-7 will retain and improve the basic analysis capability of RELAP5. The four major improvements are 1) A well-posed seven-equation two-phase flow model (liquid, gas, and interface pressures) versus the obsolete ill-posed six-equation flow model (non-physical mixture sound speed) found in RELAP5; 2) Improved numerical approximations resulting in second-order accuracy in both space and time versus the first order approximations in RELAP5; 3) Implicit tightly coupled time integration for long duration transients, such as providing plant behavior for full life [[fuel cycle]] evaluations; and 4) the ability to easily couple to multi-dimensional core simulators being developed in other programs (NEAMS, CASL, ATR LEP).<ref>{{cite web|url=http://www.ipd.anl.gov/anlpubs/2012/05/73395.pdf |title=NEAMS Update |date=January 2012 |website=Ipd.anl.gov |accessdate=2016-09-27}}</ref><ref>[http://www.inl.gov/technicalpublications/Documents/5452100.pdf] {{dead link|date=September 2016}}</ref><ref>{{cite web|url=http://www.inl.gov/technicalpublications/Documents/5436984.pdf |title=Microsoft Word - Demonstration of a Steady State PWR Problem with RELAP7 r3.docx |website=Inl.gov |date= |accessdate=2016-09-27}}</ref>\n\n===Pronghorn===\nPronghorn was originally developed for simulation of the gas-cooled pebble-bed [[VHTR]] concept. The current capabilities of Pronghorn include transient and steady coupled porous fluid flow and solid-state heat conduction with a standard multi-group diffusion model (i.e., fixed-source, criticality, and time-dependent).<ref>[http://www.inl.gov/technicalpublications/Documents/4460727.pdf] {{dead link|date=September 2016}}</ref> Recently added capabilities include a nonlinear acceleration scheme for criticality problems and a simple thermal-fluid model for the prismatic reactor concept.  Future capabilities will include a more advanced multi-phase flow type of model (to study thermal boundary layer effects) and a radiation transport model. The physics can be solved in three-dimensional [[Cartesian coordinate system|Cartesian]] ([[X–Y–Z matrix|x, y, z]]) or cylindrical ([[Cylindrical coordinate system|r, q , z]]) space, with precursor and [[adiabatic]] thermal feedback models. This code has been validated against the PBMR400 benchmark problem. Using Pronghorn, rod ejection simulations have been conducted for thermal-fluids/neutronics for both pebble-bed and prismatic gas-cooled reactors and simple thermal-neutronics coupled LWR benchmark problems.<ref>H. Park , D. Gaston , S. Kadiouglu, D. Knoll, D. Lebrun-Grandie , R. Martineau and W. Taitano\", \"Tightly Coupled Multiphysics Simulation for Pebble Bed Reactors,\" American Nuclear Society 2009 International Conference on Advances in Mathematics, Computational Methods, and Reactor Physics, Saratoga Springs, NY, May 3–7, 2009.</ref><ref>[https://secure.inl.gov/VHTRRDTR12/pres/MethodsExp/08_Gougar_OverviewVHTRCore.pdf ]{{dead link|date=September 2016}}</ref>\n\n==Features==\n* Fully coupled, fully implicit multiphysics solver\n* Dimension independent physics\n* Automatically parallel (largest runs >100,000 CPU cores)\n* Modular development simplifies code reuse\n* Built-in mesh adaptivity\n* Continuous and Discontinuous Galerkin (DG) (at the same time)\n* Intuitive parallel multiscale solves (see videos below)\n* Dimension agnostic, parallel geometric search (for contact related applications)\n* Flexible, plugable graphical user interface\n* ~30 plugable interfaces allow specialization of every part of the solve\n\n==Notes==\n{{Reflist|30em}}\n\n==References==\n{{refbegin}}\n* {{cite journal | last1 = Tonks | first1 = M. | last2 = Gaston | first2 = D. | last3 = Millett | first3 = P. | last4 = Andrs | first4 = D. | last5 = Talbot | first5 = P. | year = 2012 | title = An object-oriented finite element framework for multiphysics phase field simulations | url = | journal = Comp. Mat. Sci | volume = 51 | issue = 1| pages = 20–29 | doi=10.1016/j.commatsci.2011.07.028}}\n* {{cite journal | last1 = Williamson | first1 = R. | last2 = Hales | first2 = J. | last3 = Novascone | first3 = S. | last4 = Tonks | first4 = M. | last5 = Gaston | first5 = D. | last6 = Permann | first6 = C. | last7 = Andrs | first7 = D. | last8 = Martineau | first8 = R. | year = 2012| title = Multidimensional Multiphysics Simulation of Nuclear Fuel Behavior | url = | journal = Journal of Nuclear Materials | volume = 423 | issue = 149–163| page = 2012 | doi=10.1016/j.jnucmat.2012.01.012}}\n* L. Guo, H. Huang, D. Gaston, and G. Redden. \"Modeling of calcite precipitation driven by bacteria-facilitated urea hydrolysis in a flow column using a fully coupled, fully implicit parallel reactive transport simulator\". In Eos Transactions American Geophysical Union, 90(52), Fall Meeting Supplement, AGU 90(52), San Francisco, CA, Dec 14-18 2009.\n* {{cite conference|authors=R. Podgorney, H. Huang, and D. Gaston |title= Massively parallel fully coupled implicit modeling of coupled thermal-hydrological-mechanical processes for enhanced geothermal system reservoirs|work= 35th Stanford Geothermal Workshop|location= Stanford University, Palo Alto, CA|date=February 1-3, 2010|osti= 974761|url=https://digital.library.unt.edu/ark:/67531/metadc933893/}}\n* {{cite journal|doi=10.13182/NSE09-104|title=Tightly Coupled Multiphysics Algorithms for Pebble Bed Reactors|journal=Nuclear Science and Engineering|volume=166|issue=2|pages=118–133|year=2010|last1=Park|first1=H.|last2=Knoll|first2=D. A.|last3=Gaston|first3=D. R.|last4=Martineau|first4=R. C.}}\n{{refend}}\n\n==External links==\n* [https://mooseframework.inl.gov MOOSE Homepage]\n* [https://inlportal.inl.gov/portal/server.pt/community/technology_transfer/269 Idaho National Laboratory's Technology Deployment Office]\n* {{github|idaholab/moose}}\n* [https://inlportal.inl.gov/portal/server.pt/community/moose_community/763/moose_publications MOOSE publications] - List of publications on the MOOSE framework.\n\n{{computer science}}\n\n{{DEFAULTSORT:MOOSE (Multiphysics Object Oriented Simulation Environment)}}\n[[Category:C++ software]]\n[[Category:Computational fluid dynamics]]\n[[Category:Computer-aided engineering software for Linux]]\n[[Category:Finite element software]]\n[[Category:Free software programmed in C++]]\n[[Category:Idaho National Laboratory]]\n[[Category:Industrial software]]\n[[Category:Nuclear reactors]]\n[[Category:Physics software]]\n[[Category:Scientific simulation software]]"
    },
    {
      "title": "Multi-particle collision dynamics",
      "url": "https://en.wikipedia.org/wiki/Multi-particle_collision_dynamics",
      "text": "'''Multi-particle collision dynamics''' (MPC), also known as stochastic rotation dynamics (SRD),<ref name=\"mpc_review\">{{cite journal|doi=10.1007/978-3-540-87706-6_1 | arxiv =0808.2157 | title=Multi-Particle Collision Dynamics: A Particle-Based Mesoscale Simulation Approach to the Hydrodynamics of Complex Fluids | journal=Advanced Computer Simulation Approaches for Soft Matter Sciences III | pages=1–87 | last1 = Gompper | first1 = G. | last2 = Ihle | first2 = T. | last3 = Kroll | first3 = D. M. | last4 = Winkler | first4 = R. G.}}</ref> is a particle-based mesoscale simulation technique for complex fluids which fully incorporates thermal fluctuations and hydrodynamic interactions.<ref>{{cite journal|doi=10.1063/1.478857 | volume=110 | title=Mesoscopic model for solvent dynamics | year=1999 | journal=The Journal of Chemical Physics | pages=8605–8613 | last1 = Malevanets | first1 = Anatoly | last2 = Kapral | first2 = Raymond| bibcode=1999JChPh.110.8605M }}</ref> Coupling of embedded particles to the coarse-grained solvent is achieved through [[molecular dynamics]].<ref name=\"colloids_malevanets_kapral\">{{cite journal|doi=10.1063/1.481289 | volume=112 | title=Solute molecular dynamics in a mesoscale solvent | year=2000 | journal=The Journal of Chemical Physics | pages=7260–7269 | last1 = Malevanets | first1 = Anatoly | last2 = Kapral | first2 = Raymond| bibcode=2000JChPh.112.7260M }}</ref>\n\n==Method of simulation==\nThe solvent is modelled as a set of <math>N</math> point particles of mass <math>m</math> with continuous coordinates <math>\\vec{r}_{i}</math> and velocities <math>\\vec{v}_{i}</math>. The simulation consists of streaming and collision steps.\n\nDuring the streaming step, the coordinates of the particles are updated according to\n\n<math>\\vec{r}_{i}(t+\\delta t_{\\mathrm{MPC}}) = \\vec{r}_{i}(t) + \\vec{v}_{i}(t) \\delta t_{\\mathrm{MPC}}</math>\n\nwhere <math>\\delta t_{\\mathrm{MPC}}</math> is a chosen simulation time step which is typically much larger than a molecular dynamics time step.\n\nAfter the streaming step, interactions between the solvent particles are modelled in the collision step. The particles are sorted into collision cells with a lateral size <math>a</math>. Particle velocities within each cell are updated according to the collision rule\n\n:<math>\\vec{v}_{i} \\rightarrow \\vec{v}_{\\mathrm{CMS}} + \\hat{\\mathbf{R}} ( \\vec{v}_{i} - \\vec{v}_{\\mathrm{CMS}} )</math>\n\nwhere <math>\\vec{v}_{\\mathrm{CMS}}</math> is the centre of mass velocity of the particles in the collision cell and <math>\\hat{\\mathbf{R}}</math> is a [[rotation matrix]]. In two dimensions, <math>\\hat{\\mathbf{R}}</math> performs a rotation by an angle <math>+\\alpha</math> or <math>-\\alpha</math> with probability <math>1/2</math>. In three dimensions, the rotation is performed by an angle <math>\\alpha</math> around a random rotation axis. The same rotation is applied for all particles within a given collision cell, but the direction (axis) of rotation is statistically independent both between all cells and for a given cell in time.\n\nIf the structure of the collision grid defined by the positions of the collision cells is fixed, [[Galilean invariance]] is violated. It is restored with the introduction of a random shift of the collision grid.<ref>{{cite journal|doi=10.1103/PhysRevE.67.066705 | volume=67 | title=Stochastic rotation dynamics. I. Formalism, Galilean invariance, and Green-Kubo relations | year=2003 | journal=Physical Review E | last1 = Ihle | first1 = T. | last2 = Kroll | first2 = D. M.| bibcode=2003PhRvE..67f6705I }}</ref>\n\nExplicit expressions for the [[diffusion coefficient]] and [[viscosity]] derived based on [[Green-Kubo relations]] are in excellent agreement with simulations.<ref>{{cite journal|doi=10.1103/PhysRevE.70.035701 | volume=70 | title=Resummed Green-Kubo relations for a fluctuating fluid-particle model | year=2004 | journal=Physical Review E | last1 = Ihle | first1 = T. | last2 = Tüzel | first2 = E. | last3 = Kroll | first3 = D. M.| arxiv=cond-mat/0404305 | bibcode=2004PhRvE..70c5701I }}</ref><ref>{{cite journal|doi=10.1103/PhysRevE.72.046707 | volume=72 | title=Equilibrium calculation of transport coefficients for a fluid-particle model | year=2005 | journal=Physical Review E | last1 = Ihle | first1 = T. | last2 = Tüzel | first2 = E. | last3 = Kroll | first3 = D. M.| arxiv=cond-mat/0505434 | bibcode=2005PhRvE..72d6707I }}</ref>\n\n==Simulation parameters==\nThe set of parameters for the simulation of the solvent are:\n* solvent particle mass <math>m</math>\n* average number of solvent particles per collision box <math>n_{s}</math>\n* lateral collision box size <math>a</math>\n* stochastic rotation angle <math>\\alpha</math>\n* [[kT (energy)]]\n* time step <math>\\delta t_{\\mathrm{MPC}}</math>\n\nThe simulation parameters define the solvent properties,<ref name=\"mpc_review\" /> such as\n\n* [[mean free path]] <math>\\lambda = \\delta t_{\\mathrm{MPC}} \\sqrt{kT/m}</math>\n* [[diffusion coefficient]] <math>D = \\frac{kT\\delta t_{\\mathrm MPC}}{2m} \\Bigg[ \\frac{d n_{s}} {(1-\\cos(\\alpha))(n_{s}-1+\\exp^{-n_{s}})}-1 \\Bigg]</math>\n* [[shear viscosity]] <math>\\nu</math>\n* [[thermal diffusivity]] <math>D_{T}</math>\n\nwhere <math>d</math> is the dimensionality of the system.\n\nA typical choice for normalisation is <math>a=1,\\; kT=1,\\;m=1</math>. To reproduce fluid-like behaviour, the remaining parameters may be fixed as <math>\\alpha = 130^{o},\\; n_{s} = 10,\\; \\delta t_{\\mathrm{MPC}} \\in [0.01;0.1]</math>.<ref name=\"elgeti_phd\">[http://kups.ub.uni-koeln.de/volltexte/2007/2007/pdf/elgeti.pdf J. Elgeti \"Sperm and Cilia Dynamics\" PhD thesis, Universität zu Köln (2006)]</ref>\n\n==Applications==\nMPC has become a notable tool in the simulations of many soft-matter systems, including\n* [[colloid]] dynamics<ref name=\"colloids_malevanets_kapral\" /><ref>{{cite journal|doi=10.1103/PhysRevLett.93.220601 | bibcode=2004PhRvL..93v0601P | volume=93 | title=Hydrodynamic and Brownian Fluctuations in Sedimenting Suspensions | year=2004 | journal=Physical Review Letters | last1 = Padding | first1 = J. T. | last2 = Louis | first2 = A. A.| arxiv=cond-mat/0409133 }}</ref><ref>{{cite journal|doi=10.1103/PhysRevE.74.021403 | volume=74 | title=Shear viscosity of claylike colloids in computer simulations and experiments | year=2006 | journal=Physical Review E | last1 = Hecht | first1 = Martin | last2 = Harting | first2 = Jens | last3 = Bier | first3 = Markus | last4 = Reinshagen | first4 = Jörg | last5 = Herrmann | first5 = Hans J.| arxiv=cond-mat/0601413 | bibcode=2006PhRvE..74b1403H }}</ref>\n* [[polymer]] dynamics<ref>{{cite journal|doi=10.1063/1.2041527 | volume=123 | title=Dynamics of polymers in a particle-based mesoscopic solvent | year=2005 | journal=The Journal of Chemical Physics | page=144905 | last1 = Mussawisade | first1 = K. | last2 = Ripoll | first2 = M. | last3 = Winkler | first3 = R. G. | last4 = Gompper | first4 = G.| bibcode=2005JChPh.123n4905M }}</ref><ref>{{cite journal|doi=10.1140/epje/i2006-10220-0 | volume=23 | title=Hydrodynamic screening of star polymers in shear flow | year=2007 | journal=The European Physical Journal E | pages=349–354 | last1 = Ripoll | first1 = M. | last2 = Winkler | first2 = R. G. | last3 = Gompper | first3 = G.| bibcode=2007EPJE...23..349R }}</ref>\n* [[Vesicle (biology and chemistry)|vesicles]]<ref>{{cite journal|doi=10.1103/PhysRevE.72.011901 | volume=72 | title=Dynamics of fluid vesicles in shear flow: Effect of membrane viscosity and thermal fluctuations | year=2005 | journal=Physical Review E | last1 = Noguchi | first1 = Hiroshi | last2 = Gompper | first2 = Gerhard| bibcode=2005PhRvE..72a1901N | url=http://juser.fz-juelich.de/record/47062/files/74181.pdf }}</ref>\n* active systems<ref name=\"elgeti_phd\" />\n* [[liquid crystal]]s<ref>{{Cite journal|last=K.-W. Lee and Marco G. Mazza|title=Stochastic rotation dynamics for nematic liquid crystals|url=http://scitation.aip.org/content/aip/journal/jcp/142/16/10.1063/1.4919310|journal=Journal of Chemical Physics|volume=142 |doi=10.1063/1.4919310|year=2015|page=164110|arxiv=1502.03293|bibcode=2015JChPh.142p4110L}}</ref>\n\n==References==\n{{reflist}}\n\n[[Category:Computational fluid dynamics]]"
    },
    {
      "title": "Navier–Stokes equations",
      "url": "https://en.wikipedia.org/wiki/Navier%E2%80%93Stokes_equations",
      "text": "{{short description|Equations describing the motion of viscous fluid substances}}\n{{Continuum mechanics|fluid}}\nIn [[physics]], the '''Navier–Stokes equations''' ({{IPAc-en|n|æ|v|ˈ|j|eː|_|s|t|əʊ|k|s}}), named after [[Claude-Louis Navier]] and [[Sir George Stokes, 1st Baronet|George Gabriel Stokes]], describe the motion of [[viscous fluid]] substances.\n\nThese balance equations arise from applying [[Newton's second law|Isaac Newton's second law]] to [[Fluid dynamics|fluid motion]], together with the assumption that the [[stress (mechanics)|stress]] in the fluid is the sum of a [[diffusion|diffusing]] [[viscosity|viscous]] term (proportional to the [[gradient]] of velocity) and a [[pressure]] term—hence describing ''viscous flow''. The main difference between them and the simpler [[Euler equations (fluid dynamics)|Euler equations]] for [[inviscid flow]] is that Navier–Stokes equations also factor in the [[Froude number|Froude limit]] (no external field) and are not [[conservation law|conservation equations]], but rather a [[dissipative system]], in the sense that they cannot be put into the quasilinear [[Homogeneous polynomial|homogeneous]] form:\n\n:<math> \\mathbf y_t + \\mathbf A(\\mathbf y) \\mathbf y_x = 0.</math>\n\nNavier–Stokes equations are useful because they describe the physics of many phenomena of [[scientific]] and [[engineering]] interest. They may be used to [[model (abstract)|model]] the weather, [[ocean current]]s, water [[flow conditioning|flow in a pipe]] and air flow around a [[airfoil|wing]]. The Navier–Stokes equations, in their full and simplified forms, help with the design of aircraft and cars, the study of blood flow, the design of power stations, the analysis of pollution, and many other things. Coupled with [[Maxwell's equations]], they can be used to model and study [[magnetohydrodynamics]].\n\nThe Navier–Stokes equations are also of great interest in a purely mathematical sense. Despite their wide range of practical uses, it has not yet been proven whether solutions always [[Existence theorem|exist]] in three dimensions and, if they do exist, whether they are [[Smoothness|smooth]] – i.e. they are infinitely differentiable at all points in the [[Domain (mathematical analysis)|domain]]. These are called the [[Navier–Stokes existence and smoothness]] problems. The [[Clay Mathematics Institute]] has called this one of the [[Millennium Prize Problems|seven most important open problems in mathematics]] and has offered a [[US$]]1&nbsp;million prize for a solution or a counterexample.<ref>\n{{Citation\n| url =http://www.claymath.org/millennium-problems/navier–stokes-equation\n | website = claymath.org\n| title = Millennium Prize Problems—Navier–Stokes Equation\n| publisher = Clay Mathematics Institute\n | date = March 27, 2017\n| accessdate = 2017-04-02\n}}</ref><ref>{{cite web\n | url = http://www.claymath.org/sites/default/files/navierstokes.pdf\n | title = Existence and smoothness of the Navier–Stokes equation \n | last = Fefferman\n | first = Charles L.\n | date = \n | website = claymath.org\n | publisher = Clay Mathematics Institute\n | access-date =  2017-04-02\n | quote = }}</ref>\n\n==Flow velocity==\nThe solution of the equations is a [[flow velocity]]. It is a [[vector field]] - to every point in a fluid, at any moment in a time interval, it gives a vector whose direction and magnitude are those of the velocity of the fluid at that point in space and at that moment in time. It is usually studied in three spatial dimensions and one time dimension, although the two (spatial) dimensional case is often useful as a model, and higher-dimensional analogues are of both pure and applied mathematical interest. Once the velocity field is calculated, other quantities of interest such as [[pressure]] or [[temperature]] may be found using dynamical equations and relations. This is different from what one normally sees in [[classical mechanics]], where solutions are typically trajectories of position of a [[particle]] or deflection of a [[Continuum (theory)|continuum]]. Studying velocity instead of position makes more sense for a fluid; however for visualization purposes one can compute various [[Streamlines, streaklines, and pathlines|trajectories]]. In particular, the [[Streamlines, streaklines, and pathlines|streamlines]] of a vector field, interpreted as flow velocity, are the paths along which a massless fluid particle would travel. These paths are the [[Integral curve|integral curves]] whose derivative at each point is equal to the vector field, and they can represent visually the behavior of the vector field at a point in time.\n\n==General continuum equations==\n{{Main|Derivation of the Navier–Stokes equations}}\n{{see also|Cauchy momentum equation#Conservation form}}\n\nThe Navier–Stokes momentum equation can be derived as a particular form of the [[Cauchy momentum equation]], whose general convective form is\n:<math> \\frac{D \\mathbf{u}}{D t} = \\frac 1 \\rho \\nabla \\cdot \\boldsymbol{\\sigma} + \\mathbf{g}</math>\nBy setting the [[Cauchy stress tensor]] <math>\\boldsymbol\\sigma</math> to be the sum of a viscosity term <math>\\boldsymbol\\tau</math> (the [[Cauchy stress tensor#Stress deviator tensor|deviatoric stress]]) and a pressure term <math>-p\\mathbf{I}</math> (volumetric stress) we arrive at\n\n{{Equation box 1\n|indent=:\n|title='''Cauchy momentum equation''' ''(convective form)''\n|equation=<math>\n\\rho\\frac{D\\mathbf{u}}{Dt} = - \\nabla p + \\nabla \\cdot \\boldsymbol \\tau + \\rho\\,\\mathbf{g}\n</math>\n|cellpadding\n|border\n|border colour = #50C878\n|background colour = #ECFCF4\n}}\n\nwhere\n* <math>\\frac{D}{Dt}</math> is the [[material derivative]], defined as <math>\\frac{\\partial}{\\partial t} + \\mathbf{u}\\cdot\\nabla </math>,\n* <math>\\rho</math> is the density,\n* {{math|'''u'''}} is the flow velocity,\n* <math>\\nabla\\cdot</math> is the [[divergence]],\n* {{math|''p''}} is the [[pressure]],\n* {{math|''t''}} is [[time]],\n* <math>\\boldsymbol\\tau</math> is the deviatoric stress tensor, which has order two,\n* {{math|'''g'''}} represents [[body force|body acceleration]]s acting on the continuum, for example [[gravity]], [[Fictitious force|inertial accelerations]], [[Coulomb's law|electrostatic accelerations]], and so on,\n\nIn this form, it is apparent that in the assumption of an inviscid fluid -no deviatoric stress- Cauchy equations reduce to the [[Euler equations (fluid dynamics)|Euler equations]].\n\nAssuming [[conservation of mass]] we can use the [[Continuity equation#Differential form|continuity equation]], <math>\\frac{\\partial \\rho}{\\partial t} + \\nabla \\cdot (\\rho\\,\\mathbf{u}) = 0</math> to arrive to the conservation form of the equations of motion. This is often written:<ref>Batchelor (1967) pp. 137 & 142.</ref>\n\n{{Equation box 1\n|indent=:\n|title='''Cauchy momentum equation''' ''(conservation form)''\n|equation=<math>\n\\frac {\\partial}{\\partial t} (\\rho\\,\\mathbf{u})\n   + \\nabla \\cdot (\\rho\\,\\mathbf{u} \\otimes \\mathbf{u})\n = - \\nabla p + \\nabla \\cdot \\boldsymbol \\tau + \\rho\\,\\mathbf{g}\n</math>\n|cellpadding\n|border\n|border colour = #50C878\n|background colour = #ECFCF4\n}}\n\nwhere {{math|⊗}} is the [[outer product]]:\n::<math>\\mathbf u \\otimes \\mathbf v = \\mathbf u \\mathbf v^{\\mathrm T}.</math>\n\nThe left side of the equation describes acceleration, and may be composed of time-dependent and convective components (also the effects of non-inertial coordinates if present). The right side of the equation is in effect a summation of hydrostatic effects, the divergence of deviatoric stress and body forces (such as gravity).\n\nAll non-relativistic balance equations, such as the Navier–Stokes equations, can be derived by beginning with the Cauchy equations and specifying the stress tensor through a [[constitutive relation]]. By expressing the deviatoric (shear) stress tensor in terms of [[viscosity]] and the fluid [[Shear velocity|velocity]] gradient, and assuming constant viscosity, the above Cauchy equations will lead to the Navier–Stokes equations below.\n\n===Convective acceleration===\n{{see also|Cauchy momentum equation#Convective acceleration}}\n[[Image:ConvectiveAcceleration vectorized.svg|thumb|An example of convection. Though the flow may be steady (time-independent), the fluid decelerates as it moves down the diverging duct (assuming incompressible or subsonic compressible flow), hence there is an acceleration happening over position.]]\n\nA significant feature of the Cauchy equation and consequently all other continuum equations (including Euler and Navier–Stokes) is the presence of convective acceleration: the effect of acceleration of a flow with respect to space. While individual fluid particles indeed experience time-dependent acceleration, the convective acceleration of the flow field is a spatial effect, one example being fluid speeding up in a nozzle.\n\n==Compressible flow==\nRemark: here, the Cauchy stress tensor is denoted <math>\\boldsymbol\\sigma</math> (instead of <math>\\boldsymbol\\tau</math> as it was in the [[#General_continuum_equations|general continuum equations]] and in the [[#Incompressible_flow|incompressible flow section]]).\n\nThe compressible momentum Navier–Stokes equation results from the following assumptions on the Cauchy stress tensor:<ref name=\"Batchelor_142_148\"/>\n\n*the stress is '''[[Galilean invariance|Galileian invariant]]''': it does not depend directly on the flow velocity, but only on spatial derivatives of the flow velocity. So the stress variable is the tensor gradient {{math|∇'''u'''.}}\n*the stress is '''linear''' in this variable: {{math|'''σ'''(∇'''u''') {{=}} '''C''' : (∇'''u'''),}} where {{math|'''C'''}} is the fourth-order tensor representing the constant of proportionality, called the viscosity or [[elasticity tensor]], and : is the [[Dyadics#Double-dot product|double-dot product]].\n*the fluid is assumed to be [[isotropic]], as with gases and simple liquids, and consequently {{math|'''V'''}} is an isotropic tensor; furthermore, since the stress tensor is symmetric, by [[Helmholtz decomposition]] it can be expressed in terms of two scalar [[Lamé parameters]], the [[bulk viscosity]] {{mvar|λ}} and the [[dynamic viscosity]] {{mvar|μ}}, as it is usual in [[linear elasticity]]:\n\n{{Equation box 1\n|indent=::\n|title='''Linear stress [[constitutive equation]]''' ''(expression used for elastic solid)''\n|equation=<math>\\boldsymbol \\sigma = \\lambda (\\nabla\\cdot\\mathbf{u}) \\mathbf I + 2 \\mu \\boldsymbol \\varepsilon</math>\n|cellpadding\n|border\n|border colour = #FF0000\n|background colour = #ECFCF4\n}}\n\n: where {{math|'''I'''}} is the identity tensor, {{math|'''ε'''(∇'''u''') ≡ {{sfrac|2}}∇'''u''' + {{sfrac|2}}(∇'''u''')<sup>T</sup>}} is the rate-of-[[strain tensor]] and {{math|∇ · '''u'''}} is the rate of expansion of the flow. So this decomposition can be explicited as:\n\n:: <math>\\boldsymbol \\sigma = \\lambda (\\nabla\\cdot\\mathbf{u}) \\mathbf I + \\mu \\left(\\nabla\\mathbf{u} + ( \\nabla\\mathbf{u} )^\\mathrm{T}\\right).</math>\n\nSince the [[trace (linear algebra)|trace]] of the rate-of-strain tensor in three dimensions is:\n\n: <math>\\operatorname{tr} (\\boldsymbol \\varepsilon) = \\nabla\\cdot\\mathbf{u}.</math>\n\nThe trace of the stress tensor in three dimensions becomes:\n\n: <math>\\operatorname{tr} (\\boldsymbol \\sigma) = (3 \\lambda + 2 \\mu )\\nabla\\cdot\\mathbf{u}.</math>\n\nSo by alternatively decomposing the stress tensor into '''isotropic''' and '''deviatoric''' parts, as usual in fluid dynamics:<ref>{{cite book |last1=Chorin |first1=Alexandre E. |last2=Marsden |first2=Jerrold E. |date=1993 |title=A Mathematical Introduction to Fluid Mechanics |page=33}}</ref>\n\n: <math>\\boldsymbol \\sigma = \\left(\\lambda + \\tfrac23 \\mu\\right) \\left(\\nabla\\cdot\\mathbf{u}\\right)\\mathbf I + \\mu \\left(\\nabla\\mathbf{u} + \\left( \\nabla\\mathbf{u} \\right)^\\mathrm{T} - \\tfrac23 \\left(\\nabla\\cdot\\mathbf{u}\\right)\\mathbf I\\right)</math>\n\nIntroducing the [[volume viscosity|second viscosity]] {{mvar|ζ}},\n\n: <math> \\zeta \\equiv \\lambda + \\tfrac23 \\mu ,</math>\n\nwe arrive to the linear [[constitutive equation]] in the form usually employed in [[thermal hydraulics]]:<ref name=Batchelor_142_148/>\n\n{{Equation box 1\n|indent=:\n|title='''Linear stress constitutive equation''' ''(expression used for fluids)''\n|equation=<math>\\boldsymbol \\sigma = \\zeta (\\nabla\\cdot\\mathbf{u}) \\mathbf I + \\mu \\left(\\nabla\\mathbf{u} + ( \\nabla\\mathbf{u} )^\\mathrm{T} - \\tfrac23 (\\nabla\\cdot\\mathbf{u})\\mathbf I\\right)</math>\n|cellpadding\n|border\n|border colour = #FF0000\n|background colour = #ECFCF4\n}}\n\nBoth second viscosity {{mvar|ζ}} and dynamic viscosity {{mvar|μ}} need not be constant – in general, they depend on density, on each other (the viscosity is expressed in pressure), and in compressible flows also on temperature. Any equation expliciting one of these [[transport coefficient]] in the [[conservation variable]]s is called an [[equation of state]].<ref name=\"Batchelor 1967 p. 165\"/>\n\nBy computing the divergence of the stress tensor, since the divergence of tensor {{math|∇'''u''' }} is {{math|∇<sup>2</sup>'''u''' }} and the divergence of tensor {{math|(∇'''u''')<sup>T</sup>}} is {{math| ∇(∇ · '''u''')}}, one finally arrives to the compressible (most general) Navier–Stokes momentum equation:<ref>Batchelor (1967) pp. 147 & 154.</ref>\n{{Equation box 1\n|indent=:\n|title='''Navier–Stokes momentum equation''' (''convective form'')\n|equation=<math> \\rho \\left( \\frac{\\partial \\mathbf{u}}{\\partial t} + \\mathbf{u} \\cdot \\nabla \\mathbf{u} \\right) = - \\nabla \\bar{p} + \\mu \\, \\nabla^2 \\mathbf u + \\tfrac13 \\mu \\, \\nabla (\\nabla\\cdot\\mathbf{u}) + \\rho\\mathbf{g} .</math>\n|cellpadding\n|border\n|border colour = #FF0000\n|background colour = #ECFCF4\n}}\nThe above equation can also be written in the form\n{{Equation box 1\n|indent=:\n|title='''Navier–Stokes momentum equation''' (''convective form'')\n|equation=<math> \\rho \\frac{D\\mathbf{u}}{D t} = - \\nabla \\bar{p} + \\mu \\, \\nabla^2 \\mathbf u + \\tfrac13 \\mu \\, \\nabla (\\nabla\\cdot\\mathbf{u}) + \\rho\\mathbf{g} .</math>\n|cellpadding\n|border\n|border colour = #FF0000\n|background colour = #ECFCF4\n}}\nwhere <math>D/Dt</math> is the [[material derivative]]. The left hand side changes in the conservation form of the Navier–Stokes momentum equation:\n{{Equation box 1\n|indent=:\n|title='''Navier–Stokes momentum equation''' (''conservation form'')\n|equation=<math> \\frac {\\partial}{\\partial t} (\\rho\\,\\mathbf{u})\n   + \\nabla \\cdot (\\rho\\,\\mathbf{u} \\otimes \\mathbf{u}) = - \\nabla \\bar{p} + \\mu \\, \\nabla^2 \\mathbf u + \\tfrac13 \\mu \\, \\nabla (\\nabla\\cdot\\mathbf{u}) + \\rho\\mathbf{g} .</math>\n|cellpadding\n|border\n|border colour = #FF0000\n|background colour = #ECFCF4\n}}\nBulk viscosity is assumed to be constant, otherwise it should not be taken out of the last derivative. The effect of the volume viscosity {{mvar|ζ}} is that the mechanical pressure is not equivalent to the thermodynamic [[pressure]]:<ref>Landau & Lifshitz (1987) pp. 44–45, 196</ref>\n\n: <math> \\bar{p} \\equiv p - \\zeta \\, \\nabla \\cdot \\mathbf{u} ,</math>\n\nThis difference is usually neglected, sometimes by explicitly assuming {{math|''ζ'' {{=}} 0}}, but it could have an impact in sound absorption and attenuation and shock waves.<ref>White (2006) p. 67.</ref> The convective acceleration term can also be written as\n\n: <math> \\mathbf u\\cdot\\nabla\\mathbf u = (\\nabla\\times\\mathbf u)\\times\\mathbf u + \\frac{1}{2}\\nabla\\mathbf u^2</math>,\n\nwhere the vector <math>(\\nabla\\times\\mathbf u)\\times\\mathbf u</math> is known as the [[Lamb vector]].\n\nFor the special case of an [[incompressible flow]], the pressure constrains the flow so that the volume of [[fluid element]]s is constant: [[isochoric process|isochoric flow]] resulting in a [[Solenoidal vector field|solenoidal]] velocity field with {{math|∇ · '''u''' {{=}} 0.}}<ref>Batchelor (1967) p. 75.</ref>\n\n==Incompressible flow==\nThe incompressible momentum Navier–Stokes equation results from the following assumptions on the Cauchy stress tensor:<ref name=Batchelor_142_148>Batchelor (1967) pp. 142–148.</ref>\n\n*the stress is '''[[Galilean invariance|Galilean invariant]]''': it does not depend directly on the flow velocity, but only on spatial derivatives of the flow velocity. So the stress variable is the tensor gradient {{math|∇'''u'''}}.\n*the fluid is assumed to be [[isotropic]], as with gases and simple liquids, and consequently {{math|'''τ'''}} is an isotropic tensor; furthermore, since the deviatoric stress tensor can be expressed in terms of the [[dynamic viscosity]] {{mvar|μ}}:\n\n{{Equation box 1\n|indent=::\n|title='''Stokes' stress [[constitutive equation]]''' ''(expression used for incompressible elastic solids)''\n|equation=:<math>\\boldsymbol \\tau = 2 \\mu \\boldsymbol \\varepsilon</math>\n|cellpadding\n|border\n|border colour = #0073CF\n|background colour=#F5FFFA\n}}\n\n:where\n\n::<math>\\boldsymbol{\\varepsilon} = \\frac{1}{2} \\left( \\mathbf{\\nabla u} + \\mathbf{\\nabla u}^\\mathrm{T} \\right)</math>\n\n:is the rate-of-[[strain tensor]]. So this decomposition can be explicited as:<ref name=Batchelor_142_148/>\n\n{{Equation box 1\n|indent=::\n|title='''Stokes's stress constitutive equation''' ''(expression used for incompressible viscous fluids)''\n|equation=:<math>\\boldsymbol \\tau = \\mu \\left(\\nabla\\mathbf{u} +  \\nabla\\mathbf{u} ^\\mathrm{T}\\right)</math>\n|cellpadding\n|border\n|border colour = #0073CF\n|background colour=#F5FFFA\n}}\n\nDynamic viscosity {{mvar|μ}} need not be constant – in incompressible flows it can depend on density and on pressure. Any equation expliciting one of these [[transport coefficient]] in the [[conservative variable]]s is called an [[equation of state]].<ref name=\"Batchelor 1967 p. 165\">Batchelor (1967) p. 165.</ref>\n\nThe divergence of the deviatoric stress is given by:\n\n:<math>\\nabla \\cdot \\boldsymbol \\tau = 2 \\mu \\nabla \\cdot \\boldsymbol \\varepsilon = \\mu \\nabla \\cdot \\left( \\nabla\\mathbf{u} + \\nabla\\mathbf{u} ^\\mathrm{T} \\right) = \\mu \\, \\nabla^2 \\mathbf{u}</math>\n\nbecause <math>\\nabla\\cdot \\mathbf{u}=0</math> for an incompressible fluid.\nIncompressibility rules out density and pressure waves like sound or [[shock wave]]s, so this simplification is not useful if these phenomena are of interest. The incompressible flow assumption typically holds well with all fluids at low [[Mach number]]s (say up to about Mach 0.3), such as for modelling air winds at normal temperatures.<ref name=\"Ach\">See Acheson (1990).</ref> For incompressible (uniform density ρ<sub>0</sub>) flows the following identity holds:\n\n:<math>\\frac 1 {\\rho_0} \\nabla p = \\nabla \\left(\\frac p {\\rho_0} \\right) \\equiv \\nabla w</math>\n\nwhere {{mvar|w}} is the specific (with the sense of ''per unit mass'') [[thermodynamic work]], the internal source term. Then the incompressible Navier–Stokes equations are best visualised by dividing for the density:\n\n{{Equation box 1\n|indent=:\n|title='''[[Incompressible flow|Incompressible]] Navier–Stokes equations''' (''convective form'')\n|equation=<math>\\frac{\\partial \\mathbf{u}}{\\partial t} + (\\mathbf{u} \\cdot \\nabla) \\mathbf{u} - \\nu \\,\\nabla^2 \\mathbf{u} = - \\nabla w + \\mathbf{g}.</math>\n|cellpadding\n|border\n|border colour = #0073CF\n|background colour=#F5FFFA\n}}\n\nwhere {{math|''𝜈'' {{=}} {{sfrac|''μ''|''ρ''<sub>0</sub>}}}} is called the [[kinematic viscosity]].\n{{hidden\n| A laminar flow example |\nVelocity profile (laminar flow):\n\n:<math>u(x) = 0, \\quad u(y) = u, \\quad u(z) = 0</math>\n\nfor the {{mvar|y}}-direction, simplify the Navier–Stokes equation:\n\n:<math>0 = -\\frac{dP}{dx} + \\mu\\left(\\frac{d^2u}{dy^2}\\right)</math>\n\nIntegrate twice to find the velocity profile with boundary conditions {{math|''y'' {{=}} ''h''}}, {{math|''u'' {{=}} 0}}, {{math|''y'' {{=}} −''h''}}, {{math|''u'' {{=}} 0}}:\n\n:<math>u = \\frac{1}{2\\mu}\\frac{dP}{dx} y^2 + Ay + B</math>\n\nFrom this equation, substitute in the two boundary conditions to get two equations:\n\n:<math>\\begin{align} 0 &= \\frac{1}{2 \\mu}\\frac{dP}{dx} h^2 + Ah + B \\\\ 0 &= \\frac{1}{2 \\mu}\\frac{dP}{dx} h^2 - Ah + B \\end{align}</math>\n\nAdd and solve for {{mvar|B}}:\n\n:<math>B = -\\frac{1}{2 \\mu}\\frac{dP}{dx} h^2</math>\n\nSubstitute and solve for {{mvar|A}}:\n\n:<math>A = 0</math>\n\nFinally this gives the velocity profile:\n\n:<math>u = \\frac{1}{2 \\mu}\\frac{dP}{dx} (y^2 - h^2)</math>\n}}\n\nIt is well worth observing the meaning of each term (compare to the [[Cauchy momentum equation]]):\n\n:<math>\n \\overbrace{\n \\underbrace{\\frac{\\partial \\mathbf{u}}{\\partial t}}_{\n \\begin{smallmatrix}\n \\text{Variation}\n \\end{smallmatrix}} +\n \\underbrace{(\\mathbf{u} \\cdot \\nabla) \\mathbf{u}}_{\n \\begin{smallmatrix}\n \\text{Convection}\n \\end{smallmatrix}}}^{\\text{Inertia (per volume)}}\n \\overbrace{-\\underbrace{\\nu \\, \\nabla^2 \\mathbf{u}}_{\\text{Diffusion}}=\n \\underbrace{-\\nabla w}_{\n \\begin{smallmatrix}\n \\text{Internal} \\\\\n \\text{source}\n \\end{smallmatrix}}}^{\\text{Divergence of stress}} +\n \\underbrace{\\mathbf{g}}_{\n \\begin{smallmatrix}\n \\text{External} \\\\\n \\text{source}\n \\end{smallmatrix}}\n .\n</math>\n\nThe higher-order term, namely the [[shear stress]] divergence {{math|∇ · ''τ''}}, has simply reduced to the [[vector laplacian]] term {{math|''μ''∇<sup>2</sup>'''u'''}}.<ref>Batchelor (1967) pp. 21 & 147.</ref> This laplacian term can be interpreted as the difference between the velocity at a point and the mean velocity in a small surrounding volume. This implies that – for a Newtonian fluid – viscosity operates as a ''diffusion of momentum'', in much the same way as the [[heat conduction]]. In fact neglecting the convection term, incompressible Navier–Stokes equations lead to a vector [[diffusion equation]] (namely [[Stokes flow|Stokes equations]]), but in general the convection term is present, so incompressible Navier–Stokes equations belong to the class of [[convection-diffusion equation]]s.\n\nIn the usual case of an external field being a [[conservative field]]:\n\n:<math> \\mathbf g = - \\nabla \\phi </math>\n\nby defining the [[hydraulic head]]:\n\n:<math>h \\equiv w + \\phi </math>\n\none can finally condense the whole source in one term, arriving to the incompressible Navier–Stokes equation with conservative external field:\n\n:<math>\\frac{\\partial \\mathbf{u}}{\\partial t} + (\\mathbf{u} \\cdot \\nabla) \\mathbf{u} - \\nu \\, \\nabla^2 \\mathbf{u} = - \\nabla h.</math>\n\nThe incompressible Navier–Stokes equations with conservative external field is the '''fundamental equation of [[hydraulics]]'''. The domain for these equations is commonly a 3 or less [[Euclidean space]], for which an [[orthogonal coordinate]] reference frame is usually set to explicit the system of scalar partial differential equations to be solved. In 3D orthogonal coordinate systems are 3: [[Cartesian coordinate system|Cartesian]], [[Cylindrical coordinate system|cylindrical]], and [[Spherical coordinate system|spherical]]. Expressing the Navier–Stokes vector equation in Cartesian coordinates is quite straightforward and not much influenced by the number of dimensions of the euclidean space employed, and this is the case also for the first-order terms (like the variation and convection ones) also in non-cartesian orthogonal coordinate systems. But for the higher order terms (the two coming from the divergence of the deviatoric stress that distinguish Navier–Stokes equations from Euler equations) some [[tensor calculus]] is required for deducing an expression in non-cartesian orthogonal coordinate systems.\n\nThe incompressible Navier–Stokes equation is composite, the sum of two orthogonal equations,\n:<math>\\begin{align}\n\\frac{\\partial\\mathbf{u}}{\\partial t} &= \\Pi^S\\left(-(\\mathbf{u}\\cdot\\nabla)\\mathbf{u} + \\nu\\,\\nabla^2\\mathbf{u}\\right) + \\mathbf{f}^S \\\\\n\\rho^{-1}\\,\\nabla p &= \\Pi^I\\left(-(\\mathbf{u}\\cdot\\nabla)\\mathbf{u} + \\nu\\,\\nabla^2\\mathbf{u}\\right) + \\mathbf{f}^I\n\\end{align}</math>\n\nwhere {{math|Π<sup>''S''</sup>}} and {{math|Π<sup>''I''</sup>}} are solenoidal and irrotational projection operators satisfying {{math|Π<sup>''S''</sup> + Π<sup>''I''</sup> {{=}} 1}} and {{math|'''f'''<sup>''S''</sup>}} and {{math|'''f'''<sup>''I''</sup>}} are the non-conservative and conservative parts of the body force. This result follows from the [[Helmholtz decomposition|Helmholtz Theorem]] (also known as the fundamental theorem of vector calculus). The first equation is a pressureless governing equation for the velocity, while the second equation for the pressure is a functional of the velocity and is related to the pressure Poisson equation.\n\nThe explicit functional form of the projection operator in 3D is found from the Helmholtz Theorem:\n\n:<math>\\Pi^S\\,\\mathbf{F}(\\mathbf{r}) = \\frac{1}{4\\pi}\\nabla\\times\\int \\frac{\\nabla^\\prime\\times\\mathbf{F}(\\mathbf{r}')}{|\\mathbf{r}-\\mathbf{r}'|} d V', \\quad \\Pi^I = 1-\\Pi^S</math>\n\nwith a similar structure in 2D. Thus the governing equation is an [[integro-differential equation]] similar to [[Coulomb law|Coulomb]] and [[Biot-Savart law]], not convenient for numerical computation.\n\nAn equivalent weak or variational form of the equation, proved to produce the same velocity solution as the Navier–Stokes equation,<ref>\n{{citation\n | last = Temam | first = Roger\n | author-link = Roger Temam\n | title = Navier–Stokes Equations, Theory and Numerical Analysis\n | pages = 107–112\n | year = 2001 | publisher = AMS Chelsea\n}}</ref> is given by,\n:<math>\\left(\\mathbf{w},\\frac{\\partial\\mathbf{u}}{\\partial t}\\right) = -\\left(\\mathbf{w}, \\left(\\mathbf{u}\\cdot\\nabla\\right)\\mathbf{u}\\right) - \\nu \\left(\\nabla\\mathbf{w}: \\nabla\\mathbf{u}\\right) + \\left(\\mathbf{w}, \\mathbf{f}^S\\right)</math>\n\nfor divergence-free test functions {{math|'''w'''}} satisfying appropriate boundary conditions. Here, the projections are accomplished by the orthogonality of the solenoidal and irrotational function spaces. The discrete form of this is eminently suited to finite element computation of divergence-free flow, as we shall see in the next section. There one will be able to address the question \"How does one specify pressure-driven (Poiseuille) problems with a pressureless governing equation?\".\n\nThe absence of pressure forces from the governing velocity equation demonstrates that the equation is not a dynamic one, but rather a kinematic equation where the divergence-free condition serves the role of a conservation equation. This all would seem to refute the frequent statements that the incompressible pressure enforces the divergence-free condition.\n\n===Discrete velocity===\nWith partitioning of the problem domain and defining [[basis function]]s on the partitioned domain, the discrete form of the governing equation is,\n:<math>\\left(\\mathbf{w}_i, \\frac{\\partial\\mathbf{u}_j}{\\partial t}\\right) = -\\left(\\mathbf{w}_i, (\\mathbf{u}\\cdot\\nabla)\\mathbf{u}_j\\right) - \\nu(\\nabla\\mathbf{w}_i: \\nabla\\mathbf{u}_j) + \\left(\\mathbf{w}_i, \\mathbf{f}^S\\right).</math>\n\nIt is desirable to choose basis functions which reflect the essential feature of incompressible flow – the elements must be divergence-free. While the velocity is the variable of interest, the existence of the stream function or vector potential is necessary by the Helmholtz Theorem. Further, to determine fluid flow in the absence of a pressure gradient, one can specify the difference of stream function values across a 2D channel, or the line integral of the tangential component of the vector potential around the channel in 3D, the flow being given by [[Stokes' Theorem]]. Discussion will be restricted to 2D in the following.\n\nWe further restrict discussion to continuous Hermite finite elements which have at least first-derivative degrees-of-freedom. With this, one can draw a large number of candidate triangular and rectangular elements from the [[Bending of plates|plate-bending]] literature. These elements have derivatives as components of the gradient. In 2D, the gradient and curl of a scalar are clearly orthogonal, given by the expressions,\n:<math>\\begin{align}\n\\nabla\\phi &= \\left(\\frac{\\partial \\phi}{\\partial x},\\,\\frac{\\partial \\phi}{\\partial y}\\right)^\\mathrm{T}, \\\\\n\\nabla\\times\\phi &= \\left(\\frac{\\partial \\phi}{\\partial y},\\,-\\frac{\\partial \\phi}{\\partial x}\\right)^\\mathrm{T}.\n\\end{align}</math>\n\nAdopting continuous plate-bending elements, interchanging the derivative degrees-of-freedom and changing the sign of the appropriate one gives many families of stream function elements.\n\nTaking the curl of the scalar stream function elements gives divergence-free velocity elements.<ref>\n{{Citation\n | last = Holdeman | first = J. T.\n | author-link = \n | title = A Hermite finite element method for incompressible fluid flow\n | journal = Int. J. Numer. Meth. Fluids\n | volume = 64 | pages = 376–408 | year = 2010\n | doi = 10.1002/fld.2154\n | issue = 4 |bibcode = 2010IJNMF..64..376H\n}}</ref><ref>\n{{Citation\n | last = Holdeman | first = J. T.\n | author-link = \n | last2 = Kim | first2 = J. W.\n | title = Computation of incompressible thermal flows using Hermite finite elements\n | journal = Comput. Meth. Appl. Mech. Eng.\n | volume = 199 | pages = 3297–3304 | year = 2010\n | authorlink2 =\n | doi = 10.1016/j.cma.2010.06.036\n | issue = 49–52 |bibcode = 2010CMAME.199.3297H\n}}</ref> The requirement that the stream function elements be continuous assures that the normal component of the velocity is continuous across element interfaces, all that is necessary for vanishing divergence on these interfaces.\n\nBoundary conditions are simple to apply. The stream function is constant on no-flow surfaces, with no-slip velocity conditions on surfaces.\nStream function differences across open channels determine the flow. No boundary conditions are necessary on open boundaries, though consistent values may be used with some problems. These are all Dirichlet conditions.\n\nThe algebraic equations to be solved are simple to set up, but of course are [[#Nonlinearity|non-linear]], requiring iteration of the linearized equations.\n\nSimilar considerations apply to three-dimensions, but extension from 2D is not immediate because of the vector nature of the potential, and there exists no simple relation between the gradient and the curl as was the case in 2D.\n\n===Pressure recovery===\nRecovering pressure from the velocity field is easy. The discrete weak equation for the pressure gradient is,\n:<math>(\\mathbf{g}_i, \\nabla p) = -\\left(\\mathbf{g}_i, \\left(\\mathbf{u}\\cdot\\nabla\\right)\\mathbf{u}_j\\right) - \\nu\\left(\\nabla\\mathbf{g}_i: \\nabla\\mathbf{u}_j\\right) + \\left(\\mathbf{g}_i, \\mathbf{f}^I\\right)</math>\n\nwhere the test/weight functions are irrotational. Any conforming scalar finite element may be used. However, the pressure gradient field may also be of interest. In this case one can use scalar Hermite elements for the pressure. For the test/weight functions {{math|'''g'''<sub>''i''</sub>}} one would choose the irrotational vector elements obtained from the gradient of the pressure element.\n\n==Non-inertial frame of reference==\n\nThe rotating frame of reference introduces some interesting pseudo-forces into the equations through the [[material derivative]] term. Consider a stationary inertial frame of reference K, and a non-inertial frame of reference K', which is translating with velocity <math>\\mathbf U(t)</math> and rotating with angular velocity <math>\\mathbf\\Omega(t)</math> with respect to the stationary frame. The Navier–Stokes equation observed from the non-inertial frame then becomes\n\n{{Equation box 1\n|indent=:\n|title='''Navier–Stokes momentum equation in non-inertial frame''' \n|equation=<math> \\rho \\frac{D \\mathbf{u}}{D t}  = - \\nabla \\bar{p} + \\mu \\, \\nabla^2 \\mathbf u + \\tfrac13 \\mu \\, \\nabla (\\nabla\\cdot\\mathbf{u}) + \\rho\\mathbf{g}  - \\rho \\left(2\\mathbf\\Omega\\times\\mathbf u + \\mathbf\\Omega\\times(\\mathbf\\Omega\\times\\mathbf x)+ \\frac{d\\mathbf U}{dt} + \\frac{d\\mathbf \\Omega}{dt}\\times\\mathbf x\\right).</math>\n|cellpadding\n|border\n|border colour = #FF0000\n|background colour = #ECFCF4\n}}\n\nHere <math>\\mathbf x</math> and <math>\\mathbf u</math> are measured in the non-inertial frame. The first term in the parenthesis represents [[Coriolis acceleration]], the second term is due to [[centripetal force|centripetal acceleration]], the third is due to the linear acceleration of K' with respect to K and the fourth term is due to the angular acceleration of K' with respect to K.\n\n==Other equations==\nThe Navier–Stokes equations are strictly a statement of the balance of momentum. To fully describe fluid flow, more information is needed, how much depending on the assumptions made. This additional information may include boundary data ([[no-slip condition|no-slip]], [[capillary surface]], etc.), conservation of mass, balance of energy, and/or an [[equation of state]].\n\n===Continuity equation for incompressible fluid===\n{{main|Continuity equation}}\n\nRegardless of the flow assumptions, a statement of the [[conservation of mass]] is generally necessary. This is achieved through the mass [[continuity equation]], given in its most general form as:\n:<math>\\frac{\\partial \\rho}{\\partial t} + \\nabla \\cdot (\\rho \\mathbf{u}) = 0</math>\n\nor, using the [[substantive derivative]]:\n:<math>\\frac{D\\rho}{Dt} + \\rho (\\nabla \\cdot \\mathbf{u}) = 0.</math>\n\nIn the example below we can assume to have a [[Newtonian fluid]] as well as having {{mvar|ρ}} and {{mvar|μ}} both be constant.\n\nRecall that mass continuity is simply the summation of the rate of mass in and the rate of mass out.\n: rate of mass accumulated = rate of mass in − rate of mass out\n\n:<math>\\begin{align}\n\\Delta x \\, \\Delta \\, y \\Delta z \\frac{\\partial \\rho}{\\partial t} &= \\Delta y \\, \\Delta z \\left (\\rho U_x|_x - \\rho U_x|_{x + \\Delta x} \\right) + \\Delta x \\Delta z \\left(\\rho U_y|_y - \\rho U_y|_{y + \\Delta y} \\right) + \\Delta \\, x\\Delta y \\left (\\rho U_z|_z - \\rho U_z|_{z + \\Delta z} \\right ) \\\\[8pt]\n\\Rightarrow \\frac{\\partial \\rho}{\\partial t} &= \\frac{\\rho U_x|_x - \\rho U_x|_{x + \\Delta x}}{\\Delta x} + \\frac{\\rho U_y|_y- \\rho U_y|_{y + \\Delta y}}{\\Delta y} + \\frac{\\rho U_z|_z - \\rho U_z|_{z + \\Delta z}}{\\Delta z} \\\\[6pt]\n&= \\rho \\left (\\frac{U_x|_x - U_x|_{x + \\Delta x}}{\\Delta x} + \\frac{U_y|_y - U_y|_{y + \\Delta y}}{\\Delta y} + \\frac{U_z|_z - U_z|_{z + \\Delta z}}{\\Delta z} \\right ) \\\\[6pt]\n&= -\\rho \\left (\\frac{\\partial U_x}{\\partial x} + \\frac{\\partial U_y}{\\partial y} + \\frac{\\partial U_z}{\\partial z} \\right)\n\\end{align}</math>\n\nSince there is no change in density {{mvar|ρ}} over time, {{math|{{sfrac|∂''ρ''|∂''t''}} {{=}} 0}}, we have:\n\n:<math> 0 = -\\rho \\left (\\frac{\\partial U_x}{\\partial x} + \\frac{\\partial U_y}{\\partial y} + \\frac{\\partial U_z}{\\partial z} \\right)</math>\n\nRecall that {{mvar|ρ}} is a constant thus proving the divergence theorem above.\n\n==Stream function for 2D equations==\nTaking the [[Curl (mathematics)|curl]] of the Navier–Stokes equation results in the elimination of pressure. This is especially easy to see if 2D Cartesian flow is assumed (like in the degenerate 3D case with {{math|''u<sub>z</sub>'' {{=}} 0}} and no dependence of anything on {{mvar|z}}), where the equations reduce to:\n\n:<math>\\begin{align}\n \\rho \\left(\\frac{\\partial u_x}{\\partial t} + u_x \\frac{\\partial u_x}{\\partial x} + u_y \\frac{\\partial u_x}{\\partial y}\\right)\n &= -\\frac{\\partial p}{\\partial x} + \\mu \\left(\\frac{\\partial^2 u_x}{\\partial x^2} + \\frac{\\partial^2 u_x}{\\partial y^2}\\right) + \\rho g_x \\\\\n \\rho \\left(\\frac{\\partial u_y}{\\partial t} + u_x \\frac{\\partial u_y}{\\partial x} + u_y \\frac{\\partial u_y}{\\partial y}\\right)\n &= -\\frac{\\partial p}{\\partial y} + \\mu \\left(\\frac{\\partial^2 u_y}{\\partial x^2} + \\frac{\\partial^2 u_y}{\\partial y^2}\\right) + \\rho g_y.\n\\end{align}</math>\n\nDifferentiating the first with respect to {{mvar|y}}, the second with respect to {{mvar|x}} and subtracting the resulting equations will eliminate pressure and any [[conservative force]]. Defining the [[stream function]] {{mvar|ψ}} through\n\n:<math>u_x = \\frac{\\partial \\psi}{\\partial y}; \\quad u_y = -\\frac{\\partial \\psi}{\\partial x}</math>\n\nresults in mass continuity being unconditionally satisfied (given the stream function is continuous), and then incompressible Newtonian 2D momentum and mass conservation condense into one equation:\n\n:<math>\\frac{\\partial}{\\partial t}\\left(\\nabla^2 \\psi\\right) + \\frac{\\partial \\psi}{\\partial y} \\frac{\\partial}{\\partial x}\\left(\\nabla^2 \\psi\\right) - \\frac{\\partial \\psi}{\\partial x} \\frac{\\partial}{\\partial y}\\left(\\nabla^2 \\psi\\right) = \\nu \\nabla^4 \\psi</math>\n\nwhere {{math|∇<sup>4</sup>}} is the 2D [[biharmonic operator]] and {{mvar|ν}} is the [[kinematic viscosity]], {{math|''ν'' {{=}} {{sfrac|''μ''|''ρ''}}}}. We can also express this compactly using the [[Jacobian matrix and determinant|Jacobian determinant]]:\n\n:<math>\\frac{\\partial}{\\partial t}\\left(\\nabla^2 \\psi\\right) + \\frac{\\partial\\left(\\psi, \\nabla^2\\psi \\right)}{\\partial(y,x)} = \\nu \\nabla^4 \\psi.</math>\n\nThis single equation together with appropriate boundary conditions describes 2D fluid flow, taking only kinematic viscosity as a parameter. Note that the equation for [[creeping flow]] results when the left side is assumed zero.\n\nIn [[axisymmetric]] flow another stream function formulation, called the [[Stokes stream function]], can be used to describe the velocity components of an incompressible flow with one [[scalar (mathematics)|scalar]] function.\n\nThe incompressible Navier–Stokes equation is a [[differential algebraic equation]], having the inconvenient feature that there is no explicit mechanism for advancing the pressure in time. Consequently, much effort has been expended to eliminate the pressure from all or part of the computational process. The stream function formulation eliminates the pressure but only in two dimensions and at the expense of introducing higher derivatives and elimination of the velocity, which is the primary variable of interest.\n\n==Properties==\n===Nonlinearity===\n\nThe Navier–Stokes equations are [[nonlinear]] [[partial differential equations]] in the general case and so remain in almost every real situation.<ref>Fluid Mechanics (Schaum's Series), M. Potter, D.C. Wiggert, Schaum's Outlines, McGraw-Hill (USA), 2008, {{isbn|978-0-07-148781-8}}</ref><ref>Vectors, Tensors, and the basic Equations of Fluid Mechanics, R. Aris, Dover Publications, 1989, {{isbn|0-486-66110-5}}</ref> In some cases, such as one-dimensional flow and [[Stokes flow]] (or creeping flow), the equations can be simplified to linear equations. The nonlinearity makes most problems difficult or impossible to solve and is the main contributor to the [[turbulence]] that the equations model.\n\nThe nonlinearity is due to [[convective]] acceleration, which is an acceleration associated with the change in velocity over position. Hence, any convective flow, whether turbulent or not, will involve nonlinearity. An example of convective but [[laminar flow|laminar]] (nonturbulent) flow would be the passage of a viscous fluid (for example, oil) through a small converging [[nozzle]]. Such flows, whether exactly solvable or not, can often be thoroughly studied and understood.<ref>McGraw Hill Encyclopaedia of Physics (2nd Edition), C.B. Parker, 1994, {{isbn|0-07-051400-3}}</ref>\n\n===Turbulence===\n\n[[Turbulence]] is the time-dependent [[Chaos theory|chaotic]] behavior seen in many fluid flows. It is generally believed that it is due to the [[inertia]] of the fluid as a whole: the culmination of time-dependent and convective acceleration; hence flows where inertial effects are small tend to be laminar (the [[Reynolds number]] quantifies how much the flow is affected by inertia). It is believed, though not known with certainty, that the Navier–Stokes equations describe turbulence properly.<ref>Encyclopaedia of Physics (2nd Edition), R.G. Lerner, G.L. Trigg, VHC publishers, 1991, ISBN (Verlagsgesellschaft) 3-527-26954-1, ISBN (VHC Inc.) 0-89573-752-3</ref>\n\nThe numerical solution of the Navier–Stokes equations for turbulent flow is extremely difficult, and due to the significantly different mixing-length scales that are involved in turbulent flow, the stable solution of this requires such a fine mesh resolution that the computational time becomes significantly infeasible for calculation or [[direct numerical simulation]]. Attempts to solve turbulent flow using a laminar solver typically result in a time-unsteady solution, which fails to converge appropriately. To counter this, time-averaged equations such as the [[Reynolds-averaged Navier–Stokes equations]] (RANS), supplemented with turbulence models, are used in practical [[computational fluid dynamics]] (CFD) applications when modeling turbulent flows. Some models include the [[Spalart–Allmaras turbulence model|Spalart–Allmaras]], [[k-omega turbulence model|{{mvar|k}}–{{mvar|ω}}]], [[turbulence kinetic energy|{{mvar|k}}–{{mvar|ε}}]], and SST models, which add a variety of additional equations to bring closure to the RANS equations. [[Large eddy simulation]] (LES) can also be used to solve these equations numerically. This approach is computationally more expensive—in time and in computer memory—than RANS, but produces better results because it explicitly resolves the larger turbulent scales.\n\n===Applicability===\n{{further|Discretization of Navier–Stokes equations}}\nTogether with supplemental equations (for example, conservation of mass) and well formulated boundary conditions, the Navier–Stokes equations seem to model fluid motion accurately; even turbulent flows seem (on average) to agree with real world observations.\n\nThe Navier–Stokes equations assume that the fluid being studied is a [[Continuum mechanics|continuum]] (it is infinitely divisible and not composed of particles such as atoms or molecules), and is not moving at [[Special relativity#Relativistic mechanics|relativistic velocities]]. At very small scales or under extreme conditions, real fluids made out of discrete molecules will produce results different from the continuous fluids modeled by the Navier–Stokes equations. For example, [[capillarity]] of internal layers in fluids appears for flow with high gradients.<ref>{{Citation\n| last    = Gorban\n| first   = A.N.\n| last2   = Karlin\n| first2  = I. V.\n| year     = 2016\n| title    = Beyond Navier–Stokes equations: capillarity of ideal gas\n| type    = Review article\n| journal = Contemporary Physics\n| volume   = 58\n| issue   = 1\n| pages   = 70–90\n| pmid =\n| pmc  =\n| doi = 10.1080/00107514.2016.1256123 \n| url = https://www.researchgate.net/publication/310825466 \n| arxiv= 1702.00831\n| bibcode= 2017ConPh..58...70G}}</ref>  For large [[Knudsen number]] of the problem, the [[Boltzmann equation]] may be a suitable replacement.<ref>{{Citation\n| last    = Cercignani\n| first   = C.\n| year     = 2002\n| title    = Handbook of mathematical fluid dynamics \n| chapter  = The Boltzmann equation and fluid dynamics \n| volume  = 1\n| publisher = North-Holland\n| place    = Amsterdam\n| pages = 1–70\n| editor-last   = Friedlander\n| editor-first  = S.\n| editor2-last  = Serre\n| editor2-first = D.\n| isbn = 978-0444503305\n| bibcode =\n| doi =\n| accessdate  =\n}};</ref> \nFailing that, one may  have to resort to [[molecular dynamics]] or various hybrid methods.<ref>{{Citation\n| last    = Nie\n| first   = X.B.\n| last2   = Chen\n| first2  = S.Y.\n| last3   = Robbins\n| first3  = M.O.\n| year     = 2004\n| title    =  A continuum and molecular dynamics hybrid method for micro-and nano-fluid flow\n| type    = Research article\n| journal = Journal of Fluid Mechanics\n| volume  = 500\n| issue   =  \n| pages = 55–64 \n| pmid =\n| pmc  =\n| doi = 10.1017/S0022112003007225\n| url = https://www.cambridge.org/core/journals/journal-of-fluid-mechanics/article/a-continuum-and-molecular-dynamics-hybrid-method-for-micro-and-nano-fluid-flow/BE0D4513A0F90F844CD21D64F6D3F9EF\n| bibcode= 2004JFM...500...55N\n}}</ref>\n\nAnother limitation is simply the complicated nature of the equations. Time-tested formulations exist for common fluid families, but the application of the Navier–Stokes equations to less common families tends to result in very complicated formulations and often to open research problems. For this reason, these equations are usually rewritten for [[Newtonian fluid]]s where the viscosity model is [[linear]]; truly general models for the flow of other kinds of fluids (such as blood) do not exist.<ref>{{Citation\n| last    = Öttinger \n| first   = H.C.\n| year     = 2012\n| title    = Stochastic processes in polymeric fluids\n| publisher = Springer Science & Business Media\n| place    = Berlin, Heidelberg\n| isbn = 9783540583530\n| bibcode =\n| doi = 10.1007/9783642582905\n| doi-broken-date = 2019-05-25 \n}}</ref>\n\n==Application to specific problems==\nThe Navier–Stokes equations, even when written explicitly for specific fluids, are rather generic in nature and their proper application to specific problems can be very diverse. This is partly because there is an enormous variety of problems that may be modeled, ranging from as simple as the distribution of static pressure to as complicated as [[multiphase flow]] driven by [[surface tension]].\n\nGenerally, application to specific problems begins with some flow assumptions and initial/boundary condition formulation, this may be followed by [[Scale analysis (mathematics)|scale analysis]] to further simplify the problem.\n\n[[Image:NSConvection vectorial.svg|thumb|400px|Visualization of '''(a)''' parallel flow and '''(b)''' radial flow.]]\n\n===Parallel flow===\nAssume steady, parallel, one dimensional, non-convective pressure-driven flow between parallel plates, the resulting scaled (dimensionless) [[boundary value problem]] is:\n:<math>\\frac{d^2 u}{d y^2} = -1; \\quad u(0) = u(1) = 0.</math>\n\nThe boundary condition is the [[no slip condition]]. This problem is easily solved for the flow field:\n:<math>u(y) = \\frac{y - y^2}{2}.</math>\n\nFrom this point onward more quantities of interest can be easily obtained, such as viscous drag force or net flow rate.\n\n===Radial flow===\nDifficulties may arise when the problem becomes slightly more complicated. A seemingly modest twist on the parallel flow above would be the ''radial'' flow between parallel plates; this involves convection and thus non-linearity. The velocity field may be represented by a function {{math|''f''(''z'')}} that must satisfy:\n:<math>\\frac{d^2 f}{d z^2} + R f^2 = -1; \\quad f(-1) = f(1) = 0.</math>\n\nThis [[ordinary differential equation]] is what is obtained when the Navier–Stokes equations are written and the flow assumptions applied (additionally, the pressure gradient is solved for). The [[nonlinear]] term makes this a very difficult problem to solve analytically (a lengthy [[Implicit function|implicit]] solution may be found which involves [[elliptic integrals]] and [[Cubic formula|roots of cubic polynomials]]). Issues with the actual existence of solutions arise for {{math|''R'' > 1.41}} (approximately; this is not [[square root of 2|{{sqrt|2}}]]), the parameter R being the Reynolds number with appropriately chosen scales.<ref name=\"TM Shah\">{{Cite journal|last=Shah |first=Tasneem Mohammad|title=Analysis of the multigrid method|journal=NASA Sti/Recon Technical Report N|volume=91|pages=23418|bibcode=1989STIN...9123418S|year=1972}}</ref> This is an example of flow assumptions losing their applicability, and an example of the difficulty in \"high\" Reynolds number flows.<ref name=\"TM Shah\"/>\n\n===Convection===\nA type of natural convection which can be described by the Navier–Stokes equation is the [[Rayleigh–Bénard convection]]. It is one of the most commonly studied convection phenomena because of its analytical and experimental accessibility.\n\n==Exact solutions of the Navier–Stokes equations==\nSome exact solutions to the Navier–Stokes equations exist. Examples of degenerate cases — with the non-linear terms in the Navier–Stokes equations equal to zero — are [[Hagen-Poiseuille equation|Poiseuille flow]], [[Couette flow]] and the oscillatory [[Stokes boundary layer]]. But also more interesting examples, solutions to the full non-linear equations, exist such as [[Jeffery–Hamel flow]], [[Von Kármán swirling flow]], [[Stagnation point flow]], [[Landau–Squire jet]], [[Taylor–Green vortex]].<ref>\n{{citation\n| journal=Annual Review of Fluid Mechanics\n| volume=23\n| pages=159–177\n| year=1991\n| doi=10.1146/annurev.fl.23.010191.001111\n| title=Exact solutions of the steady-state Navier–Stokes equations\n| first=C. Y.\n| last=Wang\n|bibcode = 1991AnRFM..23..159W\n}}</ref><ref>\nLandau & Lifshitz (1987) pp. 75–88.\n</ref><ref>\n{{citation\n | last1=Ethier\n | first1=C. R.\n | last2=Steinman\n | first2=D. A.\n | title = Exact fully 3D Navier–Stokes solutions for benchmarking\n | journal=International Journal for Numerical Methods in Fluids\n | year=1994\n | volume=19\n | issue=5\n | pages=369–375\n | doi=10.1002/fld.1650190502\n |bibcode = 1994IJNMF..19..369E\n}}</ref>\nNote that the existence of these exact solutions does not imply they are stable: turbulence may develop at higher Reynolds numbers.\n\nUnder additional assumptions, the component parts can be separated.<ref>[http://www.claudino.webs.com/Navier%20Stokes%20Equations.pps]</ref>\n\n{{hidden\n|A two dimensional example\n|For example, in the case of an unbounded planar domain with '''two-dimensional''' — incompressible and stationary — flow in [[polar coordinates]] {{math|(''r'',''φ'')}}, the velocity components {{math|(''u<sub>r</sub>'',''u<sub>φ</sub>'')}} and pressure {{mvar|p}} are:<ref>{{citation\n| first=O. A.\n| last= Ladyzhenskaya\n| year=1969\n| title=The Mathematical Theory of viscous Incompressible Flow\n| edition=2nd\n| page=preface, xi\n}}</ref>\n\n:<math>\\begin{align}\nu_r &= \\frac{A}{r}, \\\\\nu_\\phi &= B\\left(\\frac{1}{r} - r^{\\frac{A}{\\nu} + 1}\\right), \\\\\np &= -\\frac{A^2 + B^2}{2r^2} - \\frac{2B^2 \\nu r^\\frac{A}{\\nu}}{A} + \\frac{B^2 r^\\left(\\frac{2A}{\\nu} + 2\\right)}{\\frac{2A}{\\nu} + 2}\n\\end{align}</math>\n\nwhere {{mvar|A}} and {{mvar|B}} are arbitrary constants. This solution is valid in the domain {{math|''r'' ≥ 1}} and for {{math|''A'' < −2''ν''}}.\n\nIn Cartesian coordinates, when the viscosity is zero ({{math|''ν'' {{=}} 0}}), this is:\n:<math>\\begin{align}\n\\mathbf{v}(x,y) &= \\frac{1}{x^2 + y^2}\\begin{pmatrix} Ax + By \\\\ Ay - Bx \\end{pmatrix}, \\\\\np(x,y) &= -\\frac{A^2 + B^2}{2\\left(x^2 + y^2\\right)} \\end{align}</math>\n\n|style = border: 1px solid lightgray; width: 90%;\n|headerstyle = text-align:left\n}}\n\n{{hidden\n|A three-dimensional example\n|For example, in the case of an unbounded Euclidean domain with '''three-dimensional''' — incompressible, stationary and with zero viscosity ({{math|''ν'' {{=}} 0}}) — radial flow in [[Cartesian coordinates]] {{math|(''x'',''y'',''z'')}}, the velocity vector {{math|'''v'''}} and pressure {{mvar|p}} are:{{citation needed|date=January 2014}}\n\n:<math>\\begin{align}\n\\mathbf{v}(x, y, z) &= \\frac{A}{x^2 + y^2 + z^2}\\begin{pmatrix} x \\\\ y\\\\ z \\end{pmatrix}, \\\\\np(x, y, z) &= -\\frac{A^2}{2\\left(x^2 + y^2 + z^2\\right)}. \\end{align}</math>\n\nThere is a singularity at <math>x = y = z = 0</math>.\n\n|style = border: 1px solid lightgray; width: 90%;\n|headerstyle = text-align:left\n}}\n\n===A three-dimensional steady-state vortex solution===\n[[Image:Hopfkeyrings.jpg|right|250px|thumb|Some of the flow lines along a [[Hopf fibration]].]]\nA steady-state example with no singularities comes from considering the flow along the lines of a [[Hopf fibration]]. Let {{mvar|r}} be a constant radius of the inner coil. One set of solutions is given by:<ref>{{citation\n| url= http://www.jetp.ac.ru/cgi-bin/dn/e_055_01_0069.pdf\n| year=1982\n| title=Topological solitons in magnetohydrodynamics\n| first=A. M.\n| last= Kamchatno\n}}</ref>\n:<math>\\begin{align}\n\\rho(x, y, z) &= \\frac{3B}{r^2 + x^2 + y^2 + z^2} \\\\\np(x, y, z) &= \\frac{-A^2B}{\\left(r^2 + x^2 + y^2 + z^2\\right)^3} \\\\\n\\mathbf{u}(x, y, z) &= \\frac{A}{\\left(r^2 + x^2 + y^2 + z^2\\right)^2}\\begin{pmatrix} 2(-ry + xz) \\\\ 2(rx + yz) \\\\ r^2 - x^2 - y^2 + z^2 \\end{pmatrix} \\\\\ng &= 0 \\\\\n\\mu &= 0\n\\end{align}</math>\n\nfor arbitrary constants {{mvar|A}} and {{mvar|B}}. This is a solution in a non-viscous gas (compressible fluid) whose density, velocities and pressure goes to zero far from the origin. (Note this is not a solution to the Clay Millennium problem because that refers to incompressible fluids where {{mvar|ρ}} is a constant, neither does it deal with the uniqueness of the Navier–Stokes equations with respect to any [[turbulence]] properties.) It is also worth pointing out that the components of the velocity vector are exactly those from the [[Pythagorean quadruple]] parametrization. Other choices of density and pressure are possible with the same velocity field:\n\n{{hidden\n|Other choices of density and pressure\n|Another choice of pressure and density with the same velocity vector above is one where the pressure and density fall to zero at the origin and are highest in the central loop at {{math|''z'' {{=}} 0}}, {{math|''x''<sup>2</sup> + ''y''<sup>2</sup> {{=}} ''r''<sup>2</sup>}}:\n:<math>\\begin{align}\n\\rho(x, y, z) &= \\frac{20B\\left(x^2 + y^2\\right)}{\\left(r^2 + x^2 + y^2 + z^2\\right)^3} \\\\\np(x, y, z) &= \\frac{-A^2B}{\\left(r^2 + x^2 + y^2 + z^2\\right)^4} + \\frac{-4A^2B\\left(x^2 + y^2\\right)}{\\left(r^2 + x^2 + y^2 + z^2\\right)^5}.\n\\end{align}</math>\n\nIn fact in general there are simple solutions for any polynomial function {{mvar|f}} where the density is:\n:<math>\\rho(x, y, z) = \\frac{1}{r^2 + x^2 + y^2 + z^2} f\\left(\\frac{x^2 + y^2}{\\left(r^2 + x^2 + y^2 + z^2\\right)^2}\\right).</math>\n\n|style = border: 1px solid lightgray; width: 90%;\n|headerstyle = text-align:left\n}}\n\n==Wyld diagrams==<!-- [[Wyld diagrams]] redirects here-->\n'''Wyld diagrams''' are bookkeeping [[Graph (discrete mathematics)|graphs]] that correspond to the Navier–Stokes equations via a [[perturbation theory|perturbation expansion]] of the fundamental [[continuum mechanics]]. Similar to the [[Feynman diagram]]s in [[quantum field theory]], these diagrams are an extension of [[Mstislav Keldysh|Keldysh]]'s technique for nonequilibrium processes in fluid dynamics. In other words, these diagrams assign [[graph theory|graphs]] to the (often) [[turbulence|turbulent]] phenomena in turbulent fluids by allowing [[correlation function|correlated]] and interacting fluid particles to obey [[stochastic processes]] associated to [[pseudo-random]] [[function (mathematics)|functions]] in [[probability distribution]]s.<ref>{{citation | title=Renormalization methods: A guide for beginners | first=W. D. | last=McComb | publisher=Oxford University Press | year=2008 | isbn=978-0-19-923652-7 | pages = 121–128}}</ref>\n\n==Representations in 3D==\n{{hidden\n|Cartesian coordinates\n|From the general form of the Navier–Stokes, with the velocity vector expanded as {{math|'''u''' {{=}} (''u<sub>x</sub>'',''u<sub>y</sub>'',''u<sub>z</sub>'')}}, sometimes respectively named {{mvar|u}}, {{mvar|v}}, {{mvar|w}}, we may write the vector equation explicitly,\n\n:<math>\\begin{align}\n x&:\\ &\\rho \\left(\\frac{\\partial u_x}{\\partial t} + u_x \\frac{\\partial u_x}{\\partial x} + u_y \\frac{\\partial u_x}{\\partial y} + u_z \\frac{\\partial u_x}{\\partial z}\\right) &= -\\frac{\\partial p}{\\partial x} + \\mu \\left(\\frac{\\partial^2 u_x}{\\partial x^2} + \\frac{\\partial^2 u_x}{\\partial y^2} + \\frac{\\partial^2 u_x}{\\partial z^2}\\right) + \\frac{1}{3} \\mu \\frac{\\partial}{\\partial x} \\left( \\frac{\\partial u_x}{\\partial x} + \\frac{\\partial u_y}{\\partial y} + \\frac{\\partial u_z}{\\partial z} \\right) + \\rho g_x \\\\\n y&:\\ &\\rho \\left(\\frac{\\partial u_y}{\\partial t} + u_x \\frac{\\partial u_y}{\\partial x} + u_y \\frac{\\partial u_y}{\\partial y}+ u_z \\frac{\\partial u_y}{\\partial z}\\right) &= -\\frac{\\partial p}{\\partial y} + \\mu \\left(\\frac{\\partial^2 u_y}{\\partial x^2} + \\frac{\\partial^2 u_y}{\\partial y^2} + \\frac{\\partial^2 u_y}{\\partial z^2}\\right) + \\frac{1}{3} \\mu \\frac{\\partial}{\\partial y} \\left( \\frac{\\partial u_x}{\\partial x} + \\frac{\\partial u_y}{\\partial y} + \\frac{\\partial u_z}{\\partial z} \\right) + \\rho g_y \\\\\n z&:\\ &\\rho \\left(\\frac{\\partial u_z}{\\partial t} + u_x \\frac{\\partial u_z}{\\partial x} + u_y \\frac{\\partial u_z}{\\partial y}+ u_z \\frac{\\partial u_z}{\\partial z}\\right) &= -\\frac{\\partial p}{\\partial z} + \\mu \\left(\\frac{\\partial^2 u_z}{\\partial x^2} + \\frac{\\partial^2 u_z}{\\partial y^2} + \\frac{\\partial^2 u_z}{\\partial z^2}\\right) + \\frac{1}{3} \\mu \\frac{\\partial}{\\partial z} \\left( \\frac{\\partial u_x}{\\partial x} + \\frac{\\partial u_y}{\\partial y} + \\frac{\\partial u_z}{\\partial z} \\right) + \\rho g_z.\n\\end{align}</math>\n\nNote that gravity has been accounted for as a body force, and the values of {{mvar|g<sub>x</sub>}}, {{mvar|g<sub>y</sub>}}, {{mvar|g<sub>z</sub>}} will depend on the orientation of gravity with respect to the chosen set of coordinates.\n\nThe continuity equation reads:\n:<math>\\frac{\\partial \\rho}{\\partial t} + \\frac{\\partial \\left(\\rho u_x \\right) }{ \\partial x} + \\frac{\\partial \\left(\\rho u_y\\right) }{ \\partial y} + \\frac{\\partial \\left(\\rho u_z\\right) }{ \\partial z} = 0.</math>\n\nWhen the flow is incompressible, {{mvar|ρ}} does not change for any fluid particle, and its [[material derivative]] vanishes: {{math|{{sfrac|''Dρ''|''Dt''}} {{=}} 0}}. The continuity equation is reduced to:\n\n:<math>\\frac{\\partial u_x }{ \\partial x} + \\frac{\\partial u_y }{ \\partial y} + \\frac{\\partial u_z }{ \\partial z} = 0.</math>\n\nThus, for the incompressible version of the Navier–Stokes equation the second part of the viscous terms fall away (see [[Incompressible flow]]).\n\nThis system of four equations comprises the most commonly used and studied form. Though comparatively more compact than other representations, this is still a [[nonlinear]] system of [[partial differential equations]] for which solutions are difficult to obtain.\n|style = border: 1px solid lightgray; width: 90%;\n|headerstyle = text-align:left\n}}\n\n{{hidden\n|Cylindrical coordinates\n|A change of variables on the Cartesian equations will yield<ref name=\"Ach\"/> the following momentum equations for {{mvar|r}}, {{mvar|φ}}, and {{mvar|z}}<ref>\n{{Citation\n| first=Mattia\n| last=de' Michieli Vitturi\n| title = Navier–Stokes equations in cylindrical coordinates\n|url = https://demichie.github.io/NS_cylindrical\n| accessdate = 2016-12-26\n}}</ref>\n:\n\n:<math>\\begin{align}\n r:\\ & \\rho \\left(\\frac{\\partial u_r}{\\partial t} + u_r \\frac{\\partial u_r}{\\partial r} + \\frac{u_{\\phi}}{r} \\frac{\\partial u_r}{\\partial \\phi} + u_z \\frac{\\partial u_r}{\\partial z} - \\frac{u_{\\phi}^2}{r}\\right) = \\\\\n &\\quad = -\\frac{\\partial p}{\\partial r} + \\mu \\left(\\frac{1}{r}\\frac{\\partial}{\\partial r}\\left(r \\frac{\\partial u_r}{\\partial r}\\right) +\n \\frac{1}{r^2}\\frac{\\partial^2 u_r}{\\partial \\phi^2} + \\frac{\\partial^2 u_r}{\\partial z^2} - \\frac{u_r}{r^2} -\n \\frac{2}{r^2}\\frac{\\partial u_\\phi}{\\partial \\phi} \\right) + \\frac{1}{3}\\mu \\frac{\\partial}{\\partial r} \\left( \\frac{1}{r}\\frac{\\partial\\left(r u_r\\right)}{\\partial r} + \\frac{1}{r}\\frac{\\partial u_\\phi}{\\partial \\phi} + \\frac{\\partial u_z}{\\partial z} \\right) + \\rho g_r \\\\[8px]\n\n \\phi:\\ & \\rho \\left(\\frac{\\partial u_{\\phi}}{\\partial t} + u_r \\frac{\\partial u_{\\phi}}{\\partial r} +\n \\frac{u_{\\phi}}{r} \\frac{\\partial u_{\\phi}}{\\partial \\phi} + u_z \\frac{\\partial u_{\\phi}}{\\partial z} + \\frac{u_r u_{\\phi}}{r}\\right) = \\\\\n &\\quad = -\\frac{1}{r}\\frac{\\partial p}{\\partial \\phi} + \\mu \\left(\\frac{1}{r}\\frac{\\partial}{\\partial r}\\left(r \\frac{\\partial u_{\\phi}}{\\partial r}\\right) +\n \\frac{1}{r^2}\\frac{\\partial^2 u_{\\phi}}{\\partial \\phi^2} + \\frac{\\partial^2 u_{\\phi}}{\\partial z^2} + \\frac{2}{r^2}\\frac{\\partial u_r}{\\partial \\phi}-\\frac{u_{\\phi}}{r^2}\\right) +\n \\frac{1}{3}\\mu \\frac{1}{r} \\frac{\\partial}{\\partial \\phi} \\left( \\frac{1}{r}\\frac{\\partial\\left(r u_r\\right)}{\\partial r} + \\frac{1}{r}\\frac{\\partial u_\\phi}{\\partial \\phi} + \\frac{\\partial u_z}{\\partial z} \\right) + \\rho g_{\\phi} \\\\[8px]\n\n z:\\ & \\rho \\left(\\frac{\\partial u_z}{\\partial t} + u_r \\frac{\\partial u_z}{\\partial r} + \\frac{u_{\\phi}}{r} \\frac{\\partial u_z}{\\partial \\phi} +\n u_z \\frac{\\partial u_z}{\\partial z}\\right) = \\\\\n &\\quad = -\\frac{\\partial p}{\\partial z} + \\mu \\left(\\frac{1}{r}\\frac{\\partial}{\\partial r}\\left(r \\frac{\\partial u_z}{\\partial r}\\right) +\n \\frac{1}{r^2}\\frac{\\partial^2 u_z}{\\partial \\phi^2} + \\frac{\\partial^2 u_z}{\\partial z^2}\\right) +\n \\frac{1}{3}\\mu \\frac{\\partial}{\\partial z} \\left( \\frac{1}{r}\\frac{\\partial\\left(r u_r\\right)}{\\partial r} + \\frac{1}{r}\\frac{\\partial u_\\phi}{\\partial \\phi} + \\frac{\\partial u_z}{\\partial z} \\right) + \\rho g_z.\n\\end{align}</math>\n\nThe gravity components will generally not be constants, however for most applications either the coordinates are chosen so that the gravity components are constant or else it is assumed that gravity is counteracted by a pressure field (for example, flow in horizontal pipe is treated normally without gravity and without a vertical pressure gradient). The continuity equation is:\n\n:<math>\\frac{\\partial\\rho}{\\partial t} + \\frac{1}{r}\\frac{\\partial}{\\partial r}\\left(\\rho r u_r\\right) + \\frac{1}{r}\\frac{\\partial \\left(\\rho u_\\phi\\right)}{\\partial \\phi} + \\frac{\\partial \\left(\\rho u_z\\right)}{\\partial z} = 0.\n</math>\n\nThis cylindrical representation of the incompressible Navier–Stokes equations is the second most commonly seen (the first being Cartesian above). Cylindrical coordinates are chosen to take advantage of symmetry, so that a velocity component can disappear. A very common case is axisymmetric flow with the assumption of no tangential velocity ({{math|''u<sub>φ</sub>'' {{=}} 0}}), and the remaining quantities are independent of {{mvar|φ}}:\n\n:<math>\\begin{align}\n \\rho \\left(\\frac{\\partial u_r}{\\partial t} + u_r \\frac{\\partial u_r}{\\partial r} + u_z \\frac{\\partial u_r}{\\partial z}\\right)\n &= -\\frac{\\partial p}{\\partial r} + \\mu \\left(\\frac{1}{r}\\frac{\\partial}{\\partial r}\\left(r \\frac{\\partial u_r}{\\partial r}\\right) +\n \\frac{\\partial^2 u_r}{\\partial z^2} - \\frac{u_r}{r^2}\\right) + \\rho g_r \\\\\n \\rho \\left(\\frac{\\partial u_z}{\\partial t} + u_r \\frac{\\partial u_z}{\\partial r} + u_z \\frac{\\partial u_z}{\\partial z}\\right)\n &= -\\frac{\\partial p}{\\partial z} + \\mu \\left(\\frac{1}{r}\\frac{\\partial}{\\partial r}\\left(r \\frac{\\partial u_z}{\\partial r}\\right) +\n \\frac{\\partial^2 u_z}{\\partial z^2}\\right) + \\rho g_z \\\\\n \\frac{1}{r}\\frac{\\partial}{\\partial r}\\left(r u_r\\right) + \\frac{\\partial u_z}{\\partial z} &= 0.\n\\end{align}</math>\n\n|style = border: 1px solid lightgray; width: 90%;\n|headerstyle = text-align:left\n}}\n\n{{hidden\n|Spherical coordinates\n|In [[spherical coordinates]], the {{mvar|r}}, {{mvar|φ}}, and {{mvar|θ}} momentum equations are<ref name=\"Ach\"/> (note the convention used: {{mvar|θ}} is polar angle, or [[colatitude]],<ref>{{Citation\n| url = http://mathworld.wolfram.com/SphericalCoordinates.html\n| title = Spherical Coordinates\n| author = Eric W. Weisstein\n| publisher = [[MathWorld]]\n| date = 2005-10-26\n| accessdate = 2008-01-22\n| author-link = Eric W. Weisstein\n}}</ref> {{math|0 ≤ ''θ'' ≤ π}}):\n:<math>\\begin{align}\n r:\\ &\\rho \\left(\\frac{\\partial u_r}{\\partial t} + u_r \\frac{\\partial u_r}{\\partial r} + \\frac{u_{\\phi}}{r \\sin{\\theta}} \\frac{\\partial u_r}{\\partial \\phi} +\n \\frac{u_{\\theta}}{r} \\frac{\\partial u_r}{\\partial \\theta} - \\frac{u_{\\phi}^2 + u_{\\theta}^2}{r}\\right) = \\\\ \n &\\quad = -\\frac{\\partial p}{\\partial r} +\n \\mu \\left(\\frac{1}{r^2} \\frac{\\partial}{\\partial r}\\left(r^2 \\frac{\\partial u_r}{\\partial r}\\right) +\n \\frac{1}{r^2 \\sin^2{\\theta}} \\frac{\\partial^2 u_r}{\\partial \\phi^2} +\n \\frac{1}{r^2 \\sin{\\theta}} \\frac{\\partial}{\\partial \\theta}\\left(\\sin{\\theta} \\frac{\\partial u_r}{\\partial \\theta}\\right) - 2\\frac{u_r +\n \\frac{\\partial u_{\\theta}}{\\partial \\theta} + u_{\\theta} \\cot{\\theta}}{r^2} - \\frac{2}{r^2 \\sin{\\theta}} \\frac{\\partial u_{\\phi}}{\\partial \\phi}\n \\right) + \\\\\n &\\quad + \\frac{1}{3}\\mu\\frac{\\partial}{\\partial r}\\left( \\frac{1}{r^2}\\frac{\\partial}{\\partial r}\\left(r^2 u_r\\right) + \\frac{1}{r \\sin{\\theta}}\\frac{\\partial}{\\partial \\theta}\\left( u_\\theta\\sin{\\theta} \\right) + \\frac{1}{r\\sin{\\theta}}\\frac{\\partial u_\\phi}{\\partial \\phi} \\right) + \\rho g_r \\\\[8px]\n\n \\phi:\\ &\\rho \\left(\\frac{\\partial u_{\\phi}}{\\partial t} + u_r \\frac{\\partial u_{\\phi}}{\\partial r} +\n \\frac{u_{\\phi}}{r \\sin{\\theta}} \\frac{\\partial u_{\\phi}}{\\partial \\phi} + \\frac{u_{\\theta}}{r} \\frac{\\partial u_{\\phi}}{\\partial \\theta} +\n \\frac{u_r u_{\\phi} + u_{\\phi} u_{\\theta} \\cot{\\theta}}{r}\\right) = \\\\\n &\\quad = -\\frac{1}{r \\sin{\\theta}} \\frac{\\partial p}{\\partial \\phi} + \n \\mu \\left(\\frac{1}{r^2} \\frac{\\partial}{\\partial r}\\left(r^2 \\frac{\\partial u_{\\phi}}{\\partial r}\\right) +\n \\frac{1}{r^2 \\sin^2{\\theta}} \\frac{\\partial^2 u_{\\phi}}{\\partial \\phi^2} +\n \\frac{1}{r^2 \\sin{\\theta}} \\frac{\\partial}{\\partial \\theta}\\left(\\sin{\\theta} \\frac{\\partial u_{\\phi}}{\\partial \\theta}\\right) +\n \\frac{2 \\sin{\\theta} \\frac{\\partial u_r}{\\partial \\phi} + 2 \\cos{\\theta} \\frac{\\partial u_{\\theta}}{\\partial \\phi} -\n u_{\\phi}}{r^2 \\sin^2{\\theta}}\n \\right) + \\\\\n &\\quad + \\frac{1}{3}\\mu\\frac{1}{r \\sin{\\theta}}\\frac{\\partial}{\\partial \\phi}\\left( \\frac{1}{r^2}\\frac{\\partial}{\\partial r}\\left(r^2 u_r\\right) + \\frac{1}{r \\sin{\\theta}}\\frac{\\partial}{\\partial \\theta}\\left( u_\\theta\\sin{\\theta} \\right) + \\frac{1}{r\\sin{\\theta}}\\frac{\\partial u_\\phi}{\\partial \\phi} \\right) + \\rho g_{\\phi} \\\\[8px]\n\n \\theta:\\ &\\rho \\left(\\frac{\\partial u_{\\theta}}{\\partial t} + u_r \\frac{\\partial u_{\\theta}}{\\partial r} +\n \\frac{u_{\\phi}}{r \\sin{\\theta}} \\frac{\\partial u_{\\theta}}{\\partial \\phi} +\n \\frac{u_{\\theta}}{r} \\frac{\\partial u_{\\theta}}{\\partial \\theta} + \\frac{u_r u_{\\theta} - u_{\\phi}^2 \\cot{\\theta}}{r}\\right) = \\\\\n &\\quad = -\\frac{1}{r} \\frac{\\partial p}{\\partial \\theta} + \n \\mu \\left(\\frac{1}{r^2} \\frac{\\partial}{\\partial r}\\left(r^2 \\frac{\\partial u_{\\theta}}{\\partial r}\\right) +\n \\frac{1}{r^2 \\sin^2{\\theta}} \\frac{\\partial^2 u_{\\theta}}{\\partial \\phi^2} +\n \\frac{1}{r^2 \\sin{\\theta}} \\frac{\\partial}{\\partial \\theta}\\left(\\sin{\\theta} \\frac{\\partial u_{\\theta}}{\\partial \\theta}\\right) +\n \\frac{2}{r^2} \\frac{\\partial u_r}{\\partial \\theta} - \\frac{u_{\\theta} +\n 2 \\cos{\\theta} \\frac{\\partial u_{\\phi}}{\\partial \\phi}}{r^2 \\sin^2{\\theta}}\n \\right) + \\\\\n &\\quad + \\frac{1}{3}\\mu\\frac{1}{r}\\frac{\\partial}{\\partial \\theta}\\left( \\frac{1}{r^2}\\frac{\\partial}{\\partial r}\\left(r^2 u_r\\right) + \\frac{1}{r \\sin{\\theta}}\\frac{\\partial}{\\partial \\theta}\\left( u_\\theta\\sin{\\theta} \\right) + \\frac{1}{r\\sin{\\theta}}\\frac{\\partial u_\\phi}{\\partial \\phi} \\right) + \\rho g_{\\theta}.\n\\end{align}</math>\n\nMass continuity will read:\n\n:<math>\\frac{\\partial \\rho}{\\partial t} + \\frac{1}{r^2}\\frac{\\partial}{\\partial r}\\left(\\rho r^2 u_r\\right) + \\frac{1}{r \\sin{\\theta}}\\frac{\\partial \\rho u_\\phi}{\\partial \\phi} + \\frac{1}{r \\sin{\\theta}}\\frac{\\partial}{\\partial \\theta}\\left(\\sin{\\theta} \\rho u_\\theta\\right) = 0.</math>\n\nThese equations could be (slightly) compacted by, for example, factoring {{math|{{sfrac|1|''r''<sup>2</sup>}}}} from the viscous terms. However, doing so would undesirably alter the structure of the Laplacian and other quantities.\n\n|style = border: 1px solid lightgray; width: 90%;\n|headerstyle = text-align:left\n}}\n\n==Navier–Stokes equations use in games==\nThe Navier–Stokes equations are used extensively in [[video games]] in order to model a wide variety of natural phenomena. Simulations of small-scale gaseous fluids, such as fire and smoke, are often based on the seminal paper \"Real-Time Fluid Dynamics for Games\"<ref>{{citation\n| url= http://www.dgp.toronto.edu/people/stam/reality/Research/pdf/GDC03.pdf\n| year=2003\n| title=Real-Time Fluid Dynamics for Games\n| first=Jos\n| last=Stam\n}}</ref> by [[Jos Stam]], which elaborates one of the methods proposed in Stam's earlier, more famous paper \"Stable Fluids\"<ref>{{citation\n| url= http://www.dgp.toronto.edu/people/stam/reality/Research/pdf/ns.pdf\n| year=1999\n| title=Stable Fluids\n| first=Jos\n| last=Stam\n}}</ref> from 1999. Stam proposes stable fluid simulation using a Navier–Stokes solution method from 1968, coupled with an unconditionally stable semi-Lagrangian [[advection]] scheme, as first proposed in 1992.\n\nMore recent implementations based upon this work run on the game systems [[graphics processing unit]] (GPU) as opposed to the [[central processing unit]] (CPU) and achieve a much higher degree of performance.<ref>{{citation\n| year=2004\n| title=GPUGems - Fast Fluid Dynamics Simulation on the GPU\n| chapter=38\n| first=Mark J.\n| last=Harris\n}}</ref><ref>{{citation\n| year=2007\n| title=ShaderX5 - Explicit Early-Z Culling for Efficient Fluid Flow Simulation\n| chapter=9.6\n| pages=553–564\n| first=P.\n| last=Sander\n| first2=N.\n| last2=Tatarchuck\n| first3=J.L.\n| last3=Mitchell\n}}</ref>\nMany improvements have been proposed to Stam's original work, which suffers inherently from high numerical dissipation in both velocity and mass.\n\nAn introduction to interactive fluid simulation can be found in the 2007 [[ACM SIGGRAPH]] course, Fluid Simulation for Computer Animation.<ref>{{cite web|author1=Robert Bridson|author2=Matthias Müller-Fischer|title=Fluid Simulation for Computer Animation|url=http://www.cs.ubc.ca/~rbridson/fluidsimulation/|website=www.cs.ubc.ca}}</ref>\n\n==See also==\n{{columns-list|colwidth=25em|\n*[[Adhémar Jean Claude Barré de Saint-Venant]]\n*[[BBGKY hierarchy|Bogoliubov–Born–Green–Kirkwood–Yvon hierarchy of equations]]\n*[[Boltzmann equation]]\n*[[Cauchy momentum equation]]\n*[[Cauchy stress tensor#Balance laws – Cauchy's equations of motion|Cauchy stress tensor]]\n*[[Convection–diffusion equation]]\n*[[Chapman–Enskog theory]]\n*[[Churchill–Bernstein equation]]\n*[[Coandă effect]]\n*[[Computational fluid dynamics]]\n*[[Continuum mechanics#Governing equations|Continuum mechanics]]\n*[[Euler equations (fluid dynamics)|Euler equations]]\n*[[Hagen–Poiseuille flow from the Navier–Stokes equations]]\n*[[Derivation of the Navier–Stokes equations]]\n*[[Einstein-Stokes equation]]\n*[[Non-dimensionalization and scaling of the Navier–Stokes equations]]\n*[[Pressure-correction method]]\n*[[Rayleigh–Bénard convection]]\n*[[Stokes flow|Stokes equations]]\n*[[Reynolds transport theorem]]\n*[[Vlasov equation]]\n*[[Millennium Prize Problems]]\n}}\n\n==Notes==\n{{Reflist|30em}}\n\n==References==\n*{{Citation\n | last = Acheson\n | first = D. J.\n | title = Elementary Fluid Dynamics\n | publisher = [[Oxford University Press]]\n | series = Oxford Applied Mathematics and Computing Science Series\n | year = 1990\n | isbn = 978-0-19-859679-0 }}\n*{{citation | first=G. K. | last=Batchelor | authorlink=George Batchelor | title=An Introduction to Fluid Dynamics | year=1967 | publisher=Cambridge University Press | isbn=978-0-521-66396-0 }}\n*{{citation | title=Fluid mechanics | first1=L. D. | last1=Landau | author1-link=Lev Landau | author2-link=Evgeny Lifshitz | last2=Lifshitz | first2= E. M. | year=1987 | publisher=Pergamon Press | series=[[Course of Theoretical Physics]] | volume=6 | edition=2nd revised | isbn=978-0-08-033932-0 | oclc=15017127 }}\n*{{citation | first=Inge L. | last=Rhyming | title=Dynamique des fluides | year=1991 | publisher=[[Presses polytechniques et universitaires romandes]]}}\n*{{citation | first1=A. D. | last1=Polyanin | first2=A. M. | last2=Kutepov | first3=A. V. | last3=Vyazmin | first4=D. A. | last4=Kazenin | title=Hydrodynamics, Mass and Heat Transfer in Chemical Engineering | publisher=Taylor & Francis, London | year=2002 | isbn=978-0-415-27237-7 }}\n*{{Citation\n | last = Currie\n | first = I. G.\n | title = Fundamental Mechanics of Fluids\n | publisher = [[McGraw-Hill]]\n | year = 1974\n | isbn = 978-0-07-015000-3 }}\n* [[Vivette Girault|V. Girault]] and P.A. Raviart. ''Finite Element Methods for Navier–Stokes Equations: Theory and Algorithms.'' Springer Series in Computational Mathematics. Springer-Verlag, 1986.\n*{{Citation\n | last = White\n | first = Frank M.\n | authorlink = Frank M. White\n | title = Viscous Fluid Flow\n | publisher = [[McGraw-Hill]]\n | year = 2006\n | isbn = 978-0-07-124493-0 }}\n*Smits, Alexander J. (2014), ''A Physical Introduction to Fluid Mechanics'', Wiley, {{isbn|0-47-1253499}}\n*Roger Temam　(1984): \"Navier–Stokes Equations: Theory and Numerical Analysis\", ACM Chelsea Publishing, {{ISBN|978-0-8218-2737-6}}\n\n==External links==\n* [http://www.allstar.fiu.edu/aero/Flow2.htm Simplified derivation of the Navier–Stokes equations]\n* [https://www.grc.nasa.gov/www/k-12/airplane/nseqs.html Three-dimensional unsteady form of the Navier–Stokes equations] Glenn Research Center, NASA\n\n{{Authority control}}\n\n{{DEFAULTSORT:Navier-Stokes Equations}}\n[[Category:Concepts in physics]]\n[[Category:Equations of fluid dynamics]]\n[[Category:Aerodynamics]]\n[[Category:Partial differential equations]]\n[[Category:Functions of space and time]]\n[[Category:Computational fluid dynamics]]"
    },
    {
      "title": "Nektar++",
      "url": "https://en.wikipedia.org/wiki/Nektar%2B%2B",
      "text": "{{Use dmy dates|date=June 2016}}\n{{Infobox Software\n| name                   = Nektar++\n| logo                   = Nektar++ logo.png\n| logo size              = 250px\n| caption                = Nektar++ logo\n| released               = {{Start date and age|2006|5|4|df=yes}}\n| latest release version = 4.4.1\n| latest release date    = {{Start date and age|2017|10|14|df=yes}}\n| programming language   = [[C++]]\n| operating system       = [[Unix]]/[[Linux]]/[[OS X]]/[[Windows]],\n| genre                  = [[Spectral element method]], [[Hp-FEM]], [[Computational fluid dynamics]], \n| license                = [[MIT License]],\n| website                = [http://www.nektar.info http://www.nektar.info]\n}}\n\n'''Nektar++''' is a spectral/hp element framework designed to support the construction of efficient high-performance scalable solvers for a wide range of [[partial differential equation]]s (PDE).<ref name=\":0\">{{Cite journal|last=Cantwell|first=C. D.|last2=Moxey|first2=D.|last3=Comerford|first3=A.|last4=Bolis|first4=A.|last5=Rocco|first5=G.|last6=Mengaldo|first6=G.|last7=De Grazia|first7=D.|last8=Yakovlev|first8=S.|last9=Lombard|first9=J. -E.|date=2015-07-01|title=Nektar++: An open-source spectral/ element framework|journal=Computer Physics Communications|volume=192|pages=205–219|doi=10.1016/j.cpc.2015.02.008}}</ref><ref>{{Cite web|url=http://www.nektar.info|title=Nektar++ – Spectral/hp Element Framework|website=www.nektar.info|access-date=2016-06-14}}</ref> The code is released as [[open-source software|open-source]] under the [[MIT License|MIT license]]. Although primarily driven by application-based research, it has been designed as a platform to support the development of novel numerical techniques in the area of [[Hp-FEM|high-order finite element methods]].\n\nNektar++ is modern [[Object-oriented programming|object-oriented]] code written in [[C++]] and is being actively developed by members of the <span class=\"plainlinks\">[http://sherwinlab.ae.ic.ac.uk SherwinLab]</span> at [[Imperial College London]] (UK) and <span class=\"plainlinks\">[https://www.cs.utah.edu/~kirby/ Kirby's group]</span> at the [[University of Utah]] (US).\n\n==Capabilities==\nNektar++ includes the following capabilities:\n* One-, two- and three-dimensional problems;<ref name=\":0\" />\n* Multiple and mixed element types, i.e. triangles, quadrilaterals, tetrahedra, prisms and hexahedra;<ref name=\":0\" />\n* Both hierarchical and nodal expansion bases with variable and heterogeneous polynomial order between elements;\n* [[Galerkin method|Continuous Galerkin]], [[Discontinuous Galerkin method|discontinuous Galerkin]],<ref>{{Cite journal|last=Sherwin|first=S. J.|last2=Kirby|first2=R. M.|last3=Peiró|first3=J.|last4=Taylor|first4=R. L.|last5=Zienkiewicz|first5=O. C.|date=2006-01-29|title=On 2D elliptic discontinuous Galerkin methods|journal=International Journal for Numerical Methods in Engineering|language=en|volume=65|issue=5|pages=752–784|doi=10.1002/nme.1466|issn=1097-0207|citeseerx=10.1.1.130.6271}}</ref> hybridizable discontinuous Galerkin<ref>{{Cite journal|last=Kirby|first=Robert M.|last2=Sherwin|first2=Spencer J.|last3=Cockburn|first3=Bernardo|date=2011-07-01|title=To CG or to HDG: A Comparative Study|journal=Journal of Scientific Computing|language=en|volume=51|issue=1|pages=183–212|doi=10.1007/s10915-011-9501-7|issn=0885-7474|citeseerx=10.1.1.308.6739}}</ref><ref>{{Cite journal|last=Yakovlev|first=Sergey|last2=Moxey|first2=David|last3=Kirby|first3=Robert M.|last4=Sherwin|first4=Spencer J.|date=2015-07-28|title=To CG or to HDG: A Comparative Study in 3D|journal=Journal of Scientific Computing|language=en|volume=67|issue=1|pages=192–220|doi=10.1007/s10915-015-0076-6|issn=0885-7474|hdl=10044/1/28889}}</ref> and flux reconstruction<ref>{{Cite journal|last=Mengaldo|first=G.|last2=Grazia|first2=D.|last3=Vincent|first3=P. E.|last4=Sherwin|first4=S. J.|date=2015-10-19|title=On the Connections Between Discontinuous Galerkin and Flux Reconstruction Schemes: Extension to Curvilinear Meshes|journal=Journal of Scientific Computing|language=en|volume=67|issue=3|pages=1272–1292|doi=10.1007/s10915-015-0119-z|issn=0885-7474}}</ref> operators;\n* Multiple implementations of finite element operators for efficient execution on a wide range of CPU architectures;<ref>{{Cite journal|last=Vos|first=Peter E. J.|last2=Sherwin|first2=Spencer J.|last3=Kirby|first3=Robert M.|date=2010-07-01|title=From h to p efficiently: Implementing finite and spectral/hp element methods to achieve optimal performance for low- and high-order discretisations|journal=Journal of Computational Physics|volume=229|issue=13|pages=5161–5181|doi=10.1016/j.jcp.2010.03.031|hdl=10044/1/14735}}</ref><ref>{{Cite journal|last=Cantwell|first=C. D.|last2=Sherwin|first2=S. J.|last3=Kirby|first3=R. M.|last4=Kelly|first4=P. H. J.|date=2011-04-01|title=From h to p efficiently: Strategy selection for operator evaluation on hexahedral and tetrahedral elements|journal=Computers & Fluids|series=Symposium on High Accuracy Flow Simulations. Special Issue Dedicated to Prof. Michel DevilleSymposium on High Accuracy Flow Simulations|volume=43|issue=1|pages=23–28|doi=10.1016/j.compfluid.2010.08.012}}</ref><ref>{{Cite journal|last=Cantwell|first=C. D.|last2=Sherwin|first2=S. J.|last3=Kirby|first3=R. M.|last4=Kelly|first4=P. H. J.|date=2011-01-01|title=From h to p Efficiently: Selecting the Optimal Spectral/ hp Discretisation in Three Dimensions|journal=Mathematical Modelling of Natural Phenomena|language=en|volume=6|issue=3|pages=84–96|doi=10.1051/mmnp/20116304|issn=0973-5348}}</ref>\n* Comprehensive range of [[Explicit and implicit methods|explicit]], [[Explicit and implicit methods|implicit]] and implicit-explicit (IMEX) time-integration schemes;<ref>{{Cite journal|last=Vos|first=Peter E. J.|last2=Eskilsson|first2=Claes|last3=Bolis|first3=Alessandro|last4=Chun|first4=Sehun|last5=Kirby|first5=Robert M.|last6=Sherwin|first6=Spencer J.|date=2011-03-01|title=A generic framework for time-stepping partial differential equations (PDEs): general linear methods, object-oriented implementation and application to fluid problems|journal=International Journal of Computational Fluid Dynamics|volume=25|issue=3|pages=107–125|doi=10.1080/10618562.2011.575368|issn=1061-8562}}</ref><ref>{{Cite journal|last=Bolis|first=A.|last2=Cantwell|first2=C. D.|last3=Kirby|first3=R. M.|last4=Sherwin|first4=S. J.|date=2014-07-20|title=From h to p efficiently: optimal implementation strategies for explicit time-dependent problems using the spectral/hp element method|journal=International Journal for Numerical Methods in Fluids|language=en|volume=75|issue=8|pages=591–607|doi=10.1002/fld.3909|issn=1097-0363|pmc=4394998|pmid=25892840}}</ref>\n* Preconditioners tailored to high-order finite element methods;\n* Numerical stabilization techniques such as dealiasing<ref>{{Cite journal|last=Kirby|first=Robert M.|last2=Sherwin|first2=Spencer J.|date=2006-10-03|title=Aliasing errors due to quadratic nonlinearities on triangular spectral /hp element discretisations|journal=Journal of Engineering Mathematics|language=en|volume=56|issue=3|pages=273–288|doi=10.1007/s10665-006-9079-5|issn=0022-0833|citeseerx=10.1.1.130.6964}}</ref> and spectral vanishing viscosity;<ref>{{Cite journal|last=Kirby|first=Robert M.|last2=Sherwin|first2=Spencer J.|date=2006-04-15|title=Stabilisation of spectral/hp element methods through spectral vanishing viscosity: Application to fluid mechanics modelling|journal=Computer Methods in Applied Mechanics and Engineering|series=Incompressible CFD|volume=195|issue=23–24|pages=3128–3144|doi=10.1016/j.cma.2004.09.019|hdl=10044/1/355}}</ref><ref>{{Cite journal|last=Moura|first=R. C.|last2=Sherwin|first2=S. J.|last3=Peiró|first3=J.|date=2016-02-15|title=Eigensolution analysis of spectral/hp continuous Galerkin approximations to advection–diffusion problems: Insights into spectral vanishing viscosity|journal=Journal of Computational Physics|volume=307|pages=401–422|doi=10.1016/j.jcp.2015.12.009}}</ref>\n* Parallel execution and scalable to thousands of processor cores;<ref name=\":1\">{{Cite journal|last=Lombard|first=Jean-Eloi W.|last2=Moxey|first2=David|last3=Sherwin|first3=Spencer J.|last4=Hoessler|first4=Julien F. A.|last5=Dhandapani|first5=Sridar|last6=Taylor|first6=Mark J.|date=2015-11-26|title=Implicit Large-Eddy Simulation of a Wingtip Vortex|journal=AIAA Journal|volume=54|issue=2|pages=506–518|doi=10.2514/1.J054181|issn=0001-1452|hdl=10044/1/32883}}</ref>\n* Pre-processing tools to generate meshes, or manipulate and convert meshes generated with third-party software into a Nektar++-readable format;<ref>{{Cite journal|last=Moxey|first=D.|last2=Green|first2=M. D.|last3=Sherwin|first3=S. J.|last4=Peiró|first4=J.|date=2015-01-01|title=An isoparametric approach to high-order curvilinear boundary-layer meshing|journal=Computer Methods in Applied Mechanics and Engineering|volume=283|pages=636–650|doi=10.1016/j.cma.2014.09.019}}</ref>\n* Extensive post-processing capabilities for manipulating output data;\n* Cross platform support for [[Linux]], [[OS X|Mac OS X]] and [[Microsoft Windows|Windows]];\n* Support for running jobs on [[cloud computing]] platforms via the prototype Nekkloud interface<ref>{{Cite book|last=Cohen|first=J.|last2=Moxey|first2=D.|last3=Cantwell|first3=C.|last4=Burovskiy|first4=P.|last5=Darlington|first5=J.|last6=Sherwin|first6=S. J.|date=2013-09-01|title=Nekkloud: A software environment for high-order finite element analysis on clusters and clouds|journal=2013 IEEE International Conference on Cluster Computing (CLUSTER)|pages=1–5|doi=10.1109/CLUSTER.2013.6702616|isbn=978-1-4799-0898-1}}</ref> from the libhpc project;<ref>{{Cite journal|last=Cohen|first=Jeremy|last2=Cantwell|first2=Chris|last3=Hong|first3=Neil Chue|last4=Moxey|first4=David|last5=Illingworth|first5=Malcolm|last6=Turner|first6=Andrew|last7=Darlington|first7=John|last8=Sherwin|first8=Spencer|date=2014-07-09|title=Simplifying the Development, Use and Sustainability of HPC Software|journal=Journal of Open Research Software|language=en|volume=2|issue=1|doi=10.5334/jors.az|issn=2049-9647|page=e16}}</ref>\n* Wide user community,<ref>{{Cite web|url=http://www.nektar.info/community|title=Community – Nektar++|website=www.nektar.info|access-date=2016-06-14}}</ref> support and annual workshop.<ref>{{Cite web|url=http://www.nektar.info/community/workshops/nektar-2016/|title=Nektar++ Workshop 2016 – Nektar++|website=www.nektar.info|access-date=2016-06-14}}</ref>\n\nStable versions of the software are released on a 1-month basis and it is supported by an extensive testing framework<ref>{{Cite web|url=http://buildbot.nektar.info|title=Nektar++ Buildbot|website=buildbot.nektar.info|access-date=2016-06-14}}</ref> which ensures correctness across a range of platforms and architectures.\n\nOther capabilities currently under active development include p-adaption,<ref>{{Cite journal|last=Ekelschot|first=D.|last2=Moxey|first2=D.|last3=Sherwin|first3=S. J.|last4=Peiró|first4=J.|title=A p-adaptation method for compressible flow problems using a goal-based error indicator|journal=Computers & Structures|volume=181|pages=55–69|doi=10.1016/j.compstruc.2016.03.004|year=2017|hdl=10871/26757}}</ref> r-adaption and support for accelerators ([[General-purpose computing on graphics processing units|GPGPU]], [[Intel]] [[Xeon Phi]]).\n\n== Application domains ==\nThe development of the Nektar++ framework is driven by a number of [[aerodynamics]] and [[biomedical engineering]] applications and consequently the software package includes a number of pre-written solvers for these areas.\n\n=== Incompressible flow ===\nThis solver time-integrates the incompressible [[Navier–Stokes equations|Navier-Stokes equations]] for performing large-scale [[direct numerical simulation]] (DNS) in complex geometries.<ref name=\":1\" /> It also supports the linearised and adjoint forms of the Navier-Stokes equations for evaluating [[hydrodynamic stability]] of flows.<ref>{{Cite book|title=The Role of Spanwise Forcing on Vortex Shedding Suppression in a Flow Past a Cylinder|last=Rocco|first=G.|last2=Sherwin|first2=S. J.|date=2015-01-01|publisher=Springer International Publishing|isbn=9783319062594|editor-last=Theofilis|editor-first=Vassilis|series=Fluid Mechanics and Its Applications|pages=105–110|language=en|doi=10.1007/978-3-319-06260-0_15|editor-last2=Soria|editor-first2=Julio}}</ref><ref>{{Cite journal|last=Rocco|first=G.|last2=Zaki|first2=T. A.|last3=Mao|first3=X.|last4=Blackburn|first4=H.|last5=Sherwin|first5=S. J.|date=2015-07-01|title=Floquet and transient growth stability analysis of a flow through a compressor passage|journal=Aerospace Science and Technology|series=Instability and Control of Massively Separated Flows|volume=44|pages=116–124|doi=10.1016/j.ast.2015.02.004}}</ref>\n\n=== Compressible flow ===\nExternal aerodynamics simulations of high-speed compressible flows are supported through solution of the compressible [[Euler equations (fluid dynamics)|Euler]] or [[Navier–Stokes equations|Navier-Stokes]] equations.<ref>{{Cite journal|last=Mengaldo|first=G.|last2=Kravtsova|first2=M.|last3=Ruban|first3=A. I.|last4=Sherwin|first4=S. J.|date=2015-07-01|title=Triple-deck and direct numerical simulation analyses of high-speed subsonic flows past a roughness element|url=http://journals.cambridge.org/article_S0022112015002815|journal=Journal of Fluid Mechanics|volume=774|pages=311–323|doi=10.1017/jfm.2015.281|issn=1469-7645}}</ref>\n\n=== Cardiac Electrophysiology ===\nThis solver supports the solution of the [[monodomain model]] and [[bidomain model]] of action potential propagation through myocardium.<ref>{{Cite journal|last=Cantwell|first=Chris D.|last2=Yakovlev|first2=Sergey|last3=Kirby|first3=Robert M.|last4=Peters|first4=Nicholas S.|last5=Sherwin|first5=Spencer J.|date=2014-01-15|title=High-order spectral/hp element discretisation for reaction–diffusion problems on surfaces: Application to cardiac electrophysiology|journal=Journal of Computational Physics|volume=257|issue=PA|pages=813–829|doi=10.1016/j.jcp.2013.10.019|pmc=3991332|pmid=24748685}}</ref>\n\n=== Other application areas ===\n* [[shallow water equations]];\n* [[Convection–diffusion equation|reaction-diffusion-advection]] problems;\n* pulse wave propagation solver for modelling arterial networks;\n* acoustic perturbation equations;\n* [[linear elasticity]] equations.\n\n== License ==\nNektar++ is free and open source software, released under the [[MIT License|MIT license]].<ref>{{Cite web|url=http://www.nektar.info/license/|title=License – Nektar++|website=www.nektar.info|access-date=2016-06-14}}</ref>\n\n==Alternative software==\n\n===Free and open-source software===\n* [[Nek5000]] (GPL)\n* [[Advanced Simulation Library]] (AGPL)\n* [[Code Saturne]] (GPL)\n* <span class=\"plainlinks\">[http://www.featool.com FEATool Multiphysics]</span><ref>[http://www.featool.com FEATool Multiphysics homepage]</ref>\n* [[Gerris (software)|Gerris Flow Solver]] (GPL)\n* [[OpenFOAM]] (GPL)\n* [[SU2 code]] (LGPL)\n\n===Proprietary software===\n* [[ADINA|ADINA CFD]]\n* [[ANSYS]] CFX\n* [[ANSYS]] Fluent\n* [[COMSOL Multiphysics]]\n* [[Pumplinx]]\n* [[CD-adapco#STAR-CCM+|STAR-CCM+]]\n* [[KIVA (software)]]\n* [[RELAP5-3D]]\n\n==References==\n{{Reflist}}\n\n==External links==\n\n===Official resources===\n*[http://www.nektar.info Nektar++ home page]\n*[https://gitlab.nektar.info Nektar++ Gitlab repository]\n\n{{CAE software}}\n\n[[Category:Computational fluid dynamics]]\n[[Category:Free science software]]\n[[Category:Free computer-aided design software]]\n[[Category:Scientific simulation software]]"
    },
    {
      "title": "Nonequilibrium Gas and Plasma Dynamics Laboratory",
      "url": "https://en.wikipedia.org/wiki/Nonequilibrium_Gas_and_Plasma_Dynamics_Laboratory",
      "text": "The '''Nonequilibrium Gas and Plasma Dynamics Laboratory''' (NGPDL) at the [[Aerospace Engineering]] Department of the [[University of Michigan]] is headed by Professor Iain D. Boyd and performs research of [[nonequilibrium]] gases and [[Plasma (physics)|plasmas]] involving the development of physical models for various gas systems of interest, numerical algorithms on the latest supercomputers, and the application of challenging flows for several exciting projects. The lab places a great deal of emphasis on comparison of simulation with external experimental and theoretical results, having ongoing collaborative studies with colleagues at the [[University of Michigan]] such as the [[Plasmadynamics and Electric Propulsion Laboratory]], other universities, and government laboratories such as [[NASA]], [[United States Air Force Research Laboratory]], and the [[United States Department of Defense]].\n\nCurrent research areas of the NGPDL include [[electric propulsion]], [[hypersonics|hypersonic]] [[aerothermodynamics]], flows involving very small length scales ([[Microelectromechanical systems|MEMS]] devices), and materials processing (jets used in deposition thin films for advanced materials). Due to nonequilibrium effects, these flows cannot always be computed accurately with the macroscopic equations of [[gas dynamics]] and [[plasma physics]]. Instead, the lab has adopted a microscopic approach in which the atoms/molecules in a gas and the ions/electrons in a plasma are simulated on computationally using a large number of model particles within sophisticated [[Monte Carlo methods]]. The lab has developed a general 2D/axi-symmetric/3D code, MONACO, for simulating nonequilibrium neutral flows that can run either on scalar workstations or in a [[parallel computing]] environment.\n\nThe lab also has developed a general 2D/axi-symmetric/3D code, LeMANS, to numerically solve the [[Navier-Stokes equations]] using [[computational fluid dynamics]] when the [[Knudsen number]] is sufficiently small. This allows lab members to explore flows that would otherwise be too computationally expensive with a particle method. Work is currently being done to combine the two codes into a hybrid that uses MONACO when the flow is in the collisional nonequilibrium regime and LeMANS when the flow can be considered continuous.\n\nCurrent and past plasma and nonequilibrium flow projects include simulation of [[ion thruster]]s, [[Hall effect thruster]]s, and [[pulsed plasma thruster]]s) as well as numerous [[NASA]] contracts to study reentry aerothermodynamics for space vehicles, including the [[Crew Exploration Vehicle]]. Other plasma research includes modeling wall ablation from [[directed energy weapons]] and the plasma-propellant interaction in [[electrothermal-chemical technology|electrothermal chemical guns]].\n\n==Official website==\nhttp://ngpdlab.engin.umich.edu/\n\n{{DEFAULTSORT:Nonequilibrium Gas And Plasma Dynamics Laboratory}}\n[[Category:University of Michigan]]\n[[Category:Aerospace engineering organizations]]\n[[Category:Plasma physics]]\n[[Category:Plasma processing]]\n[[Category:Computational fluid dynamics]]"
    },
    {
      "title": "OpenFOAM",
      "url": "https://en.wikipedia.org/wiki/OpenFOAM",
      "text": "{{Use dmy dates|date=July 2013}}\n{{Infobox Software\n| name                   = OpenFOAM\n| logo                   = OpenFOAM_software_logo.png\n| screenshot             = Screenshot OpenFOAM-2.1.x gnome-terminal.png\n| caption                = OpenFOAM running in a [[Terminal emulator|terminal]]\n| author                 = Henry Weller, Hrvoje Jasak, Mattijs Janssens, Andrew Heather, Mark Olesen, Sergio Ferraris, Will Bainbridge\n| developer              = OpenCFD Ltd. <ref>{{cite web|url=http://openfoam.com/|title=The open source CFD toolbox|website=OpenFOAM|deadurl=no}}</ref> / CFD Direct Ltd.<ref>{{cite web|url=http://cfd.direct/|title=CFD Direct - The Architects of OpenFOAM|website=CFD Direct|deadurl=no|archiveurl=https://web.archive.org/web/20150327220633/http://cfd.direct/|archivedate=27 March 2015|df=dmy-all}}</ref> / Wikki Ltd. <ref>{{cite web|url=http://www.wikki.co.uk/|title=Wikki Ltd.}}</ref> / BlueCape Ltd. <ref>{{cite web|url=http://bluecfd.github.io/Core/|title=BlueCape Ltd.}}</ref>\n| released               = {{Start date and age|2004|12|10|df=yes}}<ref>{{cite web |url=http://openfoam.org/release/1-0/ |title=OpenFOAM Version 1.0 |deadurl=no |archiveurl=https://web.archive.org/web/20170607034034/https://openfoam.org/release/1-0/ |archivedate=7 June 2017 |df=dmy-all }}</ref>\n| latest release version = v6 / {{Start date|2018|06|29|df=yes}}<ref>{{cite web |url=https://openfoam.org/download/history/|title=OpenFOAM® History |deadurl=no }}</ref>\n\nv1906 / {{Start date|2019|06|27|df=yes}}<ref>{{cite web |url=https://www.openfoam.com/history/ |title=Release History - OpenFOAM |deadurl=no }}</ref>\n| programming language   = [[C++]] / [[C]]\n| operating system       = [[Unix]] / [[Linux]] / [[Windows]]\n| genre                  = [[Computational fluid dynamics]], [[simulation software]], [[fluid structure interaction]] \n| license                = [[GPLv3]]\n| website                = {{URL|openfoam.com}} / {{URL|openfoam.org}}\n}}\n\n'''OpenFOAM''' (for \"'''Open'''-source '''F'''ield '''O'''peration '''A'''nd '''M'''anipulation\") is a [[C++]] toolbox for the development of customized [[numerical analysis|numerical solvers]], and pre-/post-processing utilities for the solution of [[continuum mechanics]] problems, most prominently including [[computational fluid dynamics]] (CFD).\n\nThere are three main versions of OpenFOAM software that are released as free and open-source software under the [[GNU General Public License]] Version 3:\n# [https://develop.openfoam.com/Development/OpenFOAM-plus The official OpenFOAM] version released every 6 months by [https://www.openfoam.com ESI-OpenCFD Ltd.],\n# [https://www.openfoam.org The OpenFOAM-Foundation fork] released by [https://cfd.direct/ CFD Direct Ltd.] on behalf of [https://www.openfoam.org OpenFOAM Foundation], and\n# [https://sourceforge.net/projects/foam-extend/ The FOAM-Extend Project fork] released by [http://www.wikki.co.uk/ Wikki Ltd.].\n\nIn addition to the above main forks, there are several variants of software maintained and released for specific applications by other entities based on the OpenFOAM technologies: to name but a few: [http://bluecfd.github.io/Core/ blueCFD®-Core], [https://www.simscale.com/open-source-solver/ SIMSCALE], and [http://www.iconcfd.com/en/ iconCFD].\n\nOpenFOAM has been released by OpenCFD Ltd. since 2004, the name OpenFOAM was registered as a trademark by the OpenCFD Ltd in 2007 <ref>{{cite web|url=http://www.openfoam.com/|title=OpenFOAM® - Official home of The Open Source Computational Fluid Dynamics (CFD) Toolbox|last=OpenCFD|website=www.openfoam.com|deadurl=no|archiveurl=https://web.archive.org/web/20160922032819/http://www.openfoam.com/|archivedate=22 September 2016|df=dmy-all}}</ref>, and grants use of its OpenFOAM trademark by Third Parties on a licence basis. ESI Group and OpenFOAM Foundation Ltd are currently permitted to use the Name and agreed Domain Name.\n\n==History==\n[[File:OpenFOAM+ParaView flow simulation.png|thumb|right|Flow simulation using OpenFOAM and [[ParaView]] for visualization]]\n\nThe name '''FOAM''' has been claimed to appear for the first time as a post-processing tool written by Charlie Hill in the early 90s in Prof. [[David Gosman]]'s group in [[Imperial College London]].<ref>{{cite web |title=Original OpenFOAM authors |url=https://www.cfd-online.com/Forums/openfoam/152605-original-openfoam-author-s.html#6 |website=CFD-Online |accessdate=28 June 2019}}</ref>\n\nNevertheless, as a continuum mechanics / computational fluid dynamics tool, the first development of FOAM (which had became OpenFOAM later on) was initiated by Henry Weller at the same institute by using the [[C++]] programming language rather than the [[de facto]] standard programming language [[FORTRAN]] of the time to develop a powerful and flexible general simulation platform. From this initiation to the initiation of a company called [https://beta.companieshouse.gov.uk/company/08119459 Nabla Ltd], (predominantly) Henry Weller and Hrvoje Jasak carried out the basic development of the software for almost a decade.<ref>{{cite journal |last1=Chen |first1=Goong |last2=Xiong |first2=Qingang |last3=Morris |first3=Philip J. |last4=Paterson |first4=Eric G. |last5=Sergeev |first5=Alexey |last6=Wang |first6=Yi-Ching |title=OpenFOAM for Computational Fluid Dynamics |journal=Notices of American Mathematical Society |date=2014 |volume=61 |issue=4 |pages=354-363 |doi=10.1090/noti1095}}</ref> For a few years, FOAM was sold as a commercial code by Nabla Ltd.<ref>{{cite web |title=OpenFOAM |url=https://www.cfd-online.com/Wiki/OpenFOAM |website=CFD-Online |accessdate=28 June 2019}}</ref> However, in 2004 FOAM was released under [[GPL]] and was renamed to OpenFOAM.\n\nIn 2004, Nabla Ltd was folded. Immediately afterwards, Henry Weller, Chris Greenshields and Mattijs Janssens founded OpenCFD Ltd to develop and release OpenFOAM.<ref>{{cite web|url=http://openfoam.org/download/history/|title=Release History|first=Chris|last=Greenshields|date=3 April 2016|website=openfoam.org|deadurl=no|archiveurl=https://web.archive.org/web/20170729231137/https://openfoam.org/download/history/|archivedate=29 July 2017|df=dmy-all}}</ref> At the same time, Hrvoje Jasak founded the consulting company Wikki Ltd <ref>{{cite web|url=http://wikki.gridcore.se/company/about-us/|title=Wikki Ltd - About Us|deadurl=no}}</ref> and maintained a [[Fork (software development)|fork]] of OpenFOAM called openfoam-extend, later renamed to [https://sourceforge.net/projects/foam-extend/ foam-extend].\n\nOn 8 August 2011, OpenCFD was acquired by [[Silicon Graphics International]] (SGI).<ref>{{cite web |url=http://www.sgi.com/company_info/newsroom/press_releases/2011/august/opencfd.html |title=Press Releases: SGI Acquires OpenCFD Ltd., the Leader In Open Source Computational Fluid Dynamics (CFD) Software |publisher=SGI |date= |accessdate=2012-12-18 |deadurl=no |archiveurl=https://web.archive.org/web/20121206010926/http://www.sgi.com/company_info/newsroom/press_releases/2011/august/opencfd.html |archivedate=6 December 2012 |df=dmy-all }}</ref> On 12 September 2012, the [[ESI Group]] announced the acquisition of OpenCFD Ltd and the OpenFOAM trademark from SGI.<ref>{{cite web |url=http://www.esi-group.com/corporate/finance/news/financial-press-release/acquisiton-of-opencfd-ltd-the-leader-in-open-source-software-in-computional-fluid-dynamics |title=Acquisition of OpenCFD Ltd., The leader in Open Source software in Computational Fluid Dynamics |publisher=ESI Group |date=2012-09-11 |accessdate=2012-12-18 |deadurl=no |archiveurl=https://web.archive.org/web/20121206053745/http://www.esi-group.com/corporate/finance/news/financial-press-release/acquisiton-of-opencfd-ltd-the-leader-in-open-source-software-in-computional-fluid-dynamics |archivedate=6 December 2012 |df=dmy-all }}</ref>\n\nIn 2014, Weller and Greenshields left the ESI Group, and founded the CFD Direct Ltd, <ref>{{cite web |url=http://cfd.direct/openfoam |title=OpenFOAM |publisher=CFD Direct |date=2015-03-25 |deadurl=no |archiveurl=https://web.archive.org/web/20150329031412/http://cfd.direct/openfoam/ |archivedate=29 March 2015 |df=dmy-all }}</ref>, and forked the official OpenFOAM version on behalf of the OpenFOAM Foundation. OpenFOAM Foundation whose directors are Henry Weller, Chris Greenshields, and Cristel de Rouvray (the CEO of the ESI Group) handed the maintenance of the OpenFOAM-Foundation fork to the CFD Direct.  \n\nThe following figure summarises the chronological and common development of the main three variants of OpenFOAM software, whereat the arrows show the directions of functionality transfers, namely:\n# [https://develop.openfoam.com/Development/OpenFOAM-plus The official OpenFOAM (trademark)] version mainly developed and maintained by [https://www.openfoam.com ESI-OpenCFD Ltd.] with a [[Software versioning#Date of release|date-of-release identifier]] (e.g. v1906),\n# [https://www.openfoam.org The OpenFOAM-Foundation] fork mainly maintained by [https://cfd.direct/ CFD Direct Ltd.] [[Software versioning#Sequence-based identifiers|sequence based identifier]] (e.g. 6.0),\n# [https://sourceforge.net/projects/foam-extend/ The FOAM-Extend Project] fork mainly maintained by [http://www.wikki.co.uk/ Wikki Ltd.].\n\n[[File:Openfoam-history.png|wide image|center|OpenFOAM fork/release history, and merge directions between forks.]]\n\n==Distinguishing features==\n\n===Syntax===\n\nOne distinguishing feature of OpenFOAM is its syntax for tensor operations and [[partial differential equation]]s that closely resembles the equations being solved.  For example,<ref>{{cite web|url=http://www.openfoam.org/features/creating-solvers.php|title=OpenFOAM Features - CFD Direct|website=openfoam.org|deadurl=no|archiveurl=https://web.archive.org/web/20150402094157/http://www.openfoam.org/features/creating-solvers.php|archivedate=2 April 2015|df=dmy-all}}</ref> the equation\n\n: <math> \\frac{\\partial} {\\partial t} (\\rho \\mathbf{U}) + \\nabla \\cdot (\\phi\\mathbf{U}) -\\mu\\nabla ^2 \\mathbf{U} = - \\nabla p </math>\n\nis represented by the code\n\n<source lang = \"cpp\">\nsolve\n(\n     fvm::ddt(rho,U)\n   + fvm::div(phi,U)\n   - fvm::laplacian(mu,U)\n ==\n   - fvc::grad(p)\n);\n</source>\n\nThis syntax, achieved through the use of [[object-oriented programming]] and [[operator overloading]], enables users to create custom solvers with relative ease.  However, code customization becomes more challenging with increasing depth into the OpenFOAM library, owing to a lack of documentation and heavy use of [[template metaprogramming]].\n\n===Extensibility===\n\nUsers can create custom objects, such as boundary conditions or turbulence models, that will work with existing solvers without having to modify or recompile the existing source code.  OpenFOAM accomplishes this by combining [[factory method pattern|virtual constructors]] with the use of simplified base classes as [[interface (computing)|interfaces]].  As a result, this gives OpenFOAM good [[extensibility]] qualities.  OpenFOAM refers to this capability as ''run-time selection''.<ref>[http://openfoamwiki.net/index.php/OpenFOAM_guide/runTimeSelection_mechanism OpenFOAM's ''run-time selection mechanism'' explained] {{webarchive|url=https://web.archive.org/web/20140108081930/http://openfoamwiki.net/index.php/OpenFOAM_guide/runTimeSelection_mechanism |date=8 January 2014 }}</ref>\n\n==Structure of OpenFOAM==\n\nOpenFOAM is constituted by a ''large base library'', which offers the core capabilities of the code:\n* Tensor and field operations\n* Discretization of partial differential equations using a human-readable syntax\n* Solution of linear systems<ref>{{cite web|url=http://www.openfoam.org/features/linear-solvers.php|title=OpenFOAM Features - CFD Direct|website=openfoam.org|deadurl=no|archiveurl=https://web.archive.org/web/20150402155754/http://www.openfoam.org/features/linear-solvers.php|archivedate=2 April 2015|df=dmy-all}}</ref>\n* Solution of ordinary differential equations<ref>{{cite web|url=http://www.openfoam.org/features/ODE-solvers.php|title=OpenFOAM Features - CFD Direct|website=openfoam.org|deadurl=no|archiveurl=https://web.archive.org/web/20150402172329/http://www.openfoam.org/features/ODE-solvers.php|archivedate=2 April 2015|df=dmy-all}}</ref>\n* Automatic parallelization of high-level operations\n* Dynamic mesh<ref>{{cite web|url=http://www.openfoam.org/features/mesh-motion.php|title=OpenFOAM Features - CFD Direct|website=openfoam.org|deadurl=no|archiveurl=https://web.archive.org/web/20150327055333/http://www.openfoam.org/features/mesh-motion.php|archivedate=27 March 2015|df=dmy-all}}</ref>\n* General physical models\n** Rheological models<ref>{{cite web|url=http://cfd.direct/openfoam/user-guide/transport-rheology|title=OpenFOAM v5 User Guide: 7.3 Transport/rheology models|date=2 March 2017|website=cfd.direct|deadurl=no|archiveurl=https://web.archive.org/web/20160319200213/http://cfd.direct/openfoam/user-guide/transport-rheology/|archivedate=19 March 2016|df=dmy-all}}</ref>\n** Thermodynamic models and database<ref>{{cite web|url=http://cfd.direct/openfoam/user-guide/thermophysical|title=OpenFOAM v5 User Guide: 7.1 Thermophysical models|date=2 March 2017|website=cfd.direct|deadurl=no|archiveurl=https://web.archive.org/web/20160319200207/http://cfd.direct/openfoam/user-guide/thermophysical/|archivedate=19 March 2016|df=dmy-all}}</ref>\n** Turbulence models<ref>{{cite web|url=http://cfd.direct/openfoam/features/turbulence-modelling/|title=Turbulence Modelling - OpenFOAM - CFD Direct|website=cfd.direct|deadurl=no|archiveurl=https://web.archive.org/web/20160809021408/http://cfd.direct/openfoam/features/turbulence-modelling/|archivedate=9 August 2016|df=dmy-all}}</ref>\n** Chemical reaction and kinetics models<ref>{{cite web|url=http://www.openfoam.org/features/reaction-kinetics.php|title=OpenFOAM Features - CFD Direct|website=openfoam.org|deadurl=no|archiveurl=https://web.archive.org/web/20150402134456/http://www.openfoam.org/features/reaction-kinetics.php|archivedate=2 April 2015|df=dmy-all}}</ref>\n** [[Lagrangian particle tracking]] methods<ref>{{cite web|url=http://www.openfoam.org/features/lagrangian.php|title=OpenFOAM Features - CFD Direct|website=openfoam.org|deadurl=no|archiveurl=https://web.archive.org/web/20150402171806/http://www.openfoam.org/features/lagrangian.php|archivedate=2 April 2015|df=dmy-all}}</ref>\n** Radiative heat transfer models\n** Multi-reference frame and single-reference frame methodologies\n\nThe capabilities provided by the library are then used to develop ''applications''. Applications are written using the high-level syntax introduced by OpenFOAM, which aims at reproducing the conventional mathematical notation. Two categories of applications exist:\n* Solvers: they perform the actual calculation to solve a specific continuum mechanics problem.\n* Utilities: they are used to prepare the mesh, set-up the simulation case, process the results, and to perform operations other than solving the problem under examination.\n\nEach application provides specific capabilities: for example, the application called ''blockMesh'' is used to generate meshes from an input file provided by the user, while another application called ''icoFoam'' solves the Navier–Stokes equations for an incompressible laminar flow.\n\nFinally, a set of third-party packages are used to provide parallel functionality ([[OpenMPI]]) and graphical post-processing ([[ParaView]]).\n\n==Capabilities==\n\n[[File:Screenshot OpenFOAM smallPoolFire2D ParaView 3.12.0.png|350px|thumb|Simulation of burning [[Methane]]. The [[Graphical user interface]] is [[ParaView]].]]\n\nOpenFOAM solvers include:<ref>{{cite web|url=http://www.openfoam.org/features/|title=OpenFOAM Features - CFD Direct|website=openfoam.org|deadurl=no|archiveurl=https://web.archive.org/web/20150321151946/http://www.openfoam.org/features/|archivedate=21 March 2015|df=dmy-all}}</ref>\n* Basic CFD solvers\n* Incompressible flow with RANS and LES capabilities<ref>{{cite web|url=http://www.openfoam.org/features/standard-solvers.php#incompressibleFlowSolvers|title=OpenFOAM Features - CFD Direct|website=openfoam.org|deadurl=no|archiveurl=https://web.archive.org/web/20150402095238/http://www.openfoam.org/features/standard-solvers.php#incompressibleFlowSolvers|archivedate=2 April 2015|df=dmy-all}}</ref>\n* Compressible flow solvers with RANS and LES capabilities<ref>{{cite web|url=http://www.openfoam.org/features/standard-solvers.php#compressibleFlowSolvers|title=OpenFOAM Features - CFD Direct|website=openfoam.org|deadurl=no|archiveurl=https://web.archive.org/web/20150402095238/http://www.openfoam.org/features/standard-solvers.php#compressibleFlowSolvers|archivedate=2 April 2015|df=dmy-all}}</ref>\n* Buoyancy-driven flow solvers<ref>{{cite web|url=http://www.openfoam.org/features/standard-solvers.php#heatTransferSolvers|title=OpenFOAM Features - CFD Direct|website=openfoam.org|deadurl=no|archiveurl=https://web.archive.org/web/20150402095238/http://www.openfoam.org/features/standard-solvers.php#heatTransferSolvers|archivedate=2 April 2015|df=dmy-all}}</ref>\n* DNS and LES\n* Multiphase flow solvers<ref>{{cite web|url=http://cfd.direct/openfoam/features/multiphase/|title=Multiphase Flows - OpenFOAM - CFD Direct|website=cfd.direct|deadurl=no|archiveurl=https://web.archive.org/web/20160809010435/http://cfd.direct/openfoam/features/multiphase/|archivedate=9 August 2016|df=dmy-all}}</ref>\n* Particle-tracking solvers\n* Solvers for combustion problems<ref>{{cite web|url=http://www.openfoam.org/features/standard-solvers.php#combustionSolvers|title=OpenFOAM Features - CFD Direct|website=openfoam.org|deadurl=no|archiveurl=https://web.archive.org/web/20150402095238/http://www.openfoam.org/features/standard-solvers.php#combustionSolvers|archivedate=2 April 2015|df=dmy-all}}</ref>\n* Solvers for conjugate heat transfer<ref>{{cite web|url=http://www.openfoam.org/features/standard-solvers.php#heatTransferSolvers|title=OpenFOAM Features - CFD Direct|website=openfoam.org|deadurl=no|archiveurl=https://web.archive.org/web/20150402095238/http://www.openfoam.org/features/standard-solvers.php#heatTransferSolvers|archivedate=2 April 2015|df=dmy-all}}</ref>\n* Molecular dynamics solvers<ref>{{cite web|url=http://www.openfoam.org/features/standard-solvers.php#MDSolvers|title=OpenFOAM Features - CFD Direct|website=openfoam.org|deadurl=no|archiveurl=https://web.archive.org/web/20150402095238/http://www.openfoam.org/features/standard-solvers.php#MDSolvers|archivedate=2 April 2015|df=dmy-all}}</ref>\n* Direct simulation Monte Carlo solvers<ref>{{cite web|url=http://www.openfoam.org/features/standard-solvers.php#DSMCSolvers|title=OpenFOAM Features - CFD Direct|website=openfoam.org|deadurl=no|archiveurl=https://web.archive.org/web/20150402095238/http://www.openfoam.org/features/standard-solvers.php#DSMCSolvers|archivedate=2 April 2015|df=dmy-all}}</ref>\n* Electromagnetics solvers<ref>{{cite web|url=http://www.openfoam.org/features/standard-solvers.php#electromagneticsSolvers|title=OpenFOAM Features - CFD Direct|website=openfoam.org|deadurl=no|archiveurl=https://web.archive.org/web/20150402095238/http://www.openfoam.org/features/standard-solvers.php#electromagneticsSolvers|archivedate=2 April 2015|df=dmy-all}}</ref>\n* Solid dynamics solvers<ref>{{cite web|url=http://www.openfoam.org/features/standard-solvers.php#stressAnalysisSolvers|title=OpenFOAM Features - CFD Direct|website=openfoam.org|deadurl=no|archiveurl=https://web.archive.org/web/20150402095238/http://www.openfoam.org/features/standard-solvers.php#stressAnalysisSolvers|archivedate=2 April 2015|df=dmy-all}}</ref>\n\nIn addition to the standard solvers, [[#Syntax|OpenFOAM syntax]] lends itself to the easy creation of custom solvers.\n\nOpenFOAM utilities are subdivided into:\n* Mesh utilities\n** Mesh generation: they generate computational grids starting either from an input file (blockMesh), or from a generic geometry specified as STL file, which is meshed automatically with hex-dominant grids (snappyHexMesh)\n** Mesh conversion: they convert grids generated using other tools to the OpenFOAM format\n** Mesh manipulation: they perform specific operations on the mesh such as localized refinement, definition of regions, and others\n* Parallel processing utilities: they provide tools to decompose, reconstruct and re-distribute the computational case to perform parallel calculations\n* Pre-processing utilities: tools to prepare the simulation cases\n* Post-processing utilities: tools to process the results of simulation cases, including a plugin to interface OpenFOAM and [[ParaView]].\n* Surface utilities\n* Thermophysical utilities\n\n==License==\n\nOpenFOAM is [[free and open-source software]], released under the [[GNU General Public License]] version 3.<ref>{{cite web|url=http://www.openfoam.org/licence.php|title=Free Software Licence|first=Chris|last=Greenshields|date=28 April 2016|website=openfoam.org|deadurl=no|archiveurl=https://web.archive.org/web/20120609045216/http://www.openfoam.org/licence.php|archivedate=9 June 2012|df=dmy-all}}</ref>\n\n==Advantages and disadvantages==\n\n===Advantages===\n* Friendly syntax for partial differential equations\n* Fully documented source code<ref>{{cite web|url=http://cpp.openfoam.org|title=OpenFOAM: Free, Open Source Software from the OpenFOAM Foundation|website=cpp.openfoam.org}}</ref>\n* Unstructured polyhedral grid capabilities\n* Automatic parallelization of applications written using OpenFOAM high-level syntax\n* Wide range of applications and models ready to use\n* Commercial support and training provided by the developers\n* No license costs\n\n===Disadvantages===\n* The development community suffers from fragmentation, giving rise to numerous forked projects.\n* Absence of an integrated [[graphical user interface]] (stand-alone open-source and proprietary options are available)\n* The Programmer's guide does not provide sufficient details, making the progress slow if you need to write new applications or add functionality\n\n== GUI and software tools integrated with OpenFOAM ==\n* '''[[FEATool|FEATool Multiphysics]]'''<ref>{{Cite web|url=http://www.featool.com/news/2018/05/17/FEATool-v1p8-with-OpenFOAM-Matlab-CFD-Solver-Interface.html|title=FEATool 1.8 with OpenFOAM MATLAB CFD GUI Integration|work=featool.com|access-date=2018-05-18}}</ref> A physics simulation toolbox and GUI for MATLAB.\n* '''HELYX-OS'''<ref>{{Cite web|url=https://engys.com/products/helyx-os|title=HELYX-OS GUI for OpenFOAM {{!}} ENGYS|website=engys.com|access-date=2018-01-15}}</ref>\n* '''iconCFD'''<ref>{{Cite web|url=http://iconcfd.com/en/iconcfd/427-iconcfd-setup|title=Setup: iconCFD Process|last=Administrator|website=iconcfd.com|language=en-gb|access-date=2018-01-15}}</ref>\n*'''InsightCAE'''<ref>{{Cite news|url=http://silentdynamics.de/en/oss-cae#insight|title=Open Source Engineering Software - silentdynamics|work=silentdynamics|access-date=2018-06-07|language=en-US}}</ref> is an open source project for creating automated simulation workflows which can be controlled from a GUI (\"[[Vertical market software|vertical apps]]\"). OpenFOAM is supported as the primary backend for CFD simulations.\n* '''[[MantiumFlow]]'''<ref>{{Cite web|url=https://mantiumflow.com/|title=CFD simulation software using OpenFOAM® made as simple as possible|website=MantiumFlow|access-date=2018-08-27|language=en-US}}</ref> - a CLI and GUI tool which automates CFD pre and post-processing, turning simulations into Apps (\"[[Vertical market software|vertical apps]]\").\n* '''SimFlow'''<ref>{{Cite web|url=https://sim-flow.com/|title=simFlow CFD Software - OpenFOAM® GUI|website=simFlow CFD|language=en-US|access-date=2018-01-15}}</ref>\n* '''[[SimScale]]'''<ref>{{Cite news|url=https://www.simscale.com/open-source/|title=Open Source Solvers Integrated with SimScale|work=SimScale|access-date=2018-01-15|language=en-US}}</ref>\n* '''[[simulationHub]]'''<ref>{{Cite web|url=https://www.simulationhub.com/credits|title=Components used in simulationHub|language=en-US|access-date=2019-04-07}}</ref> - online platform with automated cloud based CFD Apps (\"[[Vertical market software|vertical apps]]\"), specifically developed for [[Design engineer]] \n* '''SwiftBloc'''<ref>{{Cite web|url=https://openfoamwiki.net/index.php/SwiftBlock|title=Contrib/SwiftBlock - OpenFOAMWiki|website=openfoamwiki.net|language=en|access-date=2018-01-15}}</ref> and '''SwiftSnap'''<ref>{{Cite web|url=https://openfoamwiki.net/index.php/Contrib/SwiftSnap|title=Contrib/SwiftSnap - OpenFOAMWiki|website=openfoamwiki.net|language=en|access-date=2018-01-15}}</ref>\n* '''[[Visual-CFD]]'''<ref>{{Cite web|url=https://www.openfoam.com/products/visualcfd.php|title=Visual-CFD for OpenFOAM®|website=openfoam.com|language=en|access-date=2018-05-05}}</ref> is an advanced, intelligent environment for OpenFOAM including Pre and Post modules with process Automation/Customization features\n* '''[[preCICE]]'''<ref>{{Cite web|url=https://www.precice.org/|title=preCICE|language=en|access-date=2019-03-24}}</ref> is an open-source coupling library for partitioned multi-physics simulations.\n\n==See also==\n* [[ParaView]] an open-source multiple-platform application for interactive scientific visualization\n\n==References==\n{{Reflist}}\n\n==External links==\n\n===Official resources===\n* [https://openfoam.org/ OpenFOAM Foundation website]\n* [https://openfoam.com OpenFOAM Trademark website]\n* [https://openfoam.org/download Download OpenFOAM-Foundation variant]\n* [https://openfoam.com/download Download OpenFOAM-Trademark variant]\n* [https://openfoam.org/resources OpenFOAM-Foundation documentation]\n*[https://www.openfoam.com/documentation/ OpenFOAM-Trademark extended code documentation]\n* [https://bugs.openfoam.org OpenFOAM-Foundation bug-reporting system]\n* [https://develop.openfoam.com/ OpemFOAM-Trademark bug-reporting system]\n\n===Community resources===\n* [http://www.cfd-online.com/Forums/openfoam/ OpenFOAM Forum at CFD Online]\n* [http://openfoamwiki.net/index.php/Main_Page OpenFOAM wiki]\n* [http://blog.sina.com.cn/openfoamresearch/ A Blog about OpenFOAM in Chinese]\n* [https://holzmann-cfd.de OpenFOAM tutorials by Holzmann CFD]\n* [http://www.tfd.chalmers.se/~hani/kurser/OS_CFD/ PhD course in CFD with OpenSource Software]\n\n===Other resources===\n*[http://www.openfoam.com/ OpenCFD Ltd]\n{{Numerical analysis software}}\n{{CAE software}}\n\n{{DEFAULTSORT:Openfoam}}\n[[Category:2004 software]]\n[[Category:C++ software]]\n[[Category:Computational fluid dynamics]]\n[[Category:Computer-aided engineering software for Linux]]\n[[Category:Continuum mechanics]]\n[[Category:Fluid dynamics]]\n[[Category:Free science software]]\n[[Category:Free software]]\n[[Category:Free software programmed in C++]]\n[[Category:Linux-only software]]\n[[Category:Open Source computer aided engineering applications]]\n[[Category:Scientific simulation software]]"
    },
    {
      "title": "OpenLB",
      "url": "https://en.wikipedia.org/wiki/OpenLB",
      "text": "{{Orphan|date=April 2017}}\n\n{{Infobox Software\n| name                   = OpenLB\n| logo                   = \n| screenshot             = \n| caption                = \n| author                 = \n| developer              =\n| latest release version = 1.3<ref>{{cite web|url=http://www.openlb.net/download/ |title=OpenLB 1.3}}</ref>\n| latest release date    = {{Start date|2019|05|20|df=yes}}\n| programming language   = [[C++]]\n| operating system       = [[Linux]], [[Mac OS]], [[Microsoft Windows|Windows]]\n| genre                  = [[Computational fluid dynamics]], [[simulation software]]\n| license                = [[GNU General Public License|GPLv2]] ([[GPLv2]])\n| website                = [http://www.openlb.net/ www.openlb.net]\n}}\n \n'''OpenLB''' is an object-oriented implementation of the [[lattice Boltzmann methods]] (LBM). It is the first implementation of a generic platform for LBM programming, which is shared with the open source community [[GNU General Public License|(GPLv2)]].<ref>Heuveline, Vincent, and Mathias J. Krause. \"OpenLB: towards an efficient parallel open source library for lattice Boltzmann fluid flow simulations.\" International Workshop on State-of-the-Art in Scientific and Parallel Computing. PARA. Vol. 9. 2010.</ref>\nThe code is written in [[C++]] and is used by application programmers as well as developers, with the ability to implement custom models<ref>{{cite web|title=OpenLB is ... {{!}} OpenLB – Open Source Lattice Boltzmann Code|url=http://www.openlb.net/welcome|website=openlb.net|accessdate=28 February 2017}}</ref>\nOpenLB supports complex [[data structures]] that allow simulations in complex geometries and parallel execution using MPI and [[OpenMP]] on high-performance computers.\nThe source code uses the concepts of interfaces and [[Template (C++)|templates]], so that efficient, direct and intuitive implementations of the LBM become possible.<ref>{{cite journal|last1=Heuveline|first1=Vincent|last2=Latt|first2=Jonas|title=The openlb project: an open source and object oriented implementation of lattice boltzmann methods|journal=International Journal of Modern Physics C|date=1 April 2007|volume=18|issue=4|pages=627–634|doi=10.1142/S0129183107010875|issn=0129-1831|bibcode=2007IJMPC..18..627H}}</ref>\nThe efficiency and scalability has been checked and proved by code reviews.<ref>{{cite book|last1=Fietz|first1=Jonas|last2=Krause|first2=MathiasJ.|last3=Schulz|first3=Christian|last4=Sanders|first4=Peter|last5=Heuveline|first5=Vincent|title=Optimized Hybrid Parallel Lattice Boltzmann Fluid Flow Simulations on Complex Geometries|journal=Euro-Par 2012 Parallel Processing|date=1 January 2012|volume=7484|pages=818–829|language=English|doi=10.1007/978-3-642-32820-6_81|series=Lecture Notes in Computer Science|isbn=978-3-642-32819-0}}</ref>\nA user manual and a source code documentation by [[Doxygen|DoxyGen]] are available on the project page.\n \n== Functions ==\n''OpenLB'' is being constantly developed. By now the following features are implemented:\n* Computational fluid dynamics in complex geometry<ref name=Krause2010>Krause, Mathias J., Thomas Gengenbach, and Vincent Heuveline. \"Hybrid parallel simulations of fluid flows in complex geometries: Application to the human lungs.\" European Conference on Parallel Processing. Springer Berlin Heidelberg, 2010.</ref>\n* Automatic generation of a grid<ref name=Krause2010 />\n* Turbulent flow<ref>Nathen, Patrick, et al. \"An extension of the Lattice Boltzmann Method for simulating turbulent flows around rotating geometries of arbitrary shape.\" 21st AIAA Computational Fluid Dynamics Conference. 2013.</ref>\n* Multi-component flow<ref>{{cite web|title=Bifurcation {{!}} OpenLB – Open Source Lattice Boltzmann Code|url=http://www.openlb.net/bifurcation|website=optilb.org|accessdate=28 February 2017}}</ref>\n* Thermal flow<ref>{{cite web|title=Rayleigh Benard {{!}} OpenLB – Open Source Lattice Boltzmann Code|url=http://optilb.org/openlb/rayleigh-benard|website=optilb.org|accessdate=28 February 2017}}</ref>\n* Light radiation<ref>Mink, Albert, et al. \"A 3D Lattice Boltzmann method for light stimulation in participating media.\" Journal of Computational Science (2016).</ref>\n* Topologie optimizing<ref>Krause, Mathias J. \"Fluid flow simulation and optimisation with lattice Boltzmann methods on high performance computers: application to the human respiratory system.\" Karlsruhe Institute of Technology, KIT (2010).</ref>\n* Particle flow (Euler–Euler and Euler–Lagrange method)<ref>Trunk, Robin, et al. \"Inertial dilute particulate fluid flow simulations with an Euler–Euler lattice Boltzmann method.\" Journal of Computational Science (2016).</ref>\n\n== Automated grid generation ==\nAutomated grid generation<ref name=Krause2010 /> is one of the great advantages of ''OpenLB'' over other CFD software packages. The main advantages are listed below:\n \n* Use of geometries in the [[STL (file format)|STL file format]] or geometrically primitive forms (e.g. ball, cylinder, cone) and their union, intersection and difference\n* Very fast voxelization: 600<sup>3</sup> ~ 1 minute\n* Handling non-watertight surfaces\n* Memory-friendly using [[octree]]s\n* [[Load balancing (computing)|Load distribution]] for parallel execution with MPI and OpenMP.\n \nThe automatic grid generation can assume both an STL file as well as primitive geometries. For the geometry, a uniform and rectangular grid is created which encloses the entire space of the geometry. The superfluous grid cells are then removed and the remaining cuboids are shrunk to fit the given geometry. Finally, the grid is distributed to different threads or processors for the parallel execution of the simulation. The boundary conditions and start values can be set using material numbers.\n\n== Literature ==\n* Krause, Mathias J. and Latt, Jonas and Heuveline, Vincent. \"Towards a hybrid parallelization of lattice Boltzmann methods.\" ''Computers & Mathematics with Applications'' 58.5 (2009): 1071–1080.\n* Heuveline, Vincent, and Mathias J. Krause. \"OpenLB: towards an efficient parallel open source library for lattice Boltzmann fluid flow simulations.\" ''International Workshop on State-of-the-Art in Scientific and Parallel Computing''. PARA. Vol. 9. 2010.\n* Krause, Mathias J., Thomas Gengenbach, and Vincent Heuveline. \"Hybrid parallel simulations of fluid flows in complex geometries: Application to the human lungs.\" ''European Conference on Parallel Processing''. Springer Berlin Heidelberg, 2010.\n* Krause, Mathias J. \"Fluid flow simulation and optimisation with lattice Boltzmann methods on high performance computers: application to the human respiratory system.\" Karlsruhe Institute of Technology, KIT (2010).\n* Trunk, Robin, et al. \"Inertial dilute particulate fluid flow simulations with an Euler–Euler lattice Boltzmann method.\" ''Journal of Computational Science'' (2016).\n* Mink, Albert, et al. \"A 3D Lattice Boltzmann method for light simulation in participating media.\" ''Journal of Computational Science'' (2016).\n \n== Awards ==\n* Winner Mimics Innovation Award (2011)<ref>{{cite web|url=http://biomedical.materialise.com/cases/innovative-patient-specific-intranasal-flow-simulations|title=Innovative Patient-Specific Intranasal Flow Simulations|publisher=}}</ref>\n* Honorary certificate in the Group Humanitarian Impact, \"Itanium® Solutions Alliance Innovation Awards\" (2009)<ref>{{cite web|url=http://www.mynewsdesk.com/se/kiwok/pressreleases/itanium-solutions-alliance-selects-swedens-kiwok-as-the-2009-innovation-awards-winner-for-humanitarian-impact-308715|title=Itanium Solutions Alliance Selects Sweden's Kiwok as the 2009 Innovation Awards Winner for Humanitarian Impact|publisher=}}</ref>\n* Finalist in the Group Humanitarian Impact Innovation, \"Itanium® Solutions Alliance Innovation Awards\" (2007)\n\n== References ==\n{{reflist}}\n\n== External links ==\n* [http://www.openlb.net/ Official website]\n* [https://www.youtube.com/watch?v=Msh2iyG6-ho Dynamic Cross Flow Filtration with OpenLB (YouTube Video)]\n* [https://www.youtube.com/watch?v=Poued4wEnHw-ho OpenLB Trailer (YouTube Video)]\n\n[[Category:C++ software]]\n[[Category:Computational fluid dynamics]]\n[[Category:Computer-aided engineering software for Linux]]\n[[Category:Continuum mechanics]]\n[[Category:Free science software]]\n[[Category:Free software programmed in C++]]\n[[Category:Open Source computer aided engineering applications]]\n[[Category:Scientific simulation software]]"
    },
    {
      "title": "Overflow (software)",
      "url": "https://en.wikipedia.org/wiki/Overflow_%28software%29",
      "text": "{{About|the fluid dynamics simulation software||Overflow (disambiguation)}}\n{{Infobox software\n| name                   = Overflow\n| title                  = \n| logo                   = <!-- [[File: ]] -->\n| screenshot             = [[File:SSLV ascent.jpg|200px|frameless]]\n| caption                = This image depicts the flowfield around a Space Shuttle traveling at Mach 2.46 and at an altitude of {{convert|66000|ft}}. The surface of the vehicle is colored by the pressure coefficient, and the gray contours represent the density of the surrounding air, as calculated using the OVERFLOW codes.\n| collapsible            = \n| author                 = Pieter Buning, Dennis Jespersen, others\n| developer              = NASA\n| released               = <!-- {{Start date|YYYY|MM|DD|df=yes/no}} -->\n| latest release version = 2.2k\n| latest release date    = {{Start date and age|2015|03|18|df=yes/no}}\n| latest preview version = \n| latest preview date    = <!-- {{Start date and age|YYYY|MM|DD|df=yes/no}} -->\n| programming language   = \n| operating system       = \n| platform               = [[Unix like]]\n| website                = {{URL|http://people.nas.nasa.gov/~pulliam/Overflow/Overflow_Manuals.html}}\n}}\n\n'''OVERFLOW''' - the [[Overset grids|OVERset]] grid FLOW solver - is a [[Software package (installation)|software package]] for simulating [[Fluid dynamics|fluid flow]] around solid bodies using [[computational fluid dynamics]] (CFD). It is a [[Compressibility|compressible]] 3-D flow solver that solves the time-dependent, Reynolds-averaged, [[Navier-Stokes equations]] using multiple overset structured grids.\n\n==History==\n\nOVERFLOW was developed as part of a collaborative effort between [[NASA]]'s [[Lyndon B. Johnson Space Center|Johnson Space Center]] in [[Houston, Texas]] and NASA [[NASA Ames Research Center|Ames Research Center]] (ARC) in [[Moffett Federal Airfield|Moffett Field]], [[California]]. The driving force behind this work was the need for evaluating the flow about the [[Space Shuttle]] launch vehicle. Originally developed in the early 1990s by NASA's [[Pieter Buning]], [[Dennis Jespersen]] and others, the code is an outgrowth of earlier codes F3D and ARC3D, and a result of ARC's long history of flow-solver development.<ref>{{cite web\n| url = http://www.hq.nasa.gov/hpcc/insights/vol5/overflow.htm\n| title = OVERFLOW code empowers Computational Fluid Dynamics\n| author = Judy Conlon\n| publisher = [[NASA]]\n| date = April 1998\n| accessdate = 2008-01-24\n}}</ref>\n\n==Usage==\n\nScientists use OVERFLOW to better understand the [[Aerodynamics|aerodynamic forces]] on a vehicle by evaluating the flowfield surrounding the vehicle. While [[wind tunnel]] testing provides limited data at many flow conditions, CFD simulations provide detailed information about selected conditions, and also provide a distribution of forces on the vehicle, aiding in structural design.\n\nOVERFLOW has also been used to simulate the effect of debris on the space shuttle launch vehicle.<ref>{{cite web\n| url = http://www.nasa.gov/centers/ames/pdf/153087main_fs_shuttle_nas.pdf\n| title = The Impact of High-End Computing on the Space Shuttle Program\n| author =\n| publisher = [[NASA Ames Research Center]]\n| date =\n| accessdate = 2008-01-24\n}}</ref>\n\n==See also==\n{{Portal|Computer Science}}\n* [[Computational fluid dynamics]]\n\n==References==\n\n{{Reflist}}\n\n==External links==\n* [http://overflow.larc.nasa.gov/ Official NASA OVERFLOW CFD Code web site]\n* [http://www.hq.nasa.gov/hpcc/insights/vol5/overflow.htm Article on OVERFLOW from NASA Insights]\n\n[[Category:Computational fluid dynamics]]\n[[Category:Fluid dynamics]]"
    },
    {
      "title": "Pencil Code",
      "url": "https://en.wikipedia.org/wiki/Pencil_Code",
      "text": "The '''Pencil Code''' is a high-order [[finite-difference method|finite-difference code]] for solving [[partial differential equation]]s, written in [[High_Performance_Fortran|Fortran 95]]. The code is designed for efficient computation with massive [[parallelization]]. Due to its modular structure, it can be used for a large variety of [[Physics|physical]] setups like [[hydrodynamics|hydro-]] and [[magnetohydrodynamics]] relevant for, e.g., [[astrophysics]], [[geophysics]], [[cosmology]], [[turbulence]], and [[combustion]]. Many such setups are available as ready-to-run samples.\n\n== Methods ==\nThe computational scheme is [[Finite difference method|finite-difference]] and non-conservative; the time integration is implemented by an explicit scheme. Due to the usage of the [[Magnetic vector potential|vector potential]], the magnetic field is intrinsically divergence free. High-order (4th, 6th, and 10th order, as well as single-sided or upwind) [[derivative]]s are available to resolve strong variations on the grid scale. With a set of automated tests, the functionality of the code is validated on a daily basis. [[Message Passing Interface|MPI]] is used for parallelization, but the code can also be run non-parallel on a simple [[Personal computer|PC]]. There are modules for different time-integration schemes (e.g. three-step [[Runge–Kutta methods|Runge–Kutta]]), treatment of [[Shock wave|shocks]], embedded particle dynamics, chemistry, massive [[parallel I/O]], etc.\n\n== Applications ==\nThe Pencil Code has mainly been applied to describe [[Compressibility|compressible]] [[turbulence]] and [[Magnetohydrodynamics#Resistive MHD|resistive magnetohydrodynamics]]. Applications include studies of [[planet formation]],<ref>{{cite journal|author=Johansen, A.|author2=Oishi, Jeffrey S.|author3=Mac Low, M.-M.|author4=Klahr, H.|author5=Henning, Th.|author6=Youdin, A.|date=2007|title=Rapid planetesimal formation in turbulent circumstellar disks|journal=Nature|volume=448|issue=7157|pages=1022|bibcode=2007Natur.448.1022J|doi=10.1038/nature06086|pmid=17728751|arxiv=0708.3890}}</ref> the [[solar dynamo]],<ref>{{cite journal|author=Käpylä, P. J.|author2=Mantere, M. J.|author3=Brandenburg, A.|date=2012|title=Cyclic magnetic activity due to turbulent convection in spherical wedge geometry|journal=Astrophys. J.|volume=755|pages=L22|bibcode=2012ApJ...755L..22K|doi=10.1088/2041-8205/755/1/L22|arxiv=1205.4719}}</ref> mono-chromatic [[radiative transfer]],<ref>{{cite journal|author=Heinemann T.|author2=Dobler W.|author3=Nordlund Å.|author4=Brandenburg A.|date=2006|title=Radiative transfer in decomposed domains|journal=Astronomy & Astrophysics|volume=448|issue=2|pages=731|bibcode=2006A&A...448..731H|doi=10.1051/0004-6361:20053120|arxiv=astro-ph/0503510}}</ref> the [[coronal heating problem]],<ref>{{cite journal|author=Bourdin Ph.-A.|author2=Bingert S.|author3=Peter H.|date=2013|title=Observationally driven 3D magnetohydrodynamics model of the solar corona above an active region|journal=Astronomy & Astrophysics|volume=555|pages=A123|bibcode=2013A&A...555A.123B |doi=10.1051/0004-6361/201321185|arxiv=1305.5693}}</ref> [[debris disks]],<ref>{{cite journal|author=Lyra. W.|author2= Kuchner, M. J.|date=2013|title=Formation of sharp eccentric rings in debris disks with gas but without planets|journal=Nature|volume=499|issue=7457|pages=184|bibcode=2013Natur.499..184L |doi=10.1038/nature12281|pmid=23846656|arxiv=1307.5916}}</ref> turbulent combustion of solid fuels, and others.\n\n== History ==\nThe Pencil Code development was started in 2001 by Axel Brandenburg and Wolfgang Dobler during the 'Helmholtz Summer School' at the [[:de:Deutsches GeoForschungsZentrum|Helmholtz Research Centre for Geosciences]] in [[Potsdam]]. It was initially used for [[Magnetohydrodynamic turbulence|MHD turbulence]] simulations.<ref>{{cite journal|author=Brandenburg A.|author2=Dobler W.|date=2002|title=Hydromagnetic turbulence in computer simulations|journal=Comp. Phys. Comm|volume=147|pages=471|bibcode=2002CoPhC.147..471B|doi=10.1016/S0010-4655(02)00334-X|arxiv=astro-ph/0111569}}</ref> The development was continued by a team of about ten code owners and around 90 additional developers who extended the code for their scientific research. It is used by additional users from various branches of science. The code repository was hosted at [[Nordic Institute for Theoretical Physics|NORDITA]] until 2008 and was then moved to [[Google Developers]]. In April 2015 the code was migrated to [[GitHub]].\n\n==References==\n{{reflist}}\n\n== External links ==\n* [http://pencil-code.nordita.org/ Official homepage]\n* [http://code.google.com/p/pencil-code/ old Code development site and Subversion repository]\n* [https://github.com/pencil-code/ new Code development site and Subversion repository]\n\n[[Category:Magnetohydrodynamics]]\n[[Category:Computational fluid dynamics]]\n[[Category:Simulation software]]\n[[Category:Parallel computing]]\n[[Category:Fortran software]]\n[[Category:Free astronomy software]]"
    },
    {
      "title": "PISO algorithm",
      "url": "https://en.wikipedia.org/wiki/PISO_algorithm",
      "text": "==Introduction==\nPISO algorithm ('''Pressure-Implicit with''' [[operator splitting|'''Splitting of Operators''']]) was proposed by Issa in 1986 without iterations and with large time steps and a lesser computing effort. It is an extension of the [[SIMPLE algorithm]] used in [[computational fluid dynamics]] to solve the Navier-Stokes equations. PISO is a pressure-velocity calculation procedure for the [[Navier-Stokes equations]] developed originally for non-iterative computation of unsteady compressible flow, but it has been adapted successfully to steady-state problems.\n\nPISO involves one predictor step and two corrector steps and is designed to satisfy mass conservation using predictor-corrector steps.\n\n==Algorithm steps==\n[[File:Flow chart of PISO algorithm.png|thumb|407x407px|Flow chart of PISO algorithm|center]]\n\nThe algorithm can be summed up as follows:\n#Set the boundary conditions.\n#Solve the discretized momentum equation to compute an intermediate velocity field.\n#Compute the mass fluxes at the cells faces.\n#Solve the pressure equation.\n#Correct the mass fluxes at the cell faces.\n#Correct the velocities on the basis of the new pressure field.\n#Update the boundary conditions.\n#Repeat from 3 for the prescribed number of times.\n#Increase the time step and repeat from 1.\n\nAs already seen{{where?|date=June 2019}} for the SIMPLE algorithm, the steps 4 and 5 can be repeated for a prescribed number of times to correct for non-orthogonality.\n\n'''Predictor step'''\n\nGuess the pressure field <math>p^*</math> and get velocity field components <math>u^*</math> and <math>v^*</math> using discretized momentum equation. The initial guess for the pressure may or may not be correct.<br /> \n'''Corrector step 1'''<br />Velocity component obtained from predictor step may not satisfy the continuity equation, so we define correction factors p',v',u'  for the pressure field and velocity field. Solve the momentum equation by inserting correct pressure field <math>p^{**}</math> and get the corresponding correct velocity components <math>u^{**}</math> and <math>v^{**}</math>.\n\n<math>p'=p^{**}-p^*</math>\n\n<math>v'=v^{**}-v^*</math><br />\n<math>u'=u^{**}-u^*</math><br />\nwhere ;<br /><math>p^{**},u^{**},v^{**}</math>     :correct pressure field and velocity component <br />\n<math>p',u',v'</math> :correction in pressure field and correction in velocity components <br />\n<math>p^*,u^*,v^*</math> :guessed pressure field and velocity component<br />\nWe define <math>p',u',v'</math> as above.\nBy putting the correct pressure field <math>p^{**}</math> into the discretized momentum equation we get the correct velocity components <math>v^{**}</math> and <math>u^{**}</math>. Once the pressure correction <math>p'</math> is known we can find the correction components for the velocity: <math>u'</math> and <math>v'</math>.\n\n'''Corrector step 2'''\nIn piso another corrector step can be used.<br />\n<math>p^{***}=p^{**}+p''</math>    ;    <math>p''=p^*+p'</math><br />\n<math>u^{***}=u^{**}+u''</math>     ;     <math>u''=u^*+u'</math><br />\n<math>v^{***}=v^{**}+v''</math>     ;    <math>v''=v^*+v'</math><br />\nwhere : <math>p^{***},v^{***},u^{***}</math> are the correct pressure field and the correct velocity components, respectively<br />\nand <math>p'',v'',u''</math> are second corrections to the pressure and velocity field.<br />\nSet <math>p=p^{***}, v=v^{***}, u=u^{***}</math> \nwhere; <math>p,v,u</math> are correct pressure and velocity field\n\n==Advantages and disadvantages==\n# Generally gives more stable results and takes less CPU time but not suitable for all processes.\n# Suitable numerical schemes for solving the pressure-velocity linked equation.\n# For laminar backward facing step PISO is faster than SIMPLE but it is slower concerning flow through heated fin.\n# If momentum and scalar equation have weak or no coupling then PISO is better than SIMPLEC.\n\n==See also==\n*[[Fluid mechanics]]\n*[[Computational fluid dynamics]]\n*[[Algorithm]]\n*[[SIMPLE algorithm]]\n*[[SIMPLER algorithm]]\n*[[SIMPLEC algorithm]]\n\n==References==\n1. An Introduction to Computational Fluid Dynamics The Finite Volume Method, 2/e\nBy Versteeg  {{ISBN|978-0131274983}}  <br />\n2. Computational Fluid Dynamics for Engineers By Bengt Andersson\nRonnie Andersson\nLove Håkansson\nMikael Mortensen\nRahman Sudiyo\nBerend van Wachem\n{{ISBN|978-1-107-01895-2}} <br />\n3. Computational Fluid Dynamics in Fire Engineering: Theory, Modelling and Practice\nBy Guan Heng Yeoh, Kwok Kit Yuen {{ISBN|978-0750685894}}<br /> \n4.http://openfoamwiki.net/index.php/OpenFOAM_guide/The_PISO_algorithm_in_OpenFOAM<br /> \n5. Computational fluid dynamics BY T. J. CHUNG University of Alabama in Huntsville {{ISBN|0 521 59416 2}}<br /> \n6. Computational method for fluid dynamics by Joel H.Ferziger,Milovan Peric {{ISBN|3-540-42074-6}}<br /> \n7. Solution of the implicitly discretized fluid flow equations by operator-splitting, Journal of Computational Physics 62 by R. Issa \n\n[[Category:Computational fluid dynamics]]"
    },
    {
      "title": "PLOT3D file format",
      "url": "https://en.wikipedia.org/wiki/PLOT3D_file_format",
      "text": "In [[computational fluid dynamics]], the '''PLOT3D''' file format is a standard file format used for storing grid and results data.  PLOT3D was created by [[NASA Ames Research Center]] in 1982 by Pieter Buning<ref>{{citation | url=https://ntrs.nasa.gov/archive/nasa/casi.ntrs.nasa.gov/19900013774_1990013774.pdf | publisher=[[NASA]] | accessdate=16 November 2010 | title=PLOT3D User's Manual }}</ref> and remains an often used [[file format]].  It can only store a [[structured grid]]. The structured grid allows [[random access]], that is by knowing the block number, ''i'' location, ''j'' location, and ''k'' location, any grid point value or result value may be extracted.  Additionally, given the location of any value, the block  number, ''i'' location, ''j'' location, and ''k'' location may be determined.  This makes it simple to iterate through a series of volumetric elements and calculate all required properties for the purpose of a [[Computational fluid dynamics|CFD]] analysis.\n\nThe most basic format includes two different files, a grid file (G-file) and a solution file (Q-file). The [[filename extension|filename extensions]] used vary, though .q is common for Q-files. Grid files may use .g, .x, .xy, or .xyz, among other extensions. The grid file contains the coordinates of the solution grid, while the solution file contains information typical of a CFD solution, flow density, flow momentum (a vector), and flow energy.<ref>{{cite web|last1=Data Analysis and Assessment Center|title=PLOT3D|url=https://web.archive.org/web/20150527020656/http://daac.hpc.mil/gettingStarted/Plot3D.html|publisher=DoD HPC Modernization Program|accessdate=26 May 2015}}</ref> Data may be stored in either binary or ASCII text format and floating point values may be either single or double precision. There are also multiblock and unstructured extensions to the format, so it is often unclear how a particular set of nominally PLOT3D-format files is formatted on the binary level without referring to the software that created them.<ref>{{cite web|title=How to read Plot3D data|url=http://vis.lbl.gov/NERSC/Software/ensight/doc/OnlineHelp/HT-Read-PLOT3D.pdf|accessdate=26 May 2015}}</ref> Examination with a [[hex editor]] may be useful in determining the format variant.\n\nAdditional files may be present containing different kinds of ancillary data.\n\n\"Formatted\" FORTRAN (ASCII text) data files will typically use CR-LF (0x0d 0x0a) delimiters at the end of the line, though the line breaks are implementation dependent. \"Unformatted\" FORTRAN (binary) files have the variables laid out in the same order but will normally lack delimiters such as line breaks. The binary format will be implementation and machine dependent.\n\nA multiblock, 3 dimensional Q file begins with a single integer for the number of blocks M on its own line. The next M lines contain three integers for each of the blocks, which give the ''i'', ''j'', and ''k'' dimension sizes for each block. The M blocks are read in next. Each block begins with a line containing four floating-point values, the freestream [[Mach number]], the freestream angle of attack, the freestream [[Reynolds number]], and the time. The rest of the block contains the values iterated over ''i'', ''j'', ''k'', ''m'' (block index), and the outermost ''n'', which counts through 5 sections, the density, the 3 components of the momentum, and finally the energy.<ref>{{cite web|title=Plot3d File Format for Grid and Solution Files|url=http://www.grc.nasa.gov/WWW/wind/valid/plot3d.html|publisher=NPARC Alliance CFD Verification and Validation Website}}</ref>\n\nA multiblock, 3 dimensional grid file begins with a single integer for the number of blocks M on its own line. The next M lines contain three integers for each of the blocks, which give the ''i'', ''j'', and ''k'' dimension sizes for each block. The M blocks are read in next. Each block contains a coordinate value iterated over ''i'', ''j'', ''k'', and then the three coordinates, ''x'', ''y'', and ''z''.<ref>{{cite web|title=Plot3d File Format for Grid and Solution Files|url=http://www.grc.nasa.gov/WWW/wind/valid/plot3d.html|publisher=NPARC Alliance CFD Verification and Validation Website}}</ref>\n\nAdditionally, the format may be simplified such that only a two-dimensional problem is analyzed or the ''iBlank'' parameter is omitted.  The ''iBlank'' parameter indicates whether or not the cell is a physical or non-physical cell.  For example, if two PLOT3D grids are intersected, one of an aircraft [[fuselage]], and the other of an aircraft [[wing]], there are internal cells that should not be analyzed.  These are ''iBlank'''ed cells and have a value of 0.\n\n==Other structured file formats==\n* [[CGNS]]\n* [[Tecplot]]\n\n==References==\n{{Reflist}}\n\n[[Category:Computational fluid dynamics]]\n[[Category:Computer file formats]]"
    },
    {
      "title": "Power law scheme",
      "url": "https://en.wikipedia.org/wiki/Power_law_scheme",
      "text": "{{refimprove|date=February 2013}}\n\nThe '''power law scheme''' was first used by [[Suhas Patankar]] (1980). It helps in achieving approximate solutions in [[computational fluid dynamics]] (CFD) and it is used for giving a more accurate approximation to the one-dimensional exact solution when compared to other schemes in [[computational fluid dynamics]] (CFD). This scheme is based on the analytical solution of the [[convection diffusion equation]]. This scheme is also very effective in removing [[False diffusion]] error.\n\n== Working ==\nThe '''power-law scheme'''<ref>{{cite book|last=Versteeg|first=H.K.|title=An introduction to computational fluid dynamics: the finite volume method|year=2007|publisher=Prentice Hall|location=Harlow|isbn=9780131274983|edition=2nd |author2=Malalasekera, W.}}</ref><ref>{{cite book|last=Patankar|first=Suhas V.|title=Numerical heat transfer and fluid flow|year=1980|publisher=Taylor & Francis|location=Bristol, PA|isbn=9780891165224|edition=14. printing.}}</ref> interpolates the face value of a variable, <math>\\phi\\,</math>, using the exact solution to a one-dimensional convection-diffusion equation given below:\n\n:<math>\\frac{\\partial}{\\partial x}(\\rho u \\phi)\\,= \\frac{\\partial}{\\partial x}\\Gamma\\frac{\\partial \\phi}{\\partial x} </math>\n\nIn the above equation  Diffusion Coefficient,  <math>\\Gamma</math> and both the density <math>\\rho</math> and velocity remains constant '''u''' across the interval of integration.\n\nIntegrating the equation, with Boundary Conditions,\n:<math>\\phi_0\\,= \\phi |_{(x=0)} </math>\n:<math>\\phi_L\\,= \\phi |_{(x=L)} </math>\n\nVariation of face value with distance, x is given by the expression,\n<math>\\frac{\\phi(x)-\\phi_0}{\\phi_L-\\phi_0}\\,= \\frac{\\exp(P_e \\frac{x}{L})}{\\exp(P_e)-1}</math>\n\n[[File:Graph depicting relation between face value and distance.JPG|thumb|right|400px|Graph depicting variation of face value with distance for a range of Peclet number.]]\n\nwhere P<sub>e</sub> is the Peclet number given by\n<math>P_e\\,= \\frac{\\rho u L}{\\Gamma}</math>\n\nPeclet number is defined to be the ratio of the rate of [[convection]] of a physical quantity by the flow to the rate of [[diffusion]] of the same quantity driven by an appropriate gradient.\n\nThe variation between <math>\\phi\\,</math>  and x is depicted in Figure for a range of values of the Peclet number. It shows that for large Pe, the value of <math>\\phi\\,</math> at x=L/2 is approximately equal to the value at upwind boundary which is assumption made by the upwind differencing scheme. In this scheme diffusion is set to zero when cell P<sub>e</sub> exceeds 10.\n\nThis implies that when the flow is dominated by convection, interpolation can be completed by simply letting the face value of a variable be set equal to its ``upwind'' or upstream value.\n\nWhen Pe=0 (no flow, or pure diffusion), Figure shows that solution, <math>\\phi\\,</math> may be interpolated using a simple linear average between the values at x=0 and x=L. \n\nWhen the Peclet number has an intermediate value, the interpolated value for <math>\\phi\\,</math> at x=L/2 must be derived by applying the ``power law'' equivalent.\n\nThe simple average convection coefficient formulation can be replaced with a formula incorporating the power law relationship : \n[[File:Value Table for Power Law Scheme.JPG|thumb|left|400px|Power Law Relationship]]\n\nwhere '''F = <math>\\rho</math>u''' and '''D = <math>\\Gamma</math>/x''' \n\n'''F<sub>l</sub>,D<sub>l</sub>''' and '''F<sub>r</sub>,D<sub>r</sub>''' are the properties on the left node and right node respectively. \n\nThe central coefficient is given by '''a<sub>c</sub>=a<sub>l</sub>+a<sub>r</sub>+(F<sub>r</sub>-F<sub>l</sub>)'''\n\n==References==\n{{reflist}}\n\n[[Category:Computational fluid dynamics]]"
    },
    {
      "title": "Pressure-correction method",
      "url": "https://en.wikipedia.org/wiki/Pressure-correction_method",
      "text": "'''Pressure-correction method''' is a class of methods used in [[computational fluid dynamics]] for numerically solving the [[Navier-Stokes equations]] normally for [[incompressible flow]]s.\n\n== Common properties ==\nThe equations solved in this approach arise from the implicit time integration of the incompressible [[Navier–Stokes equations]]. \n<br><center><math>\n\\overbrace{\\rho \\Big(\n\\underbrace{\\frac{\\partial \\mathbf{v}}{\\partial t}}_{\n\\begin{smallmatrix}\n  \\text{Unsteady}\\\\\n  \\text{acceleration}\n\\end{smallmatrix}} + \n\\underbrace{\\left(\\mathbf{v} \\cdot \\nabla\\right) \\mathbf{v}}_{\n\\begin{smallmatrix}\n  \\text{Convective} \\\\\n  \\text{acceleration}\n\\end{smallmatrix}}\\Big)}^{\\text{Inertia}} =\n\\underbrace{-\\nabla p}_{\n\\begin{smallmatrix}\n  \\text{Pressure} \\\\\n  \\text{gradient}\n\\end{smallmatrix}} + \n\\underbrace{\\mu \\nabla^2 \\mathbf{v}}_{\\text{Viscosity}} + \n\\underbrace{\\mathbf{f}}_{\n\\begin{smallmatrix}\n  \\text{Other} \\\\\n  \\text{forces}\n\\end{smallmatrix}}\n</math></center><br>\nDue to the non-linearity of the convective term in the momentum equation that is written above, this problem is solved with a nested-loop approach. While so called ''global''\nor ''inner iterations'' represent the real time-steps and are used to update the variables <math>\\mathbf{v}</math> and <math>p</math>, based on a linearized system, and boundary conditions; there is also an ''outer loop'' for updating the coefficients of the linearized system.<br>\nThe outer iterations comprise two steps:\n\n# Solve the momentum equation for a ''provisional'' velocity based on the velocity and pressure of the previous outer loop.\n# Plug the new newly obtained velocity into the continuity equation to obtain a correction.\n\nThe correction for the velocity that is obtained from the second equation one has with incompressible flow, the non-divergence criterion or continuity equation\n\n: <math>\n\\nabla\\cdot\\mathbf{v} = 0\n</math></center>\n\nis computed by first calculating a residual value <math>\\dot{m}</math>, resulting from spurious ''mass flux'', then using this ''mass imbalance'' to get a new pressure value. The pressure value that is attempted to compute, is such that when plugged into momentum equations a divergence-free velocity field results. The mass imbalance is often also used for control of the outer loop.<br>\nThe name of this class of methods stems from the fact that the correction of the velocity field is computed through the pressure-field.\n\nThe discretization of this is typically done with either the [[finite element method]] or the [[finite volume method]].  With the latter, one might also encounter the dual mesh, i.e. the computation grid obtained from connecting the centers of the cells that the initial subdivision into finite elements of the computation domain yielded.\n\n== Implicit split-update procedures ==\nAnother approach which is typically used in FEM is the following.\n\nThe aim of the correction step is to ensure ''conservation of mass''. In continuous form for compressible substances mass, conservation of mass is expressed by\n\n: <math>\n \\nabla\\cdot\\left(\\rho(\\mathbf{x})\\mathbf{v}(\\mathbf{x})\\right) = \\frac{\\frac{d}{dt}p(\\mathbf{x})}{c^2}\n</math>\n\nwhere <math>c^2</math> is the square of the \"speed of sound\". For low [[Mach number]]s and incompressible media <math>c</math> is assumed to be infinite, which is the reason for the above [[Navier–Stokes equations|continuity equation]] to reduce to\n\n: <math>\n\\begin{align}\n \\nabla\\cdot\\mathbf{v} &= 0\n\\end{align}\n</math>\n\nThe way of obtaining a velocity field satisfying the above, is to compute a pressure which when substituted into the momentum equation leads to the desired correction of a preliminary computed intermediate velocity.\n\nApplying the divergence operator to the compressible [[Navier-Stokes equations|momentum equation]] yields\n\n: <math>\n\\begin{align}\n \\nabla\\cdot\\partial_t \\mathbf{v} &= -\\nabla\\cdot(\\mathbf{v}\\cdot\\nabla)\\mathbf{v} + \\nabla\\cdot\\nabla^2\\mathbf{v} - \\nabla^2 p\\\\\n \\partial_t \\nabla\\cdot\\mathbf{v} &= -\\nabla\\cdot(\\mathbf{v}\\cdot\\nabla)\\mathbf{v} + \\nabla^2\\nabla\\cdot\\mathbf{v} - \\nabla^2 p\\\\\n 0 &= -\\nabla\\cdot(\\mathbf{v}\\cdot\\nabla)\\mathbf{v} - \\nabla^2 p\\\\\n \\nabla^2 p &= -\\nabla\\cdot(\\mathbf{v}\\cdot\\nabla)\\mathbf{v} & (\\ast)\n\\end{align}\n</math>\n\n<math>(\\ast)</math> then provides the governing equation for pressure computation.\n\nThe idea of pressure-correction also exists in the case of variable density and high Mach numbers, although in this case there is a real physical meaning behind the coupling of [[dynamic pressure]] and velocity as arising from the ''continuity equation''\n\n: <math>\n\\begin{align}\n \\partial_t \\rho &= \\nabla\\cdot(\\rho \\mathbf{v})\\\\\n \\partial_t \\rho &= \\frac{1}{c^2}\\partial_t p\n\\end{align}\n</math>\n\n<math>p</math> is with compressibility, still an additional variable that can be eliminated with algebraic operations, but its variability is not a pure artifice as in the compressible case, and the methods for its computation differ significantly from those with <math>\\rho = \\text{constant}.</math>\n\n== References ==\n{{reflist}}\n* M. Thomadakis, M. Leschziner: A PRESSURE-CORRECTION METHOD FOR THE SOLUTION OF INCOMPRESSIBLE VISCOUS FLOWS ON UNSTRUCTURED GRIDS, Int. Journal for Numerical Meth. in Fluids, Vol. 22, 1996\n* A. Meister, J. Struckmeier: Hyperbolic Partial Differential Equations, 1st Edition, Vieweg, 2002\n\n== External links ==\n* [http://ta.twi.tudelft.nl/isnas/isnas_mathmanual/mathmanual.html ISNaS – incompressible flow solver]\n* [http://www.peconet.com/products/RootsBulletins/rm-135.pdf Application of Temperature and/or Pressure Correction Factors in Gas Measurement]\n\n[[Category:Fluid dynamics]]\n[[Category:Computational fluid dynamics]]"
    },
    {
      "title": "Projection method (fluid dynamics)",
      "url": "https://en.wikipedia.org/wiki/Projection_method_%28fluid_dynamics%29",
      "text": "The '''projection method''' is an effective means of [[Numerical analysis|numerically]] solving time-dependent [[incompressible flow|incompressible fluid-flow]] problems. It was originally introduced by [[Alexandre Chorin]] in 1967<ref>\n{{Citation \n | surname1 = Chorin\n | given1 = A. J.\n | title = The numerical solution of the Navier-Stokes equations for an incompressible fluid\n | journal = Bull. Am. Math. Soc. \n | volume = 73\n | year = 1967\n | pages = 928&ndash;931\n | url =http://math.berkeley.edu/~chorin/chorin67.pdf\n}}</ref><ref>\n{{Citation \n | surname1 = Chorin\n | given1 = A. J.\n | title = Numerical Solution of the Navier-Stokes Equations\n | journal = Math. Comp.\n | volume = 22\n | year = 1968\n | pages = 745&ndash;762\n | url =\n | doi=10.1090/s0025-5718-1968-0242392-2\n}}</ref>\nas an efficient means of solving the incompressible [[Navier-Stokes equation]]s. The key advantage of the projection method is that the computations of the velocity and the pressure fields are decoupled.\n\n==The algorithm==\nThe algorithm of the projection method is based on the [[Helmholtz decomposition]] (sometimes called Helmholtz-Hodge decomposition) of any vector field into a [[solenoidal field|solenoidal]] part and an [[irrotational field|irrotational]] part. Typically, the algorithm consists of two stages. In the first stage, an intermediate velocity that does not satisfy the incompressibility constraint is computed at each time step. In the second, the pressure is used to project the intermediate velocity onto a space of divergence-free velocity field to get the next update of velocity and pressure.\n\n==Helmholtz&ndash;Hodge decomposition==\nThe theoretical background of projection type method is the decomposition theorem of [[Olga Aleksandrovna Ladyzhenskaya|Ladyzhenskaya]] sometimes referred to as Helmholtz&ndash;Hodge Decomposition or simply as Hodge decomposition. It states that the vector field <math>\\mathbf{u}</math> defined on a [[simply connected space|simply connected]] domain can be uniquely decomposed into a divergence-free ([[Solenoidal vector field|solenoidal]]) part <math>\\mathbf{u}_{\\text{sol}}</math> and an [[Conservative vector field#Irrotational vector fields|irrotational]] part <math>\\mathbf{u}_{\\text{irrot}}</math>.\n.<ref>{{cite book | title = A Mathematical Introduction to Fluid Mechanics | author1 = Chorin, A. J. | author2 = J. E. Marsden | edition = 3rd | publisher = [[Springer Science+Business Media|Springer-Verlag]] | year = 1993 | isbn = 0-387-97918-2}}</ref>\n\nThus, \n:<math>\n  \\mathbf{u} = \\mathbf{u}_{\\text{sol}} + \\mathbf{u}_{\\text{irrot}} = \\mathbf{u}_{\\text{sol}} + \\nabla \\phi\n</math>\n\nsince <math>\\nabla \\times \\nabla \\phi = 0</math> for some scalar function, <math>\\,\\phi</math>. Taking the\ndivergence of equation yields\n\n:<math>\n  \\nabla\\cdot \\mathbf{u} = \\nabla^2 \\phi \\qquad ( \\text{since,} \\; \\nabla\\cdot \\mathbf{u}_{\\text{sol}} = 0 )\n</math>\n\nThis is a [[Poisson equation]] for the scalar function <math>\\,\\phi</math>. If the vector field <math>\\mathbf{u}</math> is known, the above equation can be solved for the scalar function <math>\\,\\phi</math> and the divergence-free part of <math>\\mathbf{u}</math> can be extracted using the relation\n\n:<math>\n  \\mathbf{u}_{\\text{sol}} = \\mathbf{u} - \\nabla \\phi\n</math>\n\nThis is the essence of solenoidal projection method for solving incompressible\nNavier&ndash;Stokes equations.\n\n==Chorin's projection method==\nThe incompressible Navier-Stokes equation (differential form of momentum equation) may be written as\n:<math>\n  \\frac {\\partial \\mathbf{u}} {\\partial t} + (\\mathbf{u}\\cdot\\nabla)\\mathbf{u} = - \\frac {1}{\\rho} \\nabla p + \\nu \\nabla^2 \\mathbf{u}\n</math>\n\nIn [[Alexandre Chorin|Chorin]]'s original version of the projection method, one first computes an intermediate velocity, <math>\\mathbf{u}^*</math>, explicitly using the momentum equation by ignoring the pressure gradient term:\n\n:<math>\n  \\quad (1) \\qquad \\frac {\\mathbf{u}^* - \\mathbf{u}^n} {\\Delta t} = -(\\mathbf{u}^n \\cdot\\nabla) \\mathbf{u}^n + \\nu \\nabla^2 \n  \\mathbf{u}^n\n</math>\n\nwhere <math>\\mathbf{u}^n</math> is the velocity at <math>\\,n</math><sup>th</sup> time step. In the second half of the algorithm, the ''projection'' step, we correct the intermediate velocity to obtain the final solution of the time step <math>\\mathbf{u}^{n+1}</math>:\n\n:<math>\n  \\quad (2) \\qquad \\mathbf{u}^{n+1} = \\mathbf{u}^* - \\frac {\\Delta t}{\\rho} \\, \\nabla p ^{n+1}\n</math>\n\nOne can rewrite this equation in the form of a time step as\n\n:<math>\n\n  \\frac {\\mathbf{u}^{n+1} - \\mathbf{u}^*} {\\Delta t} = - \\frac {1}{\\rho} \\, \\nabla p ^{n+1}\n</math>\n\nto make clear that the algorithm is really just an [[operator splitting]] approach in which one considers the viscous forces (in the first half step) and the pressure forces (in the second half step) separately.\n\nComputing the right-hand side of the second half step requires knowledge of the pressure, <math>\\,p</math>, at the<math>\\,(n+1)</math> time level. This is obtained by taking the [[divergence]] and requiring that <math>\\nabla\\cdot \\mathbf{u}^{n+1} = 0</math>, which is the divergence (continuity) condition, thereby deriving the following Poisson equation for <math>\\,p^{n+1}</math>,\n:<math>\n  \\nabla ^2 p^{n+1} = \\frac {\\rho} {\\Delta t} \\, \\nabla\\cdot \\mathbf{u}^*\n</math>\nIt is instructive to note that the equation written as\n:<math>\n  \\mathbf{u}^* = \\mathbf{u}^{n+1} + \\frac {\\Delta t}{\\rho} \\, \\nabla p ^{n+1}\n</math>\nis the standard Hodge decomposition if boundary condition for <math>\\,p</math> on the domain boundary, <math>\\partial \\Omega</math> are <math>\\nabla p^{n+1}\\cdot \\mathbf{n} = 0</math>. In practice, this condition is responsible for the errors this method shows close to the boundary of the domain since the real pressure (i.e., the pressure in the exact solution of the Navier-Stokes equations) does not satisfy such boundary conditions.\n\nFor the explicit method, the boundary condition for <math>\\mathbf{u}^*</math> in equation (1) is natural. If <math>\\mathbf{u}\\cdot \\mathbf{n} = 0</math> on <math>\\partial \\Omega</math>, is prescribed, then the space of divergence-free vector fields will be orthogonal to the space of irrotational vector fields, and from equation (2) one has\n:<math>\n  \\frac {\\partial p^{n+1}} {\\partial n} = 0   \\qquad \\text{on} \\quad \\partial \\Omega\n</math>\nThe explicit treatment of the boundary condition may be circumvented by using a [[staggered grid]] and requiring that <math>\\nabla\\cdot \\mathbf{u}^{n+1}</math> vanish at the pressure nodes that are adjacent to the boundaries.\n\nA distinguishing feature of Chorin's projection method is that the velocity field is forced to satisfy a discrete continuity constraint at the end of each time step.\n\n== General method ==\n\nTypically the projection method operates as a two-stage fractional step scheme, a method which uses multiple calculation steps for each numerical time-step. In many projection algorithms, the steps are split as follows:\n\n# First the system is progressed in time to a mid-time-step position, solving the above transport equations for mass and momentum using a suitable advection method. This is denoted the ''predictor'' step.\n# At this point an initial projection may be implemented such that the mid-time-step velocity field is enforced as divergence free.\n# The ''corrector'' part of the algorithm is then progressed. These use the time-centred estimates of the velocity, density, etc. to form final time-step state.\n# A final projection is then applied to enforce the divergence restraint on the velocity field. The system has now been fully updated to the new time.\n\n== References ==\n{{reflist}}\n\n[[Category:Computational fluid dynamics]]\n[[Category:Mathematical physics]]"
    },
    {
      "title": "Pumplinx",
      "url": "https://en.wikipedia.org/wiki/Pumplinx",
      "text": "\n{{Infobox Software\n| name = PumpLinx\n| developer = Simerics\n| latest_release_version = V.3.0\n| latest_release_date = 2011\n| operating_system = [[Cross-platform]]\n| genre = [[Computational Fluid Dynamics]] Software\n| license = [[Proprietary software|Proprietary]]\n| website = [http://www.simerics.com/pumplinx_software.html PumpLinx Software]\n}}\n\n'''PumpLinx''' is a 3-D [[computational fluid dynamics]] (CFD) software developed for the analysis of fluid pumps, motors, compressors, valves, propellers, hydraulic systems and other fluid devices with rotating or sliding components.\n\n==Features==\nThe software imports 3-D geometry from [[Computer-aided design|CAD]] data in the form of [[STL (file format)|STL]] files.<ref>[http://journal.fluid-power.net/journal/issue21/software21.html \"PumpLinx: A Modelling Tool for Pump Designers\", International Journal of Fluid Power, Vol. 8, No. 1, March 2007]</ref> It has geometry Conformal Adaptive Binary-Tree mesh generation tool which creates  3-D grid from CAD surfaces. For liquid devices, PumpLinx has a [[cavitation]] model to account for the effect of liquid vapor, free/dissolved gas, and liquid compressibility.\n\nPumpLinx provides templates for different categories of devices, including: \n[[axial piston pump]]s, \n[[centrifugal pump]]s,\n[[gerotor]]s, \n[[gear pump]]s,  \n[[progressive cavity pump]]s,\n[[propeller]]s,\n[[radial piston pump]]s,  \n[[rotary vane pump]]s,  \n[[submersible pump]]s, and\n[[valve]]s.\n\nThose templates create an initial grid for special rotors; for example, grids around gears of a gear pump, and then re-meshes the grid for a moving simulation, and provide device specific input and output. The output from the code include velocities, pressures, temperatures, and gas volume fractions of the flow field, together with integrated engineering data such as loads and torques. \n\nPumpLinx uses a single Graphical User Interface (GUI) for grid generation, model set-up, execution, and post processing.\n\n== Market ==\nThe software is used primarily by component and system engineers in the automotive,<ref>[http://www.sae.org/technical/papers/2008-01-0003 Y. Jiang and D. Zhang, “A Three-Dimensional Design Tool for Crescent Oil Pumps,” 2008 SAE conference, Detroit, Michigan.]</ref> hydraulic,<ref>[http://www.ifk2008.com/index_englisch.htm O. Meincke and R. Rahmfeld, “Measurements, Analysis and Simulation of Cavitation in an Axial Piston Pump”, 6th International Fluid Power Conference, Dresden, 2008.] {{webarchive|url=https://web.archive.org/web/20080719123013/http://www.ifk2008.com/index_englisch.htm |date=2008-07-19 }}</ref> and aerospace industry as a virtual test-bed to study efficiency, cavitation, pressure ripple, and noise for hydrodynamic pumps,<ref>[https://dx.doi.org/10.1115/1.4003196 H. Ding, F.C. Visser, Y. Jiang and M. Furmanczyk, 2011 “Demonstration and Validation of a 3-D CFD Simulation Tool Predicting Pump Performance and Cavitation for Industrial Applications,” In: ASME Journal of Fluids Engineering, Volume 133,  Issue 1, 011101]</ref> and fluid power equipment.\n\n==References==\n<references/>\n\n== External links ==\n* [http://www.simerics.com/simerics_company.html Simerics website]\n\n<!-- Please do not add any links. Instead, argue your case on the talk page -->\n\n[[Category:Software companies based in Alabama]]\n[[Category:Fluid dynamics]]\n[[Category:Computational fluid dynamics]]\n[[Category:Computer-aided engineering software]]\n[[Category:Companies based in Huntsville, Alabama]]\n[[Category:Companies established in 2005]]"
    },
    {
      "title": "Quadrature based moment methods",
      "url": "https://en.wikipedia.org/wiki/Quadrature_based_moment_methods",
      "text": "{{Orphan|date=April 2016}}\n\n'''Quadrature-based moment methods (QBMM)''' are a class of [[computational fluid dynamics]] (CFD) methods for solving [[Kinetic theory of gases|Kinetic theory]] and is optimal for simulating phases such as rarefied gases or dispersed phases of a multiphase flow. The smallest \"particle\" entities which are tracked may be molecules of a single phase or granular \"particles\" such as aerosols, droplets, bubbles, precipitates, powders, dust, soot, etc. Moments of the [[Boltzmann equation]] are solved to predict the phase behavior as a continuous (Eulerian) medium, and is applicable for arbitrary [[Knudsen number]] <math>(Kn)</math> and arbitrary [[Stokes number]] <math>(St)</math>. Source terms for [[collision]] models such as [[Bhatnagar-Gross-Krook]] (BGK) and models for evaporation, coalescence, breakage, and aggregation are also available. By retaining a quadrature approximation of a [[probability density function]] (PDF), a set of abscissas and weights retain the physical solution and allow for the construction of moments that generate a set of [[partial differential equations]] (PDE's). QBMM has shown promising preliminary results for modeling granular gases or dispersed phases within carrier fluids and offers an alternative to Lagrangian methods such as [[Discrete Element Method|Discrete Particle Simulation]] (DPS). The [[Lattice Boltzmann Method]] (LBM) shares some strong similarities in concept, but it relies on fixed abscissas whereas quadrature-based methods are more adaptive. Additionally, the [[Navier–Stokes equations]](N-S) can be derived from the moment method approach.\n\n==Method==\nQBMM is a relatively new simulation technique for granular systems and has attracted interest from researchers in computational physics, chemistry, and engineering. QBMM is similar to traditional CFD methods, which solve the conservation equations of macroscopic properties (i.e., mass, momentum, and energy) numerically, but QBMM accomplishes this by modeling the fluid as consisting of fictive particles, or nodes, that constitute a discretized PDF. A node consists of an abscissa/weight pair and the weight defines the probability of finding a particle that has the value of its abscissa. This quadrature approximation may also be adaptive, meaning that the number of nodes can increase/decrease to accommodate appropriately complex/simple PDF's. Due to its statistical nature, QBMM has several advantages over other conventional Lagrangian methods, especially in dealing with complex boundaries, incorporating microscopic interactions (such as collisions), parallelization of the algorithm, and computational costs being largely independent of particle population. The numerical methods for solving the system of partial differential equations can be interpreted as the propagation (with a flux term) and interactions (source terms) of fictitious particle probabilities in an [[Lagrangian and Eulerian specification of the flow field|Eulerian]] framework.\n\n==Implementations==\nQBMM is a family of methods encompassing a variety of models, some of which are designed specifically to handle PDF's of passive variables, and others more complex, capable of multidimensional PDF's of active variables (such as velocity). Note that the full representation of the PDF is <math>f(t, \\mathbf{x}; \\mathbf{\\xi})</math>, where the parameters <math>t</math> and <math>\\mathbf{x}</math> represent the external coordinates of time and space respectively, while the internal coordinate vector, <math>\\mathbf{\\xi}</math>, may contain any additional desired degrees of freedom to represent the particles, e.g., temperature <math>(T)</math>, diameter <math>(L_p)</math>, velocity <math>(\\mathbf{v})</math>, angular velocity, etc.\n\nThe applicability of these methods depends upon which particle parameters are important (velocity, diameter, temperature, etc.), and importantly upon two values of the phase: <math>(Kn)</math> and <math>(St)</math>. For example, a monokinetic fluid will have a single velocity vector at each point in space, <math>\\mathbf{v}(t,\\mathbf{x})</math>; therefore, its corresponding PDF, <math>f(\\mathbf{v})</math>, is a [[Dirac Delta function]] at every point in space. Similarly, a monodisperse phase has a constant diameter for all particles so that <math>f(L_p)</math> is also a Delta function at every point in space. In those cases a PDF is superfluous and can instead be modeled by just tracking a single value corresponding to the abscissa of the Delta function, and the Navier-Stokes equations may be far more optimal to implement.\n\n===QMOM===\nOne of the earliest applications of QBMM was the Quadrature Method of Moments (QMOM) by McGraw<ref>McGraw, 1997</ref> in 1997. This method was used mainly for aerosol sprays and droplets by tracking their diameters through phenomenon such as breakage, coalescence, evaporation, etc.\n\n===DQMOM===\nDirect QMOM (DQMOM) is a mathematical simplification of QMOM that works best for dispersed phases with low Stokes numbers. DQMOM is a very efficient model because the weights and abscissas appear directly in the transport equations alleviating any need for moment construction and inversion. When dealing with low inertia particles where tracking few passive variables is of concern, DQMOM is very advantageous; however, because a large set of unknowns (abscissas and weights) is solved simultaneously, the matrix inversions cannot guaranteed realizable results in some circumstances, even with expensive iterative processes.\n\n===CQMOM===\nIn 2011 the Conditional QMOM (CQMOM) method was published by Yuan and Fox<ref>Yuan</ref> and this comprehensive method is applicable to modeling very general problems by tracking moments of the PDF, <math>f(t,\\mathbf{x};\\mathbf{\\xi})</math>, with an arbitrary number of internal parameters. This requires a moment ''construction'' and ''inversion'' process that converts the set of moments into nodes, and vice versa. The inversion process is the main source of computational costs, but overall CQMOM offers realizable results that DQMOM cannot guarantee.\n\n====Polykinetic====\nCQMOM has the ability to model a fully 3D velocity PDF, known as a ''polykinetic'' approach where <math>f(\\mathbf{v})</math> is '''not''' assumed to be a single Delta function. The method is computationally expensive, but very cost-effective when collisions are considered or in dense particle regimes, <math>Kn \\approx O(1)</math>, which cannot be modeled using [[Navier–Stokes equations|N-S]] and where [[Discrete Element Method|DPS]] is computationally restrictive. CQMOM is also applicable for a dispersed phase where <math>St > 1</math>.\n\nThe specialized Boltzmann Equation for <math> f(t,\\mathbf{x};\\mathbf{v})</math> is\n\n:<math>\\frac{\\partial f}{\\partial t} + \\mathbf{v}\\frac{\\partial f}{\\partial \\mathbf{x}} + \\frac{\\partial}{\\partial \\mathbf{v}} \\cdot (\\mathbf{\\dot{v}} f) = C</math>\n\nwhere <math>\\mathbf{\\dot{v}} = \\frac{\\partial \\mathbf{v}}{\\partial t}</math> is the acceleration source term (drag, gravity, etc.) and <math>C</math> is the collision source term. The velocity moment of <math>f(t,\\mathbf{x};\\mathbf{v})</math> in 3D space is defined as\n\n:<math>M^{(\\gamma)}_{i,j,k}(t,\\mathbf{x}) = \\int v_1^i v_2^j v_3^k f(t,\\mathbf{x};\\mathbf{v}) d\\mathbf{v}</math>\n\nwhere <math>v_d</math> is the velocity in the d'th dimension, <math>i,j,k \\ge 0</math> are the multiplicities (arbitrary integer exponents) used to \"weight\" the PDF integration, and <math>\\gamma \\equiv i+j+k</math> is the order of the moment <math>M</math>. Similarly, by taking moments of the entire Boltzmann equation, any number of arbitrary integro-differential equations may be generated,\n\n:<math> \\frac{\\partial}{\\partial t} M^\\gamma + \\nabla_{\\mathbf{x}} \\cdot M^{\\gamma+1} = \\mathbf{i} \\dot{\\mathbf{v}} \\cdot M^{\\gamma-1} + \\mathcal{C}</math>\n\nwhere <math>\\mathbf{i} \\equiv \\{i, j, k\\}</math> is a vector of the arbitrary integer indices and <math>\\mathbf{i} \\dot{\\mathbf{v}} \\equiv \\{i\\dot{v}_1, j\\dot{v}_2, k\\dot{v}_3\\}</math> is the element-wise scalar multiplication of the vectors. The convective term includes moments of order <math>\\gamma+1</math> and requires closure. Moment closure is achieved using the quadrature approximation of the moments,\n\n:<math> M^\\gamma_{i,j,k}(t, \\mathbf{x}) \\approx \\sum_{\\alpha=1}^{\\beta} U_\\alpha^i V_\\alpha^j W_\\alpha^k \\phi_\\alpha(\\mathbf{x},t) \\;\\;\\;\\;\\;\\;\\;\\;\\;\\;  \\gamma = 0,1,2,...</math>\n\nwhere <math>U,V,W</math> are the velocity abscissas, <math>\\phi</math> the weight for the <math>\\alpha</math>'th node, and <math>\\beta</math> the total number of nodes in the quadrature approximation.\n\n===EQMOM===\nExtended QMOM (EQMOM) gives the quadrature representation of the PDF more flexibility. Instead of relying solely on [[Dirac Delta function|Dirac delta functions]] as the basis functions, it uses a [[Normal distribution|Gaussian distribution]], thus allowing more complex PDF's to be represented with fewer quadrature nodes.\n\n==Limitations==\nDespite the increasing popularity of QBMM in solving the kinetic equations of granular gases, this novel approach has some limitations. At present, CQMOM's computational costs are significantly higher than that of the N-S Equations when <math>Kn < 0.1</math> or the DPS costs when <math>Kn >> 1</math> or <math>St < 0.1</math>. Additionally, the finite-volume flux methods introduce errors that can lead to instabilities in the moment-inversion process. Nevertheless, the wide applications of this method show its potential in computational physics, including [[microfluidics]].  QBMM demonstrates promising results in the area of high [[Knudsen number]] and high [[Stokes number]] flows.\n\n==Further reading==\n* {{cite book|author1=Marchisio, Daniele L.  |author2=Fox, Rodney O. |lastauthoramp=yes |title=Computational models for polydisperse particulate and multiphase systems |publisher=Cambridge University Press|year=2013|isbn=9781299403215}}\n* {{cite journal|author=McGraw, Robert|title=Description of Aerosol Dynamics by the Quadrature Method of Moments |journal=Aerosol Science and Technology|volume= 27|year=1997|pages= 255–265|doi=10.1080/02786829708965471}}\n* {{cite journal|author=Yuan,C. and Rodney O. Fox|title=Conditional quadrature method of moments for kinetic equations |journal=Journal of Computational Physics |volume= 230|number=22|year=2011|pages= 8216–8246|doi=10.1016/j.jcp.2011.07.020}}\n* {{cite journal|author = Rodney O. Fox|year=2008|title=A quadrature-based third-order moment method for dilute gas-particle flows|journal=Journal of Computational Physics|volume=227|number=12|pages=6313–6350|doi=10.1016/j.jcp.2008.03.014}}\n* {{cite journal|title = Optimal Moment Sets for Multivariate Direct Quadrature Method of Moments|volume = 48|journal = Ind. Eng. Chem. Res.|author = Fox, Rodney O.|year =2009|pages = 9686–9696|doi=10.1021/ie801316d|url =https://works.bepress.com/rodney_fox/4/download/}}\n\n==Notes==\n<references/>\n\n==External links==\n* [http://www.netl.doe.gov/File%20Library/Events/2013/multiphase/08-06-2013_1030-1050.pdf]: ECQMOM presentation\n* [http://cfd.mae.cornell.edu/~caughey/TandC_09/Presentations/fox.pdf]: QMOM presentation\n\n{{DEFAULTSORT:Quadrature-based moment methods}}\n[[Category:Computational fluid dynamics]]"
    },
    {
      "title": "QUICK scheme",
      "url": "https://en.wikipedia.org/wiki/QUICK_scheme",
      "text": "{{technical|date=December 2014}}\nIn [[computational fluid dynamics]] '''QUICK''', which stands for Quadratic Upstream Interpolation for Convective Kinematics, is a higher-[[Orders of approximation|order]] differencing scheme that considers a three-point upstream weighted [[quadratic interpolation]] for the cell face values.\nIn computational fluid dynamics there are many solution methods for solving the steady [[convection–diffusion equation]]. Some of the used methods are the central differencing scheme, [[upwind scheme]], hybrid scheme, [[power law scheme]] and QUICK scheme.\n\nThe QUICK scheme was presented by Brian P. Leonard – together with the QUICKEST (QUICK with Estimated Streaming Terms) scheme – in a 1979 paper.<ref>{{Citation | doi = 10.1016/0045-7825(79)90034-3 | volume = 19 | issue = 1 | pages = 59–98 | last = Leonard | first = B.P. | title = A stable and accurate convective modelling procedure based on quadratic upstream interpolation | journal = Computer Methods in Applied Mechanics and Engineering | year = 1979 |bibcode = 1979CMAME..19...59L }}</ref>\n\nIn order to find the cell face value a [[quadratic function]] passing through two bracketing or surrounding nodes and one [[node (graph theory)|node]] on the upstream side must be used. In [[central differencing scheme]] and second order [[upwind scheme]] the first order derivative is included and the second order derivative is ignored. These schemes are therefore considered second order accurate where as QUICK does take the second order derivative into account, but ignores the third order derivative hence this is considered third order accurate.<ref name=Versteeg>{{citation |first1=H. K. |last1=Versteeg |first2=W. |last2=Malalasekera |title=An introduction to computational fluid dynamics |year=1995| pages=125–132 |isbn=0-470-23515-2 }}</ref> This scheme is used to solve [[convection–diffusion equation]]s using second order central difference for the diffusion term and for the [[convection]] term the scheme is third order accurate in space and first order accurate in time. QUICK is most appropriate for [[steady flow]] or quasi-steady highly convective [[elliptic flow]].<ref name=Lin>{{citation |first=Pengzhi |last=Lin |title=Numerical Modeling of Water Waves: An Introduction to Engineers and Scientists |page=145 |isbn=0-415-41578-0 }}</ref>\n\n==Quadratic interpolation for QUICK scheme==\n\n[[File:Quadratic profile.jpg|thumb|right|400px|Quadratic profile]]\n\nFor the one-dimensional domain shown in the figure the Φ value at a [[control volume]] face is approximated using three-point quadratic function passing through the two bracketing or surrounding nodes and one other node on upstream side.<ref name=Mitra_Chakraborty>{{citation |first1=Sushanta K. |last1=Mitra |first2=Suman |last2=Chakraborty |title=Microfluidics and Nanofluidics Handbook: Fabrication, Implementation, and Applications |page=161 |isbn=1-4398-1671-9 }}</ref>\nIn the figure, in order to calculate the value of the property at the face, we should have three nodes i.e. two bracketing or surrounding nodes and one upstream node.\n\n# Φ<sub>w</sub> when ''u''<sub>w</sub> > 0 and ''u''<sub>e</sub> > 0 a quadratic fit through WW, W and P is used,\n# Φ<sub>e</sub> when ''u''<sub>w</sub> > 0 and ''u''<sub>e</sub> > 0 a quadratic fit through W, P and E is used,\n# Φ<sub>w</sub> when ''u''<sub>w</sub> < 0 and ''u''<sub>e</sub> < 0 values of W, P and E are used,\n# Φ<sub>e</sub> when ''u''<sub>w</sub> < 0 and ''u''<sub>e</sub> < 0 values of P, E and EE are used.\n \nLet the two bracketing nodes be ''i'' and ''i'' − 1 and upstream node ''i'' – 2 then for a uniform [[Grid reference|grid]] the value of φ at the cell face between the three nodes is given by:\n\n:Φ<sub>face</sub> = {{frac|6|8}} Φ<sub>i-1</sub> + {{frac|3|8}} Φ<sub>i</sub> − {{frac|1|8}} Φ<sub>i-2</sub>.\n\n==Interpretation of the property when the flow is in different directions==\n\nThe steady convection and diffusion of a property 'Ƥ' in a given one-dimensional flow field with velocity 'u' and in the absence of sources is given\n\n:<math>{d (\\rho u \\phi ) \\over d x} = \\frac{d}{d x}\\left(r \\frac{d \\phi}{d x}\\right) .</math>\n\nFor the continuity of the flow it must also satisfy\n\n:<math>{d (\\rho u ) \\over d x} = 0.</math>\n\nDiscretizing the above equation to a control volume around a particular node we get\n\n:<math>(\\rho u A \\phi)_e - (\\rho u A \\phi)_w = (rA\\frac{\\partial \\phi}{\\partial x})_e - (rA\\frac{\\partial \\phi}{\\partial x})_w </math>\n\nIntegrating this continuity equation over the control volume we get\n\n(ρuA)<sub>e</sub> - (ρuA)<sub>w</sub> = 0\n\nnow assuming F = ρu and D = r/δx\n\nThe corresponding cell face values of the above variables are given by\n\nF<sub>w</sub> = (ρu)<sub>w</sub>\n\nF<sub>e</sub> = (ρu)<sub>e</sub>\n\nD<sub>w</sub>  = r<sub>w</sub> /δx<sub>WP</sub>\n\nD<sub>e</sub>  = r<sub>e</sub> /δx<sub>PE</sub>\n\nAssuming constant area over the entire control volume we get\n \n:''F''<sub>e</sub>Φ<sub>e</sub> – ''F''<sub>w</sub>Φ<sub>w</sub> = ''D''<sub>e</sub>(Φ<sub>E</sub> – Φ<sub>P</sub>) –  ''D''<sub>w</sub> (Φ<sub>P</sub> - Φ<sub>W</sub>)\n\n===Positive direction===\n\nWhen the flow is in positive direction the values of the velocities will be ''u''<sub>w</sub> > 0 and ''u''<sub>e</sub> > 0,\n\nFor \"w (west face)\" bracketing nodes are W and P, the upstream node is WW then,<ref name=Jakobsen>{{citation |first=Hugo A. |last=Jakobsen |title=Chemical Reactor Modeling: Multiphase Reactive Flows |page=1029 |isbn=3-540-25197-9 }}</ref>\n\n:Φ<sub>w</sub> = 6/8Φ<sub>W</sub> + 3/8Φ<sub>P</sub> − 1/8Φ<sub>WW</sub>\n\nFor \"e (east face)\" bracketing nodes are P and E, the upstream node is W then\n\n:Φ<sub>e</sub> = 6/8Φ<sub>P</sub> + 3/8Φ<sub>E</sub> − 1/8Φ<sub>W</sub>\n\n[[Gradient]] of [[parabola]] is used to evaluate [[diffusion]] terms.\n\nIf ''F''<sub>w</sub> > 0 and ''F''<sub>e</sub> > 0 and if we use above equations for the convective terms and central differencing for the diffusion terms, the [[discretized]] form of the one-dimensional [[convection–diffusion transport equation]] will be written as:\n\n:''F''<sub>e</sub>Φ<sub>e</sub> – ''F''<sub>w</sub>Φ<sub>w</sub> = ''D''<sub>e</sub>(Φ<sub>E</sub> – Φ<sub>P</sub>) –  ''D''<sub>w</sub> (Φ<sub>P</sub> - Φ<sub>W</sub>)\n\n:''F''<sub>e</sub>(6/8Φ<sub>p</sub> + 3/8Φ<sub>E</sub> – 1/8Φ<sub>w</sub>) – ''F''<sub>W</sub>(6/8Φ<sub>w</sub> + 3/8Φ<sub>p</sub> – 1/8Φ<sub>ww</sub>) = ''D''<sub>e</sub>(Φ<sub>E</sub> – Φ<sub>P</sub>) – ''D''<sub>W</sub>(Φ<sub>p</sub> – Φ<sub>w</sub>).\n\nOn re-arranging we get\n\n:[''D''<sub>w</sub> – 3/8''F''<sub>w</sub> + ''D''<sub>e</sub> + 6/8''F''<sub>e</sub>] Φ<sub>P</sub> = [''D''<sub>w</sub> + 6/8''F''<sub>w</sub> + 1/8''F''<sub>e</sub>] Φ<sub>W</sub> + [''D''<sub>e</sub> – 3/8''F''<sub>e</sub>] Φ<sub>E</sub> – 1/8''F''<sub>w</sub>Φ<sub>WW</sub>,\n\nnow it can be written in the standard form:\n\n:''a''<sub>P</sub>Φ<sub>P</sub> = ''a''<sub>W</sub>Φ<sub>W</sub> + ''a''<sub>E</sub>Φ<sub>E</sub> + ''a''<sub>WW</sub>Φ<sub>WW</sub>.\n\nwhere:\n\n{| class=\"wikitable\"\n|-\n! a<sub>W</sub> !! a<sub>E</sub> !! a<sub>WW</sub> !! a<sub>P</sub>\n|-\n| D<sub>w</sub> + 6/8F<sub>w</sub> + 1/8F<sub>e</sub>|| D<sub>e</sub> - 3/8F<sub>e</sub> || - 1/8F<sub>w</sub> || a<sub>w</sub> + a<sub>E</sub> + a<sub>WW</sub> + (F<sub>e</sub> - F<sub>w</sub>)\n\n|}\n\n===Negative direction===\n\nWhen the flow is in negative direction the value of the velocities will be ''u''<sub>w</sub> < 0 and ''u''<sub>e</sub> < 0,\n\nFor west face w the bracketing nodes are W and P, upstream node is E and for the east face E the bracketing nodes are P and E, upstream node is EE\n\nFor F<sub>w</sub> < 0 and F<sub>e</sub> < 0 the flux across the west and east boundaries is given by the expressions :\n\n:Φ<sub>w</sub> = 6/8Φ<sub>P</sub> + 3/8Φ<sub>W</sub> - 1/8Φ<sub>E</sub>\n\n:Φ<sub>e</sub> = 6/8Φ<sub>E</sub> + 3/8Φ<sub>P</sub> - 1/8Φ<sub>EE</sub>\n\nSubstitution of these two formulae for the [[convective]] terms in the discretized convection-diffusion equation together with central differencing for the [[diffusion]] terms leads, after re-arrangement similar to positive direction as above, to the following coefficients.\n\n{| class=\"wikitable\"\n|-\n! a<sub>W</sub> !! a<sub>E</sub> !! a<sub>EE</sub> !! a<sub>P</sub>\n|-\n| D<sub>w</sub> + 3/8F<sub>w</sub> || D<sub>e</sub> - 6/8F<sub>e</sub> - 1/8F<sub>w</sub> || 1/8F<sub>e</sub> || a<sub>w</sub> + a<sub>E</sub> + a<sub>EE</sub> + (F<sub>e</sub> - F<sub>w</sub>)\n\n|}\n\n==QUICK scheme for 1-D convection–diffusion problems==\n\n:a<sub>P</sub>Φ<sub>P</sub> = a<sub>W</sub>Φ<sub>W</sub> + a<sub>E</sub>Φ<sub>E</sub> + a<sub>WW</sub>Φ<sub>WW</sub> + a<sub>EE</sub>Φ<sub>EE</sub>\n\nHere, a<sub>P</sub> = a<sub>W</sub> + a<sub>E</sub> + a<sub>WW</sub> + a<sub>EE</sub> + (F<sub>e</sub> - F<sub>w</sub>)\n\nother coefficients\n\n{| class=\"wikitable\"\n|-\n! a<sub>W</sub> !! a<sub>WW</sub> !! a<sub>E</sub> !! a<sub>EE</sub>\n|-\n| D<sub>w</sub> + 6/8 α<sub>w</sub> F<sub>w</sub>\n+ 1/8F<sub>e</sub> α<sub>e</sub> \n+3/8 (1 – α<sub>w</sub>)F<sub>w</sub>\n\n || −1/8 α<sub>w</sub>F<sub>w</sub> || D<sub>e</sub> - 3/8α<sub>e</sub> F<sub>e</sub>\n-6/8(1–α<sub>e</sub>)F<sub>e</sub> −1/8 (1–α<sub>w</sub>)F<sub>w</sub> \n|| 1/8(1 – α<sub>e</sub>)F<sub>e</sub>\n\n|}\n\nwhere\n\n:α<sub>w</sub>=1 for F<sub>w</sub> > 0 and α<sub>e</sub>=1 for F<sub>e</sub> > 0\n\n:α<sub>w</sub>=0 for F<sub>w</sub> < 0 and α<sub>e</sub>=0 for F<sub>e</sub> < 0.\n\n==Comparing the solutions of QUICK and upwind schemes==\n\nFrom the below graph we can see that the QUICK scheme is more accurate than the upwind scheme. In the QUICK scheme we face the problems of [[Overshoot (signal)|undershoot]] and [[overshoot (signal)|overshoot]] due to which some errors occur. These overshoots and undershoots should be considered while interpreting solutions. [[False diffusion]] errors will be minimized with the QUICK scheme when compared with other schemes.\n[[File:Coparision of QUICK and UPWIND solutions.jpg|thumb|left|400px|Comparison of QUICK and UPWIND solutions]]\n\n==See also==\n* [[Upwind scheme]]\n* [[Power law scheme]]\n* [[Finite-volume method]]\n* [[Finite difference method]]\n\n==References==\n{{Reflist}}\n\n==Further reading==\n*{{Citation\n| publisher = Taylor & Francis Group\n| isbn = 978-0-89116-522-4\n| last = Patankar\n| first = Suhas V.\n| title = Numerical Heat Transfer and Fluid Flow\n| year = 1980\n}}\n*{{Citation\n| publisher = Springer\n| isbn = 978-3-540-67853-3\n| last = Wesseling\n| first = Pieter\n| title = Principles of Computational Fluid Dynamics\n| year = 2001\n}}\n*{{Citation\n| publisher = Cambridge University Press\n| isbn = 978-0-521-85326-2\n| last = Date\n| first = Anil W.\n| title = Introduction to Computational Fluid Dynamics\n| year = 2005\n}}\n\n[[Category:Computational fluid dynamics]]"
    },
    {
      "title": "RELAP5-3D",
      "url": "https://en.wikipedia.org/wiki/RELAP5-3D",
      "text": "<!-- INL/MIS-12-26223 -->\n{{Infobox Software\n| name                   = RELAP5-3D\n| screenshot             = [[File:RELAP5-3D Image.gif|300px]]\n| caption                = RELAP5-3D is the latest in the RELAP5 code series developed at [[Idaho National Laboratory]] (INL) for the analysis of transients and accidents in water-cooled nuclear power plants and related systems as well as the analysis of advanced reactor designs.\n| logo                   = \n| developer              = [[Idaho National Laboratory]]\n| released               = July 6, 1997\n| latest_release_version = RELAP5-3D/Ver: 4.4.2 <ref name=newstellers>{{cite web|url=http://www.inl.gov/relap5/newsletters.htm |title= RELAP5-3D Newsletters |publisher=Inl.gov |date= |accessdate=2014-10-16}}</ref><br><small>({{Age in years, months and days| year=2018 | month=6 | day=25 }} ago)</small>| latest_release_date    = \n| latest_preview_version =\n| latest_preview_date    =\n| operating_system       = [[Linux]], [[Windows]]\n| language               = [[Fortran 95]] \n| genre                  = Advanced Computational Engine\n| license                = [[Proprietary software|Proprietary]]\n| website                = {{url|https://relap53d.inl.gov}}\n}}\n'''RELAP5-3D''' is a [[simulation]] tool that allows users to [[Computer model|model]] the coupled behavior of the [[Nuclear reactor technology|reactor]] coolant system and the [[Nuclear reactor core|core]] for various operational transients and postulated [[Nuclear and radiation accidents|accidents]] that might occur in a [[nuclear reactor]]. RELAP5-3D ('''R'''eactor '''E'''xcursion and '''L'''eak '''A'''nalysis '''P'''rogram) can be used for [[Nuclear safety|reactor safety]] analysis, reactor design, [[Operator Training Simulator|simulator training of operators]], and as an educational tool by universities. RELAP5-3D was developed at [[Idaho National Laboratory]] to address the pressing need for reactor safety analysis and continues to be developed through the [[United States Department of Energy]] and the International RELAP5 Users Group (IRUG) with over $3 million invested annually. The code is distributed through INL's Technology Deployment Office and is licensed to numerous [[universities]], [[governments]], and [[corporations]] worldwide.<ref>{{cite web|url=http://www.inl.gov/technicalpublications/Documents/4781591.pdf |title=?? |publisher=Inl.gov |accessdate=2012-11-26}}</ref><ref name=\"autogenerated1\">{{cite web|url=http://www.inl.gov/relap5/r5manuals/ver_2_3/rv1.pdf |title=rv1.book |date= |accessdate=2012-11-26}}</ref>\n\n==Background==\nRELAP5-3D is an outgrowth of the one-dimensional RELAP5/MOD3 code developed at [[Idaho National Laboratory]] (INL) for the U.S. [[Nuclear Regulatory Commission]] (NRC). The U.S. Department of Energy (DOE) began sponsoring additional RELAP5 development in the early 1980s to meet its own reactor safety assessment needs. Following the [[Chernobyl disaster]], DOE undertook a re-assessment of the safety of all its test and production reactors throughout the [[United States]]. The RELAP5 code was chosen as the thermal-hydraulic analysis tool because of its widespread acceptance.\n\nThe application of RELAP5 to various reactor designs created the need for new [[Computer simulation|modeling]] capabilities. In particular, the analysis of the [[Savannah River Site|Savannah River]] reactors necessitated a three-dimensional flow model. Later, under laboratory-discretionary funding, multi-dimensional reactor kinetics were added.\n\nUp until the end of 1995, INL maintained NRC and DOE versions of the code in a single [[source code]] that could be partitioned before [[Compiler|compilation]]. It became clear by then, however, that the efficiencies realized by the maintenance of a single source were being overcome by the extra effort required to accommodate sometimes conflicting requirements. The code was therefore \"[[Fork (software development)|split]]\" into two [[Software versioning|versions]]—one for NRC and the other for DOE. The DOE version maintained all of the capabilities and validation history of the predecessor code, plus the added capabilities that had been sponsored by the DOE before and after the split.\n\nThe most prominent attribute that distinguishes the DOE code from the NRC code is the fully integrated, multi-dimensional thermal-hydraulic and kinetic modeling capability in the DOE code.<ref>{{cite web|url=https://inlportal.inl.gov/portal/server.pt/community/relap5_3d/622/relap5-3d/7252 |title=RELAP5-3D |publisher=Inlportal.inl.gov |date= |accessdate=2012-11-26}}</ref><ref name=\"autogenerated3\">{{cite web|url=http://www.inl.gov/relap5/relap5-3.htm |title=RELAP5-3D HomePage File |publisher=Inl.gov |date=2011-05-17 |accessdate=2012-11-26}}</ref><ref>{{cite web|url=http://san.iaea.org/codes.php?category=Thermal+Hydraulic+System&submit=Filter |title=SAN - Safety Assessment Network |publisher=San.iaea.org |date= |accessdate=2012-11-26}}</ref><ref>{{cite web|url=http://engineering.oregonstate.edu/computing/school/nerhp/ |title=NE/RHP Computer Support |publisher=Engineering.oregonstate.edu |date= |accessdate=2012-11-26}}</ref><ref>{{cite journal|url=http://www.sciencedirect.com/science/article/pii/S0306454904001124 |title=Annals of Nuclear Energy - Validation of coupled neutronic/thermal-hydraulic code RELAP5-3D for RBMK-1500 reactor analysis application  |accessdate=2012-11-26 |doi=10.1016/j.anucene.2004.06.002 |volume=31 |issue=15 |journal=Annals of Nuclear Energy |pages=1667–1708|year=2004 |last1=Uspuras |first1=E. |last2=Kaliatka |first2=A. |last3=Bubelis |first3=E. }}</ref><ref>{{cite web|url=http://www.inl.gov/techtransfer/licensing/default2.asp?ID=2736&c=info |title=Idaho National Laboratory - Technology Transfer - Technologies Available for Licensing |publisher=Inl.gov |date= |accessdate=2012-11-26|archiveurl=https://web.archive.org/web/20130219172305/http://www.inl.gov/techtransfer/licensing/default2.asp?ID=2736&c=info|archivedate=2013-02-19}}</ref> This removes any restrictions on the applicability of the code to the full range of postulated [[Nuclear and radiation accidents|reactor accidents]]. Other enhancements include a new [[Matrix (mathematics)|matrix]] solver, additional water properties, and improved time advancement for greater [[Robustness (computer science)|robustness]].<ref name=\"autogenerated3\"/>\n\n==Features==\n\n===Modeling Capability===\n[[File:RELAP Desktop View.jpg|right|thumb|500px|[[Screenshot|Screen capture]] of a [[Three-dimensional space|three-dimensionally]] rotatable '''RELAP5-3D''' model of the [[Westinghouse Electric Company|Westinghouse]] [[Zion Nuclear Power Station]] showing the [[Porosity|void fraction]] (mixture of liquid and gaseous water by volume) as a number between 0 and 1. Violet portions represent 100% [[water]], while red portions indicate 100% [[steam]]. Other shades indicate the composition of the two-phase [[mixture]]. Users can [[Video overlay|overlay]] text on the image and add auxiliary [[GUI widget|widgets]] (such as plots and updating tables) to the [[Desktop environment|desktop]].]]RELAP5-3D has [[multidimensional]] [[thermal hydraulics]] and [[neutron]] kinetic modeling capabilities. The multidimensional component in RELAP5-3D was developed to allow the user to accurately model the multidimensional [[Fluid dynamics|flow]] behavior that can be exhibited in any component or region of a nuclear reactor coolant system. There is also two dimensional [[conductive]] and radiative [[heat transfer]] capability and modeling of plant trips and control systems.<ref>{{cite web|url=http://www.inl.gov/relap5/relap5doc/relap5doe.pdf |title=Relap5-3D |publisher=Inl.gov |accessdate=2012-11-26}}</ref> RELAP5-3D allows for the simulation of the full range of reactor transients and postulated accidents, including:\n* [[Scram|Trips]] and [[Nuclear reactor#Reactivity control|controls]]\n* Component models ([[Pressurized water reactor#Pumps|pumps]], valves, [[Steam separator|separators]], branches, etc.)\n* Operational transients\n* Startup and [[Shutdown (nuclear reactor)|shutdown]]\n* Maneuvers (e.g. change in power level, starting/tripping pump)\n* Small and large break [[Loss-of-coolant accident|Loss Of Coolant Accidents]] (LOCA)\n* Anticipated Transient Without [[Scram]] (ATWS)\n* Loss of offsite power\n* Loss of [[Boiler feedwater|feedwater]]\n* Loss of flow\n* Light Water Reactors ([[Pressurized water reactor|PWR]], [[Boiling water reactor|BWR]], [[Mitsubishi APWR|APWR]], [[Advanced boiling water reactor|ABWR]], etc.)\n* Heavy Water Reactors (e.g. [[CANDU reactor]])\n* Gas-cooled Reactors ([[Generation IV reactor#Very-high-temperature reactor (VHTR)|VHTGR]], [[Next Generation Nuclear Plant|NGNP]])\n* [[Liquid metal cooled reactor]]s\n* [[Molten salt reactor|Molten-salt cooled reactors]]\n\n===Hydrodynamic Model===\nRELAP5-3D  is a transient, two-fluid model for flow of a two-phase [[vapor]]/[[gas]]-[[liquid]] [[mixture]] that can contain non-condensable components in the vapor/gas phase and/or a [[soluble]] component in the [[liquid]] phase. The multi-dimensional component in RELAP5-3D was developed to allow the user to more accurately model the multi-dimensional flow behavior that can be exhibited in any component or region of an [[Light water reactor|LWR system]]. Typically, this will be the lower [[Plenum chamber|plenum]], [[Reactor core|core]], upper plenum and downcomer regions of an LWR. However, the model is general, and is not restricted to use in the [[reactor vessel]]. The component defines a one, two, or three-dimensional array of volumes and the internal junctions connecting them. The geometry can be either [[Cartesian coordinate system|Cartesian]] ([[X–Y–Z matrix|x, y, z]]) or cylindrical ([[Cylindrical coordinate system|r, q, z]]). An orthogonal, three-dimensional grid is defined by mesh interval input data in each of the three coordinate directions.<ref>{{cite web|url=http://www.inl.gov/technicalpublications/Documents/4310598.pdf |title=Recent Hydrodynamics Improvements to the REFLAP5-3D Code |publisher=Inl.gov |accessdate=2012-11-26}}</ref>\n\nThe functionality of the multi-dimensional component has been under testing and refinement since it was first applied to study the [[Savannah River Site#Reactors|K reactor]] at Savannah River in the early 1990s. A set of ten verification test cases with closed form solutions are used to demonstrate the correctness of the numerical formulation for the conservation equations.<ref name=\"autogenerated1\"/>\n\nRecent developments have updated the [[programming language]] to [[Fortran 95|FORTRAN 95]] and  incorporated [[Viscosity|viscous]] effects in multi-dimensional [[hydrodynamic]] models. Currently, RELAP5-3D contains 27 different working fluids including:\n* [[Light water reactor|Light water]] (e.g. 1967, 1984, and 1995 steam tables)<ref>{{cite web|url=http://www.inl.gov/technicalpublications/Documents/2761699.pdf |title=2002con1435.pdf |date= |accessdate=2012-11-26}}</ref>\n* [[Heavy water]]\n* [[Gases]] (e.g. [[helium]] and [[carbon dioxide]])\n* [[Molten salt]]s (e.g. [[FLiBe]] and [[FLiNaK]])\n* [[Liquid metal]]s (e.g. [[sodium]] and [[lead-bismuth eutectic]])\n* Alternative fluids (e.g. [[glycerin]] and [[ammonia]])\n* [[Refrigerants]] (e.g. [[1,1,1,2-Tetrafluoroethane|R-134a]])\n\nWorking fluids allow single-phase, two-phase, and supercritical applications.\n\n===Thermal Model===\nHeat structures provided in RELAP5-3D permit calculation of heat transferred across solid boundaries of hydrodynamic volumes. Modeling capabilities of heat structures are general and include fuel pins or plates with nuclear or electrical heating, heat transfer across [[Water-tube boiler|steam generator]] tubes, and heat transfer from pipe and vessel walls. Temperature-dependent and space-dependent [[thermal conductivities]] and volumetric heat capacities are provided in tabular or functional form either from built-in or user-supplied data. There is also a radiative/conductive enclosure model, for which the user may supply/view conductance factors.<ref>{{cite web|url=http://www.inl.gov/relap5/r5manuals/ver_2_4/vol1_v2_4.pdf |title=rv1.book |date= |accessdate=2012-11-26}}</ref>\n\n===Control System===\nRELAP5-3D allows the user to model a control system typically used in hydrodynamic systems, including other phenomena described by [[algebraic function|algebraic]] and ordinary [[differential equations]]. Each control system component defines a variable as a specific function of time-advanced quantities; this permits control variables to be developed from components that perform simple, basic operations.\n\n===Reactor Kinetics===\nThere are two options that include a point reactor kinetics model and a  multidimensional neutron kinetics model. A flexible [[neutron cross section]] model and a [[control rod]] model have been implemented to allow for the complete modeling of the [[reactor core]]. The [[decay heat]] model developed as part of the point reactor kinetics model has been modified to compute decay power for point reactor kinetics and multi-dimensional neutron kinetics models.<ref>{{cite web|url=http://www.inl.gov/relap5/r5manuals/ver_2_3/rv2.pdf |title=Rv2.book |date= |accessdate=2012-11-26}}</ref>\n\n==Recent Major Upgrades==\n\n===Accurate Verification Capability===\nVerification ensures the program is built right by: (1) showing it meets its design specifications, (2) comparing its calculations against analytical solutions and [[method of manufactured solutions]]. RELAP5-3D Sequential Verification writes a file of extremely accurate representations of primary variables for comparing calculations between code versions to reveal any changes. The test suite of input models exercise code capabilities important for modeling nuclear plants. This verification capability also provides means to test that important code functions such as restart and backup work properly.\n\n===Moving System Modeling Capability===\nThe ability to simulate movement, such as could be encountered in ships, airplanes, or a terrestrial reactor during an earthquake becomes available in the 2013 release of RELAP5-3D. This capability allows the user to simulate motion through input, including translational displacement and rotation about the origin implied by the position of the reference volume. The transient rotation can be input using either Euler or pitch-yaw-roll angles. The movement is simulated using a combination of sine functions and tables of rotational angles and translational displacement. Since the gravitational constant is also an input quantity, this capability is not limited to the surface of the Earth. It allows RELAP5-3D to model reactor systems on space craft, a space station, the moon, or other extraterrestrial bodies.\n\n==International RELAP5 Users Group==\nThere are five different levels of membership available in the International RELAP5 Users Group (IRUG). Each has a different level of benefits, services, and membership fee.<ref>{{cite web|url=http://www.inl.gov/relap5/irug.htm |title=RELAP5-3D International Users Group |publisher=Inl.gov |date= |accessdate=2012-11-26}}</ref>\n\n===Members===\nA full member organization is the highest level of participation possible in the IRUG. Members receive the RELAP5-3D software in [[source code]] form. Multiple copy use is allowed. Two levels of membership are available: Regular and \"Super User\". Regular Member organizations receive up to 40 hours of on-call assistance in areas such as model noding, code usage recommendations, [[debugging]], and interpretations of results from INL RELAP5 technical experts. Super Users receive up to 100 hours of staff assistance.<ref name=\"autogenerated2\">{{cite web|url=https://relap53d.inl.gov/SitePages/Licensing%20Requests.aspx|title=RELAP5-3D Licensing Requests|last=|first=|date=|website=|publisher=relap53d.inl.gov|archive-url=|archive-date=|dead-url=|accessdate=2018-02-21}}</ref>\n\n===Multi-Use Participants===\nMulti-use participants are organizations that require use of the code but do not need or desire all the benefits of a full member. Participants receive the RELAP5-3D software in [[executable]] form only. Multiple copy use is allowed. Participants receive up to 20 hours of staff assistance.<ref name=\"autogenerated2\"/>\n\n===Single-Use Participants===\nSingle-use participants are restricted to use RELAP5-3D on a single computer, one user at a time. They receive the RELAP5-3D executable code and may receive up to 5 hours of staff assistance.<ref name=\"autogenerated2\"/>\n\n===University Participants===\nUniversity Participants may acquire a license to RELAP5-3D for educational purposes.<ref name=\"autogenerated2\"/>\n\n===Training Participants===\nTraining participants have two main options available: they can receive a 3-month single-use license for the RELAP5-3D code and up to 10 hours of staff assistance, or a 3-month multiple-use license and up to 40 hours of on-call technical assistance. Alternative arrangements can be made based on customers' needs. These levels of participation are designed for those interested in participating in training courses. One set of RELAP5-3D training videos is included.<ref name=\"autogenerated2\"/>\n\n==RELAP5-3D Videos==\n*[http://www.inl.gov/relap5/news/patent-overview.wmv RELAP5-3D Copyright Assertion Highlight]\n*[http://www.inl.gov/relap5/rius/westyellowstone2010/test_tresca_and_deformed_svideo.avi Test Tresca]\n*[http://www.inl.gov/relap5/rius/westyellowstone2010/2d_pow_lbloca.avi 2D POW LDLOCA]\n*[http://www.inl.gov/relap5/rius/saltlakecity2011/cr_fb_conv.m1v Zweibaum]\n*[http://www.inl.gov/relap5/rius/saltlakecity2011/vhtr_conf.m1v VHTR]\n*[http://www.inl.gov/relap5/rius/saltlakecity2011/nocr_fb1_conv.m1v NOCR FB1]\n*[http://www.inl.gov/relap5/rius/saltlakecity2011/cr_fb_conv.m1v CR FB]\n\n==Major RELAP5-3D Releases==\n{| class=\"wikitable sortable\"\n|-\n! Version<ref name=\"autogenerated4\">{{cite web|url=http://www.inl.gov/relap5/versions.htm |title=RELAP5-3D Version Releases |publisher=Inl.gov |date= |accessdate=2012-11-26}}</ref> !! Date of Release<ref name=\"autogenerated4\"/>\n|-\n| RELAP5-3D 1.0.0|| July 6, 1997\n|-\n| RELAP5-3D 1.0.05|| September 19, 1997\n|-\n| RELAP5-3D 1.0.08|| September 24, 1998\n|-\n| RELAP5-3D 1.1.0|| November 23, 1998\n|-\n| RELAP5-3D 1.1.7|| August 4, 1999\n|-\n| RELAP5-3D 1.1.72|| October 28, 1999\n|-\n| RELAP5-3D 1.2.0|| May 5, 2000\n|-\n| RELAP5-3D 1.2.2|| June 26, 2000\n|-\n| RELAP5-3D 1.3.5 <ref>{{cite web|url=http://www.inl.gov/relap5/releasenotes135.pdf |title=Release Notes for RELAP5-3D Version 1.3.5 |publisher=Inl.gov |accessdate=2012-11-26}}</ref>|| March 14, 2001\n|-\n| RELAP5-3D 2.0.3 <ref>{{cite web|url=http://www.inl.gov/relap5/releasenotes203.pdf |title=Release Notes for RELAP5-3D? Version 2 |date= |accessdate=2012-11-26}}</ref>|| August 21, 2002\n|-\n| RELAP5-3D 2.2 <ref>{{cite web|url=http://www.inl.gov/relap5/releasenotes22.pdf |title=Release Notes for RELAP5-3D Version 2.2 |publisher=Inl.gov |accessdate=2012-11-26}}</ref>|| October 30, 2003\n|-\n| RELAP5-3D 2.4 <ref>{{cite web|url=http://www.inl.gov/relap5/release_notes_v2_4.pdf |title=Release Notes for RELAP5-3D Version 2 |date= |accessdate=2012-11-26}}</ref>|| October 5, 2006\n|-\n| RELAP5-3D 3.0.0 <ref>{{cite web|url=http://www.inl.gov/relap5/release-notes-relap5-3.0.0.pdf |title=Release Notes for RELAP5-3D Version 3.0 |publisher=Inl.gov |accessdate=2012-11-26}}</ref>|| November 29, 2010 \n|-\n| RELAP5-3D 4.0.3 <ref name=\"autogenerated4\"/>|| July 12, 2012 \n|-\n| RELAP5-3D 4.1.3 <ref name=\"autogenerated4\"/>|| October 8, 2013\n|-\n| RELAP5-3D 4.2.1 <ref name=newstellers/>|| June 30, 2014\n|-\n|RELAP5-3D 4.3.4 \n|October 9, 2015\n|-\n|RELAP5-3D 4.4.2\n|June 25, 2018\n|}\n\n==Notes==\n{{Reflist|2}}\n\n==References==\n*J. A. Findley and G. L. Sozzi, \"BWR Refill-Reflood Program – Model Qualification Task Plan,\" EPRI NP-1527, NUREG/CR-1899, GEAP-24898, October 1981.\n*T. M. Anklam, R. J. Miller, M. D. White, \"Experimental Investigation of Uncovered-Bundle Heat Transfer and Two-Phase Mixture Level Swell Under High-Pressure and Low Heat Flux Conditions,\" NUREG/CR-2456, ORNL-5848, Oak Ridge National Laboratory, March 1982.\n*K. Carlson, R. Riemke, R. Wagner, J. Trapp, \"Addition of Three-Dimensional Modeling,\" RELAP5/TRAC-B International Users Seminar, Baton Rouge, LA, November 4–8, 1991.\n*R. Riemke, \"RELAP5 Multi-Dimensional Constitutive Models,\" RELAP5/TRAC-B International Users Seminar, Baton Rouge, LA, November 4–8, 1991.\n*H. Finnemann and A. Galati, \"NEACRP 3-D LWR Core Transient Benchmark – Final Specifications,\" NEACRP-L-335 (Revision 1), January, 1992.\n*K. Carlson, R. Riemke, R. Wagner, \"Theory and Input Requirements for the Multi-Dimensional Component in RELAP5 for Savannah River Site Thermal-Hydraulic Analysis,\" EGG-EAST-9878, Idaho National Engineering Laboratory, July, 1992.\n*K. Carlson, C. Chou, C. Davis, R. Martin, R. Riemke, R. Wagner, \"Developmental Assessment of the Multi-Dimensional Component in RELAP5 for Savannah River Site Thermal-Hydraulic Analysis,\" EGG-EAST-9803, Idaho National Engineering Laboratory, July, 1992.\n*K. Carlson, C. Chou, C. Davis, R. Martin, R. Riemke, R. Wagner, R. Dimenna, G. Taylor, V. Ransom, J. Trapp, \"Assessment of the Multi-Dimensional Component in RELAP5/MOD2.5\", Proceedings of the 5th International Topical Meeting on Nuclear Reactor Thermal-Hydraulics, Salt Lake City, Utah, USA, September 21–24, 1992.\n*P. Murray, R. Dimenna, C. Davis, \"A Numerical Study of the Three Dimensional Hydrodynamic Component in RELAP5/MOD3\", RELAP5 International Users Seminar, Boston, MA, USA, July, 1993.\n*G. Johnsen, \"Status and Details of the 3-D Fluid Modeling of RELAP5,\" Code Application and Maintenance Program Meeting, Santa Fe, NM, October, 1993.\n*H. Finnemann, et al., \"Results of LWR Core Transient Benchmarks,\" Proceedings of the Joint International Conference on Mathematical Methods and Supercomputing in Nuclear Applications, Vol. 2, pg. 243, Kernforschungszentrum, Karlsruhe, Germany, April, 1993.\n*A. S. Shieh, V. H. Ransom, R Krishnamurthy, RELAP5/MOD3 Code Manual Volume 6: Validation of Numerical Techniques in RELAP5/MOD3, NUREG/CR-5535, EGG-2596, October, 1994.\n*C. Davis, \"Assessment of the RELAP5 Multi-Dimensional Component Model Using Data from LOFT Test L2-5,\" INEEL-EXT-97-01325, Idaho National Engineering Laboratory, January, 1998.\n*R. M. Al-Chalabi, et al., \"NESTLE: A Nodal Kinetics Code,\" Transactions of the American Nuclear Society, Volume 68, June, 1993.\n*J. L. Judd, W. L. Weaver, T. Downar, J. G. Joo, \"A Three Dimensional Nodal Neutron Kinetics Capability for RELAP5,\" Proceedings of the 1994 Topical Meeting on Advances in Reactor Physics, Knoxville, TN, April 11–15, 1994, Vol. II, pp 269–280.\n*E. Tomlinson, T. Rens, R. Coffield, \"Evaluation of the RELAP5/MOD3 Multidimensional Component Model\", RELAP5 International Users Seminar, Baltimore, MD, August 29 – September 1, 1994.\n*K. Carlson, \"1D to 3D Connection for the Semi-Implicit Scheme,\" R5M3BET-001, Idaho National Engineering Laboratory, June, 1997.\n*A. Shieh, \"1D to 3D Connection for the Nearly-Implicit Scheme,\" R5M3BET-002, Idaho National Engineering Laboratory, June, 1997.\n*J. A. Galbraith, G. L. Mesina, \"RELAP5/RGUI Architectural Framework\", Proceedings of the 8th International Conference on Nuclear Energy (ICONE-8), Baltimore, MD, USA, April 2–6, 2000.\n*G. L. Mesina and P. P. Cebull, \"Extreme Vectorization in RELAP5-3D,\" Proceedings of the Cray User Group 2004, Knoxville, TN, USA, May 16–21, 2004.\n*D. P. Guillen, G. L. Mesina, J. M. Hykes, \"Restructuring RELAP5-3D for Next Generation Nuclear Plant Analysis,\" 2006 Transactions of the American Nuclear Society, Vol. 94, June 2006.\n*G. L. Mesina, \"Reformulation RELAP5-3D in FORTRAN 95 and Results,\" Proceedings of the ASME 2010 Joint US-European Fluids Engineering Summer Meeting and 8th International Conference on Nanochannels Microchannels, and Minichannels, FEDSM2010-ICNMM2010, Montreal, Quebec, Canada, Aug 1-5, 2010.\n*The RELAP5-3D Code Development Team, RELAP5-3D Code Manual Volume I: Code Structure, System Models and Solution Methods, INL-EXT-98-00834-V1, Revision 4.2, Idaho National Laboratory, June, 2014.\n*The RELAP5-3D Code Development Team, RELAP5-3D Code Manual Volume II: User’s Guide and Input Requirements, INEEL-EXT-98-00834, Revision 4.2, Section 8.7, Idaho National Laboratory, PO Box 1625, Idaho Falls, Idaho 83415, June, 2014.\n*The RELAP5-3D Code Development Team, RELAP5-3D Code Manual Volume II: User’s Guide and Input Requirements, Appendix A, INEEL-EXT-98-00834, Revision 4.2, Idaho National Laboratory, PO Box 1625, Idaho Falls, Idaho 83415, June, 2014.\n*The RELAP5-3D Code Development Team, RELAP5-3D Code Manual Volume III: Developmental Assessment, INL-EXT-98-00834, Revision 4.2, June, 2014.\n*The RELAP5-3D Code Development Team, RELAP5-3D Code Manual Volume IV: Models and Correlations, INL-EXT-98-00834, Revision 4.2, June, 2014.\n*The RELAP5-3D Code Development Team, RELAP5-3D Code Manual Volume V: User's Guidelines, INL-EXT-98-00834, Revision 4.2, June, 2014.\n*G. L. Mesina, D. L. Aumiller, F. X. Buschman, \"Automated, Highly Accurate Verification of RELAP5-3D,\" ICONE22-31153, Proceedings of the 22nd International Conference on Nuclear Engineering, Prague, Czech Republic, July 7–11, 2014.\n\n==External links==\n*[https://relap53d.inl.gov/SitePages/Home.aspx/ RELAP5-3D Homepage]\n*[https://relap53d.inl.gov/SitePages/International%20RELAP5%20Users%20Group.aspx International RELAP5 Users Group]\n\n{{DEFAULTSORT:RELAP5-3D}}\n[[Category:Fortran software]]\n[[Category:Physics software]]\n[[Category:Industrial software]]\n[[Category:Computational fluid dynamics]]\n[[Category:Nuclear reactors]]\n[[Category:Idaho National Laboratory]]"
    },
    {
      "title": "Reynolds-averaged Navier–Stokes equations",
      "url": "https://en.wikipedia.org/wiki/Reynolds-averaged_Navier%E2%80%93Stokes_equations",
      "text": "{{Refimprove|date=November 2010}}\n\nThe '''Reynolds-averaged Navier–Stokes equations ''' (or '''RANS''' equations) are time-averaged<ref>\nThe true time average (<math> \\bar{X} </math>) of a variable (<math> x </math>) is defined by\n: <math> \\bar{X} = \\lim_{T \\to \\infty}\\frac{1}{T}\\int_{t_0}^{t_0+T} x\\, dt.</math>\nFor this to be a well-defined term, the limit (<math> \\bar{X} </math>) must be independent of the initial condition at <math>t_0</math>.  In the case of a [[chaotic dynamical system]], which the equations under turbulent conditions are thought to be, this means that the system can have only one [[strange attractor]], a result that has yet to be proved for the Navier-Stokes equations.  However, assuming the limit exists (which it does for any bounded system, which fluid velocities certainly are), there exists some <math>T</math> such that integration from <math>t_0</math> to <math>T</math> is arbitrarily close to the average.  This means that given transient data over a sufficiently large time, the average can be numerically computed within some small error.  However, there is no analytical way to obtain an upper bound on <math>T</math>.</ref>\nequations of motion for [[fluid flow]]. The idea behind the equations is [[Reynolds decomposition]], whereby an instantaneous quantity is decomposed into its time-averaged and fluctuating quantities, an idea first proposed by [[Osborne Reynolds]].<ref>\nReynolds, Osborne, 1895: \"On the Dynamical Theory of Incompressible Viscous Fluids and the Determination of the Criterion.\" ''Philosophical Transactions of the Royal Society of London. A'', v. 186, pp. 123-164. Available online from [https://www.jstor.org/stable/90643 JSTOR].</ref>  The RANS equations are primarily used to describe [[turbulent flow]]s. These equations can be used with approximations based on knowledge of the properties of flow [[turbulence]] to give approximate time-averaged solutions to the [[Navier–Stokes equations]].\nFor a [[Stationary process|stationary]] flow of an incompressible [[Newtonian fluid]], these equations can be written in [[Einstein notation]] in [[Cartesian coordinates]] as:\n\n: <math>\\rho\\bar{u}_j  \\frac{\\partial \\bar{u}_i }{\\partial x_j}\n= \\rho \\bar{f}_i\n+ \\frac{\\partial}{\\partial x_j} \n\\left[ - \\bar{p}\\delta_{ij} \n+ \\mu \\left( \\frac{\\partial \\bar{u}_i}{\\partial x_j} + \\frac{\\partial \\bar{u}_j}{\\partial x_i} \\right)\n- \\rho \\overline{u_i^\\prime u_j^\\prime} \\right ].\n</math>\n\nThe left hand side of this equation represents the change in mean momentum of fluid element owing to the unsteadiness in the [[mean flow]] and the convection by the mean flow. This change is balanced by the mean body force, the isotropic stress owing to the mean pressure field, the viscous stresses, and apparent stress <math> \\left( - \\rho \\overline{u_i^\\prime u_j^\\prime} \\right)</math> owing to the fluctuating velocity field, generally referred to as the [[Reynolds stresses|Reynolds stress]]. This nonlinear Reynolds stress term requires additional modeling to close the RANS equation for solving, and has led to the creation of many different [[turbulence models]].  The time-average operator <math>\\overline{.}</math> is a [[Reynolds operator]].\n\n== Derivation of RANS equations ==\nThe basic tool required for the derivation of the RANS equations from the instantaneous [[Navier–Stokes equations]] is the [[Reynolds decomposition]]. Reynolds decomposition refers to separation of the flow variable (like velocity <math>u</math>) into the mean (time-averaged) component (<math>\\overline{u}</math>) and the fluctuating component (<math>u^{\\prime}</math>).  Because the mean operator is a [[Reynolds operator]], it has a set of properties.  One of these properties is that the mean of the fluctuating quantity is equal to zero <math>(\\bar{u^\\prime} = 0)</math>.  Thus,\n\n:<math> u(\\boldsymbol{x},t) = \\bar{u}(\\boldsymbol{x}) + u^\\prime(\\boldsymbol{x},t) \\,</math>, where <math> \\boldsymbol{x} = (x,y,z) </math> is the position vector. Some authors<ref>{{cite book|last=Tennekes|first=H.|title=A first course in turbulence|year=1992|publisher=MIT Press|location=Cambridge, Mass. [u.a.]|isbn=978-0-262-20019-6|edition=14. print.|author2=Lumley, J. L. }}</ref>  prefer using <math>U</math> instead of <math> \\bar{u} </math> for the mean term (since an overbar is sometimes used to represent a vector). In this case, the fluctuating term <math>u^\\prime</math> is represented instead by <math>u</math>. This is possible because the two terms do not appear simultaneously in the same equation. To avoid confusion, the notation <math> u, \\bar{u}, \\mbox{ and } u^{\\prime} </math> will be used to represent the instantaneous, mean, and fluctuating terms, respectively.\n\nThe properties of [[Reynolds operator]]s are useful in the derivation of the RANS equations.  Using these properties, the Navier–Stokes equations of motion, expressed in tensor notation, are (for an incompressible Newtonian fluid):\n\n: <math> \\frac{\\partial u_i}{\\partial x_i} = 0 </math>\n: <math> \\frac{\\partial u_i}{\\partial t} + u_j \\frac{\\partial u_i}{\\partial x_j}\n= f_i \n- \\frac{1}{\\rho} \\frac{\\partial p}{\\partial x_i}\n+ \\nu \\frac{\\partial^2 u_i}{\\partial x_j \\partial x_j}\n</math>\n\nwhere <math>f_i</math> is a vector representing external forces.\n\nNext, each instantaneous quantity can be split into time-averaged and fluctuating components, and the resulting equation time-averaged, <ref>\n\nSplitting each instantaneous quantity into its averaged and fluctuating components yields,\n\n: <math> \\frac{\\partial \\left( \\bar{u_i} + u_i^\\prime \\right)}{\\partial x_i} = 0 </math>\n\n: <math> \\frac{\\partial \\left( \\bar{u_i} + u_i^\\prime\\right)}{\\partial t}\n+ \\left( \\bar{u_j} + u_j^\\prime\\right) \\frac{\\partial \\left( \\bar{u_i} + u_i^\\prime\\right)}{\\partial x_j}\n= \\left( \\bar{f_i} + f_i^\\prime\\right)\n- \\frac{1}{\\rho} \\frac{\\partial \\left(\\bar{p} + p^\\prime\\right)}{\\partial x_i} \n+ \\nu \\frac{\\partial^2 \\left( \\bar{u_i} + u_i^\\prime\\right)}{\\partial x_j \\partial x_j}. \n</math>\n\nTime-averaging these equations yields,\n: <math> \\overline{\\frac{\\partial \\left( \\bar{u_i} + u_i^\\prime \\right)}{\\partial x_i}} = 0 </math>\n: <math> \\overline{\\frac{\\partial \\left( \\bar{u_i} + u_i^\\prime\\right)}{\\partial t}}\n+ \\overline{\\left( \\bar{u_j} + u_j^\\prime\\right) \\frac{\\partial \\left( \\bar{u_i} + u_i^\\prime\\right)}{\\partial x_j}}\n= \\overline{\\left( \\bar{f_i} + f_i^\\prime\\right)}\n- \\frac{1}{\\rho} \\overline{\\frac{\\partial \\left(\\bar{p} + p^\\prime\\right)}{\\partial x_i}}\n+ \\nu \\overline{\\frac{\\partial^2 \\left( \\bar{u_i} + u_i^\\prime\\right)}{\\partial x_j \\partial x_j}}.\n</math>\n\nNote that the nonlinear terms (like <math> \\overline{u_i u_j} </math>) can be simplified to,\n\n<math> \\overline{u_i u_j} \n= \\overline{\\left( \\bar{u_i} + u_i^\\prime \\right)\\left( \\bar{u_j} + u_j^\\prime \\right) }\n= \\overline{\\bar{u_i}\\bar{u_j} + \\bar{u_i}u_j^\\prime + u_i^\\prime\\bar{u_j} + u_i^\\prime u_j^\\prime}\n= \\bar{u_i}\\bar{u_j} + \\overline{u_i^\\prime u_j^\\prime} </math>\n</ref> to yield:\n\n: <math> \\frac{\\partial \\bar{u_i}}{\\partial x_i} = 0</math>\n: <math> \\frac{\\partial \\bar{u_i}}{\\partial t} \n+ \\bar{u_j}\\frac{\\partial \\bar{u_i} }{\\partial x_j}\n+ \\overline{u_j^\\prime \\frac{\\partial u_i^\\prime }{\\partial x_j}}\n= \\bar{f_i}\n- \\frac{1}{\\rho}\\frac{\\partial \\bar{p}}{\\partial x_i}\n+ \\nu \\frac{\\partial^2 \\bar{u_i}}{\\partial x_j \\partial x_j}.  </math>\n\nThe momentum equation can also be written as,<ref>\nThis follows from the mass conservation equation which gives,\n: <math> \\frac{\\partial u_i}{\\partial x_i} = \\frac{\\partial \\bar{u_i}}{\\partial x_i} + \\frac{\\partial u_i^\\prime}{\\partial x_i} = 0</math>\n</ref>\n\n: <math> \\frac{\\partial \\bar{u_i}}{\\partial t} \n+  \\bar{u_j}\\frac{\\partial \\bar{u_i} }{\\partial x_j}\n= \\bar{f_i}\n- \\frac{1}{\\rho}\\frac{\\partial \\bar{p}}{\\partial x_i}\n+ \\nu \\frac{\\partial^2 \\bar{u_i}}{\\partial x_j \\partial x_j}\n- \\frac{\\partial \\overline{u_i^\\prime u_j^\\prime }}{\\partial x_j}.\n</math>\nOn further manipulations this yields,\n: <math>\\rho \\frac{\\partial \\bar{u_i}}{\\partial t} \n+ \\rho \\bar{u_j} \\frac{\\partial \\bar{u_i}  }{\\partial x_j}\n= \\rho \\bar{f_i}\n+ \\frac{\\partial}{\\partial x_j} \n\\left[ - \\bar{p}\\delta_{ij} \n+ 2\\mu \\bar{S_{ij}}\n- \\rho \\overline{u_i^\\prime u_j^\\prime} \\right]\n</math>\n\nwhere,\n<math>\n\\bar{S_{ij}} = \\frac{1}{2}\\left( \\frac{\\partial \\bar{u_i}}{\\partial x_j} + \\frac{\\partial \\bar{u_j}}{\\partial x_i} \\right)\n</math>\nis the mean rate of strain tensor.\n\nFinally, since integration in time removes the time dependence of the resultant terms, the time derivative must be eliminated, leaving:\n: <math>\\rho \\bar{u_j}\\frac{\\partial  \\bar{u_i} }{\\partial x_j}\n= \\rho \\bar{f_i}\n+ \\frac{\\partial}{\\partial x_j} \n\\left[ - \\bar{p}\\delta_{ij} \n+ 2\\mu \\bar{S_{ij}}\n- \\rho \\overline{u_i^\\prime u_j^\\prime} \\right].\n</math>\n\n==Notes==\n{{Reflist}}\n\n{{DEFAULTSORT:Reynolds-averaged Navier-Stokes equations}}\n[[Category:Fluid dynamics]]\n[[Category:Turbulence]]\n[[Category:Turbulence models]]\n[[Category:Computational fluid dynamics]]"
    },
    {
      "title": "Riemann problem",
      "url": "https://en.wikipedia.org/wiki/Riemann_problem",
      "text": "A '''Riemann problem''', named after [[Bernhard Riemann]], is a specific [[initial value problem]] composed of a  [[Conservation law|conservation equation]] together with [[piecewise]] constant initial data which has a single [[Discontinuity (mathematics)|discontinuity]] in the domain of interest. The Riemann problem is very useful for the understanding of equations like [[Euler equations (fluid dynamics)|Euler conservation equations]] because all properties, such as shocks and rarefaction waves, appear as [[Method of characteristics|characteristic]]s in the solution. It also gives an exact solution to some complex nonlinear equations, such as the [[Euler equations (fluid dynamics)|Euler equations]].\n\nIn [[numerical analysis]], '''Riemann problems''' appear in a natural way in [[finite volume method]]s for the solution of conservation law equations due to the discreteness of the grid. For that it is widely used in [[computational fluid dynamics]] and in [[Computational Magnetohydrodynamics|MHD]] simulations. In these fields Riemann problems are calculated using [[Riemann solver]]s.\n\n==The Riemann problem in linearized gas dynamics==\nAs a simple example, we investigate the properties of the one-dimensional Riemann problem \nin [[gas dynamics]] \n(Toro, Eleuterio F. (1999). Riemann Solvers and Numerical Methods for Fluid Dynamics, Pg 44, Example 2.5)\n\nThe initial conditions are given by\n: <math> \n\\begin{bmatrix} \\rho \\\\ u \\end{bmatrix} = \\begin{bmatrix} \\rho_L \\\\  u_L\\end{bmatrix} \\text{ for } x \\leq 0\n\\qquad \\text{and} \\qquad \\begin{bmatrix} \\rho \\\\ u \\end{bmatrix} = \\begin{bmatrix} \\rho_R \\\\ u_R \\end{bmatrix} \\text{ for } x  > 0\n</math>\n\nwhere ''x''&nbsp;=&nbsp;0 separates two different states, together with the linearised gas dynamic equations (see [[gas dynamics]] for derivation).\n\n: <math>\n\\begin{align}\n\\frac{\\partial\\rho}{\\partial t} + \\rho_0 \\frac{\\partial u}{\\partial x} & = 0 \\\\[8pt]\n \\frac{\\partial u}{\\partial t} + \\frac{a^2}{\\rho_0} \\frac{\\partial \\rho}{\\partial x} & = 0\n\\end{align}\n</math>\n\nwhere we can assume without loss of generality <math>a\\ge 0</math>.\nWe can now rewrite the above equations in a conservative form:\n: <math>\nU_t + A \\cdot U_x = 0\n</math>:\n\nwhere\n\n: <math>\nU = \\begin{bmatrix} \\rho \\\\ u \\end{bmatrix}, \\quad A = \\begin{bmatrix} 0 & \\rho_0 \\\\ \\frac{a^2}{\\rho_0} & 0 \\end{bmatrix}\n</math>\n\nand the index denotes the partial derivative with respect to the corresponding variable (i.e. x or t).\n\nThe [[eigenvalues]] of the system are the [[Method of characteristics|characteristics]] of the system\n<math> \\lambda_1 = -a, \\lambda_2 = a </math>. They give the propagation speed of the medium, including that of any discontinuity, which is the speed of sound here. The corresponding [[eigenvector]]s are\n\n: <math>\n\\mathbf{e}^{(1)} = \\begin{bmatrix} \\rho_0 \\\\ -a \\end{bmatrix}, \\quad \n\\mathbf{e}^{(2)} = \\begin{bmatrix} \\rho_0 \\\\  a \\end{bmatrix}.\n</math>\n\nBy decomposing the left state <math>u_L</math> in terms of the eigenvectors, we get for some <math>\\alpha_{1},\\alpha_{2}</math>\n\n: <math>\nU_L = \\begin{bmatrix} \\rho_L \\\\ u_L \\end{bmatrix} = \\alpha_1\\mathbf{e}^{(1)}   +  \\alpha_2 \\mathbf{e}^{(2)} .\n</math>\n\nNow we can solve for <math>\\alpha_1</math> and <math>\\alpha_2</math>:\n\n: <math>\n\\begin{align}\n\\alpha_1 & = \\frac{a \\rho_L - \\rho_0 u_L}{2a\\rho_0} \\\\[8pt]\n\\alpha_2 & = \\frac{a \\rho_L + \\rho_0 u_L}{2a\\rho_0}\n\\end{align}\n</math>\n\nAnalogously\n\n:<math>U_R = \\begin{bmatrix} \\rho_R \\\\ u_R \\end{bmatrix} = \\beta_1\\mathbf{e}^{(1)}+\\beta_2\\mathbf{e}^{(2)} </math>\n\nfor\n\n: <math>\n\\begin{align}\n\\beta_1 & = \\frac{a \\rho_R - \\rho_0 u_R}{2a\\rho_0} \\\\[8pt]\n\\beta_2 & = \\frac{a \\rho_R + \\rho_0 u_R}{2a\\rho_0}\n\\end{align}\n</math>\n\nUsing this, in the domain in between the two characteristics <math>t=|x|/a</math>,\nwe get the final constant solution:\n\n: <math>\nU_* = \\begin{bmatrix} \\rho_* \\\\ u_* \\end{bmatrix} \n=\\beta_1\\mathbf{e}^{(1)}+\\alpha_2\\mathbf{e}^{(2)}\n= \\beta_1  \\begin{bmatrix} \\rho_0 \\\\ -a\\end{bmatrix}  +  \\alpha_2  \\begin{bmatrix} \\rho_0 \\\\ a \\end{bmatrix}\n</math>\n\nand the (piecewise constant) solution in the entire domain <math>t>0</math>:\n\n:<math> U(t,x)\n=  \\begin{bmatrix} \\rho(t,x)\\\\ u(t,x)\\end{bmatrix}\n=\\begin{cases} \nU_L, & 0<t \\le -x/a \\\\\nU_* , & 0\\le |x|/a <t \\\\ \nU_R,& 0<t \\le x/a \n\\end{cases}\n</math>\n\nAlthough this is a simple example, it still shows the basic properties. Most notably, the characteristics decompose the solution into three domains. The propagation speed\nof these two equations is equivalent to the propagation speed of sound.\n\nThe fastest characteristic defines the [[Courant–Friedrichs–Lewy condition|Courant–Friedrichs–Lewy]] (CFL) condition, which sets the restriction for the maximum time step in a computer simulation. Generally as more conservation equations are used, more characteristics are involved.\n\n==References==\n{{reflist | colwidth=30em}}\n*{{cite book | first=Eleuterio F.| last=Toro| year=1999 | title=Riemann Solvers and Numerical Methods for Fluid Dynamics| publisher=Springer Verlag|location=Berlin | isbn=3-540-65966-8}}\n*{{cite book | first=Randall J.| last=LeVeque| year=2004 | title=Finite-Volume Methods for Hyperbolic Problems| publisher=Cambridge University Press|location=Cambridge | isbn=0-521-81087-6}}\n\n==See also==\n* [[Computational fluid dynamics]]\n* [[Computational magnetohydrodynamics]]\n* [[Riemann solver]]\n\n{{DEFAULTSORT:Riemann Problem}}\n[[Category:Conservation equations]]\n[[Category:Fluid dynamics]]\n[[Category:Computational fluid dynamics]]\n[[Category:Bernhard Riemann]]"
    },
    {
      "title": "SIMPLE algorithm",
      "url": "https://en.wikipedia.org/wiki/SIMPLE_algorithm",
      "text": "In [[computational fluid dynamics]] (CFD), the '''SIMPLE algorithm''' is a widely used [[numerical algorithm|numerical procedure]] to solve the [[Navier-Stokes equation]]s. ''SIMPLE'' is an acronym for Semi-Implicit Method for Pressure Linked Equations.\n\nThe SIMPLE algorithm was developed by Prof. [[Brian Spalding]] and his student [[Suhas Patankar]] at [[Imperial College London|Imperial College]], London in the early 1970s. Since then it has been extensively used by many researchers to solve different kinds of fluid flow and heat transfer problems.<ref>{{cite web|url=https://engineering.purdue.edu/ME608/webpage/project-reports/SIMPLE-DrivenCavity.pdf |title=SIMPLE solver for driven cavity flow problem |format=PDF |accessdate=2011-08-21}}</ref><ref>{{cite conference |last1=Mangani |first1=L. |last2=Bianchini |first2=C. |conference=[[Proceedings of the OpenFOAM International Conference 2007]] |year=2007 |url=https://flore.unifi.it/retrieve/handle/2158/418277/15222/OFIC-07.pdf |title=Heat transfer applications in turbomachinery |accessdate=2016-03-16}}</ref>  \n\nMany popular books on computational fluid dynamics discuss the SIMPLE algorithm in detail.<ref>{{cite book |last=Patankar |first=S. V. | authorlink = Suhas Patankar |title=Numerical Heat Transfer and Fluid Flow |publisher=[[Taylor & Francis]] |year=1980 |isbn=978-0-89116-522-4}}</ref><ref>{{cite book |last=Ferziger |first=J. H. | authorlink = J. H. Ferziger |author2=Peric, M.  |title=Computational Methods for Fluid Dynamics|publisher=[[ Springer-Verlag]] |year=2001 |isbn= 978-3-540-42074-3}}</ref> \nA modified variant is the ''SIMPLER'' algorithm (SIMPLE Revised), that was introduced by Patankar in 1979.<ref>{{cite book |last=Tannehill|first=J. C.| authorlink = |author2 = [[Dale A. Anderson|Anderson, D. A.]] |author3=Pletcher, R. H. |title=Computational Fluid Mechanics and Heat Transfer |publisher=[[Taylor & Francis]] |year=1997 |isbn=}}</ref>\n\n== Algorithm ==\nThe algorithm is [[iterative]]. The basic steps in the solution update are as follows:\n\n#Set the boundary conditions.\n#Compute the gradients of velocity and pressure.\n#Solve the discretized momentum equation to compute the intermediate velocity field.\n#Compute the uncorrected mass fluxes at faces.\n#Solve the pressure correction equation to produce cell values of the pressure correction.\n#Update the pressure field: <math> p^{k + 1}  = p^k  + \\text{urf} \\cdot p^{'} </math> where  urf is the under-relaxation factor for pressure.\n#Update the boundary pressure corrections <math> p_b^{'} </math>.\n#Correct the face mass fluxes: <math>\\dot m_f^{k + 1}  = \\dot m_f^{*}  + \\dot m_f^{'} </math>\n#Correct the cell velocities: <math> \\vec v^{k + 1}  = \\vec v^{*}  - \\frac{{\\text{Vol} \\ \\nabla p^{'} }}{{\\vec a_P^v }} </math> ; where <math> {\\nabla p^{'} } </math>  is the gradient of the pressure corrections, <math> {\\vec a_P^v } </math> is the vector of central coefficients for the discretized linear system representing the velocity equation and Vol is the cell volume.\n#Update density due to pressure changes.\n\n== See also ==\n\n# [[PISO algorithm]]\n\n==References==\n{{reflist}}\n\n[[Category:Computational fluid dynamics]]"
    },
    {
      "title": "Simple chemical reacting system",
      "url": "https://en.wikipedia.org/wiki/Simple_chemical_reacting_system",
      "text": "{{multiple issues|\n{{Orphan|date=December 2012}}\n{{technical|date=December 2012}}\n}}\n\nThe '''simple chemical reacting system''' ('''SCRS''') is one of the combustion models for computational fluid dynamics. This model helps us to determine the process of combustion which is a vital phenomenon used in many engineering applications like [[aircraft engines]], [[internal combustion engines]], [[rocket engines]], industrial furnaces, and power station combustors. The simple chemical reacting system (SCRS) refers the global nature of the [[combustion]] process considering only the final species concentrations. The detailed kinetics of the process is generally neglected and it postulates that combustion does proceed via a global one-step without intermediates.<ref name=\"six\">http://www.cham.co.uk/phoenics/d_polis/d_lecs/general/combust.htm#2</ref> Infinitely fast chemical reaction is assumed with oxidants reacting in stoichiometric proportions to form products. SCRS considers the reaction to be irreversible i.e. rate of reverse reaction is presumed to be very low.<ref name=\"two-212\">An introduction to Computational Fluid Dynamics-- the finite volume method” H.K. Versteeg and W. Malalasekera Longman Group limited.p.212</ref>\n\n1&nbsp;kg of fuel + s kg of oxidant → (1 + s) kg of products\n\nFor the [[combustion]] of the methane gas the equation becomes\n\nCH<sub>4</sub> + 2O<sub>2</sub> → CO<sub>2</sub> + 2H<sub>2</sub>O\n\n1 mole of CH<sub>4</sub> + 2 moles of O<sub>2</sub> → 1 mole of CO<sub>2</sub> + 2 moles of H<sub>2</sub>O\n\nThe stoichiometric proportions of the above equation is given by\n\n1&nbsp;kg of CH<sub>4</sub> + (64/16) kg of O<sub>2</sub>   → (1+ 64/16) kg of products\n\nThe transport equations for the fuel and oxygen mass fractions are\n\n:<math>{d (\\rho m_{fu} ) \\over d t} + div(\\rho  m_{fu} u) = div(R_{fu} .grad m_{fu}) + S_{fu} </math><ref name=\"two-212\" />\n\n:<math>{d (\\rho m_{ox} ) \\over d t} + div(\\rho  m_{ox} u) = div(R_{ox} .grad m_{ox}) + S_{ox} </math><ref name=\"two-212\" />\n\nNow consider a variable ‘Φ’ defined by\n\nΦ = sm<sub>fu</sub>  -  m<sub>ox</sub>\n\nAlso the mass transport coefficients, appearing in the transport equations are assumed to be a constant and are equal to ‘R<sub>Φ</sub>’\n\nNow the transport equations of fuel and oxygen can be written as\n\n:<math>{d (\\rho  \\phi ) \\over d t} + div(\\rho  \\phi u) = div(R_\\phi . grad \\phi) + (s.S_{fu} - S_{ox}) </math>\n\nAssuming the reaction to be one step, infinitely fast we can conclude s.S<sub>fu</sub> – S<sub>ox</sub> =0\n\nNow the transport equation reduces to\n\n:<math>{d (\\rho  \\phi ) \\over d t} + div(\\rho  \\phi u) = div(R_\\phi. grad \\phi) </math>\n\nNow defining the mixture fraction ‘f’, a non-dimensional variable in terms of ‘Φ’ we get\n\n:<math> f = \\frac{ \\phi - \\phi_0}{\\phi_1 - \\phi_0} </math><ref name=\"two-212\" />\n\nWhere the suffix ‘1’ denotes the fuel stream and ‘0’ denotes oxygen stream.\n\nIf the mixture contains only oxygen the mixture fraction ‘f’ is given by the value ‘0’ and if it contains only fuel it is given by ‘1’.\n\nNow substituting the value of ‘Φ’ in the above mixture fraction equation we get\n\n:<math> f = \\frac{[sm_{fu} - m_{ox}] - [sm_{fu} - m_{ox}]_0}{[sm_{fu} - m_{ox}]_1 - [sm_{fu} - m_{ox}]_0} </math>\n\nIn a fuel stream [m<sub>fu</sub>]<sub>1</sub> = 1, [m<sub>ox</sub>]<sub>1</sub> = 0 and in an oxygen stream [m<sub>fu</sub>]<sub>0</sub> = 0, [m<sub>ox</sub>]<sub>0</sub> = 1\n\nSimplifying the above equation we get\n\n:<math> f = \\frac{sm_{fu} - m_{ox} + m_{ox, 0}}{sm_{fu, 1} + m_{ox ,0}} </math>\n\nNow defining a new variable ‘f<sub>st</sub>’, a stoichiometric mixture where there is no oxygen and fuel present in the products is given by\n\n:<math> f_{st} = \\frac{ m_{ox, 0}}{sm_{fu, 1} + m_{ox ,0}} </math>\n\nAt fast chemical reactions\n\n1. If there is excess of oxygen present in the reactants, there will be no fuel left in the products. Then m<sub>fu</sub> = 0, m<sub>ox</sub> > 0 and f < f<sub>st</sub> is given by\n\n:<math> f = \\frac{ - m_{ox} + m_{ox, 0}}{sm_{fu, 1} + m_{ox ,0}} </math>\n\n2. If there is excess of fuel present in the reactants, there will be no oxygen left in the products. Then m<sub>fu</sub> > 0, m<sub>ox</sub> = 0 and f > f<sub>st</sub> is given by\n\n:<math> f = \\frac{sm_{fu} + m_{ox, 0}}{sm_{fu, 1} + m_{ox ,0}} </math>\n\nHere ‘Φ’ is a passive scalar and it obeys the scalar transport equation. Also the mixture fraction ‘f’ is linearly related to ‘Φ ’, so it is also a passive scalar and obeys the scalar transport equation. Now the transport equation can be written as\n\n:<math>{d (\\rho u f ) \\over d t} + div(\\rho  f u) = div(R_f. grad f) </math>\n\nFrom the initial known masses of the oxygen and fuel, we can find out the masses of these values after combustion given by\n\n:<math> m_{fu} = \\frac{f-f_{st} }{1-f_{st}}\\left(m_{fu, 1} \\right)  ,      f_{st} < f < 1          ,  m_{ox} = 0 </math>\n\n:<math> m_{ox} = \\frac{f_{st} - f }{f_{st}}\\left(m_{ox, 0} \\right)  ,     0< f_{st} < f         ,  m_{fu} = 0 </math>\n\nThere are many inert gases included with the oxygen that do not take part in the reaction. The mass fraction of these inert gases after combustion for any value of ‘f’ can be obtained from the formula\n\nm<sub>in</sub> = m<sub>in, 0</sub>( 1 – f) + m<sub>in, 1</sub>. f\n\nSimilarly the mass fraction of the products of combustion is obtained from\n\nm<sub>pr</sub> = 1 – (m<sub>fu</sub> + m<sub>in</sub> + m<sub>ox</sub>)\n\nThe following assumptions are made in the SCRS:\n\n1. Single step reaction between the reactants excluding the intermediate steps.<ref name=\"six\">http://www.cham.co.uk/phoenics/d_polis/d_lecs/general/combust.htm#2</ref><ref name=\"two-214\">An introduction to Computational Fluid Dynamics-- the finite volume method” H.K. Versteeg and W. Malalasekera Longman Group limited.p.214</ref>\n\n2. A reactant which is in excess in mass fraction consumes all the other reactants stoichiometrically to form products.<ref name=\"two-214\" />\n\nThe above assumptions resolve the relations between mixture fraction f and all the mass fractions. So we need to solve only one partial differential equation to calculate combustion flows rather than calculating individual partial differential equations for the mass fraction.\n\n==References==\n{{Reflist}}\n\n[[Category:Computational fluid dynamics]]"
    },
    {
      "title": "SIMPLEC algorithm",
      "url": "https://en.wikipedia.org/wiki/SIMPLEC_algorithm",
      "text": "The SIMPLEC (Semi-Implicit Method for Pressure Linked Equations-Consistent) algorithm; a modified form of [[SIMPLE algorithm]]; is a commonly used numerical procedure in Computational Fluid Dynamics to solve the very famous [[Navier-Stokes equations]].<br />\nThis algorithm was developed by Van Doormal and Raithby in 1984. The algorithm follows the same steps like the [[SIMPLE algorithm]] with a little variation that the momentum equations are manipulated which allows SIMPLEC velocity correction equations to omit terms that are less significant than those omitted in SIMPLE. Basically, it tries to prevent the effects of dropping velocity neighbor correction terms.<ref>{{cite web|title=Variants of SIMPLE algorithm|url=https://engineering.purdue.edu/ME608/webpage/Variants%20of%20SIMPLE.pdf|website=engineering.purdue.edu|accessdate=11 November 2014}}</ref><br />\n\n== Algorithm ==\nThe steps involved are same as the SIMPLE algorithm and the algorithm is iterative in nature.'''p*, u*, v*''' are guessed Pressure, X-direction velocity and Y-direction velocity respectively, '''p', u', v'''' are the correction terms respectively and '''p, u, v''' are the correct fields respectively; '''Φ''' is the property for which we are solving and '''d''' terms are involved with the under relaxation factor. So, steps are as follows:\n# Specify the boundary conditions and guess the initial values.\n# Determine the velocity and pressure gradients.\n# Calculate the pseudo velocities.\n\n:::<math>\\hat{u}_{i,J}=\\frac{\\sum a_{nb}u^*_{nb}+b_{i,J}}{a_{i,J}}</math>\n:::<math>\\hat{v}_{I,j}=\\frac{\\sum a_{nb}v^*_{nb}+b_{I,j}}{a_{I,j}}</math>\n\n# Solve for the pressure equation and get the '''p'''.\n\n:::<math>a_{I,J}p_{I,J} = \n a_{I-1,J}p_{I-1,J} + a_{I+1,J}p_{I+1,J} \n+  a_{I,J-1}p_{I,J-1} + a_{I,J+1}p_{I,J+1} + b_{I,J}</math>\n\n# Set '''p*'''='''p'''.\n# Using '''p*''' solve the discretized momentum equation and get '''u*''' and '''v*'''.\n:::<math> a_{i,J} u^*_{i,J}=\\sum a_{nb}u^*_{nb}  + \n (p^*_{I-1,J} - p^*_{I,J})A_{i,J} + b_{i,J}</math>\n:::<math> a_{I,j} v^*_{I,j}=\\sum a_{nb}v^*_{nb} + \n (p^*_{I,J-1} - p^*_{I,J})A_{I,j} + b_{I,j}</math>\n\n# Solve the pressure correction equation.\n\n:::<math>a_{I,J}p'_{I,J} = \n a_{I-1,J}p'_{I-1,J} + a_{I+1,J}p'_{I+1,J} \n+  a_{I,J-1}p'_{I,J-1} + a_{I,J+1}p'_{I,J+1} + b'_{I,J}</math>\n\n# Get the pressure correction term and evaluate the corrected velocities and get '''p, u, v, Φ*'''.\n\n:::<math> u_{i,J}=u^*_{i,J} + \n d_{i,J} (p'_{I-1,J} - p'_{I,J})</math>\n:::<math> v_{I,j}=v^*_{I,j} +\n d_{I,j}(p'_{I,J-1} - p'_{I,J}) </math>\n\n# Solve all other discretized transport equations.\n\n:::<math>a_{I,J}\\phi_{I,J} = \n a_{I-1,J}\\phi_{I-1,J} + a_{I+1,J}\\phi_{I+1,J} \n+  a_{I,J-1}\\phi_{I,J-1} + a_{I,J+1}\\phi_{I,J+1} + b^{\\phi}_{I,J}</math>\n\n# If Φ shows convergence, then STOP and if not, then set '''p*=p, u*=u, v*=v, Φ*=Φ''' and start the iteration again.<br /><ref>{{cite book|last1=Versteeg|first1=H.K.|last2=Malalasekera|first2=W.|title=An introduction to Computational Fluid Dynamics- The finite volume method|publisher=Longman Group Ltd.|pages=149–151|edition=1st edition, 1995}}</ref><ref>{{cite book |last=Patankar |first=S. V. | authorlink = Suhas Patankar |title=Numerical Heat Transfer and Fluid Flow |publisher=[[Taylor & Francis]] |year=1980 |isbn=978-0-89116-522-4}}</ref>\n[[File:Pseudo velocity equations in x and y dir..JPG|thumb|Pseudo velocity equations in x and y dir.]]\n[[File:Pressure equation.JPG|thumb|Pressure equation]]\n[[File:Discretized momentum equations.JPG|thumb|Discretized momentum equations]]\n[[File:Pressure correction equation.JPG|thumb|Pressure correction equation]]\n[[File:Velocity correction equations in X and Y dir..JPG|thumb|Velocity Correction equations in X and Y dir.]]\n[[File:Transport equations.JPG|thumb|Transport equations]]\n\n== Peculiar features ==\n* The discretized pressure correction equation is same as in the [[SIMPLE algorithm]], except for the '''d''' terms which are used in momentum equations.\n* '''p=p*+p'''' which tells that the under relaxing factor is not there in SIMPLEC as it was in SIMPLE.\n* SIMPLEC algorithm is seen to converge 1.2-1.3 times faster than the [[SIMPLE algorithm]]\n* It doesn't solve extra equations like [[SIMPLER algorithm]].\n* The cost per iteration is same as in the case of [[SIMPLE algorithm|SIMPLE]].\n* Like [[SIMPLE algorithm|SIMPLE]], a bad pressure field guess will destroy a good velocity field.<ref>{{cite web|title=SIMPLE solver for driven cavity problem|url=https://engineering.purdue.edu/ME608/webpage/project-reports/SIMPLE-DrivenCavity.pdf|website=engineering.purdue.edu}}</ref>\n\n== See also ==\n* [[SIMPLE algorithm]]\n* [[SIMPLER algorithm]]\n* [[Navier-Stokes equations]]\n\n== References ==\n{{reflist}}\n\n\n[[Category:Computational fluid dynamics]]"
    }
  ]
}